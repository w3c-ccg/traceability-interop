{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "8f7fe6f1-bb80-4f8a-9410-2e3f4998a4bc",
        "name": "Clear Cache",
        "item": [
          {
            "id": "14c23fd8-61ab-4091-a320-8a587080dd11",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8e75d32a-5d0b-4500-9611-45ca32479829",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5ace316e-0e05-458e-9603-bb8c759f7ec3"
                }
              }
            ]
          },
          {
            "id": "f2c636d0-6ba4-4e60-9164-4796d9196d26",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a387c5be-3f24-494e-8a8d-52da851dbf03",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "977eab70-6bf3-4f1d-b01d-67f668504e6c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "a4f743f4-7709-48e4-8ab7-c341f65afd8a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "df6e97e1-9f7a-4d17-a6c0-2dfd35715037",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8f5efaee-f4dc-49b5-8570-cdcff8fe081f",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7450132e-51bf-4fe0-916d-c688c9a49a9c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bdf1b91b-9e74-4b95-93c1-314a1528f3ad"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fad5eb93-18c7-470f-96d9-c3df17dba425",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5b16bf03-6010-4110-a2b9-a2cc13ddcb71"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "be6905c0-dfe6-4891-9ed4-af4954de565b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b575ff6d-4617-467a-aed0-3eb51313f095"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5f918c9f-1bb2-4aa2-89b2-d93d672c642f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "6c639b96-d262-4ac9-8c15-785013110d73"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "af0cc3e7-f705-4bcb-b825-c8b83c398f90",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ed635232-fc85-458a-bfc8-0db628522b18"
            }
          }
        ]
      },
      {
        "id": "bcb393fe-f690-48f7-af8c-76a3953003c1",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "41cb94a0-b975-48c2-81d4-9f519272dd5d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1d37b103-10a9-47ad-8fd6-d156f0a2fc49",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a95b8a82-c20d-4ab7-9a2e-3dc6643bd431",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ef53692-8fbd-4fe5-924a-4b364ea616ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "412110ed-dbd1-44e6-b414-d071a873b6dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adc82cc0-dbcb-47d6-a196-c4d23925313b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2344d3fc-d26e-4bb9-9da2-ba5a8f8a14f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "490660f3-3ee6-42aa-b6ad-d5a60878a6dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2305c46f-37eb-48de-b080-20cb43264ac7",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e77313-483b-4db4-bf05-716f8754babf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "87be1680-7b25-43b3-9a75-5916519d1e7e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b0d66768-bfc3-4489-914b-508eebd2ef20",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ea68cb19-f808-4ab9-ad03-7950d53dfa7e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc7e0e0f-2641-437d-bb6a-a50f82a86f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ea4681da-ba98-4cd2-a36e-24780622b742"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d8742e0-5c8d-46aa-9d3c-b99b1a9582b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a69c51b-791f-4e4f-a8c6-3a45e9c378f6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "46ef0b38-9546-466e-9725-479c92182b39",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6a7018e9-43a8-47c1-831e-1d270ee0aa31",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5e928629-8747-440b-b701-71c7fafb8c11",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "3e9b2763-542d-412a-aecd-904522cb21c8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ec3dd0a2-37eb-4cb6-a7e3-46661b1b2756",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "efe69238-6e67-439b-902a-4cf2f6c56a16"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8beea75b-a683-4e3a-9ea5-0eff5389535d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b77874da-5d12-4d34-894c-440df78ec5f2"
            }
          }
        ]
      },
      {
        "id": "9275306d-9eba-4f49-9d03-c772e1b22397",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "d8798526-0666-4823-b3a1-3f43f8d4cdda",
            "name": "Negative Testing",
            "item": [
              {
                "id": "84e16813-3659-4f59-93fd-0df07f6fb12c",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a4912007-453c-4045-8fcd-721da0c1b741",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "711102aa-540b-413c-ace1-63aa20185a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59b49ec1-5f4e-4463-8139-6c8feefb513e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03fd309f-b13d-448f-abb7-aa393ea1339a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f92aa90b-40db-4391-9e8e-4bcc1dfff37c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "545fac07-cd85-445c-b809-e77a19ffd078",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee3e9399-b81c-4b6e-8f59-3f59fb45173e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2c41ec7-5920-4a83-9cbb-c625c409a975"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e68d07a-c539-488d-b2c8-6545e8aa0af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9aa8b7de-7491-44d8-bc73-5d1beb1c132b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d3613e-6841-4cd1-953b-9c22759ecc35",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b3c0b93-cdb7-4bad-a2d8-1f25eb4f4cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fda2e5c-e085-4de4-a5c8-862643495b8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a01f169b-3866-4998-a2ae-8d3f3328b729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c79e86a4-eeb7-4431-a273-5adf833059c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b07d4a9e-3d60-4b4f-879f-14dec63c2c99",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa5bdd70-f836-46d8-b869-850dd3cb855e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef4da8cd-4f89-4a16-a3b9-25b7f2178737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa7bb3c-2a7d-4ad1-97ea-2a37031d34e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fcfa6730-f22f-4c15-b0f2-56a63686b92d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25d873c9-802e-4777-8266-0db7f8f21203",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9a492fb-6fc6-476a-a6b2-7e94d1ab282a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9699f4a9-d9fa-4250-b65b-0e3877e0b489"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "984c6da8-9672-451b-ac25-a7dc7819fff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b691a829-f060-40c8-a8ab-57d4ab1ea039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "796a6f0b-d85a-49ec-ae92-1c0d79e1ecfd",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f662f376-4587-42e4-b6eb-d198b49e31b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bab0c375-9ef4-490a-be1e-cba5029857cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c83567-63a6-4807-8aaa-9c3dece7d7ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dcf9abd2-1395-4bd1-94ea-e4f6023e8d98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "298f0512-d691-4120-94db-c181c6c5adbd",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11478eef-d27b-44aa-9f09-5f5c7c3801b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d365aa2d-6a97-440c-b67b-cbd782a5ef57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0e6141d-c94c-4d4f-819b-2fd81c653bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23da2105-0480-44e0-829e-f818c972c218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d59ab5b5-2347-454a-bb47-623d105a090f",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d51a596-4780-4baa-b0a0-13131db8b75e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48b61c89-b90d-4734-8555-c2cf93ea6b87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f90f453-b73c-4f1c-960b-3a0709cf9b5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "927f5044-3783-4f25-8f09-f7f3ea871e83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc0821af-2d73-407a-8fdb-2ffe53f85928",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75f955de-cc3f-44c9-b79b-0c20f863aedd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb59bbef-e531-4eb0-8db4-f84483203c70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3374aa7f-d1a4-43f5-ad3a-d17de693a7ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1dfd8128-c2fa-4ab9-9c89-bb95b085aa88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d44a5bc-d8ec-4173-a6ca-fd600c860f81",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4738d84a-0705-49ca-945f-88f805165888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37b3d97d-a6d6-4897-b038-f04314d92de9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c891c6-866e-4f43-af6d-30d1f3576352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e0e48da-eadc-4399-b73e-f145905d385a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1d2858d-9e26-41b1-8902-22fe480cfcc1",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5781cc2a-3f34-492c-b49b-77f2334bb2cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a71a76e6-1ea7-4b45-9588-9b07bb5aa71f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eab10d77-190d-40d7-ac95-0d2176d10b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "836d781f-364e-4e75-9ff4-40c3d0605bea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f4a2933-493b-4ff2-9473-c8a8aceed03e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f25412-d549-4a47-ade6-d29e52a6255d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a7f76e7-b006-4fbb-a0c0-79eb0c85d3c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bc22280-2708-463f-a9a7-c82f3dbc1728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "04404d07-a05a-41b4-b360-1fa4ff6cdafb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c9a9dd5-29ca-4321-a92d-3bd0e8b2a6d2",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d1e9cc-9a5f-49bc-b97d-ae7d532ad42d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ca64604-32e4-462f-9154-4aafae841e4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbc63379-6833-4b4b-a592-497fc69e22dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5df8b0e4-3aad-499a-a2ed-a26497886311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9a4a34d-88e4-483e-886a-2a4b8a641d1d",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6734ccd8-65d6-4014-9bf3-3158d37652cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc374bb0-96f1-4ed4-8762-c45f4090e3fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3c4320c-3e34-4dc9-bf38-4330059e07a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5fab163-6866-40f9-9890-262378507f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ce8cf63-9a18-4565-b4dc-856c903141b0",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e344c5c-a7c9-4529-b4fd-71ccd7097146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f69c6366-c55b-4446-8278-8af202478b71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf4f6dd8-b836-423d-81f1-539cd9cb2bec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cbb15381-0840-4fc5-85e4-6ff309c618a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fb9cee5-5b68-4140-9a22-af1f5fad468d",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57490698-dee5-4bed-8fa4-53457acb1d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83d99a44-9681-4b8b-b39e-f9521419d1b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c619cf42-b7fb-4ac2-b33b-1f0622bc96f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "efdcb28a-deec-437e-a93c-744838c403cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4431ddf-ce19-4c40-91f5-e85d744bfc66",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1735299-c80c-40ec-89a8-3f2271b79d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "969e046f-7f73-4d93-9094-8567cc90254b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e82a734-0b12-4131-8c4d-86ca85ce9f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e482086d-b7fa-49d9-a602-4bb4da5c4c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8818d7b8-4184-4110-aca8-196c076b5f6e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4cb8c29-2703-4624-930f-177621377237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4471298-3ebd-48d7-9a79-feafd1168b05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66fda410-eafb-4e52-9138-dcd2b7d6a098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "dde056ff-81d8-427e-ad86-35f2d6f10693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cf4dace-e728-449b-a53f-c37552e1b7a0",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e766418-a975-413b-a5f8-fef6df4055ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "051d34e3-276a-4ba4-af6b-01c69a407fc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6302bd7a-d6cb-4efd-8237-3fecd9e685e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "41409786-c209-4439-968e-8a0cf7827236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53d2e855-1281-4388-b52b-d7a026676115",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e531c13a-aa62-4fa2-9161-f143971ef86d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cf31554-db8f-4131-875d-eb223860d74b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78b04ed3-ca3e-4e44-919d-658de3bd54b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1b9136b-54dd-4efb-9116-3e7afbc958c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2820e59c-a328-427c-817d-6c7e6de936d0",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "948453db-1751-43dc-b3d0-36572334582a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2e67b36-7613-48dd-8a49-fa9dbb6d356c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ac1023-848b-4481-822b-ab2fb40e9a78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab78803d-c62d-4715-9dba-21186582fb0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a294b377-7920-4645-af55-d13d48c9803b",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e4a5f27-1f55-4f1f-a4df-d449a3ef45c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18de0d91-435d-4ab9-b376-7cc07aecc1b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b40f5b97-7f8e-4d37-993d-25843ecc0655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "54f6250e-1157-45e3-86af-8fd9ac83fea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11bfe3c0-a7dd-4b84-97b5-9c94ace490a8",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "888e2655-b6d3-4aee-ad32-0c34aa7c042c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34daba36-fe00-4dc2-a2ac-9a14f4f1957a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b6e2be-0495-4e33-a415-39f8644d74ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6223c739-e193-4b93-8290-cc71b2bc767c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa5dc729-2c70-443c-9dae-f6edff2c2412",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e066db-28f8-4a14-a4db-72c3143f95a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d12f412-4a78-4bed-a914-c48294889ee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe7f93d8-74f3-474e-b8c4-55ec9d879e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "935fe15f-a4dd-4b56-ac18-48eae984f5dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b32e022-0907-483f-a820-5c40784cddf5",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf9df63a-f290-432c-b88b-a74c0339064a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f71d0ba-9d9f-4eac-aa66-1d60f2ce4bfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e6a8b73-48a0-4c9a-9f9e-1dde2073adf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "330a39a6-ce5f-4921-8cac-74b4b74d4875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79029db7-0876-4edf-aaa8-4a028b3289e0",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c36b9dda-648b-4c39-9a3b-6eb7d0676e17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34c81386-310e-458b-a97e-4d1f81b4ce00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cec8684-6234-4545-9e40-200e2c84c1f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "85f646b3-9f9c-4ab8-b38d-2f239d77aab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64c56de6-a1f2-42b9-9739-b731e998f4ff",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a50dadf4-a11a-4eb1-b79e-9ba7cc72b617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8f5b601-8313-43e2-a040-ae0afe8aa0f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27114fdc-52a2-41e9-b424-aacd73acf6ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5382100-3d80-4c49-b40d-4199197929a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a087360-e20d-4de9-8cba-0a828a30d031",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62bc2af1-bfca-4380-a6ee-a7e86cbc497a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5da2949-4ff0-4578-a91f-af7bfc543e83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53bec4c7-8f4b-4884-8f3f-261a79beb544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c2b3f01-1a87-49a0-802e-10ab63a16fab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbe5199d-1b70-4a3b-886a-d69716bb35c4",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a921028-01d0-4b3f-83ae-6a5ca6c030db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd6100a8-27dd-4cec-bc8c-5e61dc2e3ce8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a517873-7877-4922-8283-709fe1501ecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fe44e45-edf0-43e5-a6d0-dfe4678d8272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7b68db7-3b1f-4139-953a-c55b31a4f675",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8222047d-7e4f-4064-9d36-68cc164f86c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e187a3b7-ffee-4f7b-a3d2-9752b31c1b6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7716ee4-27f9-45ce-bcc0-a3101a91357e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fb1f393-174d-457c-b1a8-b5d9b128ae05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a15eba01-de11-4e45-86df-9d6961a2430c",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f0fd87-9297-4c4a-ba1a-eb0064b88531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca9af6aa-dab4-4ad3-a861-1dc444cf5aec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f60eba7-84cd-4cb1-834c-a383dfbaed16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "081b3257-fb22-4ecc-a64c-765e59b39e3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07df9e8b-ad8e-4307-9758-7ad3fd69e79b",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1606e94-6700-4a7a-9d2c-3188dec4ae94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "927f6926-e32e-4393-8998-eb2364b2b821"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "869a50ed-b5b4-4892-badf-035ddc593d39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "80b14ecc-40fe-4b20-9fc7-75996cf64380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16ae8898-e5da-411a-9f1e-07bc9ac40755",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db62e07-b414-4443-8885-4f3f0aea8668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a6a0ffa-bcab-4a83-8315-9d5f554bfcd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ce72faa-59dc-418b-be30-1655128e9928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "15c50839-ee10-4e7f-9ef2-ab429f32c3a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "225b345a-86f6-42d2-b2ba-57fede27683d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e658ca28-0fb1-4fc9-b369-f143a1155e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20969c55-b7ae-46ef-bbd0-71712e447c73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4183ff0b-30e2-4f72-853f-62a2f6024475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3424f5e3-2add-4ca0-b2f6-3e35d95be65a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdcc1883-b12c-4740-84f7-1648d53e8a01",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8248bee-9bd2-41f4-979b-8700df4870b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f03c708-6822-4c52-b7d9-96cd07fadb5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4150d7f-0b3c-4763-95fc-6334e72dc35e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "979655fc-5262-476f-89e0-efc2944acb8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6010020-eb83-4fd1-b4ab-0bfb6c2fbac0",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "300e1006-3eef-427c-8ce1-23ed4b82cba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "672e6a79-e069-4fd9-9f95-145de89eb2fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2571ed5f-8988-4c4e-b30f-48f27d5f14cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e5b51d8e-d7a0-40df-87d6-501ca428a605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef65a58-bb1d-43ed-b745-749f80191e8e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7042338-4829-42bf-84b4-e9965f0b4399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "639f713d-fd4c-430a-ae38-17be810184f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbeed484-9365-4964-975d-74253cc5c41f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc5df744-3410-42b0-a3d7-4f09fe08bae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12801fe2-19f5-4e56-bf60-7615c2175564",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1305b47-add0-463c-9eb8-6c83a2f440a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b78fb5f-f929-4008-aaa7-6b4ef2054d2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce4787a1-6213-4359-a550-104ebf6bc766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "78d76933-db2c-4ebe-96ca-d72b3ef86c3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf3420a9-a887-4203-a4f8-ae98426bf140",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "716d35f0-87e1-4439-a0e6-36f002b2b74b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3630b33-0f6c-441f-9d1e-fe7553dc7c07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83fbd291-266d-4fd2-bcbd-9257c88b8f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cae805a8-cdcb-4cec-84b3-0b19913f370d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f36439-6317-42cf-8e2f-e8e43851ec7a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8f91481-c60c-4ef2-8ff4-529bbc8014cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80ca5558-dbc2-4d18-904e-4bd135b92d61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "414abe1d-e63f-4639-b34b-f47d51039f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cea1c4c4-35b9-41be-82d5-6bee551dae4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7dfd391-2342-4739-982a-abd3f73b5d65",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d782708-4f91-4013-b30f-f9199eb07ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acc99d25-9b08-4d8e-a471-788e3d8799dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d72461c5-0902-46e2-a603-f9d87f5f576f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8fed64be-930e-4428-b976-ecd025f8287c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a1ae183-dd99-4ec7-afcc-bbfdf4923bb3",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42f51700-2fe2-4490-bf12-e6c072c81946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a21971a9-6d6b-40c9-98b7-1a162338022e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc4a907f-966e-48a9-83e3-5ad630e0b520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "6a401271-4b3a-4fda-a443-743052084107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a93bf6bc-9d71-4fb8-b5f9-b9e324db95c6",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d25b0191-2cf7-474f-87ac-1db34ac21bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3f98027-c830-4ae7-b00c-eb0337445699"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bbc06da-4b36-471e-8702-96f8629e02f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab10adf9-4a25-4315-88e7-57eae2d6195a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf632bb4-01b7-4e40-9257-c8b048e794bd",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75ff8355-463f-4c97-b208-bae110efe4e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59971389-fe5c-4670-bf40-2f9b3202b039"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7079d597-ff5c-416f-bc17-63bc013a267f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "c52cdfd0-4619-4afa-8b8b-c7f141ef0acb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e27ca3f-2709-4037-a225-57489d5a855c",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f71b54db-6053-406b-a7e3-9a8e9c4e79cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ee1d115-d6d0-483f-b776-c709b6542693"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8099129-81a5-479b-9988-d33789619d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "394528ed-b433-4180-9eef-f07173f8188d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc8463d8-4ede-4180-b3ec-a2efad391d59",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e7cccb4-32ce-44ed-ba98-f734efe1ca07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b153d327-a9c0-4afd-9f2b-5936bdd80b31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1deff7c-9aff-43f5-bb63-779afe4d0ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "977ff9db-0fec-4f5c-86e0-36fd24cef69b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d149e0a8-593f-43ae-bb47-db9c2560e499",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f1a13b7-7b76-4303-8c20-a5e79e15ccc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a853f805-13ec-4d13-bdfd-985dd9229176"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "462dfe7b-87d0-45ec-ac06-19e45a25c82d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "39f77f89-c1fa-4722-972f-d81a7b66d089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "911d48e7-365b-44f2-aecb-34ed0694e0d7",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c27ef3eb-8586-4d80-8352-3ad30adf88a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "384fae99-17a3-464e-b32f-22a199f48ab0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a122a663-1950-4564-a513-96f428755490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b155613-d750-4878-84e9-c857ffcf205b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e3eb0ce-319e-4ef3-92a8-4e3980f7b0ed",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baaa6f69-11c3-4357-82ca-0b19953d2f31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8116462-7ac0-48bc-a701-a8f1207bdcda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9251176-4b7d-48de-98dc-9a6b722ae3e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2b75890-677c-4dea-bdf8-2760948db133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4c73c31-1020-47dc-8d8a-99d0167d65c9",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "336c68d6-f39b-4a37-acb5-07aa78ed9f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45da5493-2e46-4dbf-be46-8b50051d42a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b71704-f9b2-4371-a387-4e8a0cbba03b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "35d35554-edf1-4bdf-aed2-c5c2efd16d4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d3eacec-f5a2-464a-a221-d4c5564e9e70",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f8e891f-8381-4b84-b0eb-8941a256d321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "271cc52a-6d6d-4a32-b00e-a81f1c336599"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8570b323-63d1-4dd8-a808-6e30e6184b51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b128a4b2-c53a-4dbd-b7cd-974e2d3218ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b6c9a0-9dea-48b5-8b16-0d04217a8c64",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2158993e-45e0-4bed-b9cc-c846b59812c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76956ed9-7498-4ca9-9986-17383df94f83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b069419f-44fd-4028-948a-6a1d00307fb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bec8a559-6a5e-486e-8401-4a274a827506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c75cafe7-4fac-47bc-924b-a8fb63de9cdf",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7630e0cb-52f6-4194-bfe1-085648189722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63ce54c5-db4e-471c-9bff-992ba025ef80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1ca04bf-2c29-4a30-825f-91faab673de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0bbb8b7-59dd-4329-8229-e65b19ecf688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b6244d-fccb-4e9c-b356-16d819db791d",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "591363ce-7af0-43ed-b6c4-ef8dfd7c427f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20597a9d-5ab1-4db8-8e5f-04ae3a070104"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6137f85-565d-4c60-85a4-8faa162b4a01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b41f06c-1716-42bf-8a3a-bf54aa3a948d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cd96748-4c69-4fe6-ae22-563cfd0b1ee9",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c18ced14-7991-43c4-9cf8-62ad6eed8f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ae4e165-b1b0-48ad-ac0d-7789d296f2e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f61a63fc-288b-4d73-9a0f-48fe57b4c829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "60c2f9ae-8080-4449-afb6-685ffacea305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1036710e-8842-4741-b518-06122ece1778",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de196998-5e63-4ff7-83e9-9e7c2921fb4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00a8ef0f-a83a-424b-acfd-0918f626cb0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d53312d-4891-4f20-8aaa-ad86ccfb7370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "8b11bb4e-7a80-43e4-bc1e-2444c16b2b68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ac0f293-cc2e-45d4-8e33-1bb2b2aec1ba",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de49f17e-2067-4135-9e28-429f27c6a50a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "721551b2-1ba3-4f69-98f4-2dd91b8d435a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "489beae5-ed9a-4ae5-a824-90ffa2bd657b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "02c61105-8504-41c3-8612-238999fd9258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3bc0f6e-cd01-4ac9-989d-a0abfaa7a903",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd4a8991-854b-4904-829c-0832927d6438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1716bf6-cec7-437b-a301-1558e710af75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "365a3b33-cc06-43cf-a6e7-47be63a6ae5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "20fb4cb1-6b3b-43b6-b094-8c36f725f557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c0695c3-7649-4ce9-adbd-6017033a3bc7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5d293d4-e12c-4a2b-b634-d21c778f93e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e73f479-8e9b-42bc-aa0d-365a1c099c56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "891af7b4-10da-4955-a6c6-b4e4bcf002a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "66f2393b-2cda-4c92-8839-26810fab4c92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ac62887-9500-4520-aa57-c06ab77e5bca",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f1036d-3adc-4f2d-b75b-88aca6004591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dbaebaa-54c9-4d1f-90a9-3b15a5d2d35b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb4044b2-c623-42e1-9925-8dcfd22f7e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad310546-a4d8-4c5a-b64f-421792e3d5e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e27960b9-c72b-4b19-b036-047fefdd9cfe",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7ddbf67-1ab8-4051-ad55-0411f515bf0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b030bc60-ff4c-423b-a116-b3d5cd3d6fef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "885af9a5-befc-4f42-8feb-07c51d191c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e201bbf-7154-417b-907b-77c572261946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e976af06-2e00-45d5-8572-148b18a8643c",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3045eb1c-ec59-4f78-ac7b-40af4dc22f79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e59ba19-8c85-4aba-b981-dc4961f80b3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "221aff17-b75d-43cc-a8ca-de1655976e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "22dc19c5-19eb-43cf-ae6e-cae9134cc928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52b217d9-fe2c-47a8-82d6-dbd22e99cabc",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b953ef-04a2-4952-b659-d355635f231a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bff7929-3f80-4997-a029-12f45a40b069"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62ef78dd-88ae-4053-9749-c2619480f8fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e96838b-8eab-425b-8828-33fd5b6a73d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff3a78d6-7c93-4481-b47a-da04680fbc48",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1401805f-d3cc-4601-9703-9bad669d02fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b9cb048-7710-4c30-9fd3-88584c639fc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fce758e-109a-4cc3-810d-a9264835275e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe0ca651-3c0a-4bce-8690-eee7bb6f1635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e8f4b6b-13ee-4279-b5c5-d4926031676f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e29bc47-d5f8-42c7-b741-3eb607f83848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ed94ff0-2220-4391-9420-94b2e5be0016"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c4f530-0078-4b63-bb4d-1b569b608c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "52ce2230-36e5-4b71-8c09-53ae625a7407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7939c167-215f-4c03-ae76-3b414e03a458",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f942856a-f032-41d7-b843-9984fc5fc502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eedace0-4739-49e9-a8e0-1639df37765a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a21cea-080b-410e-b2f7-4b7c3b144d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5d6a1f4-483d-4b12-91b4-4e60f4d9ff2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a35879c-d92e-47b6-b6f6-d7b4e209a0b1",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad4ce6d-a52c-4e1c-ad3c-f5d5fdfe7409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8af2f4d8-b6e1-4c4c-af5c-b787d419f6cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "180bcc38-2f6c-4da4-bff3-fe0118d8f5d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f072fe62-a2c8-4e41-8d81-10649fe88a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a380d7b-d551-42a0-940b-ab2ca0c22d61",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3171a16-a133-4b7f-a66c-ff7e62deedd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaa295db-5fcd-4368-93a8-51536f41232b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52fd7d0e-79e8-413a-ae7a-f1a59dcd65aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d062584a-2312-42f0-b9ca-7f9db0b29755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b1bccc1-b80d-4517-8505-63e5b908176b",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "975d3c23-cbcf-46cf-85d2-9abee10ecf8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46165acd-91a2-44a5-8da7-b9e600427fa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d1bd435-9ee8-4321-af12-175cceb8b551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "46d1d5a6-93f1-49a2-9691-8aa41f443d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "310db3dc-46ad-47d9-8e08-d16d6d168540",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89f527b4-53cd-47a2-a61a-f98647b9fac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e832a781-4b71-4197-8b5d-8eb2a1536082"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e259b59-3d82-4dbb-82d1-eaf02dc0a62a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e91d3471-ff6d-4ffa-bcaa-c88d42deff05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "205cd59a-34e6-47ce-ba0c-5d490d17499e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6ce4cf5-5529-469b-ac21-2232a3ad3bb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9d54101-4f64-45b2-941b-38963634d080"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44105c66-b37b-4c04-835f-1d463b881af6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3dafab8-4331-400f-804e-b62647a5d9f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "573ad682-70b0-4722-81e3-82efa885cc45",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cdf1a6a-8a6a-46a3-ad6a-2ea92767fb83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1370e163-553f-4887-9323-7c3dfba5b650"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f77c65d2-e865-46d7-a820-a20a1d8b66a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "154f2874-52d0-4d4f-9359-0c0a90c442e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f268d9af-e802-475e-bce8-6eaeb5106b8f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b208ca94-228c-46c6-b704-82d1f8e34cf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4f8110b-3326-4dca-a04f-a21b762d450e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9b69d62-3635-48ed-bcd4-ea467b77f22d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "003e54fa-ddfe-412d-9d6b-d83984500120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c566ec6a-c55e-4a7d-8b66-662cb1b2d09c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ffc3805-8820-408b-a330-68f453e5bcb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c973e5f-d076-40cd-814c-84592e659657"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "605fd69f-63cc-47f0-8db8-c73f99576a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "379f07c0-54da-483a-8701-1e41b1a7d678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f23d20a8-afa4-4f39-9b9d-180e5f2eae7e",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e0fe89-754b-450b-857d-d91a00fef1e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04fce096-860c-450b-a0fb-ee38209fcb18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca95d1cd-5353-486c-8404-c5963cfff3c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "177eb436-d826-4e87-ae37-f0c41231a3b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d045e2f-b06b-4d8e-8409-5a38b6baa72a",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0ab24b5-6dc0-4ff7-9f38-67fd7c4bd548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07825242-05bf-4342-bba2-ee3062ef9433"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2932decd-b464-49c4-b537-8c231947ccb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3509401-c993-463e-bf32-8e2cd30dc9f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c459b2d6-beec-462f-9868-2f2fa41af915",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f956ee92-e27f-47f2-b858-38478ac36da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7ad4b3c-98e3-4451-a1b6-53bafb677e0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c475704-c955-44f7-a2a0-269e51521a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfaac281-fecf-4a44-843a-95d201820a39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66dc9a10-9aa9-4a4d-8b69-28a89c24c7ad",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28a86ebd-9d46-4dd6-9e05-ab8f0bf44e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c63f76c5-90bd-4c93-86f4-1335988e34b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fadb049-536a-45d7-9d35-483507aa9a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb74c87d-4ab7-4d51-bd5c-97781f61b21e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a61b18c-cfd6-4074-bd86-6d04e1422309",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e044b8fb-0f14-45d1-a147-bb7c2b91f5cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aac24ae-3d86-42a9-a5f7-335621f838e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d829ae0-88b6-4477-8ad3-5c5805d4aa5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "709fa04a-a084-4f6c-b2b4-847cbc48647d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8c08e21-cd7e-4a0a-9a3d-4009914e1716",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff54e114-8c22-4f42-9493-7168004b253b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83406c84-eabc-417e-9f91-0c4a3cb77511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d774ccc-34e7-41b8-861d-418640c1af20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3f276e06-08a7-4d5c-b28b-cf67d76eed98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92e00eaf-f317-40e1-b778-cd2a9cbdf174",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e21c2c8-d345-41a8-9c53-e8cc3a8491b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7c14488-b6c5-4264-af32-8efff5bc52b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "214ef53e-ad95-4b20-a448-0311f756e63a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c274869-d306-413d-9d9d-5682b53456ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4da0501f-87e3-457f-a78b-3566fe087fef",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4181a987-9d77-43bc-a84d-e39d385ded5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d5e9098-addc-4ff8-b394-61afa48d467e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e1aae09-3181-4480-8d82-548d4a0b7ef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bf512c9-70aa-4bc8-bb9c-5d81f7a036f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d253e2a-76c3-48c8-b0c6-dcfbbb851071",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be4f4dee-de6d-4d5f-afc9-473b77c5ea4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a08ed54-c899-400a-b85d-07413baad18d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7993eef7-906f-420e-b9b4-7f61b95d4dca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1831a935-bb27-4a45-9a06-96aaed18a3da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "750e0a92-4d1a-4b27-9ebd-20b51afedbfa",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e50d9c75-2ece-4f0f-921f-9d221bfd9cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25a8e3e9-8ce9-47cb-8cca-c05124c68668"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e553eace-3914-4a93-96e9-7bb86ca098e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "45712cbe-f63f-470e-8fe1-6a34fe112158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81c2b22c-9bc1-4920-b4f1-65520a35808d",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "410be383-8c69-4c0a-bd25-34bea1e5b925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1065028e-676e-4765-8c7c-955655b87ea1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "931a5c07-bb3b-4049-90bb-d6b8dccea06b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "66d4699f-c958-4869-adc1-99914612c531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aff6c571-8426-464b-83c0-4394c6760ecf",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a81c909c-d3c4-42ab-89c6-9a3acfd6a9e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "194d86ce-e4d5-4ff0-b1f3-81bd87891a89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cfe98de-60f5-41b7-918e-a87db53b3974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6101bff-b436-4176-90a1-3b5a0f18cf70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df95ff8f-e09a-4361-9d04-2bcdc2bfb30a",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9916c0dc-9946-4e30-a916-d7bc12b18bb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d12ca87b-2ed7-4917-a468-f0650266beb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "541c4346-4018-43f0-9abb-ac63e0a20b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d1a38d2-dba9-4753-a584-d3b284c7a2d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00c70b54-77fd-4bef-bc7e-8d32d3811232",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71feaeec-0cfb-4c05-ac42-58b026839321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "511cf401-31a7-4e5f-aaa7-fb810965d998"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b015c78-a0b6-4b9f-bfae-64e41d06bea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "18065d83-3ce0-4530-b5d0-618ced57eedb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e990788d-83bc-4111-b4a9-c14c5606e04e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "073945f8-ed66-4fd5-bc45-78dd1495b6d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3295dac-a87c-4fb3-a647-f4286711745f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88a382ff-f28a-4fd0-9a60-c06f82a5f4a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "64506af5-d76c-47be-8059-218fc4286992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e9303bb-b79c-45f3-8749-f0133d9abd24",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2814150-bd27-4f57-bdc7-e66cc3583eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4b7d70f-adc9-4626-a31c-6a331c322f9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44410391-b343-40db-be10-b5298d738106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1803aeb7-d103-4ce6-9f09-1c01b5b18737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1924c08-5aa2-43ab-ba29-2d9dcaab82a9",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aa152d4-9bda-4b16-a290-a7f51b448194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9408391b-e754-49d2-bceb-657f503268c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c583e70-1aec-4996-810a-8ff17d469c6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d864b80c-978c-46e1-8500-b67cf7395b9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5c4ba58-69b9-4ac1-afea-a76d69bdd44a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba9aaffb-fc67-4286-aa6b-83874d53ba42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b23485f2-bfe7-409a-aa82-dee29182ded0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87820d9a-5c0b-4f71-a451-a0eb2083b4e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d560048e-acbd-40bd-bcc8-02e34277f1e5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ef3a0529-6f37-4747-a74b-7e7499e5cddd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7dcc9176-49b0-43cd-8da6-a15849480dce",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f1229f0-064b-4f06-8410-2bd270338ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b9a24254-7b4b-473d-95e5-3d1df5420861"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09a4b5e6-8efb-4199-8fa1-8ca2346cb1ad",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "44a4790d-22dc-4057-b3b3-1b0d225e820e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1baa8a38-b08b-4793-94cd-69529aa9d6ff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9c143159-85c1-45f0-a701-8b78122f506e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7429802e-17a8-47e2-97ef-809918f7edc3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f56a0f5-d23a-45bb-bc06-03e8d268ce72"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8d80bcc6-3434-4e14-932f-a9be04bf5a4c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cd3a9230-527a-402c-9579-08d0dee1aafe"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "95bbac2c-3518-4e1a-ad81-d0ad3b5b04c3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "082edfcc-a88d-4a3c-b0c7-560542fa8194"
                }
              }
            ]
          },
          {
            "id": "84c807cd-8214-4a92-a6b9-6cbd6bd4b7c3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6c6f7f19-f407-4a81-a067-d726798e26c8",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "ebdfdc61-7fd0-44a7-8ad3-3503b3d6e1ad",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "203ac273-a6ab-4c36-858a-245aded8b5b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e08338a4-4521-4192-8e61-83912d7bae88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c7e5b77-6d2e-4807-bbb4-cd98f0bddfe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "925f0a43-6f0d-46fa-a6e0-2a74fdb6d9e2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "25ef36a7-fa34-4b46-a491-9c16d8971159",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "99d992ad-712e-4298-9df7-27c22713b04d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d4cfce16-7fc7-40b9-96c3-61a289ef261d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f6d5708b-1548-4209-b1fd-32787e7b5522",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f5f2d184-aae8-499a-a57a-9ea3b2fbe67c"
                    }
                  }
                ]
              },
              {
                "id": "23c0d2b1-576f-4760-ace6-ce1252c520a2",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "028243a6-c268-492b-96ef-42befd7bf6a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0c8a9518-3c6f-4c48-86ae-b93dcd06b9e4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b3ba683-3bd3-4b4f-8aa6-f2742b43a35d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2dd4e12b-c686-4797-98e9-1eebdb602270"
                    }
                  }
                ]
              },
              {
                "id": "94c4551b-fd2d-4f26-a5ea-34c4a6c90c99",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6bcb9c48-cfad-4c92-b70e-dfdf1c2c6679",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8a5811a8-311d-4cae-bcfa-3bb2644f71e7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e39e4223-3c31-45ba-8387-39c89496da08",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f5ad195c-3374-4e06-b62f-14c5b1f527e2"
                    }
                  }
                ]
              },
              {
                "id": "a520ecf3-2324-42d9-a794-7b2c76f178ac",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "87e194cd-881d-4fbe-bd17-2c415b035194",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9b2cca26-99f8-4d96-8502-634d4227c658"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9142262b-d18b-4aca-a483-84f6fc82a797",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "7a5a186c-7ca9-4602-99ff-19dee953ab7a"
                    }
                  }
                ]
              },
              {
                "id": "287dfc4b-1a3c-4297-9525-a6efae83c8c7",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8470da69-0eb5-4da8-b71d-bf35ae93b257",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "94fd020a-4883-42db-b6b3-c593cb7b4fb9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0a0a88af-842d-4ab6-9508-9d50e8d7ae01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "fc9c25ea-52ee-448c-941c-3bf1db37f01f"
                    }
                  }
                ]
              },
              {
                "id": "7545256d-30ae-432f-9320-3ba51b8bf0e6",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8c9d2819-6997-4d0a-b88a-d46ea112166f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e7e14eec-8bc9-4c43-8f36-a5db3c195afe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d6954d14-0114-4c2d-88c4-dc8f4c473ca7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8b9ccc38-ede1-48cf-9f02-bfb0ab1e871f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cda181aa-29af-401d-9ba9-83c07700e63d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b9ad6fa5-f420-4546-a0cb-18e80443910e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "377ab993-a2c5-41f3-bfa8-3a2d2063c329",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3dbcfab6-fc51-4dad-9347-f273a18cda8b"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7210c037-f52c-4608-a1e7-d856a0d3ff22",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "786260e3-fde9-401d-803a-741da658cf89"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "63cea97c-7e79-4b60-953b-84a915d39a68",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2a77598e-dee6-40b7-bac8-aef8c41bcc2d"
            }
          }
        ]
      },
      {
        "id": "2a258db8-838c-4419-abed-691ab736d2d5",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a55501a0-18ad-40d9-a0d4-e544d77ed20f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e0e729ba-4786-4841-aec7-532a7820217a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3eb6f9a5-5775-45f2-8e47-8f5420de36f1",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0707133a-67e5-4a96-8083-9c0429710738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df699e43-57be-40f0-91a2-21d61f7d30da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bd45f5e-b837-402e-9975-53259178dc8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a324a39b-e868-4c01-916b-7ba3417240f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7e169d4-ff3c-4736-98cc-065da7c866bc",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d540b93-9593-458b-8749-f4650b5d35cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef52cccc-d591-4f3d-8f47-fa0efaf1398e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43aea042-eb92-405d-b780-8702babf8131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5d3547c-988d-4dbd-b50c-259699c6cd85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa786cf5-a1a3-4b76-ac2c-264da998d351",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c66b8b01-be7b-4b8a-a61a-1f4b53efebdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dfd2651-0067-4606-a91f-4c14910f3e8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b10cbbf-80f6-4ecd-ad53-a7fc6d0a11dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f536ee8a-ed8c-4f51-9f6c-5e2b88e19ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "891f6e1b-092e-4b9f-89c6-94b64f4bc0f2",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bd3946c-2a9a-4161-a1b1-df54e99b21bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9f8bf78-7c25-43da-9cce-9066a4103e37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca9e3197-1fd9-42a0-87b1-c42aa794838a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6beafc1a-76df-4344-9a64-e31922591ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c86b2afb-2cc0-4010-ade3-02f016eabe4d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "968e854f-cb6e-4d03-8acb-3252b2481f92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc0bd412-a848-463d-bec8-3369f38e4feb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c25ad284-f5cf-4946-9e07-c79d6dce597a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "376a18fd-0ec2-4bfc-b053-4caf0e1cf47b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5134cb7e-c63c-4969-aada-f4eb90ec1b20",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23b0f8b5-6c63-4e75-b15d-4a30807a59e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58d1ec34-c122-417c-9e7a-8f267ce58564"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "780e99c6-73db-4725-a425-92a97c5551d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ceb513db-9f6d-418e-8f7a-bd10f69ee22d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50a6621b-cdff-4472-9a4a-1c5221bd261b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78913471-f5e5-4b78-94d3-4dab87eaa421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "119d15d5-1b26-47a5-9135-caf0e18ec02f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f082b8e-8f0c-4ef1-88ab-1348a47ab3b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "22bfefe7-4dc5-497f-8f63-5c1c2b580e73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "346241dd-56f1-4049-aadf-1226794fb2d4",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29cf8ae9-0c98-450f-bed6-46605f14cf89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7572ba5-e767-4965-bf22-d6894df963cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "281051f2-14ff-494d-b5fe-630bbb70193f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5357c0b7-d954-4675-8bfa-799ceea4b3d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdb1a667-abc4-4d30-a28e-b26bee976350",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed72a856-4150-4151-b334-66c78ebcef08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2800afa-49a3-447b-b6bf-bf9c73b2c5b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec8319c-797f-4248-8296-57f8e5af36f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "07d08d58-a02c-435e-8983-1684f50fcb34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "712b6f16-2aba-4f19-9cf6-fef960ed52cb",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f3b322-d4db-4ad3-8e0e-668fbb7d88b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7ac8f7f-23ea-4baf-85b2-3d7012f62cf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08cddbf7-9f34-4f9d-8f22-9dc01278a351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "abdac89c-e68e-4a32-ae05-542154616e3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eba8dab-fb79-415d-9309-5b20289606a3",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9b7a6cc-b6fb-441f-bae6-21b511ced89f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b328a77-2446-40da-8b4b-44c44c2bf1ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afda796a-041b-481e-9653-75c972bf967f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "be615241-83e7-47fb-8687-d4ccec6ed4b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da74de64-a7c7-4b3a-81c5-4dc80de60b09",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b3a27ca-a78a-464b-8e87-705762231121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d052023-6492-4dc8-b06b-f2f137c80ed0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92cb9da0-6bd7-4de6-b2fa-733219d7df25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b84b7989-6aed-45b7-b732-617eaa17b951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0e682d-c7ea-45cd-b1fb-e48f8a7a96d1",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b781e9aa-a7b5-4394-b76a-4db5dcec2bc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aa55108-b496-4d18-8b59-6b5b8ac5c670"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60a88f39-e599-464f-a0b8-1cb85b674149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a16aee9-1f0e-4ef3-b7dd-f1a590efc56f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a150e4f8-3754-4713-b9a3-f15ff476b989",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a94df4-042e-4c3f-9e15-9efc9d7eb6db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36543719-1509-4132-b869-dd11d9c3358d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e23aed16-d8ad-4046-a4e6-45dbb5d8e975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "502267b8-0313-4405-966c-5b544b24653f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "640e9bdf-985d-4b1b-9e22-c3ce9a7d043f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7666e2ea-d9ec-45ef-9d5a-616c1a373240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74521607-e026-4479-990b-b5b6140df8f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01872be6-0af8-4500-8135-c02d42707f1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c169eb5d-9f26-4268-9622-64300772acd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "034a99d3-5682-4883-9256-74c683a292b2",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9deba165-c9d4-4e84-ba2b-88c83e2eeb09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5b00d81-335e-4ebe-ba01-5d4d99c5d0ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b1be85-a6fb-4c9f-a75a-ab9cffff7b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e4dab0c-0586-4e28-93ac-ae9e62af385b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "159b4f68-23c1-4af8-a3b6-a4f9e19c57a3",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7aa0c8b-85c3-409c-aba2-dd0ebd8b47d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "181b12b0-81c8-4d66-978d-948cbb1158ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4501d79-ffce-47b7-8268-9e9f734b19c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c16f79de-578f-4a1c-96d5-8bd84f7ce813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b48aefec-1153-4351-ada4-1cab26e5a938",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c567481-af42-4fef-9116-b06041bb1d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0b6a4fe-1533-4903-92a9-e5ab99be51f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "430e9116-8f82-4439-9f19-3f303fc5b226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "edfd2139-4dca-4434-be96-b011fe997f8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "017c2583-fd13-417b-8d14-2065b26c359c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b4f6c49-caed-420e-b145-d5d7f068eaf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46a7a776-53b6-40f3-ac81-395cf0b7bb18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3dc082c-7a67-4485-b39d-0df6f70cdb10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b6ece0f-42cf-4ede-a9aa-34bfd56c4f2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64922e95-27e8-4402-b9d1-311684207a00",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50071b9f-fae1-4b7c-b72a-9bca9abeeb15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "932eabfa-e110-4fda-b31e-6359bc70d015"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e40e7ceb-88d7-4a6d-9f2c-7c1a7e81ff2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8dfa6aa-15c8-4c78-9548-e3c662950717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de962b5c-032d-4c25-bec1-f82cd69edd5f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69dc8567-de9d-47a3-a01e-d6bf4eb27e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "003a7a1e-0f30-4329-988c-14b475926e05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7094d57-7f3e-49ad-bc6c-09f9de0c4d2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "816abe66-0bb8-4688-963a-31696149a1cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa6d08d7-63d8-40fb-aac2-dfcc3b676a08",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a5f0732-1a96-494c-9be0-521c993244a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89ff7de8-bbef-4678-8288-8602a63c04ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "339296b5-fecb-41cd-b5c3-acc0da576626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c24e1cff-69b6-4723-a2bf-b74dde429df9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aba840e6-729f-455e-9a89-1b87a78cda9e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a712f5d6-e5e5-466b-98e5-9be54a78b28e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c003cbac-0bb8-4547-923a-097ef0c5309c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a2602d2-d7ce-4c4f-837e-c56ad63299fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de529fb5-2d5b-4f98-8dc4-bb1cfabbef41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0686ec27-7fc1-451d-b387-a879fba014f4",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "659bee7f-5540-4349-90e5-14c6c58283c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55815c2b-7090-45e6-b150-053e48c18485"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "139ccb56-91c7-46c6-86db-174119853475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd617ef1-b442-433a-803d-37f235633f94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5392d623-2c07-461e-930d-09732aad599c",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f64a0228-9a28-417f-840a-8a1b2a761840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee92d166-8b90-4bf9-a8cf-467eab98f595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56c6865b-73bc-40a2-9e0e-92be47309831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "edab7d62-1732-4c31-9cc4-036e7e021ffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed0be4a-9c9a-4011-a20f-696f5c8655bb",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55ec0b53-81ad-4736-920b-b0d9568972e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed74eea3-a726-4192-88a0-9778957b4520"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65ae8cfc-4094-41ba-8c87-847998fef7e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21afb950-24a6-4250-82ff-40836ef2cb2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40467eaa-4f86-4986-b186-ffd3b75ac080",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a0e762-8cb6-443a-ac5b-4d7f37cfcb17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fed400f-5ec0-47f5-bd3a-17efd27abdbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2f87584-6ce0-427a-9589-f910125b68a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "629dc355-b837-4df7-82cd-5b8df8cd68d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49c254b4-ea00-4a19-85c7-2228d4ed6d85",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88cc3168-984a-4cf1-9741-0b559880d641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e67d7849-3264-4e97-ae08-ec0556c8592c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b68757e-ea95-445d-899a-423a94906d38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c09a94ca-6cab-4bb2-aef2-838839bdc0bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22481f9d-d163-4a3f-9fa8-dd39e0396775",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d7d6305-130a-4d4d-b6e1-b2fac93f6177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "753f3c3c-bb46-47ac-bb59-eafd36c6030d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc804c99-fffb-4ec5-b2b0-2870197976d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "16cc3656-84b6-423c-85f4-9db9275f249b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5ea4252-bcd6-483e-aa07-03e2958d99fb",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c1bdfc2-7a9e-4f26-ab69-b410c7f7c410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cdaa9b7-adb4-41ae-902e-a75f5d98a851"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ea0d14f-6d76-4169-96c2-c528c177de41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b91496e-ba59-43fb-b0ce-d0607beedf9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93a2be6b-2a17-47fe-aadc-663f6e49408c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7713f4a1-d8ee-432d-ad44-ee6e22653fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "532e3e58-3a07-4f44-a834-0403ae02aad3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf285cbd-9f13-4e70-bdcc-b57686faf5c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2819e2e7-b92d-4a60-9934-2f533c8f2b5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "962d17e9-dfef-4376-b3cb-02ca849b5044",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe5f8d2d-abf6-4543-87f8-be62342b2cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9ed7f1b-3e8e-40f0-9f25-d6c575209fe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1adac0be-6ece-4a02-9426-42e17960f9a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d5552cf-d463-4637-bb33-45a3fbf0139e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b15f8725-cac2-47dd-8da3-7e73d429e913",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2894d2df-4174-446b-81ac-d58980ca1834",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e044045-bf3c-45d6-ac21-cd1d0a8c5060",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "959905ba-0213-4491-84fd-85acf49a71d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a4f9ba-3f36-43d3-bb67-7f242fdd615e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "38a377de-b591-4be9-8b39-65f3ac0834c4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b8615e0-176c-491a-958c-d024459616c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10485864-64fb-4c38-bf05-6cea7fd451af"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a312dbe9-f239-4c32-942c-a5c0d7099023",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "55d19e31-d781-4599-b43c-f874b6776e52"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f544c0bb-407b-4f37-a4e6-f624760c080e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "dd1bd8e1-74ac-4de6-85eb-df52f76dd744"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "532885e2-2789-4d0e-aec0-317763989f13",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c051d464-1f19-4194-b3a4-26958ab68a3c"
            }
          }
        ]
      },
      {
        "id": "007dcfc6-9402-4fda-872f-d727051fdee9",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "b0f2eae1-cd4c-4b7e-8f68-9e8028f42901",
            "name": "Negative Testing",
            "item": [
              {
                "id": "605ff277-b49b-4bc4-b288-e6dcb0e4d472",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2ed0ec0d-9ad6-4915-a933-910aa25fa5b8",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fb15af9-83b7-46e7-89e6-033966adf91b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e06f9ad8-e2c7-49a4-ad84-57e364405dbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff76031c-4971-4201-9a59-41fad704cb92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "22b2d8ae-7a4d-45e7-a355-5779d248f6bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1afb5910-3131-4bd4-b8e7-15933d02b6a8",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8bc1fa-0753-427c-ad45-6561f5f53374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77de6a2b-47c7-498b-8c5b-14b4b52263ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8594bfa1-e804-43a0-88c5-aa9cb8627217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d798aa1c-2cf6-4e95-9a69-96ec1decfcf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c70ef1a2-2ae5-4a5a-ab01-3dc6b6fae2db",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "787bbc8d-a07b-4ea7-9a99-f5ba6f62101c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd165487-efc3-4e72-95d3-6fe111dc9bad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8559f4d-c14f-407c-8a56-5755c97a7a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f4776cd-59c1-478d-b766-41c44c5136e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05aee78e-508b-4203-8fe0-34dc46c89230",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e382e84-5034-4690-80b4-0b4bfd2f15b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f06edc8-36a7-433c-a2b8-c9ee2c713417"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2af6f50a-1ea1-4c0a-b2f2-98216dbaf62a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c744005-8cce-4664-8789-5d6b1edbaad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f98a7099-dc55-419d-8f05-ff78b5f17de9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bccd9c18-95cd-4907-82e1-7ed9c232ffd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48d87479-d182-4e7f-9434-1a88e287c2ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0ce347d-690c-406d-9c14-4af750051307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "77130257-db85-468e-acbe-40915c9ba172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21288021-28d8-4e40-afcf-420216fcc368",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79b1892e-36d3-447c-a405-dfa4eddee34f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7ca41b6-5582-467f-87c1-eff51750aaa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0a53885-2b41-45c9-976d-477c0e0f9c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "693198f2-5e33-4d04-ad07-48306e77ff4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00e3fb2b-a28e-444d-bf28-fa8907b807b6",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffea3243-b543-4f48-8644-40cbb210b769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2509690-d105-4261-b9b2-0c64a13d887f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff67526-3491-46ec-8819-a8f4a84fc68e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f81576f-753a-48b9-bc50-22c9e991dd8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49c110ad-0fae-4de0-8ac8-e6d7b200a8f5",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4ec496a-a370-4871-95dd-a370dd8d41fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdd465d1-a930-424f-8ee6-dc7df359ca70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d9a4dbd-f470-480b-8638-16f210bd7ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "167cb520-716d-4736-86e3-55de49c277a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89eb569a-6b2d-42cb-9b6f-922a8a400e0f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "655e7e96-d9bf-49ac-acb6-158ea5c4a6a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6173050-775d-42ec-8729-a6a61ac4a9da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfe3a3bd-058d-4d1a-b6c0-b5c8d30045d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "770291e9-019f-4474-918a-56884cc5fb6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29c127ea-8b4f-4fde-85a7-dd3c9d02820f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2aa1454-a21f-4c16-a604-a9f52d3e1940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6304895-dbb7-4f31-b28b-f6f9aae5f808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4223787-e7b6-4816-bcc4-e5d822f9ee46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "41409fba-da40-4cd9-ba2e-6b3308736a1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7449b15-88c2-4e87-88c1-d6711593e145",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec0c0d6-1377-492b-a15d-832e3125c6d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da665b7b-9293-4f5e-8941-721b81092639"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ea11cff-d2d2-4d6b-bcd5-d646f08687c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "872bec45-2290-4b3f-b925-d7f31fb47dfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c9de26e-2071-4bda-b07a-e690a39ab645",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a51296d-b554-4513-bb52-f93d6a83fa63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7499f357-9deb-4981-bcb3-a90ea53c6fd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b3ef7f6-cc44-41f9-8acf-0f48e469bd06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c0f72f44-76c5-410a-8521-662f907b7599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46ec588e-cac2-4700-8a4e-90658f030b6f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "074598d9-39e5-4469-979b-d74739e26944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d1d1345-5204-49c9-abeb-2afa762b3d1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "946f6b54-db1b-4271-9255-639fa8426dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb5a6f4f-7d09-48d9-80a0-cad7355e889a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1996d478-4e15-4f6c-ada2-79237fead2b8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0def173-8265-47a1-83c6-03d28a538d27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ffe02c1-a9a9-4188-8688-913db376955f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f36a9e75-c6d4-46d6-b350-3ac56b11640e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2a8a649-a35e-41b9-85bb-c2fdff705191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dc1d5e2-1fa7-4ff3-9f82-1ed0137eecc0",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07609a66-d9b0-472c-b83a-998eadecd904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24e354b1-e6b4-46b0-82e7-1f3933777989"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3bf9a4e-e81f-4ca0-b5d0-94b245fa0182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5431b38d-a786-46d0-b610-4f71a29c84c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f08c1a8a-e399-4bff-97bb-79b23f1fcf8e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cac6dd0c-4795-4c6f-9848-fea85ae58de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95e79fc5-bee8-45f9-ac63-c5968883a314"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8afbfe4e-60c6-406d-b120-d20e85765e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "717d9fd2-1341-472e-82ee-7e6ad43c1f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dac50a5-0942-4633-9754-7fa607d230f8",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30c4035c-ed3d-4a74-bc39-117d365e1d0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32fac04b-9f4c-42e9-b3a3-9b70fc72d2bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22b55d8d-3b66-4f64-9d33-d55d69f476db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b192b7f-e3c2-4d25-944f-a42b75fa0018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca684c67-15ce-4dc0-bad0-be294910314a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4481abd4-0a81-4cbc-af62-f3a8fea6ca9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a4fc813-b82a-4313-9e9d-cc45e35a06dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9986cbba-c41c-43f3-9f1b-9b6cf5142f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "926f6fae-739c-442c-b274-2141e2423116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6920109d-e62d-4cfd-8cb6-6841892fb983",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "949aa12d-90da-4f96-b7dd-5c707843d9ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1b6b4bb-2509-4448-9d16-97d5622e2057"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab77f6af-8cd4-4091-92ed-a87c9949280c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "182f15e8-f6c5-429b-9fc4-982614af315b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ed7e62e-9ebf-4931-af66-7d2e5ef71033",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "197d439d-5a47-45b6-936d-a287bf96a8f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "670fc6b6-7cca-4e9d-954d-7d603136a6c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a272b2e-b945-4ed1-80cd-4a81f68bcf70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88ac2391-1bf8-4e1c-9ce0-7b3082e9199d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d900a64a-f99a-4c7f-a2df-0bb7d7815e5b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b00714f7-1991-4667-9467-8dde884985b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05207844-2e36-40d5-87af-a2483b65abdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37bd9e4d-ec93-4247-ae4b-4ba245f40ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4510d6f-2c2f-4341-943d-abb694aec623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0d50548-343e-4f4a-953c-497cb3312ae8",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d9b6a7d-a086-471b-9053-2933a3140646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1ec8381-05c9-4bd4-af1b-cb16750f444c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf5c6ee1-701f-4c80-a877-683378378cb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c2192dd-63d8-49b1-ab5f-6401b2f45305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0010d4cc-72eb-4b03-a900-fe9361aeeb89",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d1d7d59-7fe4-4d86-81af-9576904aa03f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "949b33c4-c3da-476f-a1d0-c07ec8d608c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "449f93ed-637c-4501-a90e-3074555f055d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab74c452-3e1a-43e9-92c5-5ab16e370328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d72f967-9a2a-4c43-b68d-833d7aa0e9f9",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6007d4dc-d57f-42a3-82e8-b20afafcca58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d032100-5264-4d53-8b7d-2b087cccbe0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af5ed1cb-eaf7-4cb7-af8e-f559581295fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3adcff0-240d-43e0-aff8-0904e5591124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acf1b47f-ff55-4fcf-a784-d72038f3cd46",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53eaab9f-1078-4f79-b752-ff59dcc7e050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c198780-8cc8-4a8e-9949-9bab50b598be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4214e723-665f-4cec-a47c-086da8075b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb384ed4-3bc1-4ede-93de-03fc48d8fce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35447dc1-5914-447f-9e17-aa8ce085d414",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c65d258-9f59-4f6b-bb26-db7174d7fb4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50d11b36-0c15-4ca6-9a3a-6580f446c460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf63170-f6ae-4388-9c44-00392d04545e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a401ee14-b781-4797-aa84-b0884cac4e8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "333ba070-1913-4a9f-a53c-01f1684b0313",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f962e299-5180-4594-81ac-e4fbe628c7ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb6bf0d7-f257-4ca8-ae5e-55ce308c6741"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da37861d-9d4c-4fd4-8572-68c9d1581c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "921d20c2-e830-4d3f-94bd-ea062b627af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e0b286a-79fd-48ac-9488-d38061a0541b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d7e6847-a6d2-4fcc-adaa-5e6994e922ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5165192-4148-49ce-ab50-af6029c67f0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a1f0f5a-2f3e-4673-8611-4dd7001979f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cba21a18-a495-46e4-9df6-fba02642c2c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6551502-0487-4cf8-92c5-e983c1c18e84",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f9c1ab4-a7c7-4a6f-8f75-13d1f9442b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a892fdc8-7de6-4425-9065-deedaed32a93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed5cd5f4-464d-49ef-bea6-f6a1948709ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ce4f27f-217a-4602-97c9-31c5849780fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b5f26f-0b1c-4f62-baf2-4bdb440213c9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d92eae-75df-4071-8f41-09022ed5a3bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f6dea6e-ad82-4753-899f-557b6551eaca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f235a04e-307b-4f28-8a48-33315e52efe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be9d2a54-322c-44de-880d-11b1577bc5d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "868899a1-6282-4ed4-b4d5-a02d8d5292be",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd83d55b-f6d9-4e47-baf2-a5ab27710ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13a52a52-6147-4886-9675-a21bcaadb130"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78b98b9b-dad4-4d76-8520-0a892b8039e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfb17a37-069c-4361-bb1d-8da6f46b2c47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9952477c-1f2d-43ca-b3aa-2a764a588714",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86535872-7b0e-42cf-9e3d-99646f795ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffaac8cc-c03a-49a8-b0ed-ba34c46bc57d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1eabcfc-b8e0-4b2c-ac2e-d93b847f094f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "392a4fe6-e073-41b2-b076-0f1867131954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f579994-d327-4002-ae75-48cf395b7f5a",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb135b44-0964-4afd-b398-801c60f203bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78873846-48ee-4d36-afce-608bf479ad86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3f1e51e-dbbf-4887-9e61-14b0c8c04219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a596b8ff-ad92-4017-8648-1937e8537da4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac804976-30d8-487e-a2d1-910e1d59f8bf",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e596789a-f7af-4f6e-9d3a-6c1e225c683d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ca58f60-b360-42e0-8103-38affdab6568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d79b5221-3d4b-4f48-9b09-e816838c16dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88cbbb12-86b8-4055-8248-c0494b5af769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aac47949-5d1c-4eb6-8124-8b2d034a480e",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be46dc4e-e64b-4313-a822-c3fc4580dd79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0a15f89-4264-44e5-94e9-01be85bd421d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94e071bb-eac3-43dd-8b92-75d8395ec507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5dd40e98-5c0a-46f6-98d9-07007b9371a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9440c133-0928-4937-bdd5-a4fd4a7da46e",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9456ce7-de9e-4f93-8b23-e0b4e7658b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4411f2b4-16ae-46e1-910e-73008ea8e2fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54d8e8ce-9761-4323-80fe-41c7a875ee8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d06fe417-cc2f-42cf-8daf-26bf4c5602bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "050e6472-fdbf-4894-91f0-16a83dc51e64",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a342d5b0-e747-4e1b-a11c-cc39ff6884a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b19648ed-a069-41e0-b3d1-17e285fe7007"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ddb6d0b-05e4-486e-9a26-f98462948f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb6a9d9f-2926-4e0a-949b-5ae2e3bc40ba"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "434cc06f-1e70-449d-932c-894cb4450405",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "90ecc905-98e8-4316-b2d1-5be718d1e5ee",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c5fa17-67e2-4cdb-a942-b5112afd67c1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ead3dd89-0284-489f-9ddd-8f36daa694d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6974b19-179f-4151-9b03-fd5dc34a71f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8100207b-6812-4a74-882f-1c0fb7c9450b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "946fdd24-b6e9-473d-b6d0-2baea693ddf9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "30516208-7ae8-48f5-9c50-0b31e3d0e039"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "50ea3a4b-f5fc-4234-8ec6-413db3aa5635",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2010cee1-0054-4074-9ad1-93ad79f1dfec"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3f08bc05-94a2-4dda-9db7-1e4cdff3e369",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "539649c7-ed4a-4254-80d6-8ec2e07c2572"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "266b8a48-8a79-4e9a-a05a-5ef8bd907492",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5e269ce3-93ed-4ca8-8810-82ba4eb5faa6"
            }
          }
        ]
      },
      {
        "id": "dda1684e-beb6-4cc7-9bda-6f588c086154",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "dc06b893-a58d-4944-adcf-8db85739e012",
            "name": "Negative Testing",
            "item": [
              {
                "id": "88ca45d1-17e6-4e58-8ad2-e0346bedc6cd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f4e57f38-11b9-40d4-98d1-322e7886e77e",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb13b292-21af-486c-9b2c-2cdd8869da83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6b7bb15-2e9f-4730-9180-7945fe5688ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "957e29f1-0eb0-4be1-a72d-e725c4d7e189",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1540e5e8-ef1e-4b43-9c5b-a8de77a78e5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f57ff7c4-7d9c-449d-a9ce-7292dfbb87ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf21ec30-5e64-4cb3-b2d9-4d13615c4487",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c2506e3-392b-4b25-9186-425cd247f4a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18ad60cd-4a23-4df4-87ff-2008df057a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80677beb-d1b1-410b-9fef-ad34069b1c92",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7331313b-d0fa-42ca-9e74-3902f07df82f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a835f47-6d21-4360-87dc-e65acdc593c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be016e4c-9c90-496e-9df1-728dc821bbbe",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f499c1b9-f489-4278-b48b-a4b7a8a30a92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfd88960-cdc9-41b4-8825-bcb8d9187539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f96c1f71-d595-4806-ad0f-69ea99123fd6",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "720fbd6a-d8d6-4791-a47c-5e3b40563936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60bc1a7d-99d6-4d71-8093-4f8c586e640f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c147eece-718d-4c33-b372-3bb8a758ec7d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "697aede2-c649-413f-8743-11853dee2a7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f63cf911-55d2-4ccf-b08f-bd5903a55ca4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5497a9f1-fbf0-4b7b-9bd5-6bd4294212dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40a45f39-02f5-4c54-9aaf-83c77566736e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af2ef811-4266-4c7d-b9eb-4c852f17f98c",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1f31c7e-6c14-489f-ba23-bb588ae0bd1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8e31386-c069-47a6-ba52-ee3527465534"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba612590-7610-4b88-ba41-869f69288c0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d7cc88e-0eed-4db9-9560-dcacd1f0234f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34de6750-7a49-48d9-9cd2-7c4f1b7e4dd6",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26c0f573-b5e4-457e-89c6-c069f2d9bec9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b0076c1-a9e3-416c-9afb-2472216c5c15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a7b1859-f56d-40c9-afef-a9975242dc0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f093f2f6-bae9-4257-9359-d6b774afda82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dade750-57d8-450d-ac2e-9cf5b8f51149",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f566d3cd-e89f-47b5-94c1-cff9a22787c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "783f40da-3e14-4ddd-be8c-f40b62dedf9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe888112-f915-425d-b427-f4a58fca379d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "263d0652-475f-4709-88d0-518d919c4ad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b68be0b-9b0a-449c-adf6-287062c21a6f",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c1eeec6-ecfa-48ad-8a2f-65327a449b43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0db6acf4-af2c-4fca-bced-8f75aef77cc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddc7c61e-aa09-4090-913c-6044acbceb3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac60772d-25d8-4bda-aa82-e2c8ea8466ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03286274-a193-4624-aad3-765d7152855d",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a7938cb-e810-4a0d-af1a-f195261c22c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee2597c3-757c-4847-af70-d07423d41497"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "670435fe-1cd7-48ad-acb2-e62171ffecb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bcad965-31bc-45c2-aa64-fa26fd2841ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7932a3ac-c616-43c3-943a-40a56d356a30",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "665a9c6d-0b2b-4bce-9b7e-4300c7fd1b81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11afca2e-a74a-4a5a-b15a-a528d24316a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "777a0554-a179-42f1-acf0-ff6d0ed364f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4efc1f95-bce5-4ec8-b1a8-bbc3813bc951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5e4b1bd-40e2-4b13-a98e-d62f2cf79c7a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bec3964-a844-4edd-b675-fa96ac7595bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fc9807c-a7ae-43fa-8396-b59c80d663a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeae779d-43ea-4c31-ab7f-98983d991e6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24795b16-ea82-4e6c-b1ca-17aa33962a7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33f5c559-4652-4473-b117-044be7a1a50f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81beb923-299b-479b-ab7a-07e282a7f465",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d59df32-4f72-4633-a070-3d4558e12794"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1bdf519-6126-431d-a278-38f700ac1ae2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4f5a9ca-8104-4e1e-9810-4f9fcf90ca54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c2ae35c-0757-4bf4-8128-0f1d320617c8",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15bb1f28-4d03-45ac-b0b5-ee732fe92c86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "276f131e-00b1-44fa-b408-07ae343d2dac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "922412b0-51a2-42e0-acb3-4698c8c88e29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "151188b4-cdbc-4cfd-8caf-ddbfb4c778d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddd9110f-b6ee-44c4-9e85-aac6521094d7",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5bd240e-f1ec-4ffa-9c7c-f8e6fb9cd177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb6d6d77-d285-4705-9afa-fa1ad225cce2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0a38c4b-0755-4209-8185-2e65cffc0e3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07f9fde7-78b3-47c3-abe7-724cbb535f30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2ee0224-7451-40fb-b2ad-bb79c209697e",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bda2fb0-51bb-42ba-8943-282caec4cc53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f6afd2a-410e-4172-b26f-316da9240131"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba7440fa-abfa-4577-bcaa-05ab5c2ec5cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9178ea5-c61a-4690-9048-5a5f76236135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7ceb3cd-afdb-4800-9569-6895187a518e",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a322134f-8ffb-4520-8f41-f0781efb7a5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e106a25-b26d-463b-bb1b-bb5d72c62342"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e5436b9-f5c1-4509-9d4c-6736ed0c3b21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d293761-414d-452c-8d09-f2bf0f29fcb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5602cc6e-9d2f-4f1f-978d-f22fc0ecb00f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83e5caf7-446e-4931-8458-539a9d2efd23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59f76bd3-438d-4b8d-9d05-23a003be305b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c55e6b0a-3856-4746-bcc6-f657156f3af2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9964cae0-2d9c-4170-b150-f5787f131453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b79b0ac6-7568-42b2-9931-2d85147b06c3",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd5b36f4-6bd4-4446-a46d-d58c519f6dd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40ebca96-f2ef-4268-ad73-f6ad78be6493"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a25d60-2a4f-41f3-8368-094952b26097",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1951b0e0-cd3e-413a-805e-95656c461a1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbeb298d-7dcf-42fe-94e1-0b5765ff4c26",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a320137-8865-4703-bec9-bab913848377",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0c6f6bd-a1b7-4128-a490-275eced9d1a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3c0f2aa-3a87-46ea-937e-3f58bc418373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17bee92f-e2a0-45ac-a3be-a8880cc58869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f9a3cc1-0d75-4d10-b756-72d435aa4c1b",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "245d0ec3-e5b5-430a-801c-e34694e331bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dca81aa-2d64-4cfe-8ff6-ea171b937593"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef6a9fcb-fbe1-4212-9cfa-d60e9f01f806",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4b171ee-3b59-43df-9d9e-e368b406770a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd7b9d5e-3ae7-439f-8165-3b33c4b55ad6",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f367ab9f-6ddd-4c4f-b468-57f3ffaf2191",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04da2d44-ded8-44cd-8785-c235d9da5c1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3295bf2a-f08d-4afb-926b-e1f9d0c3729b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b4ce91f-e9b2-499a-9de7-1b546efe82ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee7db9e-b276-489a-a557-eeadda7a8836",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74993ae9-10db-4867-84fa-30e6b7702ca8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d8b77ae-71b3-4e6c-9945-6110e5fc8145"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0f9302d-aebd-47b7-9313-e53a146e38ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fef03e2d-434b-4f1e-ac7c-527c4bdd0116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c17400e-62f0-4dc7-9e14-f817e9505e38",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf06265-e5f6-42d7-bfcb-4534a0bb1b2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfb329f7-b900-4473-a30a-ef3facee492e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3622873-fd5f-47dd-b4ce-6c6fcb455535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9622b46b-a475-4925-972f-d4319c62d660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54890cb6-c566-4090-a519-1ea7d2133393",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab13ef8f-17de-43aa-9fd1-34f439c6449c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ffdeb90-263c-4fca-a237-888c38176d3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8d0ba67-35cd-4a19-8565-a8c3bd41afc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6298f19-01c6-4bca-85ef-bdc4314ed068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2efc97d7-1909-40ad-bc61-0130f6edba4f",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30308cae-5990-49de-93ec-72296e7156ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10a0baff-0078-4eda-8749-7947769de10f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1d8d45d-7733-4c35-a28e-0448b95d2913",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a426c80-1ee9-4499-9b91-35318e700009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6dbbe63-8096-4e07-b3c9-d2962f3af05b",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a0f2126-89a1-40d8-95a8-bf1719bdb7af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d130bb32-3075-43ce-97a3-4f15944bfd18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e520b626-f7f9-4d09-9e39-6b9338044be9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df7f8222-9428-47fd-a283-6cad1093a144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc3551d3-e7be-4727-b9ea-508adb79e30c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61bb92cc-8134-43c2-a631-7bd894efecd9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "150e0699-7857-4876-be6d-92e2fbf0af15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c9f9683-7c2e-4240-ab84-af8ad9f93967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "972c2b58-ffaf-4b92-a121-d4ed11fa07be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87fb885b-27ec-4f67-bb1a-b9a85db77d88",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0f6a6a5-203d-48d3-acbe-77511e9f6d20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e55234fd-e936-4e59-867f-b61f1de6fb93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d9489e9-e838-44a8-ae9c-6183d743b6c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a04b8092-8090-4f1c-bead-06a36242c4f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56b7f62e-65fe-469c-b556-1b8dab52cde7",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a870ceb-ef2d-4a06-9259-b6a437f86900",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffe71f3c-35a9-4a45-8143-9ca38799541e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af6b3c91-3b3d-426c-9a8b-799539c3821d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5383c6b8-9307-4a53-b77c-5fb8fd46ac65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa525b80-77b6-4bd6-9adc-bccd420b6b8b",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afb3ea0b-6d42-4489-b4e0-d1af021d27ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4b632f0-6182-4ed5-973b-73ab9b666d04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9bc8336-2a32-47dd-ba8e-c77845ea401d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ef09b2d-768d-4cfe-981d-170eae1dd086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff508386-2b3c-4721-bfdf-8b4225cac68d",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdafb129-7618-4c23-965b-98f4c229917b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0e2cccb-01fa-4b82-84bd-f63b0d57fc07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f13d26-266c-4d49-9f5d-6436f35703c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5631d9c-5279-45d1-b17d-ce013af5c937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb72617c-d020-4722-be7f-ab93a40540ed",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23bc9ef6-25e2-4309-baf2-7c56c0653f12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c766ede1-9988-4c3b-85c3-596c40eb10e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "379ead61-671d-4ed5-9c2a-531e9b0802fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a879e05-b672-4e6a-9f5c-ac733f0d6e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93e864c9-b8ac-49f2-895a-08f975d960f9",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80faa198-74d7-4834-8139-13990a67ba28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7d75660-9fe0-410d-b9df-09aa181483d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8ba5eba-d7de-477a-987d-0352ac37ecbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ab1d0c0-21fc-4fb9-8e8d-4428934004b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfa1146a-0d63-4df8-ab0c-451be0c6171f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb4f39d-50de-464c-9460-5ec3ece106ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c90b19f-0855-4e71-8add-a0253303d405"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea3c7eb3-296e-4420-bd7e-b421a5db012a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47c55f59-fbf9-42cf-b713-7d78ca42524d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "341f3aa8-a18e-4249-afe7-9a4b5a76f6f0",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce41d872-4592-4abb-a94a-7b1908f7f360",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d853b2f-797f-484a-960a-224032f2e986"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b01e3c-e5b4-482c-ab40-e185998e6b81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "144b97a2-e2c6-4889-85af-a7a6ce7fd525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68b45686-5afd-4586-9418-6591c42e0293",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fd6d16d-e123-4074-a4d4-caba1c3494f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "277aa8a6-5636-4402-89cb-e6a0f7b2df4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4884b00f-58d4-4d73-a571-8a160f4c0350",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13e9d686-0d71-446e-aff4-7567fe122557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8b6170f-1403-4c99-b590-83b37ef7f0cc",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b175cd06-0925-4e66-907e-6255bb00cbd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec7189aa-8e41-4631-b85c-a9c2c1769556"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01758aa5-ffc9-469c-9db1-f3cbfe54f63d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e4a1a4b-0c56-421e-89f0-cff0a26630a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fec808b8-7256-4e12-ad30-598f4c9ece29",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20bca714-49f6-426c-a785-8ccef846fea5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b63f181d-7833-447b-a4c8-060ae0b65f52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "456231b3-aefc-4350-a79b-3f24b4872e5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03a60785-0a5c-42e0-9ae0-47aa82c58377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c3c6c5b-7564-4171-b92e-c55fdc979bd3",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6508e31b-53a3-44e9-9142-71b8d26438e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44e7631f-c99d-42ad-9afd-63ad04b5bdc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33bee66c-1f5a-42ea-8e59-db2b94a79ffd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "634896b4-c193-40ca-82b4-08b2c8f84205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59940050-8489-4ad4-96e5-25e5685a3dfb",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9f56d49-e876-4f90-a853-4146f82502df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e1e37bf-aa09-40f4-8fd5-3c0a98f42749"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e3c31d-c299-4978-9a5f-a8e7d403e0f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8ea1727-a3fb-4ffa-86d7-91d0e3df031f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37e3771b-63cd-4863-b3c7-a8aca0c10dbc",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfbab9b9-1528-4091-9fbb-e942df277e8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b9fd7b1-304d-464c-80be-296ecffcb19b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd6d3580-23d8-4b2d-9c1a-5beb56a9545a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f27db845-0d4d-4af0-9b0d-d2697e33be68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92f2f82c-075a-4776-b2fc-7998c94795db",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43517f0e-5bb6-4d52-a4fd-ce0cc08d4d45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eebaeda-9437-4955-bd3e-b8a2836408be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7b02c49-bc9d-4fce-a27d-5134ce42dc07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77792b04-2c76-4d30-8567-000588705c11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5af4a328-0c81-49c0-9f0f-732042f70bfe",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dadb714f-659d-4b26-98c3-cea6d1cb2344",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78bf2f42-c986-4f39-ae2b-2241a6d8b395"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bf8a417-0579-47a6-824a-7c744198584b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51d31465-858e-4afb-922e-63a328e91a13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ff54ab-7474-4cc8-85ca-482d557f5ed8",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9d4fe28-b852-4106-9ef5-3981629e43b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9419e1e1-e2b4-410e-8ca5-3324a16f77c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c87f7fe-a0f5-4816-844f-be6fe2da3e26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32532a68-a29a-449a-9008-1283f3d5cc34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a92a6c1-09be-4ab3-8d50-1d3f06e466ac",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75f495c4-db2b-45a7-8911-ce7d9eebfc91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6e107db-84ad-4646-9504-7ca7022cea0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "947ea96d-1258-4e43-99b7-5ebdaf6b4d45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec87b8fa-cae5-4fd5-b88f-4783929e4969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71ea9870-9614-4c09-ba15-d98f2f7c5e6e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21fb274c-935b-45ec-a41f-704f803f439c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4b86ef6-f66d-4ce6-8cff-46234b4f55c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b5e9bde-f480-4646-9087-4b1ae919f791",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42081d95-ee83-48fe-b587-d74431753a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c21deb95-0735-474d-a89e-cdff4be40bf5",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b919fde0-1321-439b-82b7-d5b77df12256",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dcca659-d09c-429a-81d4-7e0d9bd128ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47fa49b2-d5ad-401c-9aa7-008154885627",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b5fcdde-283a-4d44-af8f-86090ae75ae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edeca844-132a-41a8-8847-c6ab0e45040e",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dff0c836-bbf8-4385-b25b-d5da957b5350",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f6c6a41-9555-4fd3-8ec9-73fe570f1239"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b402b2b-0102-4032-8adf-a99c24e8d16c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6205e897-91c3-4b96-af83-57ffc3b30181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5400758-4ed5-4422-b355-0c8498f1925a",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b57e135-0ec9-4fcc-8a2e-82793dd3429b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acace3ce-5b73-4016-be0b-a663d0675a84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6970d01-c35d-4cf5-8416-a73d4177eede",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc09bdbc-b7ca-48b4-b570-fb5b9ac91000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea2e1ec3-52e0-4b29-87ee-5320431a7bdb",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea24f9ca-182c-497e-8b5a-2872eefc3b8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f245032-a9cd-4aa5-92b0-9370331a6b87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed3ef80f-1d71-4801-a3aa-563805108689",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38d36c88-8a6d-4833-888a-d7c0aacedbb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff0d1e64-adb3-4672-83ab-56549290c607",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea84b0e-200f-4fc3-8218-fc4e556eddbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b159669c-7653-448d-8e56-bdb3d72bef90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "164a3829-2d0d-4d11-93af-6afb803016ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dd48dc8-f46c-4a71-826b-f14d851f6723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a44f9791-ef7b-43fd-90a9-28bdf4a29bbb",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee784306-df1a-4a7a-9484-e4cef23a0e6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42a90b1a-9727-434b-a8c4-50cef95f6db7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89aaccc2-6af1-4dcc-b052-ebc92bd75a62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f95ccd38-67b7-487d-9793-67b0047e4597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6c65091-839b-4fe9-81fa-f70f6e940b7f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c031c3-5373-4a0a-9018-5eebf1a9d5c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e5f7bfc-a13d-44e1-b8b6-4350fefa73ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdeea1df-7f94-4eec-b43d-cd53607269bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a18c3c4-3df4-4ed6-a770-62962c89eed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95e13665-c9ef-4fb6-b276-1ff230145292",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1ec4782-e227-4dff-991e-a1066c7727bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e2aeafb-4b95-46f7-a15e-f9027a1a67cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4531b570-001b-41b8-b4bd-9bb1a9e0fad8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02bb0270-6a09-4172-bcd9-fbc26048ee2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b70267d0-a8c2-4eee-9c3b-2ba3fa85a7c2",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3acdbf0-6518-4bc8-9aa3-0a78ea963cf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c81a75b1-d6a6-49d4-a1ea-0ae9492a6803"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1464cd5-40dd-495d-bb6f-8495ca2441c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3c4fac5-79b2-472c-9b2b-7250e87ab7d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "837267b0-b69f-479d-8217-513730777070",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a11db4-7909-434c-aee5-18935daa15c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f5f09fc-eb3b-489a-936b-b75070b02d5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce7dcc87-4be4-494b-8a96-4b0d5d49f89a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c72f1f07-8e6b-4af0-9f03-d016e4b542ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a0c5c4-dc3e-42f2-ab78-bb94e1a3fb6e",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96ef1090-e308-44b1-9dbb-ff45e55a8c6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f9ab6f2-ca6a-41f7-bf96-dcd409ad6297"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aebdb61b-ec33-4542-b3df-79624819784e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0268faae-e136-41f9-8f7f-dac445517a6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc58a2b-96ff-4021-aa58-613b87ae7543",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9a56ba0-f61e-4289-bfa3-eb2f363331d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "899a1d51-769c-4d62-9e88-46e7855de662"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed58c18d-ef65-40d0-99d6-7ef7117ddf69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "965a5e80-0002-495f-953e-1d5b51587542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a261828-4250-4d64-8c17-de6e7892f157",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a11b41d3-c95e-4c1d-b193-398d8cdc912c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a788474d-f207-49d9-a598-be7d3da08388"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23c99d62-cf69-47ce-ba84-beed001615bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82310008-f77c-482c-86d3-17b27d9c0ec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f45be2dc-2f44-451d-95e6-d807b3255998",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dbd4246-dcb9-47ed-8465-06285baf92f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c935206-fed8-4414-beb6-bbb48cc06a90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90fa6ee1-1e84-42f2-a8b5-8b02fbfe7e79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccb0cb9e-4b64-4a61-8aaf-84c66c724b31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01c0998a-ada8-49ec-bfe0-bbc3618191dc",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78bd32b6-377d-4cd7-8361-06ed34780697",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1be5f2e7-564f-40ee-a965-ceecb3373d73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c57e7bf-b151-4a1a-ae5d-73e77040849d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4399cc61-b92e-40ab-b900-ac8dd1fd8f1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7fc9c3b-7984-4ffb-8c42-f952c9378818",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18b2e272-1cbb-40c3-94ac-e5f7d458f20e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c7fd4bb-f1c3-4d09-9343-a1dd66e3c3c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "621a9d0d-14e2-46f0-b81f-5a9f7329a011",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "896bd8da-cab4-48e0-a043-20cac9f1c4e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5ca319b-e0f1-4bb1-9777-d04e60fc0c59",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a9dbe12-6143-4498-87f2-963b04fab8b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7471490-2b1e-4ccf-8917-8a1a88931aad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa336a98-55e7-462f-a097-7d70ec7c7c6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e854d91-bac7-4ae3-abf0-f3ffc7513efa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d3ee78-3f21-444f-a0ff-fef9ced562f4",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bd7fc50-2575-46b4-aaed-9adb6073fb34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef97f1a2-301d-46dc-9a14-530280167571"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "500e030c-edea-4bbd-bfa8-3eabd663babc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "100d7028-74b0-42b1-bbb7-7cedad19392d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f49fe32-804f-42a5-8df9-37d5d1a3f71b",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f796cbee-ddbe-4e3d-9b7b-e181e9690f2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89190297-102f-4ac9-b11b-8dfa640bbebe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b55afe70-225f-4704-a183-eff33e625880",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "755eade7-bbee-4514-9b5f-21896a3e3f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5df2ec49-2bc9-4638-8826-0044fa896781",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6f23e80-40a2-4ac4-8788-3f22ac8f97f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62ad00ff-0a52-434b-b222-41f501e14d37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a98ab7-81ae-4f09-a9ee-b1aa19510b97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cfe455a-0065-4d50-bfbd-32e7fcbaf06d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aec5e9de-f979-43bf-b098-493006c4d5e7",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d42dd6a2-119e-4ad6-b743-600166a8a335",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2453728-b82e-4ab9-a6c3-6d19d7b5a2d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f8e1d46-8423-4833-baf6-e7bc10046053",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06859a69-fd2d-4fc6-9b4b-b6b8ad9b4eef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd55d197-3fa1-427e-9e8b-38ccb443a703",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "129e4926-75bc-446d-ac7c-f4112eba98a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51bf7cf7-6ef0-43e9-9f2a-5ead7d7817f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eaa6682-d887-43be-a1e1-8986ec7b71a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "997b67ba-a123-424e-ac2c-109f5798b958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f14bbedd-8341-43ae-b565-2495d68e39cf",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5d6b825-1a68-4bc5-b3c6-52f00ea13a4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31a4aa9e-782a-4f93-a2ac-111820651bf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa124c0d-d9a4-45d6-b73c-ef57ee6971d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67fcc28f-f93c-43ce-a6f3-e0e1ecb7e8d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "181ae357-f234-4b5f-87eb-7e4e0275e0eb",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61904b75-fe7c-481d-8d46-634b1c9b4d59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "866b0b3b-80d2-4c97-8d16-522261a8851a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8defa130-b270-437e-8962-67da21e2243e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "480d9b99-dcd6-43ab-980b-bb31675b979e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9f73ff9-598c-44d2-944a-a855d066f3d5",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b3842a3-dd2b-4c9b-97cf-396f69e8adff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a13fa74a-2bb1-45a8-84b6-e62694de37a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b02e53a-59fb-48d3-817c-2b27355365da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4662d45-17f0-42c3-97be-6afacf91ac9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "315f763d-2f01-44d5-919d-11742ca25925",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86d9d578-3b38-4167-af2b-e7fc80c254f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f81e13c-9df7-47ee-b70c-2fdc43e69a3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c582443d-e5b9-4e82-9a89-d7628b55740d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51d1ec3c-b6de-4754-af93-c6cc1e4c56ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b38a479f-1be9-468b-a72d-1528885aa718",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1a5d033-7df3-4224-9816-963ef2f79668",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d35986d-8edf-4f4d-8564-b2811dbd431a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40742974-1cee-4fb7-ac4e-776b6eb6eb6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d992e268-78ae-41b2-b859-573eeba6f3c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "315c9e0f-22d1-4af8-95ea-60c844b390bd",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d27e909c-930e-4ff5-bed4-35f8a86dcc6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30a0a45f-db90-41b8-ab04-368443b4720b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27c2b9b0-59bf-440f-827d-566054145f61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c0a4948-b116-4805-9c68-490a88e43bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "516debc2-31bf-499e-bdd6-f0c6dd74aab2",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "975b8c7c-df10-42d5-b702-8d9ba2e871d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1076fd0-8c4b-4af4-a82a-f119294d8805"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c879a78a-f92f-456c-bd5e-f74691cfee60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c84af9f-f73c-4563-b046-b3b463870235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa8d2e2d-8ea8-4dcc-b35b-59b6c76f1e5e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f8d5850-3fa5-41bb-88f6-0a54f7037981",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d1adb13-35ce-4491-abdb-d91f948ddffe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "addc02b2-f371-486b-80d9-27f850946920",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "065df7bf-0568-4a2b-a5f5-254dbae220cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "967c4150-9d44-4675-8512-6a8a76cfb52a",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "047fcfd7-497f-48da-9914-dd38c5caebf0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0f35a3e-0b61-46f3-95bc-8ee973da4e28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "487705bc-87c3-42fe-b985-eaae32e02ae4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "706607b6-7fcd-4fdb-bf90-5e82369503ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ffadaf0-cea1-4a14-8cc4-a7122f792ca5",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b29918df-d17d-4817-ae7c-74b6e205dfea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c5312b1-3104-4413-a742-fdbaaf43ac4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6884d74-fbdf-402f-b31c-8ff0dedc2ebe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ad5d860-1277-48b6-9862-cb2cf73f5e08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0fcee1a-e32f-4d34-bfc3-e2626e525567",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f432d5d-b68f-4fb2-81dc-4ab0799ee34b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6514d08-1c44-4e71-9edc-8548fb9f2428"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba9e86cb-fd59-4f95-98e2-0959456a262b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6efccd12-898a-4199-bd7f-7e94b5bdda0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98542b60-3685-42b2-b178-ae20ba89fdc7",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "151dd183-d777-4576-b833-33b4e5570d4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41c1f619-e6d5-4e5b-864a-4cf26069bddd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e482b6b5-9b58-46f8-8d65-a2903dd25a05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dd6175a-5b9f-47ba-9dbd-34308993b661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d9a683e-7cc5-4fa5-bdbb-5c07a53aa010",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34651a38-6aeb-448c-9b52-b6078206869e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0aa1477-8110-4242-bea8-1b59a0a171fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26556f1e-7819-4d9f-947f-43b6922709c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2edacbb0-022b-4418-a220-c9eca5a624d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cca99bb-b575-4f48-bb64-3e0f053f4ef2",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d921a897-097b-481c-9881-bb0c1511897f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de7e92b5-b433-4f95-8c3a-641d5852f367"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb5912be-4114-4456-b139-488bdd9d01a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18b9c454-2f84-4065-bf14-9c2af04f0860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b1caa20-4af5-4882-83e6-bcebac38b80c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62d6f240-9f3d-4ede-88bc-11a554f3f3cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48090317-9780-46a1-b066-076658f10207"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37724108-24d1-44fc-9ade-6094a2238358",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8743c8f-d967-47fa-9dd4-35944e61b2d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da69dfd3-0ae1-490b-a961-68fa8de7a7f2",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ef35d64-e7ac-474a-8770-e42d7d1cdecb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "103842b7-25c5-4a1b-a62f-19163d3715ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e241d3c5-4ea2-48e7-96cc-32f0f65b409a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c057136-fe5b-49d0-be55-592b0640694a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d150d575-97e0-45e3-a6ac-4da2c722ac22",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "931e3ee0-2f6a-4f8a-850c-645f7a4a33d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5069a2be-c72c-47e0-bea8-3c9a40cf6f9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2def84e6-4e77-4684-842b-189e08cfa867",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "916830d3-967c-4fb5-a2a9-75385cda7c28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4c573cb-1fa2-4204-82b4-bf5d9237a54c",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1e9a72e-806e-47e8-971f-df592ca278ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f203a87f-040b-4b79-9cb8-360fd952df78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00a3ca8f-67ad-4399-910b-4f6c8a1c3578",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe26d4b8-c1ba-4b30-8d14-423256917291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eba0d956-2083-46bb-986e-c5beb8563b54",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "564c5de2-f7ef-4af1-9ac3-be180840e492",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c62bac12-c2b1-4162-a77b-ed24f0bc74ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "feeb282d-4785-4d6a-aa91-48f1a10c68be",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35e29e1d-f408-4332-8b49-456ef5b2fa3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c19ef37-5f6a-417d-94e1-486d5d159d89",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d7f757f-5230-4677-970e-5dab2f04dfbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "655b9d80-f803-4fec-806e-e4e8b935a859"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c4cf1a-9802-4421-9580-8bf40358341e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b41cbdc4-c13c-4399-bdbb-6a81e15bde16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a672fa6-c7c2-4bd5-815a-e998865dabad",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7532eb29-1dbb-450b-a5d8-c7ca5fc6cbf7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a442885-5d7e-4612-9280-c04c1e22dff8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "359b8566-8040-4b27-a325-d2f8938f19aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5e46e74-7254-4fcc-88fb-606f39a63c85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "214f9f8f-5648-47b2-a207-cf050e0954cf",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "890c4e6c-7ab0-4985-a8e6-ef1f6ecc7988",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06f3a309-ff40-4c48-9234-04847e58d971"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "810d7b0f-7eca-49b0-87d7-5b0b0e3fec0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44a70c88-ea50-4e9c-a634-aecfc2bf18e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58da9e01-45ab-4d4d-a03b-4c09b80492bf",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c1d4688-1171-4051-b28e-f993f64aa345",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32160f6d-8124-4d26-a704-0a6423eb7e90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "221c4508-fea2-43c5-a9d1-683291a24df7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e446104-2452-47c7-af68-1bf025e4c2ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38a6a534-a95c-4148-8230-97e72c2a3a19",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be0aad4-175c-4f64-9445-e995b0db120a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da9321db-e293-4fa4-9b4c-906dc98b1016"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22754973-6464-40e9-8af5-1d5bd3878c33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "740499f7-bf7d-4e83-8b07-9bc56171e692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aa187f9-47ec-4366-89c9-722c2ae9ee0a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9524fb2-0bea-470b-a83a-ba7d7274c18d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15964f3d-4c0c-4bae-9697-e23d49a95403"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "718141ab-0d11-47f0-8eec-fef31d787a44",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71714c2b-4488-445f-bd7e-24025c27fc7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba007044-c0d1-44bf-b906-1aeb78657d5f",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dbde21b-970a-4e2f-aaa9-f4b019182c2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d32f8e4-6eed-4db0-8766-0912cf3ad796"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "272724b1-cfca-4136-9868-c8514b78b1dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0372bc68-948a-49c7-afbf-38884c32c258"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe4c4f4c-76ea-4a99-a004-004e259d1e4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff3a7d05-e799-40fe-aee1-01d8adb29f4c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b3e67d83-587a-4b90-b323-22c6bd5bc502",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5495b7e9-c068-43fd-8433-3f0b0541dd91"
                    }
                  }
                ]
              },
              {
                "id": "a04524c1-3a5e-4a8f-a4a7-b866f0cfcc45",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "061fff8d-8773-423d-baaa-4b9f05019add",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb6b98bc-ff33-4675-b2b8-316b1eec25d2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "e7ef4390-2f53-4581-8b43-c40353f41131"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b289531-f5cf-4282-aec2-ec03a617a2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "77907e7a-6a7a-413b-b35d-38f0fbb24a50"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0950e5e8-653a-4e29-9413-0b6eefe5379a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1872f76-6369-412d-a22b-5a73c88d93f5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6e2afabf-0d65-4e29-ba7e-5c73e2e90f99",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d2b4c2c4-b0be-406c-b3ae-47b9c924b166"
                    }
                  }
                ]
              },
              {
                "id": "9ce42f1f-b665-4f1a-8bd3-bdff81939a87",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "edf50467-a4fc-4933-ad6f-715745485c9d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e720174c-99a1-4a88-8f83-235c42c1fb48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "3f1386a6-aed1-4a6d-9b48-ae1f43ea19af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2ac337f-cbba-447c-a2a1-fd3c80a86a0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10586769-a2bb-480e-8829-8a3f7c4e0142"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "08d65740-c314-4467-8fef-86b8fa133f6b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "032e77d8-a1c6-4300-ab53-38f49e06f219",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9e3402a9-02a3-43bc-8088-d3a526ad650f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3c429928-657e-4de1-9ab9-8162a98a6c31"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dc7ff764-ac87-45ea-bf07-f80e0d228be2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa300c5d-534c-446e-b904-8362354377ad"
                    }
                  }
                ]
              },
              {
                "id": "5091e5ab-2e3c-4c00-a771-82fb67d4a0b1",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a2e95395-14fa-4eeb-9ae6-e8aad8501358",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "11a29a47-8d09-4f96-960a-8c6313731515"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf9a574a-581d-4455-af36-4f63baedced0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "789ace8d-aeef-462a-b31f-ffb6f586e1b8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c2dde828-d551-41a9-875d-3ebbc77f393d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "bdd7907d-e4f3-4b10-ba51-08f434b22a96"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1734d254-6b40-464e-bea9-a6565848c17a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c4728ca8-222f-4297-9c42-acfbcde87569"
            }
          }
        ]
      },
      {
        "id": "e8e0734b-5fcc-4f53-ab9b-e0835941fa7e",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "7e9fba63-a830-400c-91dd-e8a1f48eeca7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9d752f5f-80bd-4f6a-8b87-c37e7c49869a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c8556466-12a2-46d2-b2fb-2ff5e9d0050f",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae056870-91cf-4161-a317-bcba70a1f775",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "87c47db7-b738-4ee2-a946-2ad77558a424"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83cf475c-ab62-48a0-95c7-0e7df19f6580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8f436510-3d08-4436-aa1b-4717bed31f47"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2892cd4f-5337-48e9-95d6-60166721caea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dd151223-cb80-4673-83c3-c3c66759f0ee"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "69281256-3e9b-4f24-9af9-1f1599efec5a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2eb8cb46-c395-4e37-82c5-a198803fbdac"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4aae1d5f-fd15-4a2d-ad42-f02e8127ad65",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d11535ea-1259-422a-83ef-1b93b3080127"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4248fe77-859c-4742-80b0-fa1b408bb607",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e39c77a6-9316-4a0f-90ea-65e483f64b7d"
            }
          }
        ]
      },
      {
        "id": "674eb43b-7baa-49e9-ac33-2610dbd338e8",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d5e10275-f871-460f-8a66-25163ef4eaed",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f039d538-dc2e-4479-9521-554911408434",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2162f704-83e2-416d-a797-32995a2bfb1e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a49138c-2ce0-4407-b571-1ee08141824d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "697304b1-ae67-4126-8532-5848f2bd304c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a0e5035-4f03-438a-a7bb-453039b58dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "998c0d47-0d3a-4e90-8836-6f346f67f7b7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "57e73d50-f997-4176-b854-df18ea69919b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d055c2bc-dfea-4cc0-a166-58cbec7b66df"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "32dbcefb-73b7-4ca8-8fb9-0087cd2253c8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d07dae25-57e1-4841-9ec8-02b8f57d9ed2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "531561b0-cd78-4232-a513-a0755129f79c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4e2934f2-804c-49fe-b30f-1dfa5f034999"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "37d1f642-6063-42c9-aad2-734fdadcba7e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "80a86fe9-9df3-49ad-b153-1b0e10eb7f56"
            }
          }
        ]
      },
      {
        "id": "075534b8-bb5c-49c9-b212-faea25d685e2",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "ac64b0ee-da95-4a5e-9104-3dfade44e37b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4f6f4f1c-01f0-4770-a3b8-4ee37e2b09a6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7f2252f4-67d6-4f2f-85a0-1265b44172ef",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ca90e78-1845-489d-ad07-1150979abfd9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f9f5aea0-35b1-40aa-b725-5e1d10cb41cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e75de1b8-ef0e-4ade-acb5-6f7220b18467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "98a59fe5-661c-4bce-af73-5739521cde70"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1bc23711-7fa1-4557-ac49-fa0ffaecba4a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "01e9127b-18d7-4dda-927a-c354b4211a48"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b5a7740-2174-44f7-bd00-372dc9f09bc0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "792094f4-9b25-4145-a6e8-0d33ed35ea96"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b18944f-7c52-4e10-867c-48612cfbf62f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f23fb5e7-7cc6-4fe8-9906-f7e4477a681b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9bba6026-356f-494d-8809-fb1e7cd83942",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8ff17a99-5944-4a66-8721-cf98280c42c8"
            }
          }
        ]
      },
      {
        "id": "b6bc2edd-1bfd-4800-8361-f2d5770a813f",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "440ffacd-44d3-437e-8475-a9d442c2a0fd",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "707a721a-e48a-42c8-832e-ebfe32cd09f5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "64e3363b-847f-4f9a-a3a5-4fe9dab18f10",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5791c051-1046-4db2-8faa-4f16237b816a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "34356dd8-c9e9-4916-87f4-dc4d2c3a606a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 59.15789473684208,
      "responseMin": 7,
      "responseMax": 586,
      "responseSd": 66.78743170810176,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1703118927991,
      "completed": 1703118954297
    },
    "executions": [
      {
        "id": "14c23fd8-61ab-4091-a320-8a587080dd11",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "da137281-e239-4a52-8fc4-46a2a7054b39",
          "httpRequestId": "e7e0aea9-9be4-4321-b3f1-b9377836abe8"
        },
        "item": {
          "id": "14c23fd8-61ab-4091-a320-8a587080dd11",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "9b75ef3d-3dd5-4bc2-a155-1ae6f7f13e06",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 0
        }
      },
      {
        "id": "f2c636d0-6ba4-4e60-9164-4796d9196d26",
        "cursor": {
          "ref": "89a31314-294e-480e-8bbe-ae7b9418d809",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "fbc9bac2-aa83-4a3d-860e-a1559d946b9b"
        },
        "item": {
          "id": "f2c636d0-6ba4-4e60-9164-4796d9196d26",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ff9c8478-9fc8-4666-8068-e3c2258b5ed1",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "8f5efaee-f4dc-49b5-8570-cdcff8fe081f",
        "cursor": {
          "ref": "bf9af8bb-6bd4-410b-83c8-c575ef6e9d37",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "fd6b1722-5c5f-431a-8648-19c2a4c6eb4c"
        },
        "item": {
          "id": "8f5efaee-f4dc-49b5-8570-cdcff8fe081f",
          "name": "did_json"
        },
        "response": {
          "id": "2426eb24-9355-4040-96fd-368bf0c3d7d7",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a95b8a82-c20d-4ab7-9a2e-3dc6643bd431",
        "cursor": {
          "ref": "95b87cbf-1344-4f55-b6f4-ac3f76cd5572",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "fa3d1f0c-ac7c-49f6-acac-f49d72d02797"
        },
        "item": {
          "id": "a95b8a82-c20d-4ab7-9a2e-3dc6643bd431",
          "name": "did:invalid"
        },
        "response": {
          "id": "72d80c71-ed85-4030-a4bb-68a2b9300eff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a95b8a82-c20d-4ab7-9a2e-3dc6643bd431",
        "cursor": {
          "ref": "95b87cbf-1344-4f55-b6f4-ac3f76cd5572",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "fa3d1f0c-ac7c-49f6-acac-f49d72d02797"
        },
        "item": {
          "id": "a95b8a82-c20d-4ab7-9a2e-3dc6643bd431",
          "name": "did:invalid"
        },
        "response": {
          "id": "72d80c71-ed85-4030-a4bb-68a2b9300eff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adc82cc0-dbcb-47d6-a196-c4d23925313b",
        "cursor": {
          "ref": "188f8f2f-e16b-48f8-81b7-a0122c2e9d3b",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "017b45dd-be21-44b1-8faa-0630250df85b"
        },
        "item": {
          "id": "adc82cc0-dbcb-47d6-a196-c4d23925313b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "18093d37-b2ae-465d-9792-c8218243fa27",
          "status": "Not Found",
          "code": 404,
          "responseTime": 97,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2305c46f-37eb-48de-b080-20cb43264ac7",
        "cursor": {
          "ref": "22950bce-2bfd-4b68-8689-14c4a950d2d8",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "016a07ab-dd7e-47f2-9d99-1bed0d9e6658"
        },
        "item": {
          "id": "2305c46f-37eb-48de-b080-20cb43264ac7",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "31a606e1-257a-47b2-87f5-04194ec6e983",
          "status": "Not Found",
          "code": 404,
          "responseTime": 44,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea68cb19-f808-4ab9-ad03-7950d53dfa7e",
        "cursor": {
          "ref": "f3399161-cf4d-4f0b-83bb-bf1b0c53f48c",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c06fcf2c-94bc-4a3e-839b-4ec9d9ec8e16"
        },
        "item": {
          "id": "ea68cb19-f808-4ab9-ad03-7950d53dfa7e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "c3352f83-6b56-4026-9081-1c277215ec89",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a7018e9-43a8-47c1-831e-1d270ee0aa31",
        "cursor": {
          "ref": "d011df47-467c-45c6-a036-792f6d08b06d",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4133fc13-ae32-4433-960e-b94ab4cf9e71"
        },
        "item": {
          "id": "6a7018e9-43a8-47c1-831e-1d270ee0aa31",
          "name": "identifiers"
        },
        "response": {
          "id": "8d945095-58ab-4738-8756-b54b9b89909a",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4912007-453c-4045-8fcd-721da0c1b741",
        "cursor": {
          "ref": "8073752b-6902-46dd-94df-494d0afb2f2f",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6cf6082b-83d8-4cef-9bf2-4b8111bfa2a3"
        },
        "item": {
          "id": "a4912007-453c-4045-8fcd-721da0c1b741",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e7193dbb-5eb3-47ae-b41e-bb49f2599f18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "545fac07-cd85-445c-b809-e77a19ffd078",
        "cursor": {
          "ref": "8c0830f0-7f9c-4135-bd7f-8abe497ef914",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6b20cc74-6785-43a1-81da-28c1b18c26b5"
        },
        "item": {
          "id": "545fac07-cd85-445c-b809-e77a19ffd078",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "839b7b19-217a-47ff-8e92-16147d2197c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9d3613e-6841-4cd1-953b-9c22759ecc35",
        "cursor": {
          "ref": "480005c0-8060-47bb-933c-0d47e7f73360",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b545d488-143e-4281-9af9-289d4a2dd9fb"
        },
        "item": {
          "id": "a9d3613e-6841-4cd1-953b-9c22759ecc35",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "6dda00e0-5f9c-468a-b92a-a394effac850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b07d4a9e-3d60-4b4f-879f-14dec63c2c99",
        "cursor": {
          "ref": "3a360d0d-e755-4f55-a35d-2ebb8972bf26",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "898d9d8e-088b-4bd6-8cc3-cdb27ec22b10"
        },
        "item": {
          "id": "b07d4a9e-3d60-4b4f-879f-14dec63c2c99",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "589dcd99-9056-444e-a097-9161f246e312",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25d873c9-802e-4777-8266-0db7f8f21203",
        "cursor": {
          "ref": "7abe8d77-64ea-4ee5-a7b7-43f75f1b6cd6",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "384e472e-b144-492d-af78-de01d42a4bf3"
        },
        "item": {
          "id": "25d873c9-802e-4777-8266-0db7f8f21203",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f3017b46-e0ea-4182-8567-b37170b04bc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "796a6f0b-d85a-49ec-ae92-1c0d79e1ecfd",
        "cursor": {
          "ref": "cbbcc271-1167-439f-9603-8a157c461d6c",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "80f174ce-cd3e-43fc-9597-461076464021"
        },
        "item": {
          "id": "796a6f0b-d85a-49ec-ae92-1c0d79e1ecfd",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "d102ea0b-2885-4b36-bc68-cb6e271167dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "298f0512-d691-4120-94db-c181c6c5adbd",
        "cursor": {
          "ref": "c45af666-4423-4b2b-9381-374a8fe3f580",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "0b65e01e-4018-4d2f-9270-3b177863e867"
        },
        "item": {
          "id": "298f0512-d691-4120-94db-c181c6c5adbd",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "1a65999b-884e-4479-9801-8759e7040743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d59ab5b5-2347-454a-bb47-623d105a090f",
        "cursor": {
          "ref": "efad4b64-c986-4bcb-978f-ee4973dd9814",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "531e0d83-5e78-42ac-a367-41ef041bd693"
        },
        "item": {
          "id": "d59ab5b5-2347-454a-bb47-623d105a090f",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "6eab740d-2132-4602-89e9-3a7d5342935b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc0821af-2d73-407a-8fdb-2ffe53f85928",
        "cursor": {
          "ref": "febf786d-a8d6-4696-9fd2-589001dd2d16",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "32b8ab37-3698-406b-aa06-4a05af1fccf2"
        },
        "item": {
          "id": "cc0821af-2d73-407a-8fdb-2ffe53f85928",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "2b756b96-2abc-4470-80ad-62ccad7e49ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d44a5bc-d8ec-4173-a6ca-fd600c860f81",
        "cursor": {
          "ref": "c9e56fb8-5d34-4bde-974d-d6c8fc47d4ae",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "2c864230-5eaa-4bb7-ac1d-0f5081a4b44e"
        },
        "item": {
          "id": "7d44a5bc-d8ec-4173-a6ca-fd600c860f81",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "80dafed8-f0d9-423f-99ea-02b5544ce200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1d2858d-9e26-41b1-8902-22fe480cfcc1",
        "cursor": {
          "ref": "02969097-73c5-4820-a44e-44052d54efd3",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "41383845-86fa-494a-a65f-53c765ec0a7d"
        },
        "item": {
          "id": "a1d2858d-9e26-41b1-8902-22fe480cfcc1",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "51c5670f-4cc8-4838-a26d-f228c9e3400b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f4a2933-493b-4ff2-9473-c8a8aceed03e",
        "cursor": {
          "ref": "0e394f44-1823-41da-aed4-009339d4fd2b",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "1422ab79-0af2-4cc3-8688-9059fdad2f9f"
        },
        "item": {
          "id": "4f4a2933-493b-4ff2-9473-c8a8aceed03e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f5f48951-6ea3-4f96-93c3-2ba1aec07c2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c9a9dd5-29ca-4321-a92d-3bd0e8b2a6d2",
        "cursor": {
          "ref": "74ba0601-d6e4-4245-a0da-c20743d6d79c",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "782edb03-178c-4cad-8154-c05487ead3f0"
        },
        "item": {
          "id": "6c9a9dd5-29ca-4321-a92d-3bd0e8b2a6d2",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "9f0bc6dd-adb8-46f8-b473-a21f62ee6869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9a4a34d-88e4-483e-886a-2a4b8a641d1d",
        "cursor": {
          "ref": "8b97d415-368e-420a-8ee2-c9d84b0e9334",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "57e61068-a7e8-4262-b493-072acc07e4d0"
        },
        "item": {
          "id": "a9a4a34d-88e4-483e-886a-2a4b8a641d1d",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "4ad361ab-5691-4695-afe0-42f1fea38305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ce8cf63-9a18-4565-b4dc-856c903141b0",
        "cursor": {
          "ref": "a35883e4-99f2-40eb-823b-7858c2faf88f",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a95bfbb2-c7ec-4e32-b1b1-11216edfbd81"
        },
        "item": {
          "id": "4ce8cf63-9a18-4565-b4dc-856c903141b0",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "aeb7131c-7ce6-42e0-bcb6-6bdaf51e1c64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fb9cee5-5b68-4140-9a22-af1f5fad468d",
        "cursor": {
          "ref": "6cd4e6f9-3e10-4f2d-8835-6e65aa22054f",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "38ee8f55-f7f6-4cb8-b7d8-93e9d07e90ae"
        },
        "item": {
          "id": "7fb9cee5-5b68-4140-9a22-af1f5fad468d",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "9f9d2f7f-49e7-4f99-8b4f-cc95054b137c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4431ddf-ce19-4c40-91f5-e85d744bfc66",
        "cursor": {
          "ref": "fa624ca8-a898-4bb1-ae05-b1bb8c3c93ed",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8c9a21d5-b423-4e0f-a31f-e571dfe86496"
        },
        "item": {
          "id": "c4431ddf-ce19-4c40-91f5-e85d744bfc66",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "702c7a14-6075-4520-a8cd-258ed8dc9321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8818d7b8-4184-4110-aca8-196c076b5f6e",
        "cursor": {
          "ref": "1fd2d500-7757-4161-88fe-f6cb66029277",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "235f5792-11bf-48f5-a2d2-a354f10372cc"
        },
        "item": {
          "id": "8818d7b8-4184-4110-aca8-196c076b5f6e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "0cc520bd-4759-4c8e-9184-95cf7ab5a8a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cf4dace-e728-449b-a53f-c37552e1b7a0",
        "cursor": {
          "ref": "ec6ea70b-1d31-4c62-8236-bc4c45375c9c",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "bfa287f1-71ca-431f-97d4-35994a8cacb6"
        },
        "item": {
          "id": "8cf4dace-e728-449b-a53f-c37552e1b7a0",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "6e81bbc8-b3fa-4856-aa4b-916c5b4c6adc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53d2e855-1281-4388-b52b-d7a026676115",
        "cursor": {
          "ref": "5227e355-99e8-4b96-b0e1-8607f23e0f3f",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "615f1067-c78c-46f3-8ad5-b818ce3d06a1"
        },
        "item": {
          "id": "53d2e855-1281-4388-b52b-d7a026676115",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "dfe2dee2-e4de-47ff-822b-7ca7f864a605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2820e59c-a328-427c-817d-6c7e6de936d0",
        "cursor": {
          "ref": "cba82efc-10ee-4c16-8c50-04795533813b",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "02f22494-d9a7-491c-828e-2c5eb730ad0f"
        },
        "item": {
          "id": "2820e59c-a328-427c-817d-6c7e6de936d0",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "34f810a2-1bfb-4969-96ec-6b11d0a23125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a294b377-7920-4645-af55-d13d48c9803b",
        "cursor": {
          "ref": "95b19b56-4d12-4915-8731-3b12580fb063",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "49c08939-11f3-42f7-aaa2-bf32d6bf9ae6"
        },
        "item": {
          "id": "a294b377-7920-4645-af55-d13d48c9803b",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "0c6479f5-5acd-4f21-b36d-18b5b038324a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11bfe3c0-a7dd-4b84-97b5-9c94ace490a8",
        "cursor": {
          "ref": "18f637e6-821e-4d97-8ed7-c6a278ed8c49",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8e00461a-4370-44f9-88a7-69a3183a1111"
        },
        "item": {
          "id": "11bfe3c0-a7dd-4b84-97b5-9c94ace490a8",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f3df1903-0a9d-411f-a579-686aef12910a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa5dc729-2c70-443c-9dae-f6edff2c2412",
        "cursor": {
          "ref": "40747fe7-784e-42e3-9f38-88d59bca05ce",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "36fb4605-9947-468e-81dc-274d710dc453"
        },
        "item": {
          "id": "fa5dc729-2c70-443c-9dae-f6edff2c2412",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "06fbe0aa-fce1-4e02-a9ca-fc94568cf580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b32e022-0907-483f-a820-5c40784cddf5",
        "cursor": {
          "ref": "c99d686d-7a2f-46de-a114-ad671d8d0020",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "cf511357-c3e6-4c05-a061-b55bdb5fa850"
        },
        "item": {
          "id": "8b32e022-0907-483f-a820-5c40784cddf5",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "59c61c6d-4fd3-4d39-9d65-364e938fcdba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79029db7-0876-4edf-aaa8-4a028b3289e0",
        "cursor": {
          "ref": "c8182ff0-292d-4003-828d-562492f5befd",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c6892785-37db-4d4c-a0b0-17ffb8ce9694"
        },
        "item": {
          "id": "79029db7-0876-4edf-aaa8-4a028b3289e0",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "de444997-e123-44ce-8e36-da287d7aa3c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64c56de6-a1f2-42b9-9739-b731e998f4ff",
        "cursor": {
          "ref": "5d16aaf0-8111-480d-8668-46c4e8bb1458",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "8eb2407b-fc2e-45fc-9029-8c6624a06057"
        },
        "item": {
          "id": "64c56de6-a1f2-42b9-9739-b731e998f4ff",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "dca6785b-35fb-40f6-a1b2-a561b042e6f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a087360-e20d-4de9-8cba-0a828a30d031",
        "cursor": {
          "ref": "d01b2a67-62dc-40af-805a-d95a5284b1ea",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "6281fc3f-b1e3-4edd-8d96-7976976b876e"
        },
        "item": {
          "id": "0a087360-e20d-4de9-8cba-0a828a30d031",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "d4e2ffd4-033b-40d9-a103-fa96f024bcbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbe5199d-1b70-4a3b-886a-d69716bb35c4",
        "cursor": {
          "ref": "18719779-8d1f-4488-8cb1-ecab2f49062f",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "5f7eb7ec-ed7a-4fc0-9424-1890cd605ebb"
        },
        "item": {
          "id": "dbe5199d-1b70-4a3b-886a-d69716bb35c4",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "6349548d-3a22-44b3-b448-f5bd00ab98bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7b68db7-3b1f-4139-953a-c55b31a4f675",
        "cursor": {
          "ref": "7357cdfe-a90f-4522-adf1-f0571ad0cd0d",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "c8403b0d-6487-47a6-b8a7-d5b2c3cc2796"
        },
        "item": {
          "id": "d7b68db7-3b1f-4139-953a-c55b31a4f675",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ad06b73d-48ce-4288-812d-c330b65938ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a15eba01-de11-4e45-86df-9d6961a2430c",
        "cursor": {
          "ref": "e1d27db3-f5e4-4c27-bb7f-ac8e3ea919d6",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "71d5c457-c055-4a79-ae7b-fec21d9ea8ca"
        },
        "item": {
          "id": "a15eba01-de11-4e45-86df-9d6961a2430c",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "1e996b16-78d5-4c00-807b-1fbf1be4a137",
          "status": "Created",
          "code": 201,
          "responseTime": 586,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "07df9e8b-ad8e-4307-9758-7ad3fd69e79b",
        "cursor": {
          "ref": "94b59168-1b79-4d17-a3e6-d9b43b36bffa",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "abff93bd-ac43-4059-97e0-8cfc5aadd851"
        },
        "item": {
          "id": "07df9e8b-ad8e-4307-9758-7ad3fd69e79b",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "0c350d06-e7d5-4710-b97e-53aeb952ba78",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "16ae8898-e5da-411a-9f1e-07bc9ac40755",
        "cursor": {
          "ref": "7231c858-2c3d-4806-8fc8-2e94f6003ce8",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6d616afb-d10c-4e8e-8bd4-b2158a70c296"
        },
        "item": {
          "id": "16ae8898-e5da-411a-9f1e-07bc9ac40755",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "96b5c42e-c657-498d-aa88-97cbd7341cdb",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "225b345a-86f6-42d2-b2ba-57fede27683d",
        "cursor": {
          "ref": "3bb1b905-25ae-47fb-813f-5c501d1168b6",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0f741090-e2b4-4339-8320-d48cebe4ed9f"
        },
        "item": {
          "id": "225b345a-86f6-42d2-b2ba-57fede27683d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "56e646db-4e59-4c56-87d2-9946d3c6ee12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdcc1883-b12c-4740-84f7-1648d53e8a01",
        "cursor": {
          "ref": "a04dafa1-c1a7-45cc-b78f-300c4cca329d",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "81d91fc8-5080-4bef-9600-1cf4966161df"
        },
        "item": {
          "id": "fdcc1883-b12c-4740-84f7-1648d53e8a01",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "35c34999-abf8-46cc-ac88-fffb80920335",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "b6010020-eb83-4fd1-b4ab-0bfb6c2fbac0",
        "cursor": {
          "ref": "826f27eb-3c3d-4539-9acc-94a1f7ee0b97",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "4fa42144-bf39-4262-b903-9f14834b4bb5"
        },
        "item": {
          "id": "b6010020-eb83-4fd1-b4ab-0bfb6c2fbac0",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "1c2176bf-3d1b-4e56-8a37-8ccf5edc5842",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "8ef65a58-bb1d-43ed-b745-749f80191e8e",
        "cursor": {
          "ref": "12ce0b2d-1af1-4b51-93c6-ebb828bc373c",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2349cd3e-8355-4ee3-97d9-a6e5b46e7324"
        },
        "item": {
          "id": "8ef65a58-bb1d-43ed-b745-749f80191e8e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b5d7ccd2-d2a5-4251-85c6-4cdbcd1a3da7",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "12801fe2-19f5-4e56-bf60-7615c2175564",
        "cursor": {
          "ref": "953471eb-0442-44dc-8970-ccd0d3214787",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e1ed9f57-04af-45f3-a236-9425d1c1384d"
        },
        "item": {
          "id": "12801fe2-19f5-4e56-bf60-7615c2175564",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "8d645df8-e3b8-4ca8-8f26-33bc01bb3009",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "cf3420a9-a887-4203-a4f8-ae98426bf140",
        "cursor": {
          "ref": "de064c64-aaad-4b49-8e32-aadf0f075f6c",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "41342275-9c91-4438-9392-ee1eb3ca92e8"
        },
        "item": {
          "id": "cf3420a9-a887-4203-a4f8-ae98426bf140",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "03033f92-02ba-446e-a2c5-f197a4166f94",
          "status": "Created",
          "code": 201,
          "responseTime": 224,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "a4f36439-6317-42cf-8e2f-e8e43851ec7a",
        "cursor": {
          "ref": "9281fae9-f40f-4e8e-8277-a0cfadb124f4",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "61383634-5b32-4f08-b8fe-0bdd10a37189"
        },
        "item": {
          "id": "a4f36439-6317-42cf-8e2f-e8e43851ec7a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "d2b29b6e-1514-47b2-a299-e0b90a92b915",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "e7dfd391-2342-4739-982a-abd3f73b5d65",
        "cursor": {
          "ref": "2d89af3a-f9e0-47d3-9bab-9160fdb5b7cf",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2d4a6b4b-520f-4430-ad8f-fa984ca3ebfe"
        },
        "item": {
          "id": "e7dfd391-2342-4739-982a-abd3f73b5d65",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ece7fb4f-1a17-4241-90a0-6aebfa9c64e8",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "6a1ae183-dd99-4ec7-afcc-bbfdf4923bb3",
        "cursor": {
          "ref": "10a41158-78df-41aa-bca5-4a03d9bc7071",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "237e33bb-3c20-414c-9691-43fd249a5bd3"
        },
        "item": {
          "id": "6a1ae183-dd99-4ec7-afcc-bbfdf4923bb3",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "8196c851-8fb3-4c10-95ec-1d70db1a9c24",
          "status": "Created",
          "code": 201,
          "responseTime": 232,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "a93bf6bc-9d71-4fb8-b5f9-b9e324db95c6",
        "cursor": {
          "ref": "182a7386-14d8-46e8-8b6d-169d23d602c7",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e5c606f0-a35d-4d59-9b09-2e5ee69e4b83"
        },
        "item": {
          "id": "a93bf6bc-9d71-4fb8-b5f9-b9e324db95c6",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "2ff5e813-db41-4179-a494-141d78d1a200",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "cf632bb4-01b7-4e40-9257-c8b048e794bd",
        "cursor": {
          "ref": "a446a9f0-aa2c-4fec-8149-436f370399a2",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "c57ba23c-8939-4420-b47e-70ab7446925d"
        },
        "item": {
          "id": "cf632bb4-01b7-4e40-9257-c8b048e794bd",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "8796bfd1-d47c-4f58-9e06-82418efc7f7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e27ca3f-2709-4037-a225-57489d5a855c",
        "cursor": {
          "ref": "5bedb179-e34b-4e01-b514-07027134b682",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "6145a46e-e3a3-4342-86fb-9596dd58e72e"
        },
        "item": {
          "id": "2e27ca3f-2709-4037-a225-57489d5a855c",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "6a26b964-e08a-426d-8fbd-9f0be622a752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc8463d8-4ede-4180-b3ec-a2efad391d59",
        "cursor": {
          "ref": "615f754d-70c2-4383-ac7e-91066760fc48",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "99b200aa-e892-4dd7-89ae-011a92c26a72"
        },
        "item": {
          "id": "cc8463d8-4ede-4180-b3ec-a2efad391d59",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "685b51c8-694b-44cd-b3c2-a4ce4ba88cdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d149e0a8-593f-43ae-bb47-db9c2560e499",
        "cursor": {
          "ref": "cc24b271-2bae-453f-b7d6-3635ef46f647",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "4910b65b-c6ad-40aa-95bc-c1d2d96a4688"
        },
        "item": {
          "id": "d149e0a8-593f-43ae-bb47-db9c2560e499",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "143ad551-2e3b-4854-93cf-4198b64a3262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "911d48e7-365b-44f2-aecb-34ed0694e0d7",
        "cursor": {
          "ref": "94b8f031-f05f-4ac4-8f0f-266e4d2ada80",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d45ff394-03ae-484f-8a44-0a0c305cca39"
        },
        "item": {
          "id": "911d48e7-365b-44f2-aecb-34ed0694e0d7",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "7af5dbf6-6ffc-4fc7-93ee-a2366406ce49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e3eb0ce-319e-4ef3-92a8-4e3980f7b0ed",
        "cursor": {
          "ref": "1f10059d-d389-45f7-9fd8-9309e3df0aa8",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "c5859e3e-e716-4db9-ab5f-6bb0da312f27"
        },
        "item": {
          "id": "3e3eb0ce-319e-4ef3-92a8-4e3980f7b0ed",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "e0f78854-5961-4a39-b802-57e01f6d9af9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4c73c31-1020-47dc-8d8a-99d0167d65c9",
        "cursor": {
          "ref": "9328e2e1-77b7-42d7-95c9-575e3334ddc4",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8172844e-5828-4ba4-b983-b84d308316fe"
        },
        "item": {
          "id": "d4c73c31-1020-47dc-8d8a-99d0167d65c9",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "df5c4ec4-5e0b-4bbc-a3cc-f081f3d3d2ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d3eacec-f5a2-464a-a221-d4c5564e9e70",
        "cursor": {
          "ref": "74c46010-f5c7-454a-8683-ea589e76a792",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "128de7a4-7a59-4a3d-b23d-1f985e7b13ea"
        },
        "item": {
          "id": "5d3eacec-f5a2-464a-a221-d4c5564e9e70",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "b6eaa7cf-0e9a-4142-89c8-e85d3b54bb4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6b6c9a0-9dea-48b5-8b16-0d04217a8c64",
        "cursor": {
          "ref": "84f560c1-d417-4348-82f7-86da3c77e383",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f281a8b7-1e4f-4ccb-9007-1d0509ac2164"
        },
        "item": {
          "id": "a6b6c9a0-9dea-48b5-8b16-0d04217a8c64",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ef85874b-df1a-4ddf-a8eb-e12740207b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c75cafe7-4fac-47bc-924b-a8fb63de9cdf",
        "cursor": {
          "ref": "432b6994-6a86-41e4-97cd-a664f543f7d3",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "64eff8a8-b1f7-48d8-a942-be6bdbaaac84"
        },
        "item": {
          "id": "c75cafe7-4fac-47bc-924b-a8fb63de9cdf",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "5426d82c-8826-47d9-97da-c07394ee7a8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b6244d-fccb-4e9c-b356-16d819db791d",
        "cursor": {
          "ref": "178153a2-003f-417a-9783-6c4ace17c81f",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "07842286-0b6b-473c-8b02-1c11798ffeac"
        },
        "item": {
          "id": "c3b6244d-fccb-4e9c-b356-16d819db791d",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "dceb2c8d-e368-4567-9a59-c2d2b5861738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cd96748-4c69-4fe6-ae22-563cfd0b1ee9",
        "cursor": {
          "ref": "74fabf40-cc38-4c68-bae0-a29d64946521",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "7acd9cd9-7c8d-4196-94f8-30172cc61931"
        },
        "item": {
          "id": "6cd96748-4c69-4fe6-ae22-563cfd0b1ee9",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "1b4a2872-8179-46cb-942e-9fcb33953781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1036710e-8842-4741-b518-06122ece1778",
        "cursor": {
          "ref": "77e47c5b-a354-41e0-85a0-9959508f8836",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "822edb87-0274-40da-a245-bfb5a71d1eba"
        },
        "item": {
          "id": "1036710e-8842-4741-b518-06122ece1778",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e42a11de-873b-42cd-8e58-22101ff64f08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ac0f293-cc2e-45d4-8e33-1bb2b2aec1ba",
        "cursor": {
          "ref": "4460986c-cf0c-42b1-98e3-7233d9e57d98",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "d474657b-d16a-4f8f-9a0e-a0c326ac9db5"
        },
        "item": {
          "id": "6ac0f293-cc2e-45d4-8e33-1bb2b2aec1ba",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "926c4464-ec81-42cf-aad2-869228ead89c",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "a3bc0f6e-cd01-4ac9-989d-a0abfaa7a903",
        "cursor": {
          "ref": "24cae645-8c9c-4028-acda-e43c281ed91d",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "07436236-f41b-405f-962f-22dfc3753d68"
        },
        "item": {
          "id": "a3bc0f6e-cd01-4ac9-989d-a0abfaa7a903",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "84bdb259-c219-4d1e-95c7-6e0babc11265",
          "status": "Created",
          "code": 201,
          "responseTime": 229,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "0c0695c3-7649-4ce9-adbd-6017033a3bc7",
        "cursor": {
          "ref": "03adc12d-2032-4376-8a5e-0686f5d8203d",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d86984ac-7c0c-463a-95b8-dd499ab32e23"
        },
        "item": {
          "id": "0c0695c3-7649-4ce9-adbd-6017033a3bc7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "1a6b0574-0e7d-4925-b8b8-c9c9b71efe2c",
          "status": "Created",
          "code": 201,
          "responseTime": 321,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "2ac62887-9500-4520-aa57-c06ab77e5bca",
        "cursor": {
          "ref": "d0a4d930-b8aa-4710-8e73-ad7155faad06",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "c10ec804-3075-446e-b4b6-77612b3a102f"
        },
        "item": {
          "id": "2ac62887-9500-4520-aa57-c06ab77e5bca",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "61a4d4a6-139e-47c3-8e11-944e3cbe38a4",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "e27960b9-c72b-4b19-b036-047fefdd9cfe",
        "cursor": {
          "ref": "e3e31408-cc70-4403-9a25-cfdb8e168582",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "99a9504b-341f-4ca4-be2c-7211a4bf7b56"
        },
        "item": {
          "id": "e27960b9-c72b-4b19-b036-047fefdd9cfe",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "07f8a582-e775-496e-8cae-430071761643",
          "status": "Created",
          "code": 201,
          "responseTime": 229,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "e976af06-2e00-45d5-8572-148b18a8643c",
        "cursor": {
          "ref": "336ea0f3-cb24-48fc-80e2-fb92eb05f1c9",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "4710d018-dcea-4a6d-b227-a8e3e1823a57"
        },
        "item": {
          "id": "e976af06-2e00-45d5-8572-148b18a8643c",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "91332566-ddee-4492-b854-90cd7c2d3d0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52b217d9-fe2c-47a8-82d6-dbd22e99cabc",
        "cursor": {
          "ref": "c431d788-7c74-41d7-a83c-7bc6139e4f43",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "08b490f5-efec-493e-8692-c150dca096be"
        },
        "item": {
          "id": "52b217d9-fe2c-47a8-82d6-dbd22e99cabc",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "4fb5cd2b-8fd3-4e8a-a7de-be6fc977e310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff3a78d6-7c93-4481-b47a-da04680fbc48",
        "cursor": {
          "ref": "2d37c215-ccb5-4799-8c9b-564ce42c4a22",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "b115fb54-ce5b-4969-883e-b39ffe925b56"
        },
        "item": {
          "id": "ff3a78d6-7c93-4481-b47a-da04680fbc48",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "70e69bb6-1ec9-41da-ad79-35a67e3e06c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e8f4b6b-13ee-4279-b5c5-d4926031676f",
        "cursor": {
          "ref": "f498d55a-b89e-4605-9f65-b018ede863d9",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "d0640f01-a494-4ef2-9cbb-64acb339d16f"
        },
        "item": {
          "id": "7e8f4b6b-13ee-4279-b5c5-d4926031676f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "6f92df61-13d4-49cd-b87e-e1598e23715e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7939c167-215f-4c03-ae76-3b414e03a458",
        "cursor": {
          "ref": "494f2e14-3847-4588-ba1b-3ac41c5abc75",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "10f4b1ad-3262-47f4-9bf7-f03e3b9ffb58"
        },
        "item": {
          "id": "7939c167-215f-4c03-ae76-3b414e03a458",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "7f6b8186-3462-49d9-841e-8d7d19f276ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a35879c-d92e-47b6-b6f6-d7b4e209a0b1",
        "cursor": {
          "ref": "79ccf0f9-70a3-4263-b74f-d8a82de7b5d4",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "645c3005-8ce0-44f0-a0a7-c02fea4693cf"
        },
        "item": {
          "id": "5a35879c-d92e-47b6-b6f6-d7b4e209a0b1",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d6cbac7d-a52c-40cf-b581-7681249b061b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a380d7b-d551-42a0-940b-ab2ca0c22d61",
        "cursor": {
          "ref": "5c088232-78b3-4f07-83b7-daffd83773d6",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "96220374-0ab3-411d-ab59-bab5bb051bbe"
        },
        "item": {
          "id": "8a380d7b-d551-42a0-940b-ab2ca0c22d61",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c0583be5-31ee-4111-b3b0-c5be782690e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b1bccc1-b80d-4517-8505-63e5b908176b",
        "cursor": {
          "ref": "9cfa7e73-c9ef-46d1-8cb5-2d35d332e050",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "59afbc02-69dc-4159-8dec-a558a23adbd5"
        },
        "item": {
          "id": "9b1bccc1-b80d-4517-8505-63e5b908176b",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "9623d539-a90d-4872-98d3-70550d0f8330",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "310db3dc-46ad-47d9-8e08-d16d6d168540",
        "cursor": {
          "ref": "e035a25d-d4d0-44c4-8a9a-abacb858efab",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "fe79b4e3-99ba-420d-a715-99be1268ff3a"
        },
        "item": {
          "id": "310db3dc-46ad-47d9-8e08-d16d6d168540",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "42f78958-a7d6-4fce-af88-00425e1b665e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "205cd59a-34e6-47ce-ba0c-5d490d17499e",
        "cursor": {
          "ref": "cbdfafc8-c775-4e12-9571-214881337fa5",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "7b3a58c0-5580-40e5-a949-f299483d6bb4"
        },
        "item": {
          "id": "205cd59a-34e6-47ce-ba0c-5d490d17499e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "99ce8807-331b-4bd2-9c5f-39cd21c94162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "573ad682-70b0-4722-81e3-82efa885cc45",
        "cursor": {
          "ref": "18c9cc67-e5f0-4672-97d6-ab937b292ba4",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b678adb4-ef6c-41d4-957f-1a02dd81853b"
        },
        "item": {
          "id": "573ad682-70b0-4722-81e3-82efa885cc45",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "a314f483-93c1-4ae9-a928-b97c4a65ad56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f268d9af-e802-475e-bce8-6eaeb5106b8f",
        "cursor": {
          "ref": "bb186599-c218-474e-af6d-1e498c217c92",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6a87398a-7557-4866-a80a-bd5abefbbda5"
        },
        "item": {
          "id": "f268d9af-e802-475e-bce8-6eaeb5106b8f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "bc0df51b-c9e4-40ba-9008-f08919a5178f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c566ec6a-c55e-4a7d-8b66-662cb1b2d09c",
        "cursor": {
          "ref": "e2ca82a7-8d5d-4ef2-b718-158d79c7dc59",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "5a19d7d5-bbc4-41a2-9d17-74669fa5128d"
        },
        "item": {
          "id": "c566ec6a-c55e-4a7d-8b66-662cb1b2d09c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "3b687fb5-9b58-4139-bc34-9530f45aa6b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f23d20a8-afa4-4f39-9b9d-180e5f2eae7e",
        "cursor": {
          "ref": "7b984d08-5e60-4879-a81e-7c64ba3b6044",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "ddb74eb2-1e20-4318-be5f-0057e7df0d06"
        },
        "item": {
          "id": "f23d20a8-afa4-4f39-9b9d-180e5f2eae7e",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ade075d0-73da-4ff8-a541-56779fd2fa97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d045e2f-b06b-4d8e-8409-5a38b6baa72a",
        "cursor": {
          "ref": "87b393b9-4c8a-4c93-b93a-72337d209834",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "081a0b04-b5b6-4e88-a5e2-808f3592fc3d"
        },
        "item": {
          "id": "2d045e2f-b06b-4d8e-8409-5a38b6baa72a",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "2a099072-db57-4e90-9665-def85f8cf673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c459b2d6-beec-462f-9868-2f2fa41af915",
        "cursor": {
          "ref": "77ae1e6e-f405-4b70-97a6-01458c47eea3",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9cef0bfc-54b8-403f-9d76-81aee72c05fd"
        },
        "item": {
          "id": "c459b2d6-beec-462f-9868-2f2fa41af915",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "c0dacdb8-1898-4c84-bdd5-2947fc68f825",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66dc9a10-9aa9-4a4d-8b69-28a89c24c7ad",
        "cursor": {
          "ref": "94bd8bbf-c43d-495f-b30b-f0ef30d18bf4",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "34b17eb1-7127-4590-9ff8-f5ce25a4c16e"
        },
        "item": {
          "id": "66dc9a10-9aa9-4a4d-8b69-28a89c24c7ad",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "7b38f813-82f8-4477-9564-3ea458f0d31d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a61b18c-cfd6-4074-bd86-6d04e1422309",
        "cursor": {
          "ref": "84d651aa-b52c-46b7-8a39-599ca402f123",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "2b4665b8-3bb5-4b02-85bb-402c8afb8286"
        },
        "item": {
          "id": "4a61b18c-cfd6-4074-bd86-6d04e1422309",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "bd89786c-2920-40cc-8cbf-b3cb76bfddde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8c08e21-cd7e-4a0a-9a3d-4009914e1716",
        "cursor": {
          "ref": "e5766277-f146-4b83-9800-0b486fc1e581",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f9062dfc-eb63-473d-b0f3-def5355c4cce"
        },
        "item": {
          "id": "c8c08e21-cd7e-4a0a-9a3d-4009914e1716",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "b00b4455-f240-4d4e-9225-a25e31e2a419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92e00eaf-f317-40e1-b778-cd2a9cbdf174",
        "cursor": {
          "ref": "53abfb47-7776-49b4-aa65-710f719a43a3",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "ea334042-23a7-42ee-a631-a7bbbe1a12be"
        },
        "item": {
          "id": "92e00eaf-f317-40e1-b778-cd2a9cbdf174",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5547c116-38c4-4f40-b58c-d3ea5faff67f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4da0501f-87e3-457f-a78b-3566fe087fef",
        "cursor": {
          "ref": "bb261970-f57c-4ea5-9fef-8f33e7bc73b1",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "e907f392-cef0-4a85-bbc7-58d50bb0f8e4"
        },
        "item": {
          "id": "4da0501f-87e3-457f-a78b-3566fe087fef",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "80910a6f-61a8-4b0e-983f-3bf743841574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d253e2a-76c3-48c8-b0c6-dcfbbb851071",
        "cursor": {
          "ref": "e8a3bcd2-ae87-4da2-a795-94238cf1dcfc",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "4c9aac62-f3e6-437c-a680-ba4435f2cfe3"
        },
        "item": {
          "id": "2d253e2a-76c3-48c8-b0c6-dcfbbb851071",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "d44ddeca-9af0-4107-af3d-d78c1b5cfee9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "750e0a92-4d1a-4b27-9ebd-20b51afedbfa",
        "cursor": {
          "ref": "2d855725-2e77-4857-8be3-cf60cd46adf8",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "c85320bd-3ce1-42a6-9d27-e9ee5d583599"
        },
        "item": {
          "id": "750e0a92-4d1a-4b27-9ebd-20b51afedbfa",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "2801c9d2-c9a5-4f66-95da-e7f229ee8c2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81c2b22c-9bc1-4920-b4f1-65520a35808d",
        "cursor": {
          "ref": "d3aa5ae9-fe8f-42f9-ac49-e0e373c6e655",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "acfad6d5-97d0-49ff-b6ec-208ac4cd2c08"
        },
        "item": {
          "id": "81c2b22c-9bc1-4920-b4f1-65520a35808d",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "a602ef87-86ea-4968-b7a8-ac2c3f87bc57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aff6c571-8426-464b-83c0-4394c6760ecf",
        "cursor": {
          "ref": "87282df0-043d-46c6-96d8-47b2a53b4032",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d9a7f64c-3dfb-462e-97b5-9c3b8d20a29d"
        },
        "item": {
          "id": "aff6c571-8426-464b-83c0-4394c6760ecf",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a9308f58-16a3-4ff8-9a51-75ce8384839a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df95ff8f-e09a-4361-9d04-2bcdc2bfb30a",
        "cursor": {
          "ref": "95ff9178-87b6-4bae-9581-38bfb0bd8aac",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "6843578e-a70a-4df8-a180-60cad15d0b1c"
        },
        "item": {
          "id": "df95ff8f-e09a-4361-9d04-2bcdc2bfb30a",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "626eaf88-9f9e-4aa1-bad9-e4d98e7b074f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00c70b54-77fd-4bef-bc7e-8d32d3811232",
        "cursor": {
          "ref": "cdbedf52-7c35-4eda-92bf-9fc053475c68",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "122ada3e-981d-47e2-a30a-f0b9198106c7"
        },
        "item": {
          "id": "00c70b54-77fd-4bef-bc7e-8d32d3811232",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "94d5d594-c631-4901-8f48-42264e8c22a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e990788d-83bc-4111-b4a9-c14c5606e04e",
        "cursor": {
          "ref": "c91bb8ff-c902-488a-ad1a-bcf5eff22bce",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "ea63a222-1ea2-406e-ad6b-b275bd75cd1d"
        },
        "item": {
          "id": "e990788d-83bc-4111-b4a9-c14c5606e04e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "87dd41fa-c47d-4d4b-9117-f9caf0ee5bb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e9303bb-b79c-45f3-8749-f0133d9abd24",
        "cursor": {
          "ref": "db7f9f70-6ac6-491b-9efe-6ba686e92548",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "74ca06e5-53d2-4773-8e30-650399074b96"
        },
        "item": {
          "id": "0e9303bb-b79c-45f3-8749-f0133d9abd24",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d5d167a5-db73-4bbc-8f44-d53d049b4fa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1924c08-5aa2-43ab-ba29-2d9dcaab82a9",
        "cursor": {
          "ref": "196f66c4-ea12-4a9e-a2b6-789576be5049",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "2042d20d-9cc9-4fc0-a878-5c1d7eef8d44"
        },
        "item": {
          "id": "b1924c08-5aa2-43ab-ba29-2d9dcaab82a9",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c22e22b0-cfbb-4184-b413-3510904460a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5c4ba58-69b9-4ac1-afea-a76d69bdd44a",
        "cursor": {
          "ref": "7c74184b-9586-4f2c-8b5c-df630ff8f3d2",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "bf962316-e75f-4cb5-966b-f49bfe8aabf3"
        },
        "item": {
          "id": "c5c4ba58-69b9-4ac1-afea-a76d69bdd44a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "b775872f-382f-48c4-acbf-c0905427da9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dcc9176-49b0-43cd-8da6-a15849480dce",
        "cursor": {
          "ref": "14972ba9-9a1a-4cc5-8f24-b79f5fe3d558",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "9860247f-86b5-4e5b-a59b-157192f40d6e"
        },
        "item": {
          "id": "7dcc9176-49b0-43cd-8da6-a15849480dce",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a51cdac8-1f62-4f1b-8b09-2c933cba29b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebdfdc61-7fd0-44a7-8ad3-3503b3d6e1ad",
        "cursor": {
          "ref": "f3af3b37-979c-4adb-836f-4992a7b22d5c",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "3b15166d-702e-4f89-b3e6-119a6a293a62"
        },
        "item": {
          "id": "ebdfdc61-7fd0-44a7-8ad3-3503b3d6e1ad",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "fe948077-7a87-46fd-a0d5-5929eb30da87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "25ef36a7-fa34-4b46-a491-9c16d8971159",
        "cursor": {
          "ref": "9182de56-576a-4724-b4e5-2861b89082ac",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "3811abc3-1e1b-41ac-89a4-4e326852b7af"
        },
        "item": {
          "id": "25ef36a7-fa34-4b46-a491-9c16d8971159",
          "name": "credentials_issue"
        },
        "response": {
          "id": "7f6dd620-9967-4b7e-b086-5a5d2874c308",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c0d2b1-576f-4760-ace6-ce1252c520a2",
        "cursor": {
          "ref": "4a77b08f-dd00-4dcd-8f7d-e812edc66810",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "78f38df5-8e26-44e1-b56e-5f1a671c8911"
        },
        "item": {
          "id": "23c0d2b1-576f-4760-ace6-ce1252c520a2",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "b418acdb-7987-4719-ab1c-a0de28b190f9",
          "status": "Created",
          "code": 201,
          "responseTime": 229,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "94c4551b-fd2d-4f26-a5ea-34c4a6c90c99",
        "cursor": {
          "ref": "d7f095c8-597f-4b9d-b424-433c1b3ee6f3",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "782c435f-2e1c-4dbc-922d-71106db8b00f"
        },
        "item": {
          "id": "94c4551b-fd2d-4f26-a5ea-34c4a6c90c99",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "62a63426-94ed-4f4d-8499-db01157ea7a1",
          "status": "Created",
          "code": 201,
          "responseTime": 227,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a520ecf3-2324-42d9-a794-7b2c76f178ac",
        "cursor": {
          "ref": "efa4b887-b974-418b-abf9-efad5ffecad4",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f94213e5-af77-4b38-9441-6825b7e90198"
        },
        "item": {
          "id": "a520ecf3-2324-42d9-a794-7b2c76f178ac",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "eb7420bd-3552-46f6-8b6b-796dd0a72c72",
          "status": "Created",
          "code": 201,
          "responseTime": 220,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "287dfc4b-1a3c-4297-9525-a6efae83c8c7",
        "cursor": {
          "ref": "1ff0b7d1-e755-49fb-b890-8dc296d42e69",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "648a68a3-f413-4c77-b7e0-1a39bfd2dd53"
        },
        "item": {
          "id": "287dfc4b-1a3c-4297-9525-a6efae83c8c7",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a1606d22-7c71-44bb-9c1d-c583038bc002",
          "status": "Created",
          "code": 201,
          "responseTime": 229,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-12-21T00:35:41.288Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-12-21T00:35:41.288Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "7545256d-30ae-432f-9320-3ba51b8bf0e6",
        "cursor": {
          "ref": "f193cc97-7327-4721-8870-e5fa72c14864",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "320dbdd4-aba6-4b7c-9d36-09d73e186ec6"
        },
        "item": {
          "id": "7545256d-30ae-432f-9320-3ba51b8bf0e6",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "add597e3-6330-4929-bb26-38c10e5d6f13",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eb6f9a5-5775-45f2-8e47-8f5420de36f1",
        "cursor": {
          "ref": "7c80bd46-d76c-46d7-8ce1-72adeac94893",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "db1963ef-6961-405f-88de-92ad4d4d4ac4"
        },
        "item": {
          "id": "3eb6f9a5-5775-45f2-8e47-8f5420de36f1",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ec87c7e5-234f-4ec5-8611-6923d0cdf41f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7e169d4-ff3c-4736-98cc-065da7c866bc",
        "cursor": {
          "ref": "7b0b9fe8-05fd-421b-ac12-b08755a8e925",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "6b954344-fd7d-4488-aeab-726a30d5ba7a"
        },
        "item": {
          "id": "c7e169d4-ff3c-4736-98cc-065da7c866bc",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "317b67ab-896b-4b13-bfdf-30677e11b21a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa786cf5-a1a3-4b76-ac2c-264da998d351",
        "cursor": {
          "ref": "8f8447a8-51dc-4eea-95b0-7ab03e2308c1",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "9c2ce004-28a9-4481-b7ab-8a85f4371371"
        },
        "item": {
          "id": "aa786cf5-a1a3-4b76-ac2c-264da998d351",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "dccca656-bb66-40bb-8762-8cd21a49d499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "891f6e1b-092e-4b9f-89c6-94b64f4bc0f2",
        "cursor": {
          "ref": "e617146f-e035-429a-a231-c99234a47c19",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "77ba869d-573d-4616-aaab-40223b696fb5"
        },
        "item": {
          "id": "891f6e1b-092e-4b9f-89c6-94b64f4bc0f2",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "39ea5860-e319-49a9-9c5f-79ec9f7a4feb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c86b2afb-2cc0-4010-ade3-02f016eabe4d",
        "cursor": {
          "ref": "9121e2c7-e988-4094-b1e2-ea6bc708f06e",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "4d26f6cd-7b13-47e1-bb70-1c06d07a573a"
        },
        "item": {
          "id": "c86b2afb-2cc0-4010-ade3-02f016eabe4d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "fd0fa328-5590-4fad-b12f-1b8a40b15597",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5134cb7e-c63c-4969-aada-f4eb90ec1b20",
        "cursor": {
          "ref": "2680538d-8089-44e4-90b7-bc13a3dd6e30",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "7ea7120d-6e8b-4c88-bcf0-3437079229ab"
        },
        "item": {
          "id": "5134cb7e-c63c-4969-aada-f4eb90ec1b20",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "10c47a34-a066-4b8c-b0cf-b4412c1939c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50a6621b-cdff-4472-9a4a-1c5221bd261b",
        "cursor": {
          "ref": "ab9beafb-41f5-4304-878d-bfdaaf0abba6",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7e3122f4-40c1-4460-84e3-954d541ee96b"
        },
        "item": {
          "id": "50a6621b-cdff-4472-9a4a-1c5221bd261b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1564a401-f014-4d99-9fe8-2b0fac7332c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "346241dd-56f1-4049-aadf-1226794fb2d4",
        "cursor": {
          "ref": "28963d9e-caaf-4876-83f6-20f44e62bccd",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "84241f15-a36e-48d9-9101-81d89e00b2a6"
        },
        "item": {
          "id": "346241dd-56f1-4049-aadf-1226794fb2d4",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c7e7fc9b-5ee0-4aaf-ac10-31d3aa66deb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdb1a667-abc4-4d30-a28e-b26bee976350",
        "cursor": {
          "ref": "5948d3ef-3722-4402-a3d2-cfc8f3911322",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f9112846-ab3d-4e05-881f-61c0d0e2baa0"
        },
        "item": {
          "id": "fdb1a667-abc4-4d30-a28e-b26bee976350",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "31acda7e-eb79-4a3e-9809-af6e57fd3f91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "712b6f16-2aba-4f19-9cf6-fef960ed52cb",
        "cursor": {
          "ref": "216e7886-c896-46c9-9281-3e8631d60885",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "0e29b147-74d6-4828-b29c-5311f745a8dc"
        },
        "item": {
          "id": "712b6f16-2aba-4f19-9cf6-fef960ed52cb",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7b2bb50d-7e65-4a56-bc49-b3ff0044e49a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eba8dab-fb79-415d-9309-5b20289606a3",
        "cursor": {
          "ref": "0cfd59bb-21a8-41ee-8614-1b6985e48c2e",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f97cc7d7-b10e-4eeb-a1d8-03ade88cbf7d"
        },
        "item": {
          "id": "9eba8dab-fb79-415d-9309-5b20289606a3",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "22502925-fff1-4d40-a56e-2000d232f7de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da74de64-a7c7-4b3a-81c5-4dc80de60b09",
        "cursor": {
          "ref": "d6195189-a067-4f06-a3df-6b5797f22e40",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "caadc6bb-edf6-457a-9279-1486df91e96b"
        },
        "item": {
          "id": "da74de64-a7c7-4b3a-81c5-4dc80de60b09",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "daf026f5-f5ab-4a9d-9c05-aba65cba5525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0e682d-c7ea-45cd-b1fb-e48f8a7a96d1",
        "cursor": {
          "ref": "90bdd382-1ff3-471e-a377-7c043236557b",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "cbcece23-9f22-4169-9c2b-009b11757e46"
        },
        "item": {
          "id": "6d0e682d-c7ea-45cd-b1fb-e48f8a7a96d1",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "477a8294-d000-426d-8b12-14635219aa96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a150e4f8-3754-4713-b9a3-f15ff476b989",
        "cursor": {
          "ref": "cb451e85-4cc2-41e4-9222-49f79879aeb3",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "cdebb229-afc9-4d04-96cf-1c0aef4a706b"
        },
        "item": {
          "id": "a150e4f8-3754-4713-b9a3-f15ff476b989",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "dcaebc1b-8bc4-4f89-b8af-381bea754e5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "640e9bdf-985d-4b1b-9e22-c3ce9a7d043f",
        "cursor": {
          "ref": "81a3d363-4f21-471e-9508-dacc1535d7d0",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d45a47e6-5d4e-4413-8087-53469d0022a7"
        },
        "item": {
          "id": "640e9bdf-985d-4b1b-9e22-c3ce9a7d043f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f8521994-604e-43ca-81ef-afde8771af1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "034a99d3-5682-4883-9256-74c683a292b2",
        "cursor": {
          "ref": "07c4a6f4-ff06-43d1-b1a9-35ff148eab93",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "12219f66-7e8e-4ae3-88c9-08373ac2949b"
        },
        "item": {
          "id": "034a99d3-5682-4883-9256-74c683a292b2",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e4856081-5432-4afb-9569-e575af0548e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "159b4f68-23c1-4af8-a3b6-a4f9e19c57a3",
        "cursor": {
          "ref": "bbd3fd69-a25e-4755-a6e3-6aff2865f7f0",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "80aea24b-0edc-43e8-8ac3-75e2c2541b3b"
        },
        "item": {
          "id": "159b4f68-23c1-4af8-a3b6-a4f9e19c57a3",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e9bff8ad-5b5f-472a-870f-4e9934cb22bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b48aefec-1153-4351-ada4-1cab26e5a938",
        "cursor": {
          "ref": "b73e5c7c-7f6c-4ae4-a98c-0b6604fd75e8",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c1ca3a0b-9b07-4913-b8a8-f79e652354f2"
        },
        "item": {
          "id": "b48aefec-1153-4351-ada4-1cab26e5a938",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "002aa139-1460-4222-b7a6-dd168cba1441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "017c2583-fd13-417b-8d14-2065b26c359c",
        "cursor": {
          "ref": "b6cbbbd9-b3e7-47ce-9d73-a1bd8a79c516",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "dc01351e-26fc-4241-83d2-ba94894b0c49"
        },
        "item": {
          "id": "017c2583-fd13-417b-8d14-2065b26c359c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "0fae4fd7-d71b-4e0f-880b-a633e0ae2f51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64922e95-27e8-4402-b9d1-311684207a00",
        "cursor": {
          "ref": "efe1d657-b259-42e8-92f2-a3066e52c8de",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d91a7ffd-6509-425b-8504-3def97bbb249"
        },
        "item": {
          "id": "64922e95-27e8-4402-b9d1-311684207a00",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9148e9f4-c6cb-44df-9d2d-938304241c4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de962b5c-032d-4c25-bec1-f82cd69edd5f",
        "cursor": {
          "ref": "aed0594d-7377-45fa-b60a-b6b4575f19be",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "bd4d006a-091f-4c09-8219-fc854d56d662"
        },
        "item": {
          "id": "de962b5c-032d-4c25-bec1-f82cd69edd5f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c360fb3b-df2c-4487-9be1-1f7c08e0f869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa6d08d7-63d8-40fb-aac2-dfcc3b676a08",
        "cursor": {
          "ref": "843c510b-bbdb-46fe-83b5-1887d7baa742",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "15bb4155-3949-421d-ac24-9889552c3cb5"
        },
        "item": {
          "id": "fa6d08d7-63d8-40fb-aac2-dfcc3b676a08",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "fddbdf38-b877-4292-914e-69fa6944b454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aba840e6-729f-455e-9a89-1b87a78cda9e",
        "cursor": {
          "ref": "e80db605-7323-4009-a975-66537f61f4de",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "dd905d01-1f7d-4f1f-93a1-39ed3cbb649c"
        },
        "item": {
          "id": "aba840e6-729f-455e-9a89-1b87a78cda9e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "beedc586-71b7-406c-bfc2-06a4c9cc0980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0686ec27-7fc1-451d-b387-a879fba014f4",
        "cursor": {
          "ref": "8c2046ff-dd7b-4fd3-99fa-cfab91f3c986",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b46d22c0-79b6-4675-bfd8-39e704c3e4bd"
        },
        "item": {
          "id": "0686ec27-7fc1-451d-b387-a879fba014f4",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d395154a-42c0-4575-936d-0fa79aa63837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5392d623-2c07-461e-930d-09732aad599c",
        "cursor": {
          "ref": "78625356-139d-4cee-84eb-369c31345d2a",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "df9f8fce-246d-43a2-9b98-7da9c8520740"
        },
        "item": {
          "id": "5392d623-2c07-461e-930d-09732aad599c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "704af5b3-ad78-457a-83b8-a966fa557f8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ed0be4a-9c9a-4011-a20f-696f5c8655bb",
        "cursor": {
          "ref": "df74644a-8f1a-495b-8850-17c2a57b1dd6",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "46ddb3e5-7a51-4339-8e89-63ac4e418691"
        },
        "item": {
          "id": "9ed0be4a-9c9a-4011-a20f-696f5c8655bb",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "cf1c5821-6174-473b-9978-7f5a59cc3674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40467eaa-4f86-4986-b186-ffd3b75ac080",
        "cursor": {
          "ref": "70ba9573-5e1e-4128-8758-2f7c47712376",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b797595f-85c4-4760-93d7-27623fe00679"
        },
        "item": {
          "id": "40467eaa-4f86-4986-b186-ffd3b75ac080",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f4d7bd84-00b2-46e3-9ced-e391e0beead9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49c254b4-ea00-4a19-85c7-2228d4ed6d85",
        "cursor": {
          "ref": "480b9a73-dd7c-4b9c-8753-dd2dfaf06bb8",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "8cbbf887-1534-4313-bf7c-d3af962a67d9"
        },
        "item": {
          "id": "49c254b4-ea00-4a19-85c7-2228d4ed6d85",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "53677172-deac-4ea7-aa9d-fc6c7dd7903d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22481f9d-d163-4a3f-9fa8-dd39e0396775",
        "cursor": {
          "ref": "02756b43-4e1c-42c6-8932-8c1aa4dae2b8",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "8345e5ca-07e6-40bf-8040-51b0e565bb47"
        },
        "item": {
          "id": "22481f9d-d163-4a3f-9fa8-dd39e0396775",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "6de73e87-880d-4634-84e7-6d6abf3cdff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5ea4252-bcd6-483e-aa07-03e2958d99fb",
        "cursor": {
          "ref": "1827ef35-3f95-4834-9bab-72c68eb9b142",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "94434d21-ca05-45fd-85b0-e2c5dc28c51e"
        },
        "item": {
          "id": "d5ea4252-bcd6-483e-aa07-03e2958d99fb",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "19e96291-eea9-45ff-98d5-fa73a3e56e08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93a2be6b-2a17-47fe-aadc-663f6e49408c",
        "cursor": {
          "ref": "f2fb7db0-6307-487c-97d9-1bb3cdb07340",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a315ec50-3485-4bed-8b4c-019177d34a0e"
        },
        "item": {
          "id": "93a2be6b-2a17-47fe-aadc-663f6e49408c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "80a30e33-e8b7-437f-8ae3-c451acb7447b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "962d17e9-dfef-4376-b3cb-02ca849b5044",
        "cursor": {
          "ref": "fbce84c0-5404-4d29-90f8-06451d6d4d96",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "bd715f83-db92-4228-b8e5-5dbb36bbf325"
        },
        "item": {
          "id": "962d17e9-dfef-4376-b3cb-02ca849b5044",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "5b23adbd-870d-4394-b376-1e37438ad840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2894d2df-4174-446b-81ac-d58980ca1834",
        "cursor": {
          "ref": "fd8b7ffb-4ab2-4f4a-b43d-bef5931f1e07",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "4cedb636-7038-4392-ae62-01c11402b949"
        },
        "item": {
          "id": "2894d2df-4174-446b-81ac-d58980ca1834",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "191b61a2-7352-437f-b8f8-a212bb68e141",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ed0ec0d-9ad6-4915-a933-910aa25fa5b8",
        "cursor": {
          "ref": "e9ab52c3-5182-49a5-b887-cb9a365d9a24",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "7090c8b9-fbee-43ba-bab8-67cae2957b6e"
        },
        "item": {
          "id": "2ed0ec0d-9ad6-4915-a933-910aa25fa5b8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c3749418-08f7-472d-8e74-dc39d5dee21e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1afb5910-3131-4bd4-b8e7-15933d02b6a8",
        "cursor": {
          "ref": "ff272188-3356-4d7a-9bd0-28a296aeebff",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "4e3f940f-3881-4dde-b646-463d8b5f8fe9"
        },
        "item": {
          "id": "1afb5910-3131-4bd4-b8e7-15933d02b6a8",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5997d335-36b4-4f08-a546-e295996b0219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c70ef1a2-2ae5-4a5a-ab01-3dc6b6fae2db",
        "cursor": {
          "ref": "7320bd5a-0a2a-4fd0-bb1c-24c27df77348",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "6a0d5b4b-76e4-40f9-bb8f-358f4209ced2"
        },
        "item": {
          "id": "c70ef1a2-2ae5-4a5a-ab01-3dc6b6fae2db",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0ea4fa6e-540c-4ca6-b27e-21c34ca5878b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05aee78e-508b-4203-8fe0-34dc46c89230",
        "cursor": {
          "ref": "6a0b1b96-d370-49aa-8117-bcce486ed2c9",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "631f31d0-4a7b-4187-8b22-05dd89520624"
        },
        "item": {
          "id": "05aee78e-508b-4203-8fe0-34dc46c89230",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "7c015c2e-b32b-4936-9457-1b4e5cd76032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f98a7099-dc55-419d-8f05-ff78b5f17de9",
        "cursor": {
          "ref": "9264761b-592b-4324-9007-3e87905633ef",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "6096e29a-b23a-4d11-a791-c86dc223b76c"
        },
        "item": {
          "id": "f98a7099-dc55-419d-8f05-ff78b5f17de9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c91757f8-bf79-4898-b10d-feea41f6a849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21288021-28d8-4e40-afcf-420216fcc368",
        "cursor": {
          "ref": "7fce44eb-0b83-400b-bb24-764ae72f62b4",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "f43fdcc9-147e-4ba2-9473-29c4f8d1d055"
        },
        "item": {
          "id": "21288021-28d8-4e40-afcf-420216fcc368",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "1fc8881c-c7ec-446b-ac4c-ddb35683878d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00e3fb2b-a28e-444d-bf28-fa8907b807b6",
        "cursor": {
          "ref": "8e93c165-67f3-4edf-bf59-ac0cf200ce42",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "da7be3e5-7be2-4390-bd82-a062ae7a2c18"
        },
        "item": {
          "id": "00e3fb2b-a28e-444d-bf28-fa8907b807b6",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3ae9b452-dfc9-4304-b461-734a37f9314d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49c110ad-0fae-4de0-8ac8-e6d7b200a8f5",
        "cursor": {
          "ref": "67ca21d7-f068-42b0-bebf-fa16e4391900",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "60f9819d-e6a3-4730-8dde-d55915b3c359"
        },
        "item": {
          "id": "49c110ad-0fae-4de0-8ac8-e6d7b200a8f5",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "8d5b126a-df12-4184-849f-77a29c99ff02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89eb569a-6b2d-42cb-9b6f-922a8a400e0f",
        "cursor": {
          "ref": "bc6b313b-ff4c-45e7-ba0b-6afce06bb3f5",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "3fd12e37-66a4-47cf-8e29-e61b7c60e1bb"
        },
        "item": {
          "id": "89eb569a-6b2d-42cb-9b6f-922a8a400e0f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b0b2e870-559f-4dba-bd7d-92b8fa6f7ef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29c127ea-8b4f-4fde-85a7-dd3c9d02820f",
        "cursor": {
          "ref": "9953dd92-207f-4d59-a6b7-cf0a96640ab5",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "3a82b456-d1af-4cde-9a5a-e681242ac363"
        },
        "item": {
          "id": "29c127ea-8b4f-4fde-85a7-dd3c9d02820f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "491943c0-e0d5-4290-b2c9-51fed7adc84f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7449b15-88c2-4e87-88c1-d6711593e145",
        "cursor": {
          "ref": "976247e0-6c09-4702-b07c-d85bd354f312",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "58fbd3d0-7498-42c8-8429-78de1decf1b4"
        },
        "item": {
          "id": "c7449b15-88c2-4e87-88c1-d6711593e145",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "86bbca44-29c8-45a3-bae1-1bce503f5828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c9de26e-2071-4bda-b07a-e690a39ab645",
        "cursor": {
          "ref": "3919643b-98e7-406e-ae4f-347ac2b98940",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "acc2f890-b90d-4cd5-9e00-ef174b46d532"
        },
        "item": {
          "id": "7c9de26e-2071-4bda-b07a-e690a39ab645",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "406590d9-5ed8-4c78-bda0-d38308a8357f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46ec588e-cac2-4700-8a4e-90658f030b6f",
        "cursor": {
          "ref": "b506e769-7e36-40bc-9732-ee171571fa6e",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "73985251-8afe-4814-abb0-ca8fa164c106"
        },
        "item": {
          "id": "46ec588e-cac2-4700-8a4e-90658f030b6f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "462b8461-9525-48c7-8b6a-7ebb188f88f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1996d478-4e15-4f6c-ada2-79237fead2b8",
        "cursor": {
          "ref": "c34bfb7a-e9c4-44a1-ae92-989994701e8e",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "a790f055-f2ef-4d7d-9e29-7662b3d57c2f"
        },
        "item": {
          "id": "1996d478-4e15-4f6c-ada2-79237fead2b8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4bf9626a-b122-411a-bb0d-4cc50c61ce49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dc1d5e2-1fa7-4ff3-9f82-1ed0137eecc0",
        "cursor": {
          "ref": "054c1288-4d4e-429a-a2cf-f0ddf17328fe",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "9c1a9dff-396b-46b0-aab8-7db1531c6656"
        },
        "item": {
          "id": "6dc1d5e2-1fa7-4ff3-9f82-1ed0137eecc0",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "818c8838-5e4a-4b62-8551-8937ea59194c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f08c1a8a-e399-4bff-97bb-79b23f1fcf8e",
        "cursor": {
          "ref": "d0c521d6-4c56-48d8-a5a7-0970e5639604",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "65c77f5b-3dcb-45bf-8bca-49dbde54385c"
        },
        "item": {
          "id": "f08c1a8a-e399-4bff-97bb-79b23f1fcf8e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c6018b9f-86a9-419b-884d-e397b33828e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dac50a5-0942-4633-9754-7fa607d230f8",
        "cursor": {
          "ref": "b389867d-12a3-4c10-9430-358b885a95aa",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "781e5c1d-7f3c-4d2e-8672-bac4200dddff"
        },
        "item": {
          "id": "7dac50a5-0942-4633-9754-7fa607d230f8",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "dc7aa292-df16-4fb3-9268-f786079877c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca684c67-15ce-4dc0-bad0-be294910314a",
        "cursor": {
          "ref": "48983ee5-2412-45c5-8d20-8ea9393df1a8",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "db97748b-b16d-4ae4-a635-bca9ed104267"
        },
        "item": {
          "id": "ca684c67-15ce-4dc0-bad0-be294910314a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "9db65bca-047a-4464-af10-620b8cb7ea43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6920109d-e62d-4cfd-8cb6-6841892fb983",
        "cursor": {
          "ref": "315345dc-d5e0-45fe-82bb-4d88142a40ce",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "d70bf6db-f883-4be9-a330-8832f42bfdeb"
        },
        "item": {
          "id": "6920109d-e62d-4cfd-8cb6-6841892fb983",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b0aff296-aa37-4679-8561-82cbe40b934c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ed7e62e-9ebf-4931-af66-7d2e5ef71033",
        "cursor": {
          "ref": "b68ed98f-a59f-45a7-b782-c2b14834f9b7",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "19923313-d4e9-486a-a648-0eb46378a225"
        },
        "item": {
          "id": "2ed7e62e-9ebf-4931-af66-7d2e5ef71033",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "3e9d28a2-3631-4469-8023-72f7fdd57211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d900a64a-f99a-4c7f-a2df-0bb7d7815e5b",
        "cursor": {
          "ref": "bd119b77-83cd-4242-840e-55953d1687c4",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d3324ba7-db08-41bf-b062-cef017a10311"
        },
        "item": {
          "id": "d900a64a-f99a-4c7f-a2df-0bb7d7815e5b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b7b1c7d7-cc67-4b5b-931b-633f4d42a24e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0d50548-343e-4f4a-953c-497cb3312ae8",
        "cursor": {
          "ref": "a37c99b8-b4b1-4541-a0df-8775829c5963",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "4a250755-61a1-4b05-8bec-f5210a014ab6"
        },
        "item": {
          "id": "e0d50548-343e-4f4a-953c-497cb3312ae8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3bf27f51-8237-4faf-a720-28f802d4ebb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0010d4cc-72eb-4b03-a900-fe9361aeeb89",
        "cursor": {
          "ref": "813938d2-b7d5-4692-b73b-3d08ddb016cd",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "67dae9ef-21bb-4992-a323-afca9470de86"
        },
        "item": {
          "id": "0010d4cc-72eb-4b03-a900-fe9361aeeb89",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8f72c8b4-5b99-4878-9a07-4e498573602f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d72f967-9a2a-4c43-b68d-833d7aa0e9f9",
        "cursor": {
          "ref": "dabc7dcb-9564-4754-b201-d24bdb08768f",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9c915d2a-05bd-4b50-bbfd-f8452be55692"
        },
        "item": {
          "id": "9d72f967-9a2a-4c43-b68d-833d7aa0e9f9",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1006403f-2245-4c77-9404-de1f4b09f4f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acf1b47f-ff55-4fcf-a784-d72038f3cd46",
        "cursor": {
          "ref": "06c0d338-692f-4b10-823a-c23f990e1ae6",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c3522d0a-dabd-489b-8631-ec29156b45d8"
        },
        "item": {
          "id": "acf1b47f-ff55-4fcf-a784-d72038f3cd46",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3bc7be86-6297-4305-95fa-301e8c8f1bb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35447dc1-5914-447f-9e17-aa8ce085d414",
        "cursor": {
          "ref": "1a65dd00-2e0c-4927-a27a-061602c44487",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "bda27218-ef64-4c7a-b61b-907f6f3f3943"
        },
        "item": {
          "id": "35447dc1-5914-447f-9e17-aa8ce085d414",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b7f35f3f-f234-476c-813a-1453473c824c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "333ba070-1913-4a9f-a53c-01f1684b0313",
        "cursor": {
          "ref": "ede299bb-015c-4683-af1f-c5b940f84d25",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "50dceb76-0c7f-4097-91d5-bdab954276d2"
        },
        "item": {
          "id": "333ba070-1913-4a9f-a53c-01f1684b0313",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a911c0f7-a509-4b4a-90fc-a9e6749663f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e0b286a-79fd-48ac-9488-d38061a0541b",
        "cursor": {
          "ref": "3c063879-2623-4018-b01c-8f135a4e8d54",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a8930d74-4514-40b5-af61-d1cf97b3d8f4"
        },
        "item": {
          "id": "6e0b286a-79fd-48ac-9488-d38061a0541b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c70bad42-465d-4116-8108-a38f5ed1aa95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6551502-0487-4cf8-92c5-e983c1c18e84",
        "cursor": {
          "ref": "bdf6ec40-e653-4f2c-a2b8-5a4cfd04a91b",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "827dba33-c234-489b-a1d0-850109068b5a"
        },
        "item": {
          "id": "b6551502-0487-4cf8-92c5-e983c1c18e84",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "9753b30f-2f7f-47e0-8784-df4627738d78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43b5f26f-0b1c-4f62-baf2-4bdb440213c9",
        "cursor": {
          "ref": "6d145dd7-3e77-4b54-bd4f-c3cf873720e6",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b7384850-7a63-402d-8a73-da6d0e6fb196"
        },
        "item": {
          "id": "43b5f26f-0b1c-4f62-baf2-4bdb440213c9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "4c5f4055-a891-4191-b750-6298aef4f36e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "868899a1-6282-4ed4-b4d5-a02d8d5292be",
        "cursor": {
          "ref": "363cd867-4384-42cc-9af0-f843131cced0",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "9f8623dd-0dfc-4009-b104-5e6434ef8503"
        },
        "item": {
          "id": "868899a1-6282-4ed4-b4d5-a02d8d5292be",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6491aa90-2e32-4fa4-b9e8-14ebeba52288",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9952477c-1f2d-43ca-b3aa-2a764a588714",
        "cursor": {
          "ref": "a146b42e-0cb4-476e-9276-883279b4c5da",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "612e161d-cdd3-423b-a693-4fd0282ac904"
        },
        "item": {
          "id": "9952477c-1f2d-43ca-b3aa-2a764a588714",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "30e45593-a918-4e02-93f9-83acac7c8e84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f579994-d327-4002-ae75-48cf395b7f5a",
        "cursor": {
          "ref": "96cb075d-54d0-431b-967a-2fe368b4500d",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "c2bdff29-5a12-492b-b882-4bb3e820f657"
        },
        "item": {
          "id": "1f579994-d327-4002-ae75-48cf395b7f5a",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "2c889de0-00b7-49ca-8f09-41f86cc721f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac804976-30d8-487e-a2d1-910e1d59f8bf",
        "cursor": {
          "ref": "99596eb4-6fb3-4d16-9f04-7ff6e9f3b28c",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "e86f72e0-73e1-44c0-a915-a5791ebb54cb"
        },
        "item": {
          "id": "ac804976-30d8-487e-a2d1-910e1d59f8bf",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "a083f5fd-13b9-4bc9-8a4d-d5d3330162b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aac47949-5d1c-4eb6-8124-8b2d034a480e",
        "cursor": {
          "ref": "1596d1c3-5b7e-495c-ae67-a4d480667e24",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "229a4c24-ba1c-4fdc-a717-41e53fddc6e4"
        },
        "item": {
          "id": "aac47949-5d1c-4eb6-8124-8b2d034a480e",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "ad18aa4b-4a8b-4073-9cb8-27f660c62a79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9440c133-0928-4937-bdd5-a4fd4a7da46e",
        "cursor": {
          "ref": "18f7e3d5-9940-4567-9dc4-7be3bd5322e3",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "43ac8e54-2cc2-43eb-aa4e-50da3e589836"
        },
        "item": {
          "id": "9440c133-0928-4937-bdd5-a4fd4a7da46e",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "51a65d73-0593-4e69-980a-8cdc42038bdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "050e6472-fdbf-4894-91f0-16a83dc51e64",
        "cursor": {
          "ref": "f2b4eea7-5704-4ace-807c-6dc2bab71c86",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "8abdb3a7-619c-4b75-a62c-80627020e75f"
        },
        "item": {
          "id": "050e6472-fdbf-4894-91f0-16a83dc51e64",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "ee0d70b6-1be6-441c-8178-7486d974f3b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90ecc905-98e8-4316-b2d1-5be718d1e5ee",
        "cursor": {
          "ref": "bb31bdd5-d585-4795-95c8-f4f2a2090528",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "2f614cea-8973-4928-83a5-90c9a1ec6639"
        },
        "item": {
          "id": "90ecc905-98e8-4316-b2d1-5be718d1e5ee",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f45b81a4-efb2-4b65-ac54-238eb217d9a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4e57f38-11b9-40d4-98d1-322e7886e77e",
        "cursor": {
          "ref": "c96b444b-ba3b-4047-b442-0a79a5faadc4",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "bd239a3b-7a98-4f07-aab6-7114d559f5e6"
        },
        "item": {
          "id": "f4e57f38-11b9-40d4-98d1-322e7886e77e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "3e444a66-5683-4134-be21-786120495e65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "957e29f1-0eb0-4be1-a72d-e725c4d7e189",
        "cursor": {
          "ref": "073db487-a18b-465c-a821-5b15798fcfd1",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "15848c74-d618-48cf-aca5-0aa298921d31"
        },
        "item": {
          "id": "957e29f1-0eb0-4be1-a72d-e725c4d7e189",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "6c540366-1589-4e02-9006-a941d329ee51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf21ec30-5e64-4cb3-b2d9-4d13615c4487",
        "cursor": {
          "ref": "7fd40747-12be-4947-94b8-f7906edd556d",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "dcff283a-5323-41f4-acca-184808427933"
        },
        "item": {
          "id": "cf21ec30-5e64-4cb3-b2d9-4d13615c4487",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "2b1da017-ea11-46cc-b2d8-7ce7bfa7e3e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80677beb-d1b1-410b-9fef-ad34069b1c92",
        "cursor": {
          "ref": "c886c4aa-2c3b-4ced-83e8-da298142ba01",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "cf0f53d0-817c-4b43-807b-5f7fa938b0b2"
        },
        "item": {
          "id": "80677beb-d1b1-410b-9fef-ad34069b1c92",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b95c143d-0668-4c1f-8c9a-24e7505d9e30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be016e4c-9c90-496e-9df1-728dc821bbbe",
        "cursor": {
          "ref": "c710aa12-afd8-4bb7-ad8a-953c57fb58af",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "16496084-07b9-460a-8b64-15474d9095f5"
        },
        "item": {
          "id": "be016e4c-9c90-496e-9df1-728dc821bbbe",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "9bcf67b5-a434-442b-8dde-98190d32bb57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f96c1f71-d595-4806-ad0f-69ea99123fd6",
        "cursor": {
          "ref": "076af350-99bd-48e5-9ef1-96e6beef3ae2",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c3d36d56-39b7-4b26-8132-38e0defc8886"
        },
        "item": {
          "id": "f96c1f71-d595-4806-ad0f-69ea99123fd6",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "0cd59f6d-8c51-4478-adab-a1b25227b51f",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "c147eece-718d-4c33-b372-3bb8a758ec7d",
        "cursor": {
          "ref": "2261c757-6c86-4df6-b21c-44aad3822207",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "0d1a61c9-d66e-4520-9141-f819a750d449"
        },
        "item": {
          "id": "c147eece-718d-4c33-b372-3bb8a758ec7d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "543411ef-9b58-444d-a74f-11a9f6b556f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af2ef811-4266-4c7d-b9eb-4c852f17f98c",
        "cursor": {
          "ref": "406eada7-fe4a-40ff-b8c8-27fbfe87b923",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a86fd81a-0951-458b-8f3d-8f3a8c9ef7ba"
        },
        "item": {
          "id": "af2ef811-4266-4c7d-b9eb-4c852f17f98c",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b4bfba43-74ae-4387-acd1-feea8f703d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34de6750-7a49-48d9-9cd2-7c4f1b7e4dd6",
        "cursor": {
          "ref": "fb78a934-4865-439a-8cc8-da2a37c9e9b2",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "b407b392-014a-49c4-bc39-b18deaf61045"
        },
        "item": {
          "id": "34de6750-7a49-48d9-9cd2-7c4f1b7e4dd6",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "f72147dd-efd3-41aa-ab0f-a633176c368b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dade750-57d8-450d-ac2e-9cf5b8f51149",
        "cursor": {
          "ref": "3ffd3afb-b4da-48c1-8bee-9498b1403aa3",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "96da1e54-75f4-45dd-ac99-c48a80b960b3"
        },
        "item": {
          "id": "5dade750-57d8-450d-ac2e-9cf5b8f51149",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "6ff34302-220f-438c-9398-a9c3088bbd92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b68be0b-9b0a-449c-adf6-287062c21a6f",
        "cursor": {
          "ref": "4d8c9e84-4d09-420f-9eec-1b48f15ac8cb",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "33236bc5-7bdb-4f1b-a0f1-cb57797240ef"
        },
        "item": {
          "id": "3b68be0b-9b0a-449c-adf6-287062c21a6f",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "238b51b0-f5a6-4b63-b944-3730208534d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03286274-a193-4624-aad3-765d7152855d",
        "cursor": {
          "ref": "be18eb9b-832a-4ca0-828c-fe4f2098df79",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "23a212ca-f2c5-4114-acc1-56d686125d0c"
        },
        "item": {
          "id": "03286274-a193-4624-aad3-765d7152855d",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c0f335e6-7891-40aa-8b63-7b94c6cf74b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7932a3ac-c616-43c3-943a-40a56d356a30",
        "cursor": {
          "ref": "7a79a11e-157a-4a39-882a-bb30dd641539",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "1e292b72-85ac-437b-b4db-af15328f9b8e"
        },
        "item": {
          "id": "7932a3ac-c616-43c3-943a-40a56d356a30",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "086551e8-84ed-424a-8031-78295cefc886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5e4b1bd-40e2-4b13-a98e-d62f2cf79c7a",
        "cursor": {
          "ref": "5371272c-6498-48ed-89c7-ffa53cc5d137",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "380c4490-884b-44fe-a9e5-e33bb14e51d7"
        },
        "item": {
          "id": "b5e4b1bd-40e2-4b13-a98e-d62f2cf79c7a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "6fc2404e-541b-4d6e-9151-6fc2a2f280bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33f5c559-4652-4473-b117-044be7a1a50f",
        "cursor": {
          "ref": "a6316a7a-11bb-4bc2-95d6-52b7f0cc65f1",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "9df50d0c-9f4a-4a17-ad8c-0f5ac78ffe06"
        },
        "item": {
          "id": "33f5c559-4652-4473-b117-044be7a1a50f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "52718398-b0a9-4e71-8fec-a792d45c05ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c2ae35c-0757-4bf4-8128-0f1d320617c8",
        "cursor": {
          "ref": "251e31ce-4cf7-4ec8-b501-fa575fa547fa",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "3b719c6f-3c66-4d7a-b81a-555a34b457f8"
        },
        "item": {
          "id": "7c2ae35c-0757-4bf4-8128-0f1d320617c8",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "eaf7eb2b-6439-4d7d-90e3-38cc908c8771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddd9110f-b6ee-44c4-9e85-aac6521094d7",
        "cursor": {
          "ref": "97306675-1c13-4bcd-9e68-eca874412b73",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "84e8351f-ca12-427e-b731-b458a15ad1bf"
        },
        "item": {
          "id": "ddd9110f-b6ee-44c4-9e85-aac6521094d7",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e9f3adeb-5782-4c5e-a10b-5ffed94dae76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2ee0224-7451-40fb-b2ad-bb79c209697e",
        "cursor": {
          "ref": "9b09d4f3-f346-44b4-a1fb-6426ccbd08e2",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "3335c38b-3b1c-4e39-987d-85d4eda51d40"
        },
        "item": {
          "id": "f2ee0224-7451-40fb-b2ad-bb79c209697e",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "19681bb2-fe0b-47c0-9be7-f805f6288934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7ceb3cd-afdb-4800-9569-6895187a518e",
        "cursor": {
          "ref": "94a33e03-49c8-482a-adfe-a27754cd972e",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "6ab7cef0-2ba8-43ba-abbb-809b267addd3"
        },
        "item": {
          "id": "b7ceb3cd-afdb-4800-9569-6895187a518e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "bc57f5b0-03e6-47c4-bb93-401019969c69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5602cc6e-9d2f-4f1f-978d-f22fc0ecb00f",
        "cursor": {
          "ref": "d89e72e3-2894-421b-b993-8b2480ff6158",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "4c94d7e1-2fd6-498f-9e13-8d1de724382e"
        },
        "item": {
          "id": "5602cc6e-9d2f-4f1f-978d-f22fc0ecb00f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "fd43f15c-b64e-4747-9bff-673c7fd8b8b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b79b0ac6-7568-42b2-9931-2d85147b06c3",
        "cursor": {
          "ref": "e492dcc1-371f-49ef-8a8a-780ea06676ba",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4de5b9da-a944-49aa-a7e8-739c28a66d14"
        },
        "item": {
          "id": "b79b0ac6-7568-42b2-9931-2d85147b06c3",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "5d75533d-105d-4bb2-9f6c-8ba1fc0caed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbeb298d-7dcf-42fe-94e1-0b5765ff4c26",
        "cursor": {
          "ref": "f7dcae22-ded0-4803-b6c0-5fbd7ac51cb6",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "8700c1d0-a642-4d2a-bd3c-e9dc7b3d2690"
        },
        "item": {
          "id": "fbeb298d-7dcf-42fe-94e1-0b5765ff4c26",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a40cec71-4b25-4fff-9607-67b96076b4b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f9a3cc1-0d75-4d10-b756-72d435aa4c1b",
        "cursor": {
          "ref": "bc0efe25-5524-4086-8a99-dc6d6bcd0f82",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b21a4bae-b7b5-4e16-8cfb-fac9e0c5ca90"
        },
        "item": {
          "id": "4f9a3cc1-0d75-4d10-b756-72d435aa4c1b",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c200f0a7-015e-43d4-bc9f-6d257be586e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd7b9d5e-3ae7-439f-8165-3b33c4b55ad6",
        "cursor": {
          "ref": "6d473575-3b51-4078-a632-1282c9f6cedc",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "9f72fb5e-e402-43b7-a62f-ffe5f2ff4053"
        },
        "item": {
          "id": "dd7b9d5e-3ae7-439f-8165-3b33c4b55ad6",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "474247c4-4e50-4274-8d3b-117a7981bfeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dee7db9e-b276-489a-a557-eeadda7a8836",
        "cursor": {
          "ref": "4d4d32e5-de96-4153-ad47-714857b72c53",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "9ce8a163-e9d8-450a-b687-b4291ca30079"
        },
        "item": {
          "id": "dee7db9e-b276-489a-a557-eeadda7a8836",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e06d2e5d-75a1-43dd-8eed-c6754a9a0813",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c17400e-62f0-4dc7-9e14-f817e9505e38",
        "cursor": {
          "ref": "11e0a1a0-5404-4dc4-9ab9-1465c6e4e6cc",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "a5b3cce0-2767-40ff-877d-2a7f3a297c3b"
        },
        "item": {
          "id": "2c17400e-62f0-4dc7-9e14-f817e9505e38",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "d9778f44-bb44-4038-a774-2c3d450bd354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54890cb6-c566-4090-a519-1ea7d2133393",
        "cursor": {
          "ref": "eebbd632-e7fe-4ca6-887a-837d12c3f630",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "b3485de1-4d50-4cfc-ad17-dc42148d9c4f"
        },
        "item": {
          "id": "54890cb6-c566-4090-a519-1ea7d2133393",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "18a093e1-a6eb-4412-a35b-bd8ab6092169",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2efc97d7-1909-40ad-bc61-0130f6edba4f",
        "cursor": {
          "ref": "2ab14b93-b05a-4cd9-89f9-8f663df2ec03",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "39505561-3e4b-4f06-85b8-64cdd9509e02"
        },
        "item": {
          "id": "2efc97d7-1909-40ad-bc61-0130f6edba4f",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b1678c6a-b2e6-4a99-b81e-bf8cd83aac3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6dbbe63-8096-4e07-b3c9-d2962f3af05b",
        "cursor": {
          "ref": "6831b62b-0b48-4326-b411-d364f5600eb9",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "2a8aa6b9-4c68-4a37-80da-2d45d473a740"
        },
        "item": {
          "id": "a6dbbe63-8096-4e07-b3c9-d2962f3af05b",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "7214bd6e-71a3-4dc1-ab5f-2a4e5dc40697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc3551d3-e7be-4727-b9ea-508adb79e30c",
        "cursor": {
          "ref": "def9def2-1ab6-4fd4-ae26-d18fde9be42d",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ca8db32d-b98a-45c6-9c8b-2e112b83efbd"
        },
        "item": {
          "id": "fc3551d3-e7be-4727-b9ea-508adb79e30c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "381a70f2-24db-4873-a31b-694021bfe48c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87fb885b-27ec-4f67-bb1a-b9a85db77d88",
        "cursor": {
          "ref": "2640a7a1-e287-4b48-be6c-0e86ee80b0e6",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "9476dcac-860d-436d-a86a-c0bf53b4fbb0"
        },
        "item": {
          "id": "87fb885b-27ec-4f67-bb1a-b9a85db77d88",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "3935db81-8681-4f02-ad98-7c3a12271eb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56b7f62e-65fe-469c-b556-1b8dab52cde7",
        "cursor": {
          "ref": "71e316b3-10cd-45be-b8ff-f57fc9365b1f",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d35b0723-9718-41c3-9bfb-db83884530e6"
        },
        "item": {
          "id": "56b7f62e-65fe-469c-b556-1b8dab52cde7",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "3a2ac43c-6faa-4692-aa63-a463464e46b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa525b80-77b6-4bd6-9adc-bccd420b6b8b",
        "cursor": {
          "ref": "7cd6a6ce-53ba-4def-9f04-d7fbe4ff6322",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "4457219e-0e04-4ff4-ae3f-b4b3a1e243ea"
        },
        "item": {
          "id": "aa525b80-77b6-4bd6-9adc-bccd420b6b8b",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "985fd6ef-c85c-4e73-8dd0-66c1392de953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff508386-2b3c-4721-bfdf-8b4225cac68d",
        "cursor": {
          "ref": "c0d4bb40-d7aa-4d50-afb0-28f27194b8c2",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "c923be61-0a58-4659-a3b4-e4281944acc2"
        },
        "item": {
          "id": "ff508386-2b3c-4721-bfdf-8b4225cac68d",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "0db138a5-a4d4-4892-a90c-348df36490cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb72617c-d020-4722-be7f-ab93a40540ed",
        "cursor": {
          "ref": "418c3f77-1d48-4eab-a116-b5c53010a1bb",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "1c36540c-ef32-4986-9517-6fc6bbdf923a"
        },
        "item": {
          "id": "eb72617c-d020-4722-be7f-ab93a40540ed",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b6b42ee4-3aec-422f-bf65-799e889b761b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93e864c9-b8ac-49f2-895a-08f975d960f9",
        "cursor": {
          "ref": "1a3c6888-1972-4767-b9fd-37f2510085ab",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "40ef633b-4995-4bea-b043-0082fb5d91c5"
        },
        "item": {
          "id": "93e864c9-b8ac-49f2-895a-08f975d960f9",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "d1b1e225-dd03-41ca-8fcf-0b83b98eb9c6",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "bfa1146a-0d63-4df8-ab0c-451be0c6171f",
        "cursor": {
          "ref": "2ac4891c-8f6a-468c-bcf6-2522b8999fd1",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "48e5cc0f-0fa7-4183-9a4b-9b6fff474df1"
        },
        "item": {
          "id": "bfa1146a-0d63-4df8-ab0c-451be0c6171f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "3ca07679-0c20-4269-8b86-32706ac93c5c",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "341f3aa8-a18e-4249-afe7-9a4b5a76f6f0",
        "cursor": {
          "ref": "539c4f3f-9659-40aa-a1e8-eb46912f8e78",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "43e4aad6-b5e2-4c55-b8a8-bb49a6015421"
        },
        "item": {
          "id": "341f3aa8-a18e-4249-afe7-9a4b5a76f6f0",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0434c491-4482-4a32-baaa-36c780395eb4",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "68b45686-5afd-4586-9418-6591c42e0293",
        "cursor": {
          "ref": "7315dcf1-b74e-4005-b523-f639e71503f1",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "0e714020-8a0c-4e29-aec3-3f88d26d8772"
        },
        "item": {
          "id": "68b45686-5afd-4586-9418-6591c42e0293",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "4fe82d4d-c1ef-452f-be75-14ffa3d23fa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b6170f-1403-4c99-b590-83b37ef7f0cc",
        "cursor": {
          "ref": "a636f418-3d86-460c-ac03-13c02cc23593",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "694aeee2-8fb9-4153-a5e6-071094fdcf6b"
        },
        "item": {
          "id": "e8b6170f-1403-4c99-b590-83b37ef7f0cc",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "77636aea-37f1-496b-9441-b5931eab203e",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "fec808b8-7256-4e12-ad30-598f4c9ece29",
        "cursor": {
          "ref": "bfdc8686-e1cb-4308-b061-a580fa9b230e",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "d4679c2c-eebb-453d-83a1-150e916c55a0"
        },
        "item": {
          "id": "fec808b8-7256-4e12-ad30-598f4c9ece29",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "5f46c69e-f940-4b35-851f-8632fd54f2b7",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "9c3c6c5b-7564-4171-b92e-c55fdc979bd3",
        "cursor": {
          "ref": "e5b31319-d2fe-44c3-bbd7-226b1b37f87e",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "04d026ad-b838-48e7-a1d7-6d8cc2bdb11c"
        },
        "item": {
          "id": "9c3c6c5b-7564-4171-b92e-c55fdc979bd3",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "36250534-2132-4b47-a9ee-e3a062b8072c",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "59940050-8489-4ad4-96e5-25e5685a3dfb",
        "cursor": {
          "ref": "592c9211-61d9-4ad7-bd70-2ff1b62b7a03",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "a46d523e-c797-4f3c-bc63-17973bc39e03"
        },
        "item": {
          "id": "59940050-8489-4ad4-96e5-25e5685a3dfb",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b12db099-9411-48a7-bef3-7300acbb25eb",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "37e3771b-63cd-4863-b3c7-a8aca0c10dbc",
        "cursor": {
          "ref": "23fa2d76-7cae-4059-86a8-9a07cb7f08aa",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f2d903d8-9622-4598-b0ce-aca53800da16"
        },
        "item": {
          "id": "37e3771b-63cd-4863-b3c7-a8aca0c10dbc",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "3b412335-1e78-4846-8e8a-d7a6bcb7f04b",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "92f2f82c-075a-4776-b2fc-7998c94795db",
        "cursor": {
          "ref": "a13a859a-562d-4cc7-9182-4809f470c68a",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "5aa356bd-d683-4109-966e-1fb30a75800c"
        },
        "item": {
          "id": "92f2f82c-075a-4776-b2fc-7998c94795db",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "30de1dbb-75f6-4ca4-afca-3b019c059583",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "5af4a328-0c81-49c0-9f0f-732042f70bfe",
        "cursor": {
          "ref": "3c04bad5-e63c-481e-832d-60362dc433d0",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "8813e1c3-24b1-498b-b838-2a4401ab629a"
        },
        "item": {
          "id": "5af4a328-0c81-49c0-9f0f-732042f70bfe",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "3f508b2f-adfd-45fa-8c37-060f89bb705e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8ff54ab-7474-4cc8-85ca-482d557f5ed8",
        "cursor": {
          "ref": "43296566-c58b-47f3-bf4a-59add421e566",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c251a6d6-41a6-4f83-a1dd-473a1816e76e"
        },
        "item": {
          "id": "f8ff54ab-7474-4cc8-85ca-482d557f5ed8",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "1821fcea-4758-4f30-825c-8595114ada9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a92a6c1-09be-4ab3-8d50-1d3f06e466ac",
        "cursor": {
          "ref": "36ea41c9-f796-4231-97ee-0d146b39d690",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "9df99766-9188-42fb-b2b1-e4e37b89bd17"
        },
        "item": {
          "id": "1a92a6c1-09be-4ab3-8d50-1d3f06e466ac",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "a3d9847a-4359-4881-bb75-c350c2595f20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71ea9870-9614-4c09-ba15-d98f2f7c5e6e",
        "cursor": {
          "ref": "490ec3b7-6c43-41ea-bca8-c8b0f20c3780",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "59a1d7a0-c154-44a9-9467-8d6b2e0eeeb7"
        },
        "item": {
          "id": "71ea9870-9614-4c09-ba15-d98f2f7c5e6e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "5d02b82a-5bc4-4dc3-91dd-2f6f377fd329",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c21deb95-0735-474d-a89e-cdff4be40bf5",
        "cursor": {
          "ref": "5e1390cc-f38a-4fd6-aefe-4a3f31848520",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "871f9c29-e9e5-44e1-b65a-a405f1432962"
        },
        "item": {
          "id": "c21deb95-0735-474d-a89e-cdff4be40bf5",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "4d158536-e0ad-4b2a-9ff0-ccaef0d890ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edeca844-132a-41a8-8847-c6ab0e45040e",
        "cursor": {
          "ref": "306a2495-7213-4bc7-a5a9-89a26ecdf03f",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "1665afd3-77b8-4ded-9ffe-eac85a5ff041"
        },
        "item": {
          "id": "edeca844-132a-41a8-8847-c6ab0e45040e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "1b447b96-74a2-4cc5-b5b1-632a4f2730e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5400758-4ed5-4422-b355-0c8498f1925a",
        "cursor": {
          "ref": "d39e53f2-7ac6-4e06-b765-4e6d8ffa9a70",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "e2050241-db46-4433-9c9f-82f8caa7ccc4"
        },
        "item": {
          "id": "e5400758-4ed5-4422-b355-0c8498f1925a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "3522c976-730b-42c5-9b08-eca965b9b414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea2e1ec3-52e0-4b29-87ee-5320431a7bdb",
        "cursor": {
          "ref": "17b3d3df-244d-4a97-bc26-8cd061c437b6",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "0791da8a-6ba8-42ef-a752-aba85339bef7"
        },
        "item": {
          "id": "ea2e1ec3-52e0-4b29-87ee-5320431a7bdb",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "73ce6991-adb9-46db-ad18-74f025ce7b04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff0d1e64-adb3-4672-83ab-56549290c607",
        "cursor": {
          "ref": "9f479620-18de-4093-82c6-70c09fa57fda",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "d948e597-2b9e-4401-a2d2-f9768e9a9600"
        },
        "item": {
          "id": "ff0d1e64-adb3-4672-83ab-56549290c607",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "4feaf4df-cfed-47f6-86aa-237253d16c76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a44f9791-ef7b-43fd-90a9-28bdf4a29bbb",
        "cursor": {
          "ref": "8a83bad9-17d6-4f89-8b61-d591e1e7f2a7",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "aa76f6c3-aeb3-45c4-88b3-2df8493b3c93"
        },
        "item": {
          "id": "a44f9791-ef7b-43fd-90a9-28bdf4a29bbb",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "477a3bae-70ed-4c1f-af85-816fcf89057a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6c65091-839b-4fe9-81fa-f70f6e940b7f",
        "cursor": {
          "ref": "21e7bc14-ebc5-4c07-a2fc-71583f451768",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "60d5a243-c15f-4076-804a-c35964e09e10"
        },
        "item": {
          "id": "a6c65091-839b-4fe9-81fa-f70f6e940b7f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "9d642601-52b7-42d8-b971-ea0b3905494b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95e13665-c9ef-4fb6-b276-1ff230145292",
        "cursor": {
          "ref": "04a8d34c-438a-413e-bfb5-bc8e689098c3",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "ff59c3f4-0068-4018-9b14-0125c6645464"
        },
        "item": {
          "id": "95e13665-c9ef-4fb6-b276-1ff230145292",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "23dd533f-adcf-484b-a34e-0c76997280ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b70267d0-a8c2-4eee-9c3b-2ba3fa85a7c2",
        "cursor": {
          "ref": "75532012-8873-47d8-9ca3-6a94d0733c02",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "d01b8b0b-8018-4597-ad9a-7e9997917618"
        },
        "item": {
          "id": "b70267d0-a8c2-4eee-9c3b-2ba3fa85a7c2",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "3239487e-4f83-4caf-874d-4b4ae76df9fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "837267b0-b69f-479d-8217-513730777070",
        "cursor": {
          "ref": "443a4edc-c42a-4932-8f58-e064c6e2cdb9",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "1f6a243f-1a30-4da5-beb0-bef9fad104a3"
        },
        "item": {
          "id": "837267b0-b69f-479d-8217-513730777070",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "bd3e8cb5-a9f7-4367-82c9-172b1fb30d43",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "41a0c5c4-dc3e-42f2-ab78-bb94e1a3fb6e",
        "cursor": {
          "ref": "f948ef53-6f2d-4674-bee5-1fb38ec82483",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "dbe59227-500a-4f7a-8c49-89d70d796ce8"
        },
        "item": {
          "id": "41a0c5c4-dc3e-42f2-ab78-bb94e1a3fb6e",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "1767095c-8492-4982-8446-417cec317e69",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "7fc58a2b-96ff-4021-aa58-613b87ae7543",
        "cursor": {
          "ref": "b9bfcc01-f55f-4c41-996e-ba28bed3c4fc",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "41d7683c-39a3-41b3-b29b-e869ad998f2a"
        },
        "item": {
          "id": "7fc58a2b-96ff-4021-aa58-613b87ae7543",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "cf06afd0-65dc-4172-83d0-a1d2a45a8923",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "4a261828-4250-4d64-8c17-de6e7892f157",
        "cursor": {
          "ref": "915d3216-00a0-498e-b01b-88147877e90a",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "96b8e251-e650-4e38-b509-9a8f7c8c54d4"
        },
        "item": {
          "id": "4a261828-4250-4d64-8c17-de6e7892f157",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "1218da96-7447-4d48-9736-6bcd9ef64672",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "f45be2dc-2f44-451d-95e6-d807b3255998",
        "cursor": {
          "ref": "b626def0-e859-4bb6-88b8-4f862d0716a0",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "1dfede41-31ac-4b72-b1f7-77bf75e77a2c"
        },
        "item": {
          "id": "f45be2dc-2f44-451d-95e6-d807b3255998",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "bcbda5c2-4f2f-44c8-9f32-ac825829b7d0",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "01c0998a-ada8-49ec-bfe0-bbc3618191dc",
        "cursor": {
          "ref": "e610a440-7f7f-4c0a-ad24-6f18098cda29",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "6eb8693f-8af3-4e64-a768-5025edc21a60"
        },
        "item": {
          "id": "01c0998a-ada8-49ec-bfe0-bbc3618191dc",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "834cb1a0-e8c9-4b14-8e63-16422fa0b860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7fc9c3b-7984-4ffb-8c42-f952c9378818",
        "cursor": {
          "ref": "e4c0734a-cac3-4969-8876-73de1756f09d",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f84ca7b4-8f2c-4aac-9c5f-c2ee68f2e742"
        },
        "item": {
          "id": "f7fc9c3b-7984-4ffb-8c42-f952c9378818",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "4f86c3e1-fe94-4d6a-90bb-4f13ecdd9de9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5ca319b-e0f1-4bb1-9777-d04e60fc0c59",
        "cursor": {
          "ref": "f7d468fa-bc31-4e01-be16-af0a188c484c",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "20c58059-6ea2-4085-bd08-6cdf8aae8deb"
        },
        "item": {
          "id": "f5ca319b-e0f1-4bb1-9777-d04e60fc0c59",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "bdbef383-09b7-4fc2-9f44-32b54bee0982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33d3ee78-3f21-444f-a0ff-fef9ced562f4",
        "cursor": {
          "ref": "dd2c8b8f-8a11-4369-ba55-e7501f688b27",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "14bdc39b-b2ae-4c10-86f0-148e2983fcea"
        },
        "item": {
          "id": "33d3ee78-3f21-444f-a0ff-fef9ced562f4",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "d39aa299-530e-4ded-8cf9-10b146affe17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f49fe32-804f-42a5-8df9-37d5d1a3f71b",
        "cursor": {
          "ref": "94f834a4-b7f7-407b-a970-cea1b0bfac00",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "9cbcf047-dab5-4315-b8e0-bec5db98653e"
        },
        "item": {
          "id": "0f49fe32-804f-42a5-8df9-37d5d1a3f71b",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "3a4098a7-90d6-45c6-bf12-f9c97cf8e775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5df2ec49-2bc9-4638-8826-0044fa896781",
        "cursor": {
          "ref": "c9903093-c50b-483d-a345-25a7b8394a33",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "498ae45c-54d8-4485-9aa2-04621244c86b"
        },
        "item": {
          "id": "5df2ec49-2bc9-4638-8826-0044fa896781",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "982da42c-02d6-4777-89a7-2efc2edc7669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aec5e9de-f979-43bf-b098-493006c4d5e7",
        "cursor": {
          "ref": "7cfb4d22-251b-4de9-8063-7e2cc68b7974",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f648c0ae-0611-4e8b-91ba-4be1563468fb"
        },
        "item": {
          "id": "aec5e9de-f979-43bf-b098-493006c4d5e7",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "19d43387-499a-47bf-b4d9-1ef69f4287eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd55d197-3fa1-427e-9e8b-38ccb443a703",
        "cursor": {
          "ref": "49d89191-7fe6-48ad-b706-889801ea41db",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "fdc2c1b7-ab59-454c-959d-23f294e3a65d"
        },
        "item": {
          "id": "cd55d197-3fa1-427e-9e8b-38ccb443a703",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ccfd6fec-76b5-40fe-bd83-7a34ba686278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f14bbedd-8341-43ae-b565-2495d68e39cf",
        "cursor": {
          "ref": "2e22718d-eb53-45bf-bea9-fa701832fcb8",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "eb323ed1-6b6d-4498-9480-dcfd9f19cd0a"
        },
        "item": {
          "id": "f14bbedd-8341-43ae-b565-2495d68e39cf",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "1902ff76-f284-4408-ad19-1158d97f44b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "181ae357-f234-4b5f-87eb-7e4e0275e0eb",
        "cursor": {
          "ref": "d6003426-322c-4f2e-a04a-5a94e76b7436",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "5c66d061-c210-427c-8de5-89f9e9010aba"
        },
        "item": {
          "id": "181ae357-f234-4b5f-87eb-7e4e0275e0eb",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e201f700-94de-49f2-90ac-48b1759d2de3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9f73ff9-598c-44d2-944a-a855d066f3d5",
        "cursor": {
          "ref": "ab6426a3-67e2-4524-9355-2e1ee5837a7f",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "1886d6d2-6627-42f4-8b78-2deaafada233"
        },
        "item": {
          "id": "a9f73ff9-598c-44d2-944a-a855d066f3d5",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e59279f2-342b-45d7-9b35-4d5964d6eb34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "315f763d-2f01-44d5-919d-11742ca25925",
        "cursor": {
          "ref": "3ad10466-16bf-4ef1-982a-9d980866dd32",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "5653eff9-2c63-47a4-9eb1-1c14de388351"
        },
        "item": {
          "id": "315f763d-2f01-44d5-919d-11742ca25925",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "99027e10-7d97-46b3-a292-2b39be4402c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b38a479f-1be9-468b-a72d-1528885aa718",
        "cursor": {
          "ref": "a0f6052f-e82c-42ad-91a4-b8e3d448bed8",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "db907e68-9996-4293-8cf3-78b3975d7636"
        },
        "item": {
          "id": "b38a479f-1be9-468b-a72d-1528885aa718",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "7c1de67d-66e4-484b-9e08-4e2ba224fcf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "315c9e0f-22d1-4af8-95ea-60c844b390bd",
        "cursor": {
          "ref": "a1ad89c1-01a7-487a-928b-5955fcdedec5",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "04abbba1-1663-4a6e-a407-35f5c45fb322"
        },
        "item": {
          "id": "315c9e0f-22d1-4af8-95ea-60c844b390bd",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "74786586-1554-4513-821e-cf5c74788b2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "516debc2-31bf-499e-bdd6-f0c6dd74aab2",
        "cursor": {
          "ref": "38c3e724-e0b6-4f03-a989-6c818af40efe",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "76679ad4-3981-4c84-8682-1f4d3244c7cd"
        },
        "item": {
          "id": "516debc2-31bf-499e-bdd6-f0c6dd74aab2",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "6901aaa3-b72b-4feb-9348-447885235e73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa8d2e2d-8ea8-4dcc-b35b-59b6c76f1e5e",
        "cursor": {
          "ref": "c497e41c-6444-483a-9582-cce054a1d512",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "2db1be0b-c831-417d-892a-6629b6604522"
        },
        "item": {
          "id": "fa8d2e2d-8ea8-4dcc-b35b-59b6c76f1e5e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "cbdab517-d847-412a-8a93-d7ae0b8a7027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "967c4150-9d44-4675-8512-6a8a76cfb52a",
        "cursor": {
          "ref": "13a19085-4df0-4f60-a17e-0ced7bfaabaa",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "ba2082ee-0945-4324-8229-efb5a91e490b"
        },
        "item": {
          "id": "967c4150-9d44-4675-8512-6a8a76cfb52a",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "4d097b42-21fb-4979-af2d-d597cb87166c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ffadaf0-cea1-4a14-8cc4-a7122f792ca5",
        "cursor": {
          "ref": "98e14c5e-6cf7-44c1-9dd6-48f622d3b805",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "2bcdf411-11ea-4afd-9678-c670c212fc89"
        },
        "item": {
          "id": "5ffadaf0-cea1-4a14-8cc4-a7122f792ca5",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2868e1c2-09ad-486d-94d7-1e7a78d43668",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0fcee1a-e32f-4d34-bfc3-e2626e525567",
        "cursor": {
          "ref": "439b42d7-c755-41fe-8ba7-061d328671a7",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "5c1316cf-08b1-45ed-8bba-5e0880560adc"
        },
        "item": {
          "id": "c0fcee1a-e32f-4d34-bfc3-e2626e525567",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d2d347f8-8bf2-4aa1-8a8e-3057027cb7a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98542b60-3685-42b2-b178-ae20ba89fdc7",
        "cursor": {
          "ref": "76d1d39a-d1f4-403a-a3a7-5b4107e63bf7",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "379f2557-63d4-4457-9a60-6bc3a2528a17"
        },
        "item": {
          "id": "98542b60-3685-42b2-b178-ae20ba89fdc7",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "48948288-af56-4db6-ac49-924671e470cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d9a683e-7cc5-4fa5-bdbb-5c07a53aa010",
        "cursor": {
          "ref": "1d7b4b27-e10d-4d46-aeec-b56d964515e0",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "5c8ca987-9183-443f-94b2-5e6a88779516"
        },
        "item": {
          "id": "1d9a683e-7cc5-4fa5-bdbb-5c07a53aa010",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "dfbf0e68-33c6-47e4-b256-e81c2dfbfcec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cca99bb-b575-4f48-bb64-3e0f053f4ef2",
        "cursor": {
          "ref": "c4320ba8-36d8-4d0d-bc19-11a6fed3c852",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "c258abdc-6405-4980-b099-88245b4d3db6"
        },
        "item": {
          "id": "4cca99bb-b575-4f48-bb64-3e0f053f4ef2",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "3f5ede3d-d8f5-4bfa-8826-6166197a7ee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b1caa20-4af5-4882-83e6-bcebac38b80c",
        "cursor": {
          "ref": "5d3b9f50-0de3-418f-9e50-e0dffff852c2",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "4deff31c-afc0-43ec-8eb1-a955f53a2cec"
        },
        "item": {
          "id": "3b1caa20-4af5-4882-83e6-bcebac38b80c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9987f3d6-e824-41cc-9210-6a2ef30da40e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da69dfd3-0ae1-490b-a961-68fa8de7a7f2",
        "cursor": {
          "ref": "409cccbf-82f6-417a-9eec-d5da4895b18a",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "92957a34-f92e-4b85-97ce-a5e1cd50a275"
        },
        "item": {
          "id": "da69dfd3-0ae1-490b-a961-68fa8de7a7f2",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "8a215fd3-27ad-45ca-9899-51a20c155236",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d150d575-97e0-45e3-a6ac-4da2c722ac22",
        "cursor": {
          "ref": "bfc05f77-b620-4932-b004-520929017ce0",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "0a3bee7c-8106-4ead-bf8b-e915c62c58b7"
        },
        "item": {
          "id": "d150d575-97e0-45e3-a6ac-4da2c722ac22",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "53d306e1-2517-412b-96b6-abc34f37410f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4c573cb-1fa2-4204-82b4-bf5d9237a54c",
        "cursor": {
          "ref": "e2fbd790-96e0-4f8e-90ff-f5b5e838ef33",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "f4109cf4-4ac9-4dfa-93fc-89d6edae00c1"
        },
        "item": {
          "id": "c4c573cb-1fa2-4204-82b4-bf5d9237a54c",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "beab4b2c-7008-4651-9451-5817c5386c27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eba0d956-2083-46bb-986e-c5beb8563b54",
        "cursor": {
          "ref": "6bc3adb3-1b38-4955-8228-fcffdc47b41d",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "3826340b-c060-4056-9d93-372d80606070"
        },
        "item": {
          "id": "eba0d956-2083-46bb-986e-c5beb8563b54",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "7a9cb613-6db5-4e65-a958-bef8ae80a980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c19ef37-5f6a-417d-94e1-486d5d159d89",
        "cursor": {
          "ref": "c03b7d37-4ac4-4f35-9117-511fa5e1d220",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "2d4cfee9-47ff-4b4f-b367-2bfe67a19801"
        },
        "item": {
          "id": "8c19ef37-5f6a-417d-94e1-486d5d159d89",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "eb230954-e8f4-4fe1-978e-0794f62318a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a672fa6-c7c2-4bd5-815a-e998865dabad",
        "cursor": {
          "ref": "5200e4de-723f-400e-86c3-f0fc42436798",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "fea062d1-0e5d-4cf0-973f-5e891ff90efa"
        },
        "item": {
          "id": "8a672fa6-c7c2-4bd5-815a-e998865dabad",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a943dc18-76bc-44a1-bb7e-e637ff95fb74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "214f9f8f-5648-47b2-a207-cf050e0954cf",
        "cursor": {
          "ref": "9f575c75-4856-4f96-a16a-4037c18c51eb",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "8d118ee3-63c3-49d0-81ad-c8819c5ead7b"
        },
        "item": {
          "id": "214f9f8f-5648-47b2-a207-cf050e0954cf",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "ee3972ff-94e1-46fa-88c0-14e9b9bdfa63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58da9e01-45ab-4d4d-a03b-4c09b80492bf",
        "cursor": {
          "ref": "7ae691dd-cf6c-4bbf-89f0-d0d9a00d3b96",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "5fcca057-91dc-4fb8-929c-fa8ecf5f7b94"
        },
        "item": {
          "id": "58da9e01-45ab-4d4d-a03b-4c09b80492bf",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "4740b51f-92a2-4f94-b290-bad54f8873bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38a6a534-a95c-4148-8230-97e72c2a3a19",
        "cursor": {
          "ref": "7515ee83-373d-4502-ac70-805aacd21ae6",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "8a3873b8-fd46-4811-af97-7eead2787ec5"
        },
        "item": {
          "id": "38a6a534-a95c-4148-8230-97e72c2a3a19",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8943933e-a957-4ff5-a248-014245bb2e8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aa187f9-47ec-4366-89c9-722c2ae9ee0a",
        "cursor": {
          "ref": "d5c36f3e-0aba-43f9-b31e-54abc59931c9",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "e67f6691-0e3d-4a32-9132-ef8bf8a3f00c"
        },
        "item": {
          "id": "4aa187f9-47ec-4366-89c9-722c2ae9ee0a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "61b3d92d-7dc9-4121-bad2-7443f4b3683c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba007044-c0d1-44bf-b906-1aeb78657d5f",
        "cursor": {
          "ref": "9f46edd0-ae4d-450a-a9cb-5685fcd35aaa",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "123f4b83-d859-487a-9a47-10f75f2cda9b"
        },
        "item": {
          "id": "ba007044-c0d1-44bf-b906-1aeb78657d5f",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "19ed2812-bb98-46d4-82b2-59992785b0da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "061fff8d-8773-423d-baaa-4b9f05019add",
        "cursor": {
          "ref": "a92fbd68-8a05-4f93-929c-7733275ae1e9",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "57d88fd5-770c-4e08-b46f-8cb46fae8180"
        },
        "item": {
          "id": "061fff8d-8773-423d-baaa-4b9f05019add",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "942bc2f1-a9cd-4cf3-9eee-6a56c0cde3b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edf50467-a4fc-4933-ad6f-715745485c9d",
        "cursor": {
          "ref": "cf8b7cd4-4b8e-43fe-80c3-fa65aef5b437",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "ed20fad6-d9b2-4b00-86da-d6a77426d06c"
        },
        "item": {
          "id": "edf50467-a4fc-4933-ad6f-715745485c9d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a069f641-50d0-4c05-8cd3-41a48acc9f10",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "032e77d8-a1c6-4300-ab53-38f49e06f219",
        "cursor": {
          "ref": "93590aca-7584-4aa4-8396-eaf1c58eac94",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "87673d81-c9e7-4283-ae5c-feb02b65866b"
        },
        "item": {
          "id": "032e77d8-a1c6-4300-ab53-38f49e06f219",
          "name": "credentials_verify"
        },
        "response": {
          "id": "154f92c6-b593-4377-a901-bb813c2d1f8e",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5091e5ab-2e3c-4c00-a771-82fb67d4a0b1",
        "cursor": {
          "ref": "8e52a3b2-e7ca-494a-8814-7a6e5c148e9b",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "70d4422d-60b7-46b5-9848-947f3ed519f5"
        },
        "item": {
          "id": "5091e5ab-2e3c-4c00-a771-82fb67d4a0b1",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "97ec7b5d-47b1-4943-a9a4-cb484b906a63",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8556466-12a2-46d2-b2fb-2ff5e9d0050f",
        "cursor": {
          "ref": "f00ba42d-4172-49dc-839f-c3bafa62d696",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "cbdc5cfc-fc6f-458c-b8b5-8540c32bd9a9"
        },
        "item": {
          "id": "c8556466-12a2-46d2-b2fb-2ff5e9d0050f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3827a84d-7d43-4a50-95d9-40fb8bc47290",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8556466-12a2-46d2-b2fb-2ff5e9d0050f",
        "cursor": {
          "ref": "f00ba42d-4172-49dc-839f-c3bafa62d696",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "cbdc5cfc-fc6f-458c-b8b5-8540c32bd9a9"
        },
        "item": {
          "id": "c8556466-12a2-46d2-b2fb-2ff5e9d0050f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3827a84d-7d43-4a50-95d9-40fb8bc47290",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2162f704-83e2-416d-a797-32995a2bfb1e",
        "cursor": {
          "ref": "3be55894-b427-44d3-a7eb-0ae6a6a157ba",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "9f3fbb4b-49fd-4b1c-a955-9581889142ab"
        },
        "item": {
          "id": "2162f704-83e2-416d-a797-32995a2bfb1e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "af40dd1b-c677-4104-9757-682feef6d911",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f2252f4-67d6-4f2f-85a0-1265b44172ef",
        "cursor": {
          "ref": "468545a0-72ce-4866-ba85-fe95ea4b7c96",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "bbc97698-604a-4946-9594-20127f1ff2f9"
        },
        "item": {
          "id": "7f2252f4-67d6-4f2f-85a0-1265b44172ef",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1b22f610-1cd4-43a7-8316-8dcd1d59aa10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}