{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9ef3669f-bac3-41e7-b831-66885c0a98b9",
        "name": "Clear Cache",
        "item": [
          {
            "id": "bb1c7ad2-58a7-48c6-9f2a-6b6c30feec60",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7239f3b1-dbde-4fdf-b9d8-ff710c90b587",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "390ed5db-0d0f-4cef-a2e9-b7fae265f63a"
                }
              }
            ]
          },
          {
            "id": "55da67f3-1b81-48a0-aa5a-9aa410fe86c7",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "507a3799-1ca4-47d6-b587-4655ad2357a1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d2f06b92-93cc-4165-9a98-cb23bddf94d9"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ecc042d0-da8c-4034-a3f0-0341ced7c20f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "6a3b95c0-824a-44a8-ade4-c158cd8bb799",
            "name": "Positive Testing",
            "item": [
              {
                "id": "66267d7f-b95b-4fd5-9868-93de6bd74ab2",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aba68c07-5e2b-4623-b6a2-18c22793e15a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "16969f4a-cb80-4454-84f6-f0b099ee3fbc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1a5e024c-be4d-4179-8e19-c9017d6fb5df",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0546d088-289b-4b40-bbde-d6bee2e95d0f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bd41b49b-6c8c-4677-96d0-859e2be0aaee",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1057bc41-6579-4c43-b292-06a047ffa236"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "65fd410e-75fe-43e5-a340-a16a0c05540a",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "7c39436a-61f9-410f-9876-dac323476ba5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2ac563d8-048d-4f94-81aa-9c67868998eb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "750f758f-ea0c-4a2e-8853-f56af0181e36"
            }
          }
        ]
      },
      {
        "id": "5ea241b2-8454-44ca-ae02-e49362e7ffb0",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "895bb53d-9e37-478a-a621-2d88902f55af",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ccd42b05-9ffa-4ee6-b93a-97112e90d6b7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "57cbea1a-148c-4bff-9c17-10ac0dd9f10c",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dd4d9b6-f856-4151-a29d-650cb6897064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f7b6f96-7812-46d3-85be-2cf88a809ec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a87645f3-f0c9-42c5-8dd6-e50c122e76cb",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46103e69-117f-43a2-8486-536978c02120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "202fa6fd-7e23-47f9-bf5c-e47af0a2ec9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c144265-5b84-499f-b719-bea944005917",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef645ebc-85b7-480a-b8cc-d703f07960b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0199b3dc-3857-47c8-8bbd-eda4188d01a7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "be07f5ec-7596-4804-bc44-8c008d895c23",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a5ed75ef-a2d4-4003-adc8-cf9119f7d9b9",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95662867-9fd7-429b-89ba-8836e2efdb01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ffcd602-142c-4a69-8b0c-8ad5558340da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed3fab4e-fc16-451b-9c3c-a19d77acde21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f5f6200-0bd1-4748-a4e8-b26cbdd8b99d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bf4877a-b4db-4b4b-99ff-5a831a0495d5",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78075d47-f8b3-4b7f-a493-23859c80b45e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8e27d515-49ec-4364-9dae-acc9b1e406b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ef725b-4493-4142-b9ea-68ee3e16f8c3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "356847b8-0fc8-4e5a-bbdf-8ab5f14e9ed0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "23cc0ae0-afe0-437c-97e9-82ac96ca2004",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8ef5a4d0-19be-4d30-9036-702ca765f7c8",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d0829408-ba8b-4efa-88b6-82df9907efb6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "0c5f79fd-823f-48c6-9233-0c23a526a867"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e4e5c97d-a181-412b-ab74-79d94d5b42a2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "9857a522-b29c-445d-a8a1-7c8643319da9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d0723718-a469-4511-a93b-3ffd68be3b9a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d898b54e-e1d4-45ac-91a4-8b520c74809a"
            }
          }
        ]
      },
      {
        "id": "cde4150b-3ef6-480e-8023-4867bdd99fd8",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "9a4869a2-de65-4a86-a8c8-8d40dae452a7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "63846f53-cb46-469b-9b51-03d4ce074c44",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "e72b6410-cbbc-4b8f-8e1f-1e3cfbbe93ed",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba88a9ba-3429-48fa-96bd-ae8740634ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cb0761f-9cf3-4256-b6ee-7aa6cea9d496"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d37f65-309a-430c-96dd-d8e513a0facc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c145f23e-07ea-4d2a-bc72-f01bac2e28f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db979ee3-6c64-4e4e-8eef-ecd4f89e66c5",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5205c12-b0d1-4980-96bf-9452280701fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37851b3e-e9b1-4f91-82e4-14de7c5a7983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa80cf8-633a-4dfe-b27e-21f3fd9f7297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc3041ec-aea1-497b-963e-d23d5618a2d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b751eb3-1ba8-46a4-9f49-504367c3cf64",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59e8e72d-c9eb-42f2-a483-f023076953c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a25f9f8-22d3-48bd-8a57-360ceb76e0f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec476a5e-f018-4e98-8265-dcb5208125fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e3cf69f-d08f-4e53-bc41-1d348e8d80e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "674e14b1-047b-44a3-aa89-94471b9f9dad",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5001535-d78e-40d3-b833-6dd49224beff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "155d4b84-0e3f-41e8-a268-f90e288c6c29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46683bd4-0c08-410b-a358-dafbcc7a0fe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4d84ce3b-b0b3-4947-beb6-e879f61d0024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "249607fb-4725-4d58-9ead-7f99c0796edd",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f955325-7d94-4d40-bd0d-e3e7f167d090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abfd0ec5-d60a-420d-9e90-4162b4e10329"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1c3e116-22d3-4239-8059-3a033dde3464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9291cce-e81a-4e12-b05b-b8c2ac450118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1c11c09-a8f2-419c-b7c7-501ed658a3b8",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24602c36-902c-47e4-98de-f022f2c24d77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5237cc1a-3568-4af1-9c8c-3755e9340602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f3d8093-56c7-4a7e-a941-c1e63a5dc8da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8e244c03-a2c8-4011-bf29-017a22843ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1317450f-5f57-464b-b4e4-f63cc5a16e26",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97fae1bc-49b3-462e-a540-028029bc0ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0a18f3a-05d2-423a-b362-55cc8ed2c35e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b5ca312-14f3-4a1c-a8cc-5ae68dbd3f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf7af38b-4983-41ae-b1dd-86fae38685fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edf046be-6bc5-4b7c-a090-8918475e9916",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00fcb7eb-a70c-4173-b544-4e8e60f9cb04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9cc3951-2186-43eb-9f87-13a8071f7329"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a38f5b76-c8f5-4021-8b30-cef5f5bebba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7f7e3581-9de8-43e6-9400-77dd04dc3fad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69fdcd4-6b21-4f1d-aad0-4a4a3b2eacc3",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2063cceb-be24-455c-b7c9-7d6797e28605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9210cdc-1d29-40fb-ba7c-f4dd3048c3ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f757a50-85f7-4201-a1ab-5eea8d4e97f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea56c7f8-f855-47ac-89f2-a71480a6a988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eff3b6dd-c24a-4a57-b5d6-2ab46030f9f3",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28e1f80-8e3b-485a-917d-ccc916be618c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7749384b-0e8b-4753-8f8e-7f870c260bfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25e855e5-7abd-44c4-9e4b-7ba22b4d0d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "809c8f8e-4dfb-4a7a-ac18-be1a025ee794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb93dcb8-a4a1-4715-a41c-9a0c185302b4",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8333efb4-c360-4049-81a6-e089f3bfc365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41a1bbb2-4a59-4b1f-b460-737411f0a30b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e19ffea0-41cf-442d-8109-5b738156c639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b1b9f74-aad0-442c-a328-11d439fac13a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc294bac-a801-49ae-a8ec-4d62e6f6e189",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bde4fbeb-54bf-4b81-9d5e-c91f5cda0df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52e176f1-d647-4ca8-a7bb-f52f8e439b05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3956708-589a-452e-b396-d0f792012a6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6df76d24-76b5-462c-89dc-3bb5d525fe3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b20daca5-70d0-414b-9cd5-8b778a1c2af2",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce95965-3cf7-45cb-b7ba-a10821523ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d726fc39-14df-4fa1-91c8-fdcb252a8ae8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "548ae679-ca96-49f6-9990-897e6a7c7dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1a35c644-505f-412a-9d12-e7edc6ae9036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa88f1cb-8c30-47c3-beda-c7fadef7cd89",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa03c918-6fb5-4774-8f98-ee094e857516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8331aa2-13f7-4320-9cf5-9d9f167f8837"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f336f65-a1f3-473f-ad7a-9649d3755299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "25180da3-5307-454e-8fc6-4d8ff948f5d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b281c240-1b4b-49f4-9b80-7326d671530b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "377f28e7-60b2-41af-ba20-01d591ff6560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b71ea0c1-efe5-4cb5-bb79-43b54e634b26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "811cf46d-91b6-4b95-8200-4715fb98d46e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b5a36d2-d313-49d0-a68a-d26034e1432a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eab3a26-260c-43b3-b55a-f2e9caf3e321",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bd044f6-3620-483a-b1ff-64c5af07a0b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "359c917a-3bfc-4979-bff6-9912839590e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f5e1798-8aa5-4f27-8b6e-a62a11bc9354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "44650d2b-dc18-4547-94e7-90b4aa685926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab80474-3c51-4342-a9bc-c2f4f880d63f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bb50f15-3def-430b-8c80-b404c260286f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bce4a77-e32c-49b7-b157-62a26f9a1266"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f13b6ea-16c1-4090-a274-dfb16d427c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c55cb8b3-5cc4-4f38-a370-3a5d313a464d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da84d60d-be06-49d7-bccd-22a0acdaa686",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "453c0c07-04c7-428e-9d18-9358d630e620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "267af53d-f9f8-4619-a1fb-8d473673d81f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4c0c636-7dca-4b8f-8133-e89312a126fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9dd92216-8c36-476e-aadf-24b8b3300cdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b94138a9-b594-47eb-8310-12f3da744c6a",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e621b133-1d4b-4b45-a340-5467ea3f348e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb4a9337-851c-4855-b063-193504082152"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "050d7a06-700d-4811-96b1-0cbf53dd649c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d379e9d-100c-40e0-971c-c98a8d9a752d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fb13772-c04b-4a46-8bb9-5614012dc36d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3250b54a-e424-47cc-a832-f9e32f987a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "133667c7-3546-4aad-8db4-eae42f88bfa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3adee363-5451-411e-a0da-620f9d0d1a0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "86766a51-8222-4293-9f7f-7126c1f513ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2f8ccdd-0de8-4c9e-9846-befd82002daf",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ac4c6c1-aa5c-468f-846e-3c4cc95ad8c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3edcb638-7974-4251-bd32-7e97aee2d8dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f079267-e039-4e1a-8f7a-67c0a62f09ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8511c66-f55a-4680-932b-c00424b62974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d172d00b-ec52-46cd-a977-0b2c3af8ea6a",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ed22ac3-5032-4644-be7b-550962d981a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33b37418-7910-48ef-b3bd-5ff0d3ad2b7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07532de4-ae9d-4d8c-84db-c93ecdcdeb85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "868ffb3b-8f2f-4765-aede-fbbd14e4fa5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7f23cc4-f11b-4630-8bf4-f9090d7943fb",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bedf9244-8cdf-414f-893a-4e1b84f0e35f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d1dede8-ddb7-40e9-b789-9f81642d178b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8add3756-7378-444d-bd35-375cf97145f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9428e783-52a1-4d4a-bdcd-a33a7e48281c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2c3745c-4a82-432f-95ff-6961162f9785",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6bccbad-6603-4866-8378-8641a34061e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29fd54a5-a964-46f8-857b-9103b5ce37ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd5b64b5-05a8-475f-8a00-1d534565b5e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "731c9ba7-fd13-4227-bc2e-f6377a730874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36a13c17-7e6e-430f-939c-c5ee340ea121",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e414b93-c43a-44f2-b30c-e3c6e27cbc77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc4c6ac4-ff0c-46a8-98f2-08a7ae0abf97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f13e95c3-b148-472b-b575-2aad5f4f56e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd96d11e-f3a8-430e-a064-b54308e8ae3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2715f17-ae55-4f9c-9aea-8e897f624e5b",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75856de1-a72a-41b9-b45e-8f8d29ca5cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59090250-4093-4140-9c83-13dd2f43691a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68c3532b-cf64-453d-a7ee-7cc93a6af0d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "61620e71-6f92-4390-87dc-931d63a07304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e04f6e4f-83f7-4a3b-921d-7e31a9030833",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee2db05-7fb8-4104-8e83-a51ca5c32733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3694e9e7-dd22-495d-9a90-e521ac921db2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0206ef6c-1985-4541-b45b-c0610bb7c6cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdffffe0-10ab-44f4-8c13-563262d96125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5f3d755-3eba-4502-8dbf-1fdeb7c4a59b",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab829ffc-2975-49ea-8370-c38a0e99f4cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02f47778-07f0-46d7-9f13-de9a3cacb130"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f392f0d-bc06-4be4-98d8-a189be64b8b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "63352736-7bb8-47e9-a5ad-0ebdbc172c92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f33649e0-aad7-4086-a4ee-452315e8998b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37bf7adc-0dc4-4b07-9f64-d67a2e4d28d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d72a0568-14a6-475e-a8f2-e3d071543cf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af7db0f4-59ad-4bf8-8ad2-eb631b5ed76a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "34c5849a-3056-424a-9e2a-1ab0cb21924b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4991b905-b37d-410b-b002-6432d4f48a6c",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "884dec3a-2dd3-4a68-b3c4-7021864dcdf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c4cdd21-b185-4452-8c49-154bfe69a123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8379e49e-ec86-4af8-b68d-4154ec8b100b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f39c5bd-6443-42f4-b06c-c8bac79fec9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ccf2175-735c-4e40-9917-61cebc253c30",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40fa991-df83-493c-a61b-bd445f00c20e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72c6fe9f-e8d1-4d80-b28a-a56b3cac2f33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "546d9077-6ce7-4645-9976-234cbf92db83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3160f891-ba7c-4920-946a-fcd868026ba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f53205a-8527-49ac-bb86-ef1aa9ed55bc",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eedaaaca-65b1-4e4e-b67b-bab32ce3b267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f5c6306-5967-4c0c-a859-141472220d8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45e47a58-828b-4e6f-a902-d5b312e94a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5442dc5-5842-4d10-aff7-94130e85ea8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2a1d3c4-915b-4c20-a9d1-c0e4fbe334d9",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faad2844-1ec1-416d-95af-76e74969c857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79c57aa4-6153-40b2-bdaf-ece7043f410a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e7c8347-e5ee-49ba-8d68-10b254e09aa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4505990-8b94-4628-bf8c-2b15ea5b12e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24459c5-9a18-4b84-995f-a12959a7ef17",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d0734f2-6913-4d41-8167-0d6a59801e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8feb8e8-5f45-4aca-9362-c3e6df744476"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d000aac1-8de3-4dd7-aaf9-500f2da64b58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f01222b0-555f-4707-b72e-453939d0cb99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28750398-caba-4ad8-a579-140076ff9d8a",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46e00432-0cef-4e8a-9591-e7837bdebbce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5e7bfc5-a30f-47fa-8210-b736f2834801"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8364df8-937f-42dd-af9c-0bc9666f1993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ee49263f-8a45-4d26-99c9-33057f55ab73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17678c90-970b-402f-86c6-05e5c38344e6",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84716d92-6283-4938-818d-ff21c5d28fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "00e7034a-672a-4f4b-8269-a085e9876d6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01573735-113d-438b-85fb-4b5c0c522bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2e85d29b-4caf-4451-811b-860f840c6130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79fde69b-2ec4-475e-bb3e-aef9aa87b044",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a3df539-53d7-409b-b92e-cdf75b151560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e3bffe2-9308-45bc-b811-345f9dc928e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26d39d3f-2922-4643-84d5-39c9c7a11f32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a725ebe-aec6-4aba-93f5-551c97908734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d335011b-a02d-4a6e-86ee-2c98f15bb0a6",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbf17982-e7a2-477d-87e1-eebf5b73e2fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8c8a15e-2586-47a4-a938-e9fdc688c869"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "638f98f2-967b-4901-be85-6152f8bf3c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6fc7af63-33f0-41ac-a760-113229e70790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53cc1843-26be-4c9e-bfc8-a5544a2975be",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1024dab6-1e82-4b3c-be6f-eeab2aa701b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "831a298d-1a93-470a-9549-6a5548f7fdc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73cff508-a5e7-41ff-ad53-0ff89e5c149f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e25ca3d-6670-4e33-bf18-8a388f58a854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6104997-8aef-4e47-a937-7418e1c9daac",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ed20d3b-1762-459d-8cdd-496fdd39b58b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fe39642-edbb-4956-99dc-1d4b6b2af039"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec29d5eb-60da-483f-a728-dc0ed3536a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7aef21f8-361d-45a2-bed5-e7e7b1303adb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cb26132-fcc8-4e76-8086-f811338ac103",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c37cf7-d9d9-4c77-b058-bb4047527278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69a77cc1-051d-418d-a8ac-220361f62862"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8219ff01-12e4-4171-8f17-1ed84d06f52c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc274a55-dd4a-4cbf-92a2-452276b46588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "880831e7-faa4-49ae-90bf-c4ff0d03ad71",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4d033ee-c351-499b-a091-f51b88350115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11e9f733-0fd3-4d14-a1eb-4e7c922e826b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8ea8f67-aa86-4383-b378-c6e6ef903689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "4ac3c5be-b59d-4822-8cd9-1a49898a2980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5984fa2a-08e8-4e72-86df-05a724a5c25d",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "731497d7-3f05-4a4d-af46-b51d2d20fc27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08ae0ab8-158a-4650-adbc-df7584d274e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e41eaa2-7240-4d66-8016-1c9c25286f24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "77a51763-a91c-4e43-a8fe-96a507f08d0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af10050-aff3-4e5c-b849-673134fda162",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a370111b-1729-4260-9358-417792e5707b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c16d888-1122-495a-808d-e2575941bc46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6114c048-6b14-4498-8a96-84a85c075637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9e2b3a0-77b5-4e03-a94d-bf5c02f1173b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4756af3-6238-4628-9023-e8b31f99c18e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "820fa7db-e73c-445d-abef-e8c137936d58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69f43cbe-6554-49df-8e8c-9743e76dd602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa7604f0-36a1-4ae1-98db-4aa91ef715a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "efa39e9c-99ef-4ca0-ad81-b730e75fc8ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de44b1e-3d14-41dc-94ec-ebc99b954768",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e3a915e-26b8-497c-8591-d5986056db39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96e27dfa-2f68-406a-b819-3701e3538f99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9cdef35-a565-4183-8fbb-6d4d50319bf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4f02859-6d9a-41c6-a619-f6c541553f7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d33fc49-e836-4ad5-9a43-58326cefc012",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a3b5386-9c30-4a16-ac14-84903ce90c60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c528637-0900-4b26-92e3-85c181b81ec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93869f3d-37e8-4a89-8706-9a07b5ecb818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "55bd4f2d-e46d-4ce7-8da7-b07e121b4f1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af8deb8-49d7-4480-974f-f73d78db6e96",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85fade62-a89a-4334-8bd2-2bf8fb3277ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52f97623-1e67-4bc0-b35a-3777f1924f58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15bc9675-9134-468e-9b9b-edf7c6b9fb51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e66193c6-2f84-45c3-b77a-8a641795d1c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "816742ed-fcfa-4aaf-8971-eb3b57bbc2a1",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6295809-3d0f-446c-8824-e3b8f6f7c870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef37d794-378c-46ac-8179-d2e07ded1d8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8f352fe-c337-47ea-b436-5b15b8f2df5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8cce2146-0a67-4817-80de-75c058585476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24af0ca-b861-4aa6-a19d-1638e7921b8d",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8da2febd-2fb8-4282-964c-9caec5590b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5233de8a-5862-43f2-9499-6fbc9dbcf44e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea2b2bf-684b-47f0-b5a1-b275af139e91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "93a7acbc-9070-4818-9e17-f39dded76a54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4bb4b10-37ce-408e-8ce8-cbabf7f412f1",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13abc16f-6620-469f-a508-443721221b62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eb313a2-4500-45a0-a74b-9df892e3a2aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6f506e0-818d-4cc3-afe6-da243a2d3a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "22d978eb-3efa-4f4e-ae83-7be49f43f95c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c02dca2c-88f8-427a-a62a-74e7cae7fd8f",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18456214-8f0f-4b42-a0bc-667df1cc38b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b08f39e7-14d4-4687-96f0-782f35506538"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a3a3072-5051-46c0-91af-8a6e014e2781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f33672b2-08df-4972-8750-0aa5ad69a6aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5966d22f-f96a-457c-b01f-b79542ee2c99",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af766d04-695d-473f-974b-9f86ed361128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2a564d1-4ccc-41d6-ab49-9b29cfa48827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a6bfabe-6fe7-4917-9b8a-2205f6fa64e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9420023-2b9f-4d0c-9228-cbcd7f37c1ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed78683e-6929-4d3b-8e2b-829b64cb64f6",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "020c0990-6af0-47ba-974f-3eb96904aee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2af4d3cc-5598-4587-8895-fff698edd8bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "805811c3-155f-4299-b2a2-cf1b6b8d4db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "57e2ada6-d8b0-4fa5-94ef-296f428754e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0832e1f6-6b99-4d4a-85e0-88308418be32",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e2c019-ffa9-4bfb-82a8-301ffd8e0127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed968b7e-b743-4773-a7d6-5afc7b3b2f04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "877ec1e7-434c-457f-913a-df793f42ea84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6aa738e-0627-4307-91e3-c5f53db974a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bd5b3ac-4c74-4dd3-a405-4cf97ed1dc1c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2218f0bd-e933-4bdc-bd74-09dd6ac4e284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a659eea-a3f5-452e-a071-522ac3b87ff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5a3e5b6-e041-44f3-b65e-8533cd7e9170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "3ff00d0c-04c1-445a-a110-e6790af85aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3d348a1-7196-4006-9848-0b1120492e19",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61178da7-22ee-4439-9f70-a7c6ebe594fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfc1b7cf-62d5-4cbc-892b-c1a13446634f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41b98277-5151-4ae6-9dc5-078cecd0fe60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "96f1e3fa-1778-4176-bc88-e9c06e035ac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b95259e8-b692-4a7c-bb95-4627f41fb7ec",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eecfbc83-3033-4d4f-ab4f-2029014239cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9c9d49c-cdcb-4b49-89b4-e5d658acede3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a77629d6-0d3a-44ef-96e8-e835c3f66e27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f34e79cf-7b62-4fc3-ac09-65d8785fc88d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e10adc98-4ff9-437b-a1b2-aca31072321a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5cc6e8-b951-4c08-a474-efadaeca5f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9826712a-e868-4f0f-91f3-ab92c34ab74e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51813416-01ef-4aed-8320-d147d64fe22d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d2152f37-6f14-4103-ae07-dc3b2450a01e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a398400-ec95-4454-af41-73394441043f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "630a1c54-af19-4821-b3c6-3082ffca3118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d780ef1e-05ce-4e25-b105-76b08337b10e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a53a7dc8-f808-4e55-9ebd-f017a224a4e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e2643e5c-9332-4665-9dde-52c051b1552e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f51fbb5-852e-4668-b651-ed6abb470594",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0bb1551-d539-4a24-a5b1-e94d389d24d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eacb7e6b-eaa8-4965-b5aa-740ef2f0d7b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b669368e-4942-441e-bc21-3ff1160b8251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ea30c35-7bfa-47d0-87d4-d7b997d84f0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba8b406a-f6cf-4135-8c61-908e8f06532a",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1baf781-4ff6-45c6-98b3-82394da6966a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93f3dece-5e15-4be7-a79d-65776017c1c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53a2d4d6-e11f-4a81-a684-e14ce2156815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "466cce53-d8b2-4691-bff4-659dde00ad3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf6ceaa6-76d9-4279-a45c-430c518b96ef",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75160247-b891-44f6-a3f5-44b68cb8288e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "930b43ae-1962-4fb7-9206-279f097f5652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a2f6e05-9d3f-451f-9b79-7a724f113bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d353cff-3f50-44f4-aaf7-fe7583b62e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f09629f-476b-467f-89bc-8d41cc417443",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "986229af-faf0-444c-939b-ff8a8ac93864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6eb8e72-0ff8-4b09-a8d0-ac3a790ce595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "028eb92a-863e-44bc-8a29-d61ab7ff7ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4764478-efb3-4520-87fb-3983e49c2aec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f986801-4b10-4353-acc3-5ecfc2d0b6de",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5b3ea41-d735-4aaa-acd2-f239ded10229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a5ad503-6728-4c67-86d3-d90c280c43c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aecc8a5-ddb1-4431-8b5c-f254cf63f415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b1aaa45-ce45-48ba-a019-f8b2f6cb0308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faee17cd-7f20-4853-bfd3-201ffafc3958",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d1dbce-145a-4be1-bd59-a199226e046a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6abfacaa-812e-4ab5-868f-fe4392ca168e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cded201-6627-4707-9545-1142f5861e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fd30795-a83c-44e8-9d6e-4e5a99282b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "febfd5ef-e276-47d3-8fd2-9665fc39ebb9",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0ef1325-3420-4706-9b5b-15ee3dcec4cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9215ccc-3954-4a12-bf1d-59cbb9e34c25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ace1e44-e66f-4d1d-b42d-e5f7ca17fb66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "823c2578-4ec3-4c24-8606-720b8a9eac64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eabf2bf7-ce90-45f2-bfdb-9a7d1618bf97",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "504a8ed1-8a2d-4c39-8b73-d43a26aa58d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7379261e-8576-4fe4-90fe-441569c08069"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b360962b-7eef-4acf-8d9b-41c63b039135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "76532037-995c-4be4-bdce-19f584fc8992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa497342-16a4-4c29-91b4-ccefdcd477ee",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36bb5109-0c9c-413d-b7c3-90cbb8e00027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43aaa50b-757b-4387-a8b0-aadc016633d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e6e5928-77c0-4f43-81b1-72f65643837d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5312311f-ebf3-4708-9161-161064ac2830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f5e8cde-2e2d-48f2-b528-14e3cd68e062",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1afd00c-0506-46ac-9b32-08d00fa76863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb60623b-161c-4c80-b104-5627417f106f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ba68023-8712-405a-80e4-37833176a449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "906e365f-6e9d-4f1a-b4ef-caac7d17a0e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99987d8e-81c8-44fb-9118-030a2b9b6f47",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78195c10-a132-473d-953a-4c185d85849a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cc82488-e7f5-4caf-b643-568d7e6b9dbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53200ece-91c6-45a9-94a8-9a87f91def2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f447164-15c6-403d-8407-ba3de44dd969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86969abb-a330-48b1-b5a8-46e2524e597d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6af3fa1-eee6-494c-aea9-9f9a774cfcad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a7e7f73-3db1-4079-990f-33438d6f2cd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0ada1d1-6a9d-4514-9dae-f0169d257c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c1d55b4-5eb3-42c2-8fea-9d00f68eba91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b51fbccb-951a-492e-a774-4be36eb3dd1d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d6ac7c-2fda-4db2-8807-9358baf417ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a0e9fb7-d0d8-4895-82b6-1938ae538bee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f0bb73a-1c2c-496f-8fd1-096f720c9d40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "45bf919b-e8fd-4aae-ba4b-2d2058fd70b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d32d1c88-f519-4316-8f6f-e91d5a1f6ce1",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7363ce1-c8d0-4a99-acfe-985b4dff64c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f7f8dfb-2b29-40ad-96fa-244f502914e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f98f799-9f4b-4475-b09b-4cebb6f56218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ce2b7d15-a90d-4bd3-9a6b-362bb5f55597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6575d56b-8825-4482-a3ea-193117b3b301",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3423ee35-1226-44a4-ad16-669056a3839a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "038a0c57-f04e-4e80-838c-cdd66aff4a0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a30722f-d9b2-4d80-bdae-7d687908cc5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "19163100-c889-4ebf-912b-259a04a329be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e311a299-4de8-4050-a6b2-c536327bae88",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7ca07e7-eb9c-4cc3-af4c-6bf170efe1a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17211cff-c4f2-4dba-9242-238a869c482f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac343a4c-4da2-4cde-b31b-db008b5fb00b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d108485-921d-4e37-9569-799c316e6ca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566a81ec-a6b3-4696-b48e-a6c729ff9139",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "493ad750-3e0f-40c5-a8f9-119a020d0f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ed6856f-84b9-4130-9864-28e4dd75947c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2ffaf20-83c7-49e8-83d6-14b44fa5042b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bdff3ee-c4ef-4add-b230-761982e0d8c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "118193f1-5909-4af3-9da4-6bc05ffdd08d",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef32b65b-3fbd-4df8-82e2-34ff5601864d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "172851e6-8126-4cdf-b285-f174609b3fb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65a8a134-2cb2-4057-be75-c53ef7b18e07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a063609b-f744-49ca-9a77-49bcef420b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6480cf36-fe5b-4986-a291-ae72a9caeb63",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78842ccf-d981-457d-a617-61941d77b0bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c01e1d1-f0ae-450f-af3b-47af1d726bf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b298971f-1167-40fb-af11-eb1c47f22b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e94ac337-05bb-42aa-962b-595bb396a558"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0abc82b7-89af-4dfd-9fce-4507693d649a",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13febe6b-53fc-48b5-8e37-edcca62eb7c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "defb478c-7c49-4a00-bc36-bf1818314349"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87990c1b-5752-43eb-8c20-c3bcbc0d7140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e79f62ad-e904-4365-8db0-0c85669d963f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec021b0-2f91-4484-87bf-21b985868d68",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ece4a7c8-7699-4808-af56-f097871fcbe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bc29c99-992a-4640-96fc-9ae87f74dea0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a226ac07-7db3-474d-bc2f-8e59c967fea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "368fbac8-b29a-437a-9534-1efe092dd232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48d1a432-6e71-4ac3-8f20-2f92fdeb49f9",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e827e00-91eb-4930-a9df-5c793aa00cc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9a145c8-0308-47d2-968f-6d6d7002cf4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91b9a478-619d-41c8-91cd-0dd5c326986c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "15be09c2-cc3d-4d3d-9bd4-5c471077aea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88b47928-ee4f-423c-a554-1ab081e2b7fe",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d37e42f-ebbb-43ec-8f66-86d4464ca1c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2ca5001-0259-45ef-9e59-1d770e4aec41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "014c6325-b883-4279-aef9-bf264c4265a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "67b6141f-ae3c-41b5-ba9b-a17dddfea0a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03c48900-da8a-490b-9b6a-49f659115750",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d342bc87-c4c2-4f3a-811c-6f54a1a36eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edaf259b-d1a4-4bd1-9dc7-91cac06c26a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0123310f-e9e5-49ef-acc7-dbab127e10d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "94551268-f974-4429-82b1-efb721be90d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a91dba3b-30c1-472b-96da-9c996730f2b9",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63268131-883c-43ca-9997-821f18c4367e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81990495-d331-43c4-ab1d-eda048c05fcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "642087b3-2afb-42b9-be26-faa1fdfd9eb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f18dd36a-6829-4555-95ca-63f301dcaeee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e10f4f96-19b2-47cd-b7f8-6841d3099b0e",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15bd88ff-5ef7-4db6-89c3-1730407137dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "407e3e36-6fe9-4ba7-a63a-dcfdba112ed8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "751359a9-2ab7-4a99-a1f2-27139ea78b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "af239b47-7514-44e8-84ed-6d3645aab1ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3934a79b-1662-4abf-b28b-6acf9ebafd6a",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34c043cd-7607-424b-9046-122dce5b7ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b6a550c-3be1-4aee-aaea-22ab5160a088"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2d5cb38-e6b9-4d71-b578-e965910568dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7dd0df5-c597-4dd5-adab-4741a01cde9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3468111-0d1d-4e13-a068-fc0dd42eb7ce",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf3f95ed-848d-4ac3-af27-bf960b91dda3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b30a4ef9-6dc5-49b7-919b-3c751447a140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6306183-d73e-44ae-8c53-16f00e0606ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e1255076-f2ba-47c7-9b7d-ed323625c6d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e06513-9fa2-4680-8477-2b26eb0b9fe9",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42f09f19-4eb8-4ae4-b50a-1b2676ffa139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76361e70-be34-4292-ab23-3adfdd27ec6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8cce370-ce7f-4a56-a7af-2e07b216b4d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9f59eb6-9db0-4e12-a8ca-14cb5879532a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f4d44ce-aa59-4863-bc6b-4aed381de602",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "865d660d-b870-4783-9948-7411ecc5ba72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b058918-01af-4721-8457-58e96d7e7e73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4ae7d58-0934-475f-a0f5-6b0de4ad72cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "92b45e4e-6594-4415-a76b-ce62b88b3eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b983c8a-e54e-439a-80d2-329f9d8588de",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c9347af-b56f-4284-b1e9-cef41b436236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37a7329e-7ee7-4c62-929a-e61e62e669b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee04f5af-3127-4a28-8c6b-e072ec43189c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "58e0847d-f93c-4069-8680-4396177866d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03f8b63b-a62b-4da0-8869-4885f92b70bb",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4777d1d-6354-4c82-a9b8-5bcd92dcd9f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "97f9d54d-ad1c-4081-ab99-7ab6ed061336"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a730d93-e91b-4146-bcfa-14bdb66ef891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1372e268-478d-427e-ab7a-d657ab9b2521"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ce4bb65a-1b5f-4074-8f6e-0692d7db90f2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "27f5241d-918d-48ae-8bec-036ce48398f7",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0374019-f631-40ae-bc6c-04d6bca64222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6392976e-6bed-4091-a786-87289bfdf9f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9ece5ec-dcc8-4748-83dc-c6bd951cd6fc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef926abf-b127-4e9e-b6e3-2f8516ad3f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f2e4ece-8638-4672-84a3-16a6519f2987",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ebb8f01-3fac-44b6-b337-275891689d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f5e10b50-917c-499d-bc11-7b210917a32d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "020e5139-e57d-4e7f-96e7-070eec720f12",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c70ed0ac-2ab1-4261-8301-34de4fa47fdd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "debed393-f772-41c2-b3f8-ba554e21d854",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8b62c6a6-66ea-4b69-9c81-a66b10dd2de2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d87f748-552e-40f1-b119-e12c93a65232",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4990ae32-8593-46d3-8120-6922d65e416c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "410b5478-1080-4d3f-8160-75d48a89cdaf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "04b59ab2-8dce-40b3-bf80-f622d229349f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "70ccddd6-dbf8-4e5e-b36f-6a2de67b541f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2524d34a-b7cd-4b3d-9ac8-924768dc39fd"
                }
              }
            ]
          },
          {
            "id": "49274e16-87f2-4b95-8701-341a4d1dfb53",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5e328658-0222-4a0d-b4bd-64fb5e0b0a73",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1bc1946c-3795-4c62-9c3c-5c3f63a9ea04",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f19d66fa-fef8-488e-977c-573301f0a60c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e1263e03-933a-43d2-aeb7-180d3164426b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "08b5be9c-e6db-41b1-ba4b-ff4ce095aac7"
                    }
                  }
                ]
              },
              {
                "id": "cba5ba94-7814-4272-8e31-aaba2161cef6",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "95235e1b-19e8-4353-af11-f00908344461",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "092ebf07-eb3f-48c8-a6d0-f8f03cd4417d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f42b27c9-8c8d-4c1a-883a-c8d918453b79",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bd29087c-fb1b-4ddf-b2ad-714cca43c567"
                    }
                  }
                ]
              },
              {
                "id": "4686363b-201e-4c12-8fbc-1d03d7f30cc9",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b9710a8a-6ea7-461f-ac55-ab1a57075602",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c766a7ae-7873-4139-a3c5-7636dee0186e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8e80ee61-7238-4c81-b63c-8f55daeee5f5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7486b491-b8e2-41e3-9baf-966eadaa3a8b"
                    }
                  }
                ]
              },
              {
                "id": "7beab435-a993-43ba-ac7d-c11d0f4f6053",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2eee2a60-d194-4d58-983b-7802d6d4ca41",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "54824117-7564-4c74-b36f-1adb03c8d051"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bd5799f5-244e-4e0a-8ee4-a61519f6e644",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "61f22825-1ba9-43e8-b70b-0ea856226c0e"
                    }
                  }
                ]
              },
              {
                "id": "955a130d-6a15-4c77-bc00-f036bcc98c87",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "633dfe03-d104-44fe-ad2e-74872bf4d2f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3c78ee5c-2492-4a90-aa83-d7c950b5f1a8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "32edacae-43b5-4f94-b909-1cec61f5546b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "305126b6-44ef-4cbe-8a08-27b276fea3d9"
                    }
                  }
                ]
              },
              {
                "id": "93fba8bd-1a7d-4855-937b-6966e51a0410",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2546ca10-bd04-40fb-86f9-9589cf645141",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5ac45ce2-9500-45e4-8680-aea0e7900fa8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "982e008c-bce3-4557-8ef2-58676a50d488",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6e29eaa2-7282-40f8-844e-57caf9f61837"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "629549fd-5b4b-4c55-858e-d9e0eecc6f65",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8377fc47-143f-4d63-96bd-e1628891323d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "afdf4aae-229d-42e1-891d-151c703fe719",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9fa8577d-2a13-40a2-a8c6-18a034df8306"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7ffa3d82-77b1-40a4-904e-a9a445940d00",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "c7e09987-e131-4a1b-9262-00c3a59c9247"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4af0cb00-d92a-4c9c-b755-3de9af5a2b44",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ef7fbeb8-2629-44b6-b7ea-b22e2d5081cf"
            }
          }
        ]
      },
      {
        "id": "2d86125f-de67-4b3a-bcf7-65606c9bb58d",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "0df49dbd-7d4d-4511-8799-134b980ba992",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6ba4dd4f-555d-4fbb-beda-78647ac8c0ce",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e484f442-aead-4834-a340-559d2cf14aa6",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f119d6b4-c2b4-450f-9854-481eea1d8a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36c50fdf-9f11-457e-9de0-266bbd5f9709"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f56fab3a-c64f-496e-939b-47ee51e4af9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "465bba46-e81c-4cfe-9c22-5ddd123bd409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3ee9a7f-a3f6-4745-8411-fb85bc0788f6",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43120563-b134-4b77-9a52-0b516585dee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea6c04f9-185a-477b-b49c-b502e4bb9b86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "146fc9ce-20bc-40fd-9f52-967b6edd5688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6b529ca-d583-471a-b75f-8b2aaf059d80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1042f8bd-4de9-4fff-9985-2086ec0fbc6b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a60083-8485-4e28-a890-2acf80c0cff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76c807ce-354f-4de5-a415-6905531be3e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67089de0-a84c-4ddd-b53f-9eaa2a89b9a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0281767b-fd27-444c-80b4-0c4a21ffe4e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbcce6d4-74c7-4b4f-9f90-315ed57b46e2",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc763c8f-fe81-40ae-ac8e-96485d67a481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dbcf359-2274-4e25-a80e-d97645c17e07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3568cef-3ab6-4c71-80b8-0ab8ce9e5822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c174d0cc-c066-4aaf-853c-ae1173c87130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57a6e92b-77f3-4472-86c2-cbfff5b20cf7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5858996-59b4-4164-b0ab-be8dbb58e08d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f2c64d6-82d9-4e85-98b7-b658e2d51477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99946b65-751c-4f02-a9ab-f3f4640f914b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eedf7041-dcfe-4889-901a-add1d1977979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e68d49c7-2de9-4c75-9b2c-f2a95a874cdc",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5170d191-3f21-4b7e-a2b8-27e15bc8bc3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6069bc23-a0e0-4621-b2ce-f5f08fd3df1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "515b3e76-5b01-4e6e-b6e8-5ceeccaef0f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4e4d5e79-9082-4767-a2ad-a9070f7e47c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ff073ef-a2ae-40af-aa36-67e5955c5098",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "054dad1a-e7d2-43aa-94a0-349cc5b9249c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddcc7998-df5d-4b34-a3ef-2f99caa260c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be238999-1a28-44b9-ac1b-a47dbcdd3d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "94b8b27e-dca6-4b3a-9685-e9dd72118e90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "404b5bb7-3713-4f41-8d89-1fc08f11378f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03913067-00e5-4071-a248-c1ef6de95c6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1987374-f0ca-4356-8897-114bb9c67f9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4ff7330-3d30-4832-90e6-6556a1f8785d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa5aabfa-e6f9-43e2-acbe-51e91dcce198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7274ea4c-9d74-490e-b6d7-795126e9b5fa",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1285dd51-1c22-4ac1-a34e-c4e91c70e438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a7e3d2a-9ac5-4690-a6dc-1b81ea3b33e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e92df24-5d32-4be7-8958-93cdd76339de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca3154b4-35e4-4a0d-96bf-ba4b2e7699eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "126e6c42-8ca8-46a9-9852-d29f9b61e16f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2370a9cb-6ec7-4e9e-8e52-dfcaf28439da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f0eda62-b5d4-4cbf-adfd-dd9aaa07d849"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5692f1a-6c32-443a-a9a1-291845744492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "053af42e-9573-471d-944a-d197d635acda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d73701d-3e9b-4a6b-bb74-975b3219e84c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cec4ab9e-62ed-4c73-96c4-9d9dc492d54d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13af827c-0b95-4417-8072-73a6651cb673"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "165ea3ab-929d-4198-83e7-e4343de390f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a35d7e9d-06a4-4897-a979-067af853f7af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73a64898-2dcd-4048-934d-a4ab1d7b3c19",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1608972e-efac-4c68-96f8-9b0c9cd65b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c625b7a6-2cd3-47b7-8c63-ba516487c429"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d249346-8724-4550-9997-271252ee9572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4ea19a92-7dcc-48d1-8748-532cc6c9ca46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c0f1841-c519-49d5-b301-e1d990d31634",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c037d0e-e0dd-4945-9a3c-d47ed6fe370f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64618381-79ba-46ab-a8d5-aa6d3c102bbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4deaf8d-b51d-41de-b8d9-c4c41634b431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "38c105fa-b5a5-4279-aea5-26dad41b1611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ea7b206-52d9-4a9f-855c-b77b5949f3f2",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27a87427-bd4f-4a1a-94a0-5f0a0a350c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc246144-8962-415a-98ba-37127d8e5017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085883d6-04d9-40a9-92ff-336b381b3d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "428140b8-a613-4705-9df8-502f055bea29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db5be9d9-7e92-49d7-871d-80793b71cbbb",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ed0ed06-5b46-4ff4-b9f6-0c6fa72eaee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58a7ffa3-f536-4e7b-8c94-10c8161a5de8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "769a4e78-61ad-414d-a0ba-d98dd35bff8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "05707c1e-ecfc-4f2d-bfa0-293f0c8469e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e06042f-540a-484b-a240-0a13e5d67ebe",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9031f47-a980-4861-907d-6fca76287e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "012f1ad8-0ed3-4ff8-8d28-6f54f8d61390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec71f60-1500-42e1-b267-e193b69d810a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "286a702b-c1e7-45c3-b024-71625e1ba32e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a089a85-619c-4529-ad9d-d3e744cc77fb",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "981850c3-0565-4084-a716-c758222f2cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e83c4e18-23be-43b5-8b01-b1a66a333ac1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64684e74-fbcd-4be3-a8cf-b6f76182826b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a4534b7-4fa3-4e82-9b61-d227fa9f065e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ef6bae-9428-4500-965f-1570960f9f91",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "561b28fe-ad89-43f3-a999-60ac1e4475a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eebd10d-e408-4054-8ef4-2bd78c08a3f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24948a9d-664f-4633-9a32-65a579e417e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "692ee15d-afa2-418f-a7ad-49f99afc0ba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f665863-ff28-4dd0-86b2-bb51730d22bc",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a504c9f-6e61-4945-8718-b58f2e255498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2a73a38-126c-4b72-8fba-b69021214a52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd3ac933-12a5-4900-98c8-928b004a8dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c552d4a3-30d9-4b29-9f4c-a3ead623cd8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56bb9466-c3a7-44fd-991a-4a64b2fd3457",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94d11ce0-8063-437a-950f-ee9b155da46e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d16254cf-2f7b-4158-8a4c-418ddc073cd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b663332b-6224-4c6c-bb84-8268dabd0eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4498d376-49c1-4e8a-b16f-f0d2e58f33b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc9afa0-0b09-4e0d-91b8-983167bc369b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c492f3-4667-42f7-8a18-b5349e26a011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be495ff0-2f57-4d23-8b90-862e1d0e8c0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07bd8b36-e771-466d-9a7a-f03779442ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ef84376-404c-4572-948b-2f220db7de78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34f4a9e5-b547-48d8-a468-0ac4c0c540f8",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "430926b0-61b0-49ea-b7c2-590ab400a0db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0013d032-3b77-4aa6-aef4-9322ccab1697"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d18f1269-8dfa-43bb-ae35-0016e6f67597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "380e640e-6728-4f68-b158-c3fc179bb706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3b65bd5-fc4d-46e3-92e9-67a6f43aa11c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cc60a38-4d95-48f6-a2b9-aefd1e85d827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33bd065f-6469-4e07-9763-b7bfb401c318"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22e729b8-758d-4224-be9a-5b196ba4eefa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90d3fdf3-3a13-44c4-b36c-d3b3374d33a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eb6ce93-5ce7-485c-a6f1-c5275ad09ce3",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "174fad04-3fe9-48fb-a9e0-556840915fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0668281f-6e53-43e2-8d62-1e5bba8b0beb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22b7a703-5653-4a30-a235-8fb9d9d57bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc1ce6fa-f2a9-447e-99c5-9bd69c1f990e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8631e0f-66d5-4945-a26b-35276f53adde",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71c8f03f-90b9-473a-b8fb-536ce9b7533e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5903282-f87f-4d44-b0a9-26fee76ac719"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7604ed5c-96fe-4cec-80d1-86b1ac033075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46262045-5caa-4a1f-8786-0c35e30c6a6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e0978b-6667-4ba9-a5a2-9e23ec615580",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aeb3f83-9e81-416f-9342-207203b2c3f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64b69358-9762-4486-8d7e-e1e246a52592"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d5db263-7697-4e2b-bdb0-a3d765eee2c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21ccb05c-fb88-4574-b8d1-53fb5b137a28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae7912b9-0145-4168-85f3-d364d5a9d0ce",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "675ed18c-0a4e-4cec-86b0-7620af02842f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e81d128f-be32-47cf-aa99-a82293800bd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c641e878-023b-43eb-a053-0c05d0364c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aacf7293-dc41-44ba-ad11-e53270b2734d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "784e897b-ee43-41fc-96ae-163e8d6d7dfd",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb428d0a-a7a0-46f7-9bec-4bb0d0175b6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d2bb475-db75-4bab-8764-3186ec46b5ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ee54cb8-3144-4bef-b78f-4f7627e1661d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29e762de-4cd9-4b0e-8536-6b4ac557521b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1893e045-ae29-43e5-b1aa-aba10e997571",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "415fbcdc-cbb3-468b-9dcc-b009a2811616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "255621fd-668c-4859-b979-52614c91107e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5fa0a18-f53f-4163-9eed-bec8b4dc5034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c3f572e-6211-4f06-a2a4-a98e9cf3999a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e71efeb-60c3-4f85-945e-21e68e956102",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5040c294-b405-42a1-b380-e450847a5a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1125e0b3-a5bd-4069-a843-26dc9fd00d93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c058ae59-0e5b-4be5-a81d-5057f8715466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0ffee7d-d4d8-4034-8908-72a1f657c706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f47164f-23c0-436b-bf72-12c311c66fed",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6123b78-3424-46f8-a10b-4c8c19bf93a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01d06a68-c204-49db-92eb-a9fce956f23a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "500cc22b-b359-4e62-b4df-0b0c06164f9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce589a59-df0a-448f-aef7-24cf61eabbfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "242cf0f4-1796-4c56-a815-0aeb279e17ca",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "800655f9-8b60-4c46-adc3-6e33e2548108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb9b6871-4710-4d63-9a46-82a2aa34f353"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d8c612-ecfa-44ce-a238-bc57216407e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "30963b7e-dd75-49c4-a903-8844e15d26b2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "864019cb-fd21-4c36-80fc-e00e41fd4125",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e1fd35c2-d987-4b90-b578-42d381ea188b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab9be145-f2a0-4479-8a75-07cde3615dc3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "dc294e46-b060-4929-84bb-5b8fa8b21bcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c76cbc6-d8c1-4f24-b0e7-667cd5a39ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "df730a1e-5e71-4caf-bf10-6bc05fbc29aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06d4315f-f3a7-40d0-a8f7-1f865634ea1d",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e80aef65-1acb-47e8-839f-505b2118f29b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "37d9c17e-cd40-4a2e-bc6a-8196f6e6b58c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17989014-fadf-412b-be97-7476442c61c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "937b5cb8-142e-4bbf-946a-f828c18b7838"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ff10260-d78f-4d21-a70d-e8f055c37e29",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ed124f87-fd9a-481d-896f-3b6b116927a9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca8395c0-4efc-4c1c-9c03-ca321590409e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1208396c-9427-418a-8ead-8ccc9f27509e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ee64f1aa-afb7-41aa-b780-d780dd978aa5",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "476cd7ca-a121-4930-8e78-a37c43eca14f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b9284dae-5d08-4831-be24-ab0e0bce1b0e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "df2b6bd6-7253-4404-9401-1f964f1770f9"
            }
          }
        ]
      },
      {
        "id": "4d501394-178c-406a-877d-3004041427b0",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "05410ab8-0546-4b00-9eef-825b007b4278",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a0f3268a-184b-4ca5-a554-e67911917295",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6d9119e2-481f-4526-99c1-fb14bb5523f7",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6964a0d-cd20-463f-b13c-7631de576563",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b514f6f1-826e-493f-a967-1ae59ca5e4b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9006d4c-a831-4629-b3f2-35ca2128ac01",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e36dc045-b9dd-4bd2-b5cc-6e01ea94e8c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "970c1c55-726f-4c3b-aed8-935fa43b4e4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa60e1bd-9a01-44c8-a6bc-c50164316536",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2273393-bed5-411a-9116-bf5f30b7e1f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4fb28f5-0e79-432a-a381-ada63a8c2e84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7948956-6263-4907-b757-00e13712a3ef",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c48bebb9-4187-4b50-98a4-b141781e4ff9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64efd402-7385-4fba-b1e4-810d7f46f202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "410ebf5a-7495-4f40-b1b2-1d188a0cb0c7",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d724a1e-a0f0-44ff-ba9a-712113822aa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f78d2721-bffd-4de3-9bd8-d10b7ffde85f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "880c6374-7b73-4bbd-a585-8dc885e58357",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7412522b-7fc3-4f30-887b-0fa7ff87dab6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a76d2da6-6443-4073-912e-7e2e4533be87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c0b81b-6f42-4a0f-9246-9461af768ee4",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "159df043-82ef-4814-9fea-7158ab3e0118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48bb9724-7a3d-4231-ab1a-ee9577b08344"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32fb32a1-7bc8-4bef-b5e3-3af6ba4836f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dc6b43b-39e5-4eb1-a383-517005641264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d39b47-f517-472a-8744-1b2a38a5b409",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ba770f-7692-4598-b5d0-22ff8e79b99f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8972f11-f05d-46c2-8c8d-12d58ee6e949"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f65889a-9fae-47fe-9285-0333341910c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eae491e9-132e-4a26-be23-da33a486bfe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57898ff1-1896-42ca-b86b-3e2f589514dc",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "837ad90f-6572-43d3-bc88-1ee53630cc64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f79ea89-659b-499d-a154-77bc35c344da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5379a19-9b41-40cb-80a6-0a36cfeb1b4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "596efa76-964a-46e3-a191-83e84b104d88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20012171-3665-43b4-83eb-a8ef8950a3fc",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ffda307-d68e-4dc5-a173-70ad20e88c70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa1b3878-cfd8-4030-ae81-c989d3d6351d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73d7bbe3-b06f-4fc7-a591-e2ddbff5f8b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fed698a2-31ad-4d3f-9e68-a4670f28cd70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "629e42ef-cbed-4a7c-a8ea-ad296dd682be",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b21ac7d-9a8e-46ab-bf98-703e8a7c67ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5be3cd32-d06a-49b6-b6ec-b2847ba222f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78e1a850-8519-418f-b19c-5d0034969532",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d59f2725-0d29-42e7-b6e3-0b307815c861"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56ada673-cc7b-44c7-b2a0-da97c5877352",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b6bb69f-39bd-4afe-a73d-9d9132a614af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0db66d2-0b23-4cac-b497-e9ba8983cf1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12895ebc-465a-4c4a-a466-20ee4f578aa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1482f5e-974d-44d3-8729-051971b2ec22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00ad602f-cd99-45cc-b07f-3eeb827479dc",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3732820-dabb-467b-860c-9bed6692acfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70ef39f7-e22b-4ca8-9894-762c25cc4c79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "462866c4-1c77-4b05-99d0-ee9167a63204",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fb81acf-4b5f-42b2-929f-622c2508a192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ec7493b-5a7c-405e-869a-9d0e4a636827",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7c42338-a423-4f44-ab81-53c6fdce18ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddb39b4d-08a1-4877-9fd4-141a691ea593"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a896c1c-9e35-46d1-9f58-5feaa083b7fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4e2826f-eff1-47fc-9b3c-2f0f2207efd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7303dc77-cc3c-45a7-8227-126073552aa2",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61d89d02-d980-4826-9e7a-5d67e2dcdcc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3c1e9a5-f638-442e-8e0d-bde740c5c2c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df73b58c-9215-4d8f-ab5c-3756f853824a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cc7b50a-e8ca-45b1-b751-fab363c3a3e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "298c10ea-0f20-4ca8-9b2e-8f301a668646",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de8f8b1d-9a31-4fc8-8ad9-b7fc586093e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52bc59dc-b016-47e0-9e1a-9cacb748cd64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd0d1b6c-16af-4d82-abba-2847d44fdddf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc6a3968-b71d-4479-ac35-7692411913f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d37e1d64-3094-43d0-9624-5fcc74472694",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a4e6ab-659d-40b6-a868-18959b1aaf81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "403fe789-db54-476a-99b2-82d6197ea65d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b7f2c73-0a48-4355-ba0d-2769d55d82d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72539761-a9e4-4823-ae95-0ce418134ccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efcb9702-1127-4099-a5f4-9db24cca8731",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47aa496e-c5e0-48bb-aae1-cbe7deb2db33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f421fd2-22b0-4d71-b33e-a12872279fef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a221c4-4e42-4b64-a9a5-3b6cb1339f5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "531628c2-eb11-4718-b60b-2e218b25ad40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0256d6eb-eba6-492d-af32-4a8365859ced",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbd3ff79-48fa-43ac-83a4-91023344ae90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f1bde32-f7d2-4522-8a4e-f7c54741fe3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "161fa54e-56d9-48fa-abe1-ba729bf729d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a861497-2366-49ae-8ad6-57b945e5850b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4715e417-0a14-4a33-b1ce-85d046f62b3f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d44c9f87-af2b-463d-99f2-b3c45145436d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96af6cb4-15e9-4f8c-b7b8-0facd2652d64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "558c5970-517a-4bbe-8e5c-e64563f3b166",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6624ad65-c363-4cb0-bf78-c0ec7d8f8d43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07e2889b-c330-4697-938d-5dc35b4896d5",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b17ac9dd-0777-4269-a849-758e35d12663",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fa7e7d2-b7ee-4b5d-a242-f29fae5b4f02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a95914-afae-4e29-b120-4b73fdc46d05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a464310e-62f1-46e0-98e2-21805fb3ebbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c05a8007-3672-412a-b572-2761bdb66167",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f52f6ee4-386a-47f9-ba37-cba85e10d197",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08a4fb9c-19ef-4f2e-bfc0-b82a678480e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eef485e-efb2-41f7-8e86-13b5f1dcebc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "375e168f-15cf-475d-894f-e8da56a47ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abb91d4a-8571-4349-a616-3c5ec2c2babb",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3e61fa1-fd51-4387-80ac-e3483ecdfc8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5470418c-2963-4552-93e4-ea6b98bafd71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f0e9f44-d2d8-49b8-9f7e-b38435f6bedc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86c51b14-baf5-46c0-a9cd-ba58a2fe830d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54792197-d98c-467a-84f4-991b4d91da71",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f089fcf5-1e2d-4907-bc26-57ccb79bca7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b38932d4-be03-4209-a03c-f2b10652d4e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e7557d4-1570-4467-85c9-c6b373b22328",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc45b7f8-5d8f-44db-81b4-c353f04bcac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a5d71c0-5d51-4f48-8b8e-e46fe0395ebf",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1856acf-a757-43dd-a974-819bdb5c4170",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "311096e7-c204-45c9-9806-5324e7b72e70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f9f0b5-691b-404b-9613-5a435a4a2b95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d41b3d8-faf4-4de0-b600-efdca5ebea5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d252152-d706-4f2a-907e-984eb3c33b1f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76df19cb-d734-427e-ba70-fb10ec7d11c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3c04637-1b6a-4ac2-9d08-abcf2795b2f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd44af3d-184f-44bf-8d2b-7ed645bfd2aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaf68eb4-0e05-4b6a-a4d8-4e43db91e7f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9290d9e6-5ae7-49f9-a7d4-805a3810ba24",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90f653dc-f398-4b3d-a2bf-1856862aa00a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61b6c5ec-a068-4e26-ac45-9b78c6a65ba4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd82565c-1c1c-45ee-9563-b453365aedb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c43832c-2155-4719-8091-53e4db73ede3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75db1412-f83f-4442-8ef4-957a661cf29d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f7b962a-dea1-4610-b01b-08f032039503",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5486b351-917a-4807-9093-33e604cad277"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "880bb288-66a2-49a1-89a3-1c7c06b6c7eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "320fb1cf-4911-4c26-8aa7-e29620590e1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99b927e9-0931-4c50-827f-bc9e846ecf79",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b996d32-9d80-4c25-a995-21a1236fbfad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a305be0-2dd8-4872-a286-ce720c60db34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f19bd39-3af2-4e15-a2c0-f05eeb75e965",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e474a5a-fd21-4e30-9504-919b3e44b0b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4757d347-bb3f-4454-9b16-5b6dc23d8b4c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a59f8c82-8080-4914-b637-f05235eb6a7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4ddbda8-fcfd-49c2-a4ea-955ab64aaf10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef82cc74-afea-4646-9e33-9f9c2eca7f18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ae6e052-837e-413a-bdf1-401224191237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a1c54b3-c3f4-4235-9c7d-7ab90ba49a8b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f103136-fca1-448b-926a-31c5c4c45385",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fd5ffdc-a39e-49ab-9753-d5881cc919f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92102417-8272-4e89-8894-607e0ed4c2a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5899a188-0b7a-4dbc-b321-ba3fe7c01fa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6d286e5-303a-4b4b-b8e4-5f6ad01e2da9",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "458c1f92-7d12-458e-957a-5cc0ce324838",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3c0d2ba-9217-4f76-8d6f-97225ff42d2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbafc487-b983-45ab-98f7-fbde9b7ceb6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32acc3e0-c394-47d2-8d40-53b0c7223d52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bcffe48-3b75-4662-99a2-d004af6bcf0b",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44f41558-b8c9-4dbd-9d26-4748865f6349",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edf4b26d-620b-47db-b1cd-e14d74ac820a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24be5bd0-7ab4-44cd-a2e9-5658bfd0cc33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71117402-7755-4723-ab2c-7896142a8773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87f69fe8-05f3-4788-aaf2-a00fc8811f93",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6fc695d-2419-4958-9283-1ca2a7de2e5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2191bab-56cb-4ad9-b881-2703657f9590"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38cadc45-6a79-43d5-a191-662b9dc1f984",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57c85b0c-bad9-41dd-a519-51a08526248a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "285e584d-d841-4846-8f2a-a63dd8fbe632",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c35462e0-54bb-469e-a38f-019fb7fe8ebe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d37f115-3451-4d40-bddb-af59958d5c88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1117f523-273e-4d8c-af48-99e5e9695fc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c004cd47-8f16-475e-805a-a9fd8eacd45c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1b79508-a2d9-4136-b0ce-439e36d3e886",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b88bc8-93ca-4c9d-b325-67897aeb38dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1d9e070-daf3-4c3d-b92e-cc84c887d3f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf72849c-fd85-4902-9161-25ff089e7e5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "563fd37c-c3cb-4748-9a60-374b7aec40f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44940b59-4870-4912-84af-82f7d313c636",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b4ee5e5-719f-4b2f-aba3-89a53bfbdf78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1cbdf08-fe58-4b12-9a84-22beb77d1b33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab404cb-df26-40bb-b778-3335a189d83f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "648a0875-13cc-4faa-a892-d8d45bdf2d9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23ea3325-33f8-486f-96ef-f46e1bfe5b68",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de3042b1-7e79-4d82-9301-6e7fd602c749",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "922fb8f1-ea9e-4a5c-a9bc-dd860804c5ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "884b1a81-de2d-4b2b-bb6a-a3071059b6ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d53a2f99-6264-46cb-80a6-720bf3960e9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e43a4e-1212-4a68-97cb-9c0ed06737c5",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8422bb15-3f4d-4653-976b-ee14424d1b29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87dd71d7-8f01-49c1-b549-462cbbab1ae8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9102581e-643f-4339-b3ab-eea5dd8ef2f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38bf8dd3-a907-49d6-9f69-f9b16dfedf58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0724a8ba-38f0-43f3-8894-41ef8cca17ac",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4bf33c5-3870-4c8a-bda8-0af6ff0efb4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e52b8b0-be8d-4778-aac1-fb9db093c6d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04dcb23d-f09f-43c3-a290-43b594c48c1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "406e0cb2-c719-4901-af93-9474ed81f430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1be4a39-e38f-47e9-b080-e1efbe4c2c82",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "686d2bf5-2b17-4e27-879d-b58efaabad51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eb5d81a-0d39-4a49-be7c-911e0500291c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10bb8699-fde2-4cf7-85be-ad6682cef1d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "502a4bfa-9221-445e-bf12-bb5292c7bfb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee9744ec-794e-47f0-9a4b-05a002bf3fc5",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feb9889a-e003-43c3-b3f1-ffe346ff77aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01a27efb-7f09-4a2d-a84c-b7a6f723a041"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d415d919-858a-41d0-924b-ea00f795a740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7ff7e85-1f8d-4626-be63-0b8938462bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4195d30-8a9f-4b87-8b86-bf0b8a9c4410",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e1f9a2-e34a-4895-bf61-07784e40df89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d525ed63-7f42-479c-b500-8cf87bae4fa8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "997510c1-3228-4fb2-8c3e-6e543dfe8949",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b169fec8-4e0a-4546-af58-29be9ac51d46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce492680-9144-4b5c-bbfc-590419edf0bf",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9db41602-9386-4f96-a640-1f7f2aef3484",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd90f2e9-afe8-4a1d-a786-70b1bce4e807"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74eb06a4-299a-47ec-955f-fb870bac150a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4761280f-c199-4954-b7ea-2a4e80df47e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbafda8d-5dae-40a0-b634-5734e8db4cca",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e519902c-6d91-4b9d-a7e1-58fbd56857a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1265371b-6484-4a82-938f-c70fd4c0d8ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d03ad84-7d48-4fb8-96fb-8e84f356ca9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e61a835-dd80-4ee0-8d29-3b107a404444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb88800-14de-42c5-953e-6e38959267cd",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34cce25b-0899-4774-a20a-e84254aff213",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fce1066a-db53-4943-8c4b-9c81216660a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b715a71e-0d37-4085-b0ba-4d82e2871254",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2d3128a-ecdf-40dd-ad8a-138b0fefc4c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99cbd8b2-cd3b-4530-8b76-6bfcd3b9ce6b",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72c298db-f17a-424d-9a6a-bfc1ddee6e30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4812bc0c-d31c-4f71-992a-01b63ba53f1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41092957-f004-4f2d-8c79-0cebb4596899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4c89e70-0fd5-49a4-9010-7f0ad12e011e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3789b9da-6ea8-4911-8bd5-274aa80ac2e3",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "affca5b8-08a0-4fa3-8c16-30b5f64f8425",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d5110b9-2922-40f4-9b1a-6237ceba23db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daf83c9d-7e6e-440f-a38c-9d7c920730e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bb2d445-3cf3-4419-9b9e-2801a83e37ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e08ce35-a53d-47dd-aeba-eac9c7bf1d85",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e053ac3b-7266-454f-8986-27a2ebb8a95f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "192afbdf-6cb8-4f28-a85f-7a705db67560"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7714be06-27fe-4087-b648-cc0b6c259d53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc18607d-adeb-4adf-b745-d67cf4aceac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0f8e07e-e941-4929-898d-d659f1e4e31f",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "505ecea1-7b62-4e22-9bb5-f4ae4c9f67ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "609fd9d6-7dfd-4b26-a52e-ac8c6a5508a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7b5c5d9-92c2-4b2b-888f-e37377c0f0f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3051313-7ebc-45aa-8d4e-f133b58af3e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aac3668-3ae1-4c70-81cb-fef157ecff16",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "962ef2f2-dff7-488f-9adb-1ef40e9c1293",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "209750c8-553b-46e3-801c-c90841ce9161"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a431a7f-8f9f-4575-9f6a-d8076a205fde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de1d3a1a-d6b1-4bee-a118-4d369086792b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "261e7df2-6ab9-4444-a2e7-819b3f94a3f6",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "826dfb17-30d7-4a44-816d-3f79bde8f1dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cc18c47-57c0-4d15-ba97-1265ee9ffb4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa2a3dac-132e-4727-b4c9-c006dba45ab9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35e223dd-78b2-4eee-9df9-295a1aa00ca5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7642749d-4a44-499a-9763-8fba2e3e9c07",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0367391-310a-4277-b5f3-fa2bec5e2977",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc64a038-dca9-4452-801d-fa2991e2dcf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3dd78d8-5ce3-4eb5-91be-850ffb615da0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53bb1b66-0742-4cff-ab6e-439271e5f68f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "920268c1-5818-40d6-af16-edf77ea5dd3c",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b703329-4e8f-4c55-abdf-8479042b745b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27ba5fb8-7a51-4461-a454-2601dd7e970c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b569feb-486b-491a-a60d-91839c6e5072",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f293c0c-a09a-4a68-a2c1-45874139d322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "077ddf86-771c-42c0-bf3e-a2e4bd9f7dad",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22abf7d3-e205-4794-9ede-ea6759421c4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca9d1ff0-3ef3-4f17-8ac9-c80d55ccef7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c9679f2-44e1-410b-808c-3c02a8b180cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1790fc33-7a46-4c6c-88f5-ba9043ff3ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5175430-56af-4abb-82a7-542c399d065e",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e37fa77-a0a8-4034-b6ea-3e1b5a91512d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95baa6b1-8ce0-4b72-9e8e-1d398351a825"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd72f7c3-275f-4431-b78b-054f18dc1bf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "045b1645-adac-430c-b45e-296b45a26cb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f15cf1c5-e813-4f8f-9e2e-fb024222df93",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1ac0681-5e5b-42e7-aa1b-d9aad6a3b43a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c183aebd-3d4d-4def-9177-3a635f26be2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c846c4-9752-4334-a715-57e8d35e5f28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77409e55-b3b5-4b1f-8b86-85d0b544d8d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe2e48b-4b76-4f9f-b269-7d0e2150b884",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7682c93e-52e3-419d-adbd-49f578afc67c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25269059-05b9-42b6-b4e5-0589606a6b3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6e0b53a-370b-4b5e-849e-f7774753a3b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f4dee23-478b-4906-acfd-6a81e20f49bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06980319-788d-47d0-8a77-f8560de2b9ee",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53f90885-fae2-48c3-bca1-5d202a92cbe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a790226-5a59-47ff-aff6-95bd6f17107b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f056d6e-0d0a-4377-9944-ae248ef312ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e14ec57e-1f28-4caf-a29f-cf4f1ceda34e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a781353b-e9b6-4cab-94fe-7fc6759899d2",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b13b28-3f34-4a5a-8280-3f61d6b816bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84084469-fa44-439e-8f65-13106b14dfd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34117801-22f4-48e1-adfa-5e09040f9332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c178eb5-1ba7-499c-b877-c2b50fcf420b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d897d752-8f16-48b9-b2ea-f685f4156541",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d71550-76ae-4e0e-b4d8-b2d7d187cace",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c895a979-fdc8-4265-9828-7e96b46ee726"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e13d297-fc77-48f4-a127-6aca2d73c298",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdc480d3-b1da-403e-81bc-432e8588cd82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2717782b-ea4f-450c-92e4-bd26ed6079f7",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3156ddbc-124c-44ae-a84f-328adf212678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7486a6d8-f9e5-414e-9031-ebc5f79c43f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9651c19a-cbf6-4005-9f73-f562b9d5e6a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6809f54-77ff-499c-8405-361bd914e7b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "704739b6-cdfb-486f-9336-2a842bbf702b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d95f472-6090-420c-9576-cc53e42f33e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43ca8c22-5ab5-48b9-a81d-3d29418cd82f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4537553e-5d38-4589-b015-a97080de8cf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b5e0f74-1011-4875-a177-fc75d0b1f5d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e44dd5-bbff-409d-ac60-8ac89d140103",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09156e2d-deba-4e9b-97b8-7f80e51a236d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0ae7f02-8110-4ac7-bb6b-d3d855fe6002"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded2c898-c9ca-47a8-9b14-cc0c946054a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0acee129-5575-4d02-abb5-6266fc1a4181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13f442ed-fdfc-4838-95dd-ab5c611fafd7",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f0291c-4811-4816-81e0-ecc2941e5f03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5b3e0ee-b63e-4ef4-8e89-cade7b85b982"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d3c35b9-6108-4d7a-b350-d5985f5ecff6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9de50747-d825-4c49-9b3a-acd1c1a96034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f13f6aa6-3542-4c64-93f2-207b6f7612cc",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25083ac2-5513-4170-8d51-9804da17e39e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57d0536d-2022-4e99-9ce5-7c0045b7c455"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ea11690-e9ca-4e9e-927d-a5e216654b73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f06a4134-2b14-4a13-bdb8-42d4d817212a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da092f20-b6db-4b56-a773-318d12af22af",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea7c262e-be1d-4b22-96c1-8e94f72e9261",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34142031-42fd-46fa-bd9f-d9c50c7739a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd851ba1-6050-45cb-8365-4ddbd70baee5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e4930d5-cebd-48a8-bda8-8a8e28845295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df80fe87-f12a-4e23-8b72-feb5899924b9",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fafe6271-2eb2-4a3d-9167-569432ae966f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ac2bf2b-a165-4c3d-86fe-8d205839f662"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddab9f13-04d8-4ac9-b237-759299cab7b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e67ff912-6926-4413-8bea-c4c6b57c184c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02fc76fa-9f7e-47ab-8526-7fce36ed232f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2526557-bd14-4912-aeb9-c6d9cbcf6830",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f80e91e-343b-41bb-9a6b-fa379a4c5ea9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0807773-3840-4d02-8374-fe922af77203",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5ad8662-f8bd-4406-a30e-13bbc4f4af51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a236bacb-eb79-4f44-8fb9-b094a7204b25",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9632487f-1548-4fc2-ad7f-a1a3275ed324",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "faf949b7-e446-4a09-85bb-786110448155"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "859a324e-22d0-4d82-a594-8e9c4b3a455e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e1aa383-1523-45a0-9290-12acbb33c2ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "816f498f-8d1c-4205-8734-b1eb8f8d0417",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bac3aac-cd95-4c27-a865-07c502a1414f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "207cd7a5-7a68-40e1-8a5a-7319bf68ace6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e288e91-9c8d-4530-b348-27cb8249e559",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e59e0237-69e1-49c6-8eb5-40d12674243f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86b246ac-378c-487b-8417-01494d955629",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a325f5af-cb91-48e9-904e-eae1f02a12e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2148c5f1-d6c6-4507-98bc-f2b7e8571644"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3bd2d59-9e57-410e-8214-4246ac598926",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81f79cc2-b941-4c3d-93ca-ce1e66f16d2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35133676-db0e-4039-95ac-1b4a7a163882",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de85a552-df18-4696-ac91-caa3f615ce0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94397ef8-ad02-4d22-811e-9da06d4c19cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0392cf59-066b-4dfb-aeb6-717f7fc23f80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85a6d35a-6e57-424b-a6bf-de5298ba9530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf9cd732-840f-4698-a43a-74cf68dbe4f4",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1e3c07a-da41-4793-bd47-f751cb0d0219",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cff8b3ba-f87d-40bc-bfdf-cfb1f8543275"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afaf62c8-143b-4b52-a441-c044d76e2c20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43b3b2b4-abf9-48c6-9178-110e5498c0fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db03e0a6-fea5-48bb-929e-ea94978c9fa6",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "379932c0-7e67-4274-92ff-ad2295afd861",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6686b973-beaf-4070-85e1-7b1bdb04d70a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d4a864-6e8f-4f2f-8e8d-ec36d960ae6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e385f91-f9b6-4e7b-be24-9da2a732eb1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3337e0ed-e29f-40cd-a375-6e46940138c4",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b815a53-0b58-4e25-b700-ee97a4bbca77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0841f174-0d5a-4120-aea6-7e78942c1aea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66b4cdaf-9828-48e2-b31a-18850aef30f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "259804ce-8494-44b9-935f-b162294cf78b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4acc962-24c2-46b9-b7fa-bfb570d74ab8",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bdf2e72-b16f-4f12-9cca-c05f0a1e154c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f154964-9f68-4cf8-b86c-803602afc194"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7c8923d-4f3a-49b7-912f-049d1ca7234b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c157157b-48cf-4851-9eac-9d6ac9e12886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40d2822c-fc95-4563-90f6-5342ebbb3f7f",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82da0a92-9952-4398-93dc-eba37e46f51e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5958081-9356-48d0-94e8-a5c01de73584"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fb91576-d47a-414f-a7b0-2bf528291fde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edf0f6bf-4d81-4a47-940f-0d626acfe944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cc63c04-13a6-44a5-b61d-3b90aa1efb2d",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e97fed25-c557-4fb7-91fb-2aae52be4b44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad1d1670-1c42-4850-909a-0aadb864f253"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3e99219-4999-4ac2-a3e2-27f634258592",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4a246c9-fe2a-4708-8937-fae93bc12cfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "863fa8a1-5057-4c84-902d-7c042a10a88a",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29452834-6468-4e68-8f4b-2a5c395b3273",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6712030-fb56-4395-ab3f-235182e8bbad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84560509-2530-43e3-9a2e-c7bf655f84e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8252f80f-15e5-434e-9dc6-1f07f4597b64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "989d02df-55d7-4492-b565-e606d73981c8",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d66283-d8cb-4727-8665-50c7724e2e78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0425bcc8-3bc0-48f5-a1bd-eeafcebc4890"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d106dcb-5f6b-45e3-9500-c5aa6072a408",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc68fe8f-99f9-4697-8582-365c8ebb6193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8502deaa-68c0-4f03-837b-bb38ce5bc5eb",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad411dd-f1c3-4596-8278-aaf2a5ea4cfb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0121b4fa-cfab-4002-8b21-2cd0d6470bed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc498f63-73c0-4e16-bf24-20cf8c0953d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b7797a2-44ce-40a5-9fb8-7f695b71a51b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a08be5-dcc5-44a5-8787-bedca23430ea",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3da6563e-982b-4e28-baee-1e6b17f37af6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa5464c1-b554-42da-b961-cea46a9f2284"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48b82a72-7cb0-4fa6-84d8-1eb8dcbf7299",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b364813-af29-45c8-8ad6-0b2dc27add22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6dad522-6fda-4144-8559-956fe444a679",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1158b8ee-cdeb-4df1-9899-8521c18fe957",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adc0aac4-b2e8-478e-b23f-25e498b4593f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f058d15f-8b54-4e37-a826-3c4d952f3c69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "997f9d84-d325-4adc-b344-550c37b68759"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64dd9b3c-b0bd-465f-84b1-63c645b5c8e7",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb0406a-2635-40dc-a20f-07be6e9627a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4d23cb5-b49e-474b-96c1-860e9e8af516"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e581abc0-52c3-4250-91dd-9ddfc52ad09a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "724aad82-41f5-4e58-b1b9-22c58ebde631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b681ccb2-cea7-46ce-8862-70324d550399",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77cd9fbc-c0c7-465b-b7ae-f47f74a78733",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44d748af-8fcb-41f5-8123-ed83118d7345"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12b74a9e-8653-480e-a854-eddc50aa43ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1b6d7ea-d973-4816-8aee-0466b0d89747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12142f31-15c8-426e-8214-935cf23370ae",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab99c47d-d8bc-4ba5-b491-62620dad8c0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "434d1c86-531e-46ff-8eec-8b9f13dc2962"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d440e40-480c-4e73-8a6e-6a6c434f1674",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1755d242-81f3-48bd-aa84-2c841a8cf456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e85001f-e494-490e-8299-d76d03dc066f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "024af9d8-06f1-42fb-b76d-bf05cb5d9d5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2d80e4d-8495-4595-93e6-5c39c5d4ae20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0b3b38f-7a07-469b-b1c3-919e2ed46a8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7c94c86-8684-457a-9e21-2bbb0ddc9994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad94c948-5e95-4142-9b21-f842d2b62a93",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e816915-f9be-4df4-9faa-7513e9c8ad51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0498882-2359-4a59-8b8b-86bf020b4823"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2f5e730-6c25-461c-b940-c0efdf7f1374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbf7e288-d4e9-419c-b7d5-cc9fd0b4719a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06b7217e-988c-45d7-a2bd-b4897e3f31e0",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f38b6584-045e-444e-bfa7-9ba937a36084",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4fbb3d9-4032-4aed-8eb7-0fab5feb5d35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa2c6aa6-c7f6-4c14-923a-0213f4fcaeab",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00ca8298-e1bd-40cf-aa42-4fc5e04eb94b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb8c5ddb-8de2-440a-94f9-9f9392046ba7",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b533b61-d70a-4dfb-9bd0-a8741d585124",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42afc0ec-90ec-4225-a33f-0929056cb333"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6453b5f-3973-48e6-b770-fe195b77c0c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f005efae-384b-4a4c-915d-f7cd5211888a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a67c9bf-dd55-4b12-8065-a70d71cc63ed",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd3c0177-d805-4399-9e35-ab9cd2e5b7fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65e2e659-b25f-4a77-89c5-9b880ae2fa87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf7e4d9d-e0b3-4182-b21f-9e7606d86d37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d994931-cfd2-4363-84fe-40b3a8a41c29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8470f322-507b-4535-875d-9a42adbf7f18",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70d3bf38-2742-4d95-aae0-26f25f63bc18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82714691-2ee5-437e-8c29-dd23a2d3471f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69659ca1-0f66-4567-8366-ad789ac2828a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad222678-6a91-423a-8c04-ce2ef097da9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c03f208d-b8e2-4b33-ae66-b089e33a6c5d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f0d9305-10fe-42ac-913b-fa4680c17241",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef66505b-9860-49f3-9f30-a9a92d5005b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35179795-1a3a-4176-9102-58a9d1fdd02c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f57c21b1-4552-49fb-843b-d8e39384c388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a64656fe-bf83-40cc-a647-abc650bb0110",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d533cb48-44d7-434b-8cc1-53155f16d917",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5de1cda8-33dd-455d-a3ed-0b0ef5675064"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f2933c5-017e-4d23-b71e-011840d0f1f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51b02d86-d998-4707-9d88-b34744c695dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bc8f554-1e9d-4408-abc2-aabd5b5139f2",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "420c3f1c-d80c-45d2-bf28-14f4ea7834bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bba0bcad-8d18-4440-bfad-6eea3b95e35a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d45e82d5-8a9c-4b88-8bcc-165ed1c8dce6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ef0ca57-c3b7-49cd-b756-f41ea0aba77a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e4d32ca-4fc1-44fd-9edc-78847ef4bf6d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ac51633-ff85-4f87-ae7a-fa86cfbbe475",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62b7a03e-dbf4-46de-9072-81c14ed3fc57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "449959f9-7361-4e04-ab82-0c4eda718f51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80d39d24-7f48-4df8-b35f-84ed8074bbb3"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "542826aa-1a61-4fb2-8f0d-6c20ed4fa9e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "64267476-ab63-4a8a-b32f-5fd45ae77595"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0612e1a4-5547-4788-b8f8-39f2091bf067",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e234cfb4-541e-49d3-99cb-e36c10752290"
                    }
                  }
                ]
              },
              {
                "id": "4f85ecd3-f7e4-4248-93c8-57618798e415",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7a27b209-fb2d-4321-9c1d-960ff5015408",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7246348-b435-4f14-bddb-d9d7242b6817",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d7169422-94f1-4591-8abe-12a3dbedfca1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a1c70e2-1a71-46bd-9126-6866a8697f72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "72f77926-6170-4104-81a1-fc0665bf226b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfdc06f2-492b-4ba6-9792-5c2a0071992b",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b835b59-48f8-4deb-ba94-1f403bc0c8c0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "40c3ae0d-b938-410d-b068-07126aff0ce4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90bfd193-747b-4db7-8e92-7f99f4645c2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7d420c94-17fb-4f10-b1b3-f383c0cb1bd4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "939bc430-a71e-44fb-b2a7-8babe01f817e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "500de1ab-a72b-4b90-a0b1-1837e689c795"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "895adc42-ae62-419e-bd0c-e3aaade2ba3f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b351d02-b777-4d26-96b5-eadb84a8a2c5"
                    }
                  }
                ]
              },
              {
                "id": "4f1bb3b6-2beb-4d22-8666-d6d09cc5eb83",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "e455a9ad-c1ee-4552-98a0-1552e791d243",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "581688b1-a656-42e7-8af4-8f95499950a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "78f7c0f3-0e01-4450-ba6f-026ed5f02c8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5339b3b-dd3c-4984-b7d8-143d3276853c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b4ff46c-9597-4014-ad76-2b5d5646baee"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "172b188e-8a56-4bf6-a2c9-9ed370a9463e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c9f9d441-00d2-47ab-8937-9a0ca00871b7",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6af2aa0d-6069-40e9-88e3-47aee75d9e5d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e77fe640-3971-4c65-bc38-47edb12a0306"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "08414fd0-bf7f-4789-99d9-2571806c7ce2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8ed2a90a-3cd3-43ef-8c43-d331e7ef11e5"
                    }
                  }
                ]
              },
              {
                "id": "75360cfb-5905-49f1-b5e5-0ab05eff1a9d",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "77525426-dff3-44e9-8e51-8344f35ea486",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4bbf7b6f-f309-4d61-9ff1-06d2e878c474"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "77488fde-54ae-4a00-ab5f-fce871c93a84",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2380a685-9103-46b7-8a02-ed817cccbd47"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3879f6bf-e57d-41e7-8572-779b799694b7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c1890b01-a9ab-4e2a-9fde-019c54b9d292"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ffe776cd-ae6e-4dc7-842d-e60db27852e9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fb3b6e56-8fb5-401c-8f42-9ce52fc3007e"
            }
          }
        ]
      },
      {
        "id": "7b85ca03-832a-4db1-948d-c7a83397d4e6",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "6c43c2fe-fbc7-4ed6-a06e-2f4c49d80a09",
            "name": "Negative Testing",
            "item": [
              {
                "id": "170f9ed0-c11f-4d3a-a784-d73df6641cb6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7c9044b5-c158-49ee-ae32-7ee1afbd476a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b47da3e-3748-4f3f-8a72-1c6e6faac42d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fd9cf2c5-8dd7-437b-83f8-b2ec1f85719e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daf4fad7-f5c4-4b68-a3a9-399f4810860a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2d5d7dec-5b9b-4f03-adff-c181c9722eac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21217adf-a1fb-4ec1-b18e-c0c179ddda3c",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1657751-1c36-4e18-9519-b5ac734e3b08",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "634f1017-b5a3-4c06-8703-536a5b4737cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a423b55a-9a67-412e-8bcc-2398f397caaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2d9eab1d-7bc4-4f7b-bec2-c39987a21ccd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d138003-cc76-4085-9fb1-905bbd1f23e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a381817-d63e-406a-a24a-e4be910f2e84"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc720cfb-b9be-4cf4-ace3-76bfe968937f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1fc26192-d758-4b4a-b3c3-135b75ab99db"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7a05a6ed-c856-476c-b273-e6ef945f43a5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a2d5f4a0-3d31-43b6-8dfd-d902e14a11dc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7e6d9e25-a0ce-4454-897a-dec6e4167ae6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "817b0280-3eee-4eb5-ad31-06811ca0465c"
            }
          }
        ]
      },
      {
        "id": "c19e18cf-3211-4c64-b049-1cc1c22dfcc4",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "5c1fc1ec-2539-46df-acca-c0809566c3ef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "73a9b2ef-a825-4007-b9be-b1821a3a3f84",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2e3624ff-2e9d-42af-b9f6-38e3b7a8607b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90869884-97eb-401a-a03a-242db66781f6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fbff7f5d-5cd4-4548-aec9-d1db8d3f2b44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc76bf74-7457-4a25-90e7-1f3d546f398b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7ff7d4cf-155c-4eba-930a-b00a53681671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8f7a2df-196e-4995-a83a-5100f840e2b5",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7fa65f3-c101-45d2-99b5-c0fa40c6c17a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "61a201b5-c3ab-4c8d-90a5-4172d5c10581"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3d66bbf-33d7-4940-9357-69bf501bcb15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b66e2f7-acf9-4c4a-9320-b0a71d41d4ea"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ebc12f2a-eaa0-4e69-a62c-51e3bc64de47",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b760f96d-740f-4864-9168-000f2b323331"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d899a19f-0e18-4f1a-8a45-4a7bef5a5304",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b2f2c41-fba2-4dd7-a213-f23450c403e3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "24066081-3969-4072-a556-6787d7ecc9cd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "453f819f-fa06-42a3-8cac-4c758028486e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "17a566bf-c718-4945-8348-ff38c5a85663",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f232b33c-9c55-4ac1-a96f-aa97d93a0f19"
            }
          }
        ]
      },
      {
        "id": "b3d04279-e078-4560-82f0-bdac83586b12",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "a3e52a25-2c61-49bb-ad7b-9bde02b05bb1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8f072ca3-b61e-4d0d-9465-300db3e7841a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "841a8f2b-441f-4038-8301-86dcfbf8528d",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8e58323-0127-4d46-8888-f6876ab2d27a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "32104a4c-99a6-48dd-84f9-6822439c602c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37c5b4aa-d386-48e0-ab86-043090b85d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b8d0592b-c96c-4e95-94d7-7819263d26f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac2db2a1-82ff-4f40-9c7e-92bd3e569013",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c91228c-2334-45c8-9f26-87bbcb48cf70",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "35c46680-f92c-4681-a75c-d349afde29c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4513472-5ef1-4326-ab4f-d6974323d1cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2b18d355-24b1-459a-a453-20ee15b8b4bb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4b24c7fa-b6f2-41fe-8133-1085a374b031",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "45cf550d-4676-40d0-a169-eb82628db4f5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e33ed2ba-2722-4adc-b191-aeedf7d760e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bec0287b-dd3a-47dc-a590-92711142aa6e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "331c3ea5-e477-4eb7-93b2-ae501578a409",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b10635f0-b81a-4506-a8c9-d8632cc9f412"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "93aa65d9-9448-433e-8fe7-f4495a70a03e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "74f0dbd2-75c3-42b1-8efe-6ab92f60618b"
            }
          }
        ]
      },
      {
        "id": "41f2b25d-c75f-42fa-9fcc-4b0a96724e6b",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "afa78952-ba27-455f-8d34-b603f3a718e1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1a25b1b7-d590-40ac-b727-b7f5208b2bcf",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b5ccc551-93a4-4ddd-83de-de05a435fae4",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4e3fdd6c-8de4-4e71-951b-d6f3c4f2c7b0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a124d283-b9fc-4d56-ba46-da38f36d5e44",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 268.69615384615395,
      "responseMin": 10,
      "responseMax": 5158,
      "responseSd": 772.5109981695401,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1680223128934,
      "completed": 1680223209415
    },
    "executions": [
      {
        "id": "bb1c7ad2-58a7-48c6-9f2a-6b6c30feec60",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e23c1c71-3704-4f42-8038-4951936de831",
          "httpRequestId": "2dbf444a-e140-4b30-9527-61d58ac15009"
        },
        "item": {
          "id": "bb1c7ad2-58a7-48c6-9f2a-6b6c30feec60",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "8038077b-4fa3-4098-8af1-d693ebf291a3",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 0
        }
      },
      {
        "id": "55da67f3-1b81-48a0-aa5a-9aa410fe86c7",
        "cursor": {
          "ref": "480a521e-7ded-42bb-b127-2839b52a7400",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b89337ac-508c-443e-a4e8-a116975fae0d"
        },
        "item": {
          "id": "55da67f3-1b81-48a0-aa5a-9aa410fe86c7",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "50555b87-1800-4cae-98dc-607474616702",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "66267d7f-b95b-4fd5-9868-93de6bd74ab2",
        "cursor": {
          "ref": "87022a00-fac3-4065-add9-cd5549c12e88",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "95955c28-d035-4458-9258-d20bf2fbd801"
        },
        "item": {
          "id": "66267d7f-b95b-4fd5-9868-93de6bd74ab2",
          "name": "did_json"
        },
        "response": {
          "id": "74b38468-1be4-4e12-9365-8ce481464b05",
          "status": "OK",
          "code": 200,
          "responseTime": 655,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57cbea1a-148c-4bff-9c17-10ac0dd9f10c",
        "cursor": {
          "ref": "2e3b6423-12a5-4b13-b94d-4e40ed7c2be2",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0dc285f6-1577-4e83-88f9-addb5e1ff1d0"
        },
        "item": {
          "id": "57cbea1a-148c-4bff-9c17-10ac0dd9f10c",
          "name": "did:invalid"
        },
        "response": {
          "id": "0e5db6c9-7762-4a59-a57d-092c68bc9a28",
          "status": "Not Found",
          "code": 404,
          "responseTime": 947,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "57cbea1a-148c-4bff-9c17-10ac0dd9f10c",
        "cursor": {
          "ref": "2e3b6423-12a5-4b13-b94d-4e40ed7c2be2",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0dc285f6-1577-4e83-88f9-addb5e1ff1d0"
        },
        "item": {
          "id": "57cbea1a-148c-4bff-9c17-10ac0dd9f10c",
          "name": "did:invalid"
        },
        "response": {
          "id": "0e5db6c9-7762-4a59-a57d-092c68bc9a28",
          "status": "Not Found",
          "code": 404,
          "responseTime": 947,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "a87645f3-f0c9-42c5-8dd6-e50c122e76cb",
        "cursor": {
          "ref": "66f43418-7ef9-4b93-a9e1-a0539fb2e75e",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f997c7c2-50ee-4b03-b2c6-d0b755bc1cb9"
        },
        "item": {
          "id": "a87645f3-f0c9-42c5-8dd6-e50c122e76cb",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d9bb5a9b-2800-4f83-8d6d-6ca7e1f8521d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 529,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c144265-5b84-499f-b719-bea944005917",
        "cursor": {
          "ref": "fb38646e-a5a9-4aeb-a3b5-c2c1defcf760",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8063a277-8df7-400e-8579-4b24d674290e"
        },
        "item": {
          "id": "9c144265-5b84-499f-b719-bea944005917",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "1d306fcb-ae24-4e90-97a5-ed12c7246aa6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 342,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5ed75ef-a2d4-4003-adc8-cf9119f7d9b9",
        "cursor": {
          "ref": "c4128cf2-cc35-4201-ab48-d2dbaa5faf05",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "fc86423e-db46-43f7-a0f3-b4fd9a91007a"
        },
        "item": {
          "id": "a5ed75ef-a2d4-4003-adc8-cf9119f7d9b9",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "5795418f-80e3-402c-a17d-2e794b84ec5c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "9bf4877a-b4db-4b4b-99ff-5a831a0495d5",
        "cursor": {
          "ref": "c385e1e2-e276-4350-814c-aff6ad8b58f9",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6d7ec545-7c2f-40f1-8367-9bea5a0d5360"
        },
        "item": {
          "id": "9bf4877a-b4db-4b4b-99ff-5a831a0495d5",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "2e449a5f-ed51-4275-aae4-4dd763337acf",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "9bf4877a-b4db-4b4b-99ff-5a831a0495d5",
        "cursor": {
          "ref": "c385e1e2-e276-4350-814c-aff6ad8b58f9",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6d7ec545-7c2f-40f1-8367-9bea5a0d5360"
        },
        "item": {
          "id": "9bf4877a-b4db-4b4b-99ff-5a831a0495d5",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "2e449a5f-ed51-4275-aae4-4dd763337acf",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "8ef5a4d0-19be-4d30-9036-702ca765f7c8",
        "cursor": {
          "ref": "07c577fc-2a18-45c1-a7c9-6836e8dd0727",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "62b01a7c-0021-40f3-bd19-1a770af42cf7"
        },
        "item": {
          "id": "8ef5a4d0-19be-4d30-9036-702ca765f7c8",
          "name": "identifiers"
        },
        "response": {
          "id": "c8a32081-b9e9-405d-93aa-f2a96ae9e48b",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e72b6410-cbbc-4b8f-8e1f-1e3cfbbe93ed",
        "cursor": {
          "ref": "17256eba-248c-416f-8f84-ad1d8b8e7789",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "dfb1b85e-d0e5-4fb2-b867-f4bfa0e403bb"
        },
        "item": {
          "id": "e72b6410-cbbc-4b8f-8e1f-1e3cfbbe93ed",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a45923db-6ca6-4788-9500-67eebd11a474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e72b6410-cbbc-4b8f-8e1f-1e3cfbbe93ed",
        "cursor": {
          "ref": "17256eba-248c-416f-8f84-ad1d8b8e7789",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "dfb1b85e-d0e5-4fb2-b867-f4bfa0e403bb"
        },
        "item": {
          "id": "e72b6410-cbbc-4b8f-8e1f-1e3cfbbe93ed",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a45923db-6ca6-4788-9500-67eebd11a474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db979ee3-6c64-4e4e-8eef-ecd4f89e66c5",
        "cursor": {
          "ref": "44be500f-b8df-46a0-aee6-7037905bdee3",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8dbf03ba-773b-43f0-b87e-22c595a2907e"
        },
        "item": {
          "id": "db979ee3-6c64-4e4e-8eef-ecd4f89e66c5",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "16f31540-b1fe-4193-942f-d5680ae7454c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b751eb3-1ba8-46a4-9f49-504367c3cf64",
        "cursor": {
          "ref": "05b45c39-798b-4980-8f58-d3738c7afef6",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "3cea3ce4-93fc-47ef-aed5-53fae2d7c3c5"
        },
        "item": {
          "id": "2b751eb3-1ba8-46a4-9f49-504367c3cf64",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e6b0f89e-754d-41e7-bb0a-99e264b0f092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 158,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "674e14b1-047b-44a3-aa89-94471b9f9dad",
        "cursor": {
          "ref": "e7de4b94-18e9-4d3e-ba44-480596622e73",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f5c3b76c-9432-4f10-9da5-2f0c954582f5"
        },
        "item": {
          "id": "674e14b1-047b-44a3-aa89-94471b9f9dad",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "06ab651c-972b-4c06-a3bb-08995efb7fbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "249607fb-4725-4d58-9ead-7f99c0796edd",
        "cursor": {
          "ref": "4e1abbb0-147e-42d9-921c-3ece1e4de3e8",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "900e0ecb-6372-40eb-bb2b-e562071d5ddc"
        },
        "item": {
          "id": "249607fb-4725-4d58-9ead-7f99c0796edd",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "5288773d-ec24-4394-8972-5130b6ab04c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1c11c09-a8f2-419c-b7c7-501ed658a3b8",
        "cursor": {
          "ref": "b18ae7ab-28d7-431d-ae4c-1e9a23a48080",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f406b988-8e5b-4789-b7bd-28771ddc361e"
        },
        "item": {
          "id": "c1c11c09-a8f2-419c-b7c7-501ed658a3b8",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "0c5403df-9452-49db-84d1-d5cf4bd16428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1317450f-5f57-464b-b4e4-f63cc5a16e26",
        "cursor": {
          "ref": "4859240b-ab1c-45ff-8f53-04645da3a66c",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "76b748ef-f65e-471e-b975-d04ad74553c2"
        },
        "item": {
          "id": "1317450f-5f57-464b-b4e4-f63cc5a16e26",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "97c15b30-3c18-47bd-acf0-c3055cd58caa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edf046be-6bc5-4b7c-a090-8918475e9916",
        "cursor": {
          "ref": "1996aefb-7934-4fa3-ba56-e0b9b9517d84",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c790623c-0ec0-4d78-b3cc-7a167cfa76ad"
        },
        "item": {
          "id": "edf046be-6bc5-4b7c-a090-8918475e9916",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "82a73b45-5b11-46cb-bfd7-d1296cf254c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e69fdcd4-6b21-4f1d-aad0-4a4a3b2eacc3",
        "cursor": {
          "ref": "e0dd67a5-df04-4bf3-988a-297282e9ee56",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "5b759b97-d9b5-4d2b-aa7c-43f122c76f32"
        },
        "item": {
          "id": "e69fdcd4-6b21-4f1d-aad0-4a4a3b2eacc3",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "9390f65e-4905-4843-8df0-1118832a5cc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eff3b6dd-c24a-4a57-b5d6-2ab46030f9f3",
        "cursor": {
          "ref": "ec49f172-deec-46be-9391-e0955319685e",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ed7ae0b5-aa25-43cd-afef-0dad3f9ec5cd"
        },
        "item": {
          "id": "eff3b6dd-c24a-4a57-b5d6-2ab46030f9f3",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "388566e4-3aac-4232-878f-5f14276f9481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb93dcb8-a4a1-4715-a41c-9a0c185302b4",
        "cursor": {
          "ref": "f11fc0cb-308f-48a7-96b4-c7bae4a58e1b",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "1d2e22d4-c350-46b2-8bad-f6ec2678fb7a"
        },
        "item": {
          "id": "fb93dcb8-a4a1-4715-a41c-9a0c185302b4",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c91438e1-68d0-40b1-8662-0952f7322fa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc294bac-a801-49ae-a8ec-4d62e6f6e189",
        "cursor": {
          "ref": "19e8567f-d44b-44dd-847d-f3c7c6ad80f4",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "1ac98a57-04f0-4d3f-8359-6b2756c7d5d6"
        },
        "item": {
          "id": "fc294bac-a801-49ae-a8ec-4d62e6f6e189",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "c6c7f2c6-976a-4777-aee4-f1185a3731c7",
          "status": "Created",
          "code": 201,
          "responseTime": 2696,
          "responseSize": 983
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "b20daca5-70d0-414b-9cd5-8b778a1c2af2",
        "cursor": {
          "ref": "854a5df1-6613-45b4-aac4-91ae04489687",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c08688d6-f4df-4d31-86de-e2b69733ca67"
        },
        "item": {
          "id": "b20daca5-70d0-414b-9cd5-8b778a1c2af2",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "3fb26190-f9c7-4aef-a702-0b84f09455d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa88f1cb-8c30-47c3-beda-c7fadef7cd89",
        "cursor": {
          "ref": "43e624ad-5aee-4815-b22d-3438016f448b",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "3a513cf6-bc25-41a0-908b-c382d0a74f7d"
        },
        "item": {
          "id": "fa88f1cb-8c30-47c3-beda-c7fadef7cd89",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "8c6012d8-8cbf-41ae-a741-547f88776ae7",
          "status": "Created",
          "code": 201,
          "responseTime": 5158,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "b281c240-1b4b-49f4-9b80-7326d671530b",
        "cursor": {
          "ref": "2ac16717-4134-4a97-9702-59a0823ef962",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0ae57a8f-11cf-4788-86a3-b8b14400145d"
        },
        "item": {
          "id": "b281c240-1b4b-49f4-9b80-7326d671530b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "6defd8c9-1dee-4102-b1ac-43b403b17e26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eab3a26-260c-43b3-b55a-f2e9caf3e321",
        "cursor": {
          "ref": "89982de9-5f2e-4d8a-bf82-28b52d123558",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "5073e61e-865c-4e43-95eb-7ab1721b821c"
        },
        "item": {
          "id": "1eab3a26-260c-43b3-b55a-f2e9caf3e321",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2128f20c-52a1-46c3-b594-16b9718b8adf",
          "status": "Created",
          "code": 201,
          "responseTime": 3202,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "aab80474-3c51-4342-a9bc-c2f4f880d63f",
        "cursor": {
          "ref": "77b17197-aded-4366-8ed0-cd1a9a8bd002",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c28090c8-21ad-494a-a0e6-99de61ae21fe"
        },
        "item": {
          "id": "aab80474-3c51-4342-a9bc-c2f4f880d63f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a53cd7fe-6aa0-4373-8680-0a00917cc5a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da84d60d-be06-49d7-bccd-22a0acdaa686",
        "cursor": {
          "ref": "5dec5698-7d22-4b7d-bd7d-bb5012cdee1d",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "71f21f3b-f653-42df-b27a-3ebdc0729111"
        },
        "item": {
          "id": "da84d60d-be06-49d7-bccd-22a0acdaa686",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "7b341e7f-4d1c-477d-8d02-0889169450ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b94138a9-b594-47eb-8310-12f3da744c6a",
        "cursor": {
          "ref": "b0bc2183-9043-4e39-a107-75c334f96646",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "30190716-d267-4920-b10a-8597473ff839"
        },
        "item": {
          "id": "b94138a9-b594-47eb-8310-12f3da744c6a",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "f0eedb20-18b8-4858-aec8-5760e347bde7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fb13772-c04b-4a46-8bb9-5614012dc36d",
        "cursor": {
          "ref": "1d69a7ce-97ed-4ea5-8605-ac80a3eb65d4",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9f10e82c-1949-459b-915c-0a28e11391ae"
        },
        "item": {
          "id": "7fb13772-c04b-4a46-8bb9-5614012dc36d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "166d620c-a972-48e8-b2c8-0d403b115976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2f8ccdd-0de8-4c9e-9846-befd82002daf",
        "cursor": {
          "ref": "9b8bb76d-36ba-4a83-bc4a-da31c702d7f6",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "056d50d5-340e-41bb-9bb2-7300e4919610"
        },
        "item": {
          "id": "c2f8ccdd-0de8-4c9e-9846-befd82002daf",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "8381a15a-9d8a-4c1e-a128-9643037546b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d172d00b-ec52-46cd-a977-0b2c3af8ea6a",
        "cursor": {
          "ref": "eb5b4d07-7072-4fab-888a-3274fecf3f7c",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "bbbb6d3e-b89a-45a3-bdbb-229635ebe970"
        },
        "item": {
          "id": "d172d00b-ec52-46cd-a977-0b2c3af8ea6a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "8a779730-109a-4d2c-9016-d41b6df8cd92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7f23cc4-f11b-4630-8bf4-f9090d7943fb",
        "cursor": {
          "ref": "fa7761f4-ff81-41ab-8c15-0a5f51823d23",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e604abc7-ec5a-4729-b0cf-a7579dd9f48b"
        },
        "item": {
          "id": "f7f23cc4-f11b-4630-8bf4-f9090d7943fb",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e87d76d3-7574-4c8b-922a-4ed18e9baa5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2c3745c-4a82-432f-95ff-6961162f9785",
        "cursor": {
          "ref": "cf7e173f-ffac-4379-9364-bde0006b6d93",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1a10f78a-a6d7-4e4b-97d2-86ddef5b94ed"
        },
        "item": {
          "id": "c2c3745c-4a82-432f-95ff-6961162f9785",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "2f4bb62b-d1f6-41b8-8ebd-2383b78540d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36a13c17-7e6e-430f-939c-c5ee340ea121",
        "cursor": {
          "ref": "7e45023d-5e9b-4d68-9404-4ff5a7f67df2",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5cfb404b-fe4d-4694-a3de-7b5d6894c9e3"
        },
        "item": {
          "id": "36a13c17-7e6e-430f-939c-c5ee340ea121",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "ad657fb1-1f30-4dfd-b1d0-03b048b83efe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2715f17-ae55-4f9c-9aea-8e897f624e5b",
        "cursor": {
          "ref": "b194d831-86ce-405b-8e12-8f6f4c209822",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "6530a2bd-cde4-4f39-af59-510a67b34e7b"
        },
        "item": {
          "id": "c2715f17-ae55-4f9c-9aea-8e897f624e5b",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "7cad2df3-2e12-4089-9f7e-da76df8a3356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e04f6e4f-83f7-4a3b-921d-7e31a9030833",
        "cursor": {
          "ref": "e3acae10-ee22-4eb3-af7b-5a363ea59f23",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a48b388a-4f9a-45b8-98b6-124a551066ee"
        },
        "item": {
          "id": "e04f6e4f-83f7-4a3b-921d-7e31a9030833",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "0488225d-6073-4671-b70e-81da250f97c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5f3d755-3eba-4502-8dbf-1fdeb7c4a59b",
        "cursor": {
          "ref": "6df8d2bd-d16e-4a04-8e21-91d64c668195",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "5cb9c163-4210-4f31-a3ad-9a05551482b9"
        },
        "item": {
          "id": "e5f3d755-3eba-4502-8dbf-1fdeb7c4a59b",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "a5a7c500-899a-46a3-9f3b-75cf221dbb0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f33649e0-aad7-4086-a4ee-452315e8998b",
        "cursor": {
          "ref": "1cb66c20-9c38-4cb9-bcf8-f238485277c7",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "41c8772e-d0b6-4f89-a70c-260fd0f9de5b"
        },
        "item": {
          "id": "f33649e0-aad7-4086-a4ee-452315e8998b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e439274b-8571-4013-afcf-2b32a814bbac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4991b905-b37d-410b-b002-6432d4f48a6c",
        "cursor": {
          "ref": "2c8d5104-4386-45fb-a38c-0140d8abb813",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "2c8efd40-91bd-4805-bb7e-5ec607e0de9c"
        },
        "item": {
          "id": "4991b905-b37d-410b-b002-6432d4f48a6c",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ab50ae6d-3d31-4999-b480-66f8557febd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ccf2175-735c-4e40-9917-61cebc253c30",
        "cursor": {
          "ref": "94d7b88a-3acb-40e6-897f-6abd5f0c6e97",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ae68a902-1308-4f4f-88c2-03887fe055a0"
        },
        "item": {
          "id": "8ccf2175-735c-4e40-9917-61cebc253c30",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "815808f3-26a3-449d-a821-7f4eab3b3f37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f53205a-8527-49ac-bb86-ef1aa9ed55bc",
        "cursor": {
          "ref": "d9490083-d799-4ac3-a3cf-eb3ce5941812",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "eed83d68-f2b6-4c40-bd38-2dfa7df3a21a"
        },
        "item": {
          "id": "9f53205a-8527-49ac-bb86-ef1aa9ed55bc",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "7794b313-1d19-4e54-8078-7615631a869b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2a1d3c4-915b-4c20-a9d1-c0e4fbe334d9",
        "cursor": {
          "ref": "1f7dc60b-34a9-47c6-a1c6-8188d7cd6892",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "a88bc99c-1b0d-4f9f-b9ed-34e9f5cb9440"
        },
        "item": {
          "id": "a2a1d3c4-915b-4c20-a9d1-c0e4fbe334d9",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "50c848cf-b182-4a19-b859-5430af14294b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 144,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d24459c5-9a18-4b84-995f-a12959a7ef17",
        "cursor": {
          "ref": "fc0c67cd-42aa-4dc5-b27f-469125b4790b",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "eaba1602-bcff-43ac-a35a-02e132b77089"
        },
        "item": {
          "id": "d24459c5-9a18-4b84-995f-a12959a7ef17",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "d289a679-abaf-4ca4-b16f-8e023eaa2dc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28750398-caba-4ad8-a579-140076ff9d8a",
        "cursor": {
          "ref": "5a06daa4-f448-4561-9ed4-d66aa97ddf9f",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "3d7c365a-3003-495a-8167-43e4e05b485e"
        },
        "item": {
          "id": "28750398-caba-4ad8-a579-140076ff9d8a",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "bacdb541-48b1-4262-82e7-93cfcf70aa88",
          "status": "Created",
          "code": 201,
          "responseTime": 2752,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "17678c90-970b-402f-86c6-05e5c38344e6",
        "cursor": {
          "ref": "dc0f51a6-8611-46cc-92ea-d814548adeb9",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "963d1b0a-37da-48dc-aef3-9a57523c0531"
        },
        "item": {
          "id": "17678c90-970b-402f-86c6-05e5c38344e6",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "88b2affb-9d3b-4fb1-b0dc-7a8fd45db84e",
          "status": "Created",
          "code": 201,
          "responseTime": 3124,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "79fde69b-2ec4-475e-bb3e-aef9aa87b044",
        "cursor": {
          "ref": "60f7eaa8-74c2-4819-a98f-5af7c3c9fd61",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d7f98613-29cb-4e90-a12d-755dbd858191"
        },
        "item": {
          "id": "79fde69b-2ec4-475e-bb3e-aef9aa87b044",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "af876e89-3215-4403-b102-1f17c0369d9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d335011b-a02d-4a6e-86ee-2c98f15bb0a6",
        "cursor": {
          "ref": "0ce85f97-cbcc-471d-b9ca-99ea5bc99a45",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "e880f12e-89c8-4b45-8502-7e1e21d25814"
        },
        "item": {
          "id": "d335011b-a02d-4a6e-86ee-2c98f15bb0a6",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "bf0b2eed-92e4-4e79-9600-8b274ac215e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53cc1843-26be-4c9e-bfc8-a5544a2975be",
        "cursor": {
          "ref": "09979e3a-5ff4-45cb-878a-d44051df7947",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "bb6e7665-6a4c-4af4-837e-90fb419290f6"
        },
        "item": {
          "id": "53cc1843-26be-4c9e-bfc8-a5544a2975be",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a73f10ef-637a-4bfd-9295-830af9c2931c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6104997-8aef-4e47-a937-7418e1c9daac",
        "cursor": {
          "ref": "a7a99463-f700-47f8-ab71-d6c44c4febba",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "aba0e5d3-82aa-428c-885c-695d9c95b067"
        },
        "item": {
          "id": "c6104997-8aef-4e47-a937-7418e1c9daac",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "d3f6308d-cbc9-48f5-8dc0-9606160ba2e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cb26132-fcc8-4e76-8086-f811338ac103",
        "cursor": {
          "ref": "9bd500cb-cacf-425c-921c-a2eac95f2e89",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "18cb8e8e-ab97-4417-ae09-477969937989"
        },
        "item": {
          "id": "3cb26132-fcc8-4e76-8086-f811338ac103",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "0577557f-9646-4ee4-8f1b-2e0ce5dd0727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "880831e7-faa4-49ae-90bf-c4ff0d03ad71",
        "cursor": {
          "ref": "39ea88ef-e38d-457f-ba3d-48071c9d27b5",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "c03cd5aa-fbc2-41e6-9d23-4200ce247bf5"
        },
        "item": {
          "id": "880831e7-faa4-49ae-90bf-c4ff0d03ad71",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "44951139-7c0e-48df-95ab-b3599917ce76",
          "status": "Created",
          "code": 201,
          "responseTime": 3256,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "5984fa2a-08e8-4e72-86df-05a724a5c25d",
        "cursor": {
          "ref": "6110712a-ab0a-4648-9380-54573a6e8bbf",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f9c353d3-498d-43e1-9d6d-577dd4432bba"
        },
        "item": {
          "id": "5984fa2a-08e8-4e72-86df-05a724a5c25d",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "489050d3-63b3-4220-8b7d-c59d9b40493c",
          "status": "Created",
          "code": 201,
          "responseTime": 3451,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "1af10050-aff3-4e5c-b849-673134fda162",
        "cursor": {
          "ref": "8716edd8-4fff-4b43-95eb-c20436760a5b",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5fa23001-1f60-4ecc-8ef0-fb442bf610a9"
        },
        "item": {
          "id": "1af10050-aff3-4e5c-b849-673134fda162",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "4b6405a2-6a39-430a-b393-18a9f9406fb2",
          "status": "Created",
          "code": 201,
          "responseTime": 3313,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "e4756af3-6238-4628-9023-e8b31f99c18e",
        "cursor": {
          "ref": "bc8b4625-d635-4d4c-b65d-2c8242167080",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "403680d1-886e-4248-9c3c-016bc89aad70"
        },
        "item": {
          "id": "e4756af3-6238-4628-9023-e8b31f99c18e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c777b0e2-8bdc-4e74-953b-7247c463e591",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de44b1e-3d14-41dc-94ec-ebc99b954768",
        "cursor": {
          "ref": "e629ec48-0fd7-4fc8-927a-b9aec08ab1b8",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "3b6945d0-75f3-4ba3-90f6-9eb4ecdf5e60"
        },
        "item": {
          "id": "6de44b1e-3d14-41dc-94ec-ebc99b954768",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "8a46fe2f-efd2-4e5b-b4fd-53e92e2234d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d33fc49-e836-4ad5-9a43-58326cefc012",
        "cursor": {
          "ref": "ed1da500-753c-4687-b6cb-01e4845b8328",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "bf31c11c-6fba-49fb-a245-0db4bc340300"
        },
        "item": {
          "id": "2d33fc49-e836-4ad5-9a43-58326cefc012",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "462158f4-e7ba-4d75-8990-d27579a24e27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2af8deb8-49d7-4480-974f-f73d78db6e96",
        "cursor": {
          "ref": "4773fe57-ec85-4469-a0d2-acd2da587550",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "7e5179c9-0f7a-48d7-ac64-172d41370ee5"
        },
        "item": {
          "id": "2af8deb8-49d7-4480-974f-f73d78db6e96",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "00e05638-9747-4118-abcf-05c8980458bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "816742ed-fcfa-4aaf-8971-eb3b57bbc2a1",
        "cursor": {
          "ref": "4646f6b8-4939-4c2b-ac47-3669c6bd4603",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e033f609-2879-48d2-ab9e-200a9573411b"
        },
        "item": {
          "id": "816742ed-fcfa-4aaf-8971-eb3b57bbc2a1",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "09639d0c-18c2-405c-8add-128b479dd028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d24af0ca-b861-4aa6-a19d-1638e7921b8d",
        "cursor": {
          "ref": "98be8687-6607-49f6-8cf0-1fa3e42a2f97",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d1624bbe-8d60-41c6-8743-d991ed795690"
        },
        "item": {
          "id": "d24af0ca-b861-4aa6-a19d-1638e7921b8d",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b0cbcadf-c312-481f-bb94-05bef6dddf4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4bb4b10-37ce-408e-8ce8-cbabf7f412f1",
        "cursor": {
          "ref": "b6ba16b8-db47-424e-87ce-34be0da9dddf",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "eaed816c-8596-4e55-b36a-13410f5b9c11"
        },
        "item": {
          "id": "d4bb4b10-37ce-408e-8ce8-cbabf7f412f1",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "0b2fa681-ee09-4111-bf96-3fdf24dd5951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c02dca2c-88f8-427a-a62a-74e7cae7fd8f",
        "cursor": {
          "ref": "3aaf6e38-c60a-4a85-b316-44202da45be4",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1a13390a-d2ea-4169-81d2-52a36695b074"
        },
        "item": {
          "id": "c02dca2c-88f8-427a-a62a-74e7cae7fd8f",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "cd8331ed-e415-4ae8-bf3b-218b8f5d4f55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5966d22f-f96a-457c-b01f-b79542ee2c99",
        "cursor": {
          "ref": "162511f5-959b-41d0-93cc-b4bb71fc59eb",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "4f60a57d-2e53-46ab-9a34-440e153e5249"
        },
        "item": {
          "id": "5966d22f-f96a-457c-b01f-b79542ee2c99",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "6da12123-0238-4454-ae16-3bd53e9d4a0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed78683e-6929-4d3b-8e2b-829b64cb64f6",
        "cursor": {
          "ref": "265a7e7e-e5dd-4ede-9284-f02c4584282c",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "cc0ebaaa-12a5-4392-bbdd-5a351c5920b1"
        },
        "item": {
          "id": "ed78683e-6929-4d3b-8e2b-829b64cb64f6",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "8bfe3203-8b28-49d6-ab04-bdf8338f95a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0832e1f6-6b99-4d4a-85e0-88308418be32",
        "cursor": {
          "ref": "e527bcf9-f0a2-4023-bc82-eeaa6517e022",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "38ef9df4-b665-4e66-af6d-8b2023ec6955"
        },
        "item": {
          "id": "0832e1f6-6b99-4d4a-85e0-88308418be32",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "1aa66ee8-7b8a-41dc-9eb3-b8f6cec55d91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bd5b3ac-4c74-4dd3-a405-4cf97ed1dc1c",
        "cursor": {
          "ref": "ae5fa420-9abf-448e-82b8-069c26fa9da6",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "a2b73295-121e-40d2-bc8d-7ec93288e182"
        },
        "item": {
          "id": "4bd5b3ac-4c74-4dd3-a405-4cf97ed1dc1c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "28f8ea89-f323-4d5a-927e-7961b9d22d34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3d348a1-7196-4006-9848-0b1120492e19",
        "cursor": {
          "ref": "9e49c87f-4cc9-48c7-ae3c-9a5334510fe5",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "879471ff-487e-4f7e-b6dd-97a2473c07b7"
        },
        "item": {
          "id": "a3d348a1-7196-4006-9848-0b1120492e19",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "0dc3167d-3d65-4175-883c-ee146679cd0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b95259e8-b692-4a7c-bb95-4627f41fb7ec",
        "cursor": {
          "ref": "5f3bb587-2a5e-448e-8b42-5fb2d9cac770",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "38570c17-35af-4a72-83eb-157fe7fa210e"
        },
        "item": {
          "id": "b95259e8-b692-4a7c-bb95-4627f41fb7ec",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "bcbb3c0d-31c0-4211-90b3-726ed367ce67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e10adc98-4ff9-437b-a1b2-aca31072321a",
        "cursor": {
          "ref": "0434746d-9545-45e0-bfe6-7b9af76f191f",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "4d0b6da3-b61c-4c92-a559-709bc918724d"
        },
        "item": {
          "id": "e10adc98-4ff9-437b-a1b2-aca31072321a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e79f015e-44f8-4078-9402-f62de9be8692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a398400-ec95-4454-af41-73394441043f",
        "cursor": {
          "ref": "df67018d-01ba-405a-b59e-608e52ebbccb",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "3eaa008e-159e-4616-b08d-1bc1b8ea2533"
        },
        "item": {
          "id": "9a398400-ec95-4454-af41-73394441043f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "41d14287-4efc-43dd-a949-7a262e51c6b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 139,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f51fbb5-852e-4668-b651-ed6abb470594",
        "cursor": {
          "ref": "eaa82145-f657-437d-8bd0-da15a079a438",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "1949f9ab-75da-414f-a3d4-da1c54a5e18c"
        },
        "item": {
          "id": "4f51fbb5-852e-4668-b651-ed6abb470594",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "881956a8-3ffd-4a05-ac07-2f8d3dc1f401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba8b406a-f6cf-4135-8c61-908e8f06532a",
        "cursor": {
          "ref": "1d65ed49-fa2a-4a7d-a560-51493f83df2c",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "16247c50-da3c-400e-91a9-b9fcbe462aa2"
        },
        "item": {
          "id": "ba8b406a-f6cf-4135-8c61-908e8f06532a",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ed10b978-88bd-4c97-9516-1e1ff1f3329b",
          "status": "Created",
          "code": 201,
          "responseTime": 3058,
          "responseSize": 976
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "bf6ceaa6-76d9-4279-a45c-430c518b96ef",
        "cursor": {
          "ref": "d1f40e03-3f62-48fd-971a-ba835665d286",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "3006a3c9-847d-4d1d-b6ea-1da41017b284"
        },
        "item": {
          "id": "bf6ceaa6-76d9-4279-a45c-430c518b96ef",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "924095f2-35f6-4273-ac59-84cf1864a2cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f09629f-476b-467f-89bc-8d41cc417443",
        "cursor": {
          "ref": "d8b987f4-a721-401b-bac3-4d31e1c1aeee",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "869d9bdd-f6b3-4a2a-86d9-980ca499e89f"
        },
        "item": {
          "id": "5f09629f-476b-467f-89bc-8d41cc417443",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "bfa4010b-be14-4f00-8676-2f253bd74691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f986801-4b10-4353-acc3-5ecfc2d0b6de",
        "cursor": {
          "ref": "0df038d2-9036-4a85-a52c-0bc47b142a03",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "94850b37-e199-4cb5-b3e2-8e30984c9ec9"
        },
        "item": {
          "id": "3f986801-4b10-4353-acc3-5ecfc2d0b6de",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "3e140fd8-83d2-4f8b-a6db-b3dddd96f729",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faee17cd-7f20-4853-bfd3-201ffafc3958",
        "cursor": {
          "ref": "0017d4ed-4d9f-434b-81ae-ca4d1000b9d9",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "62d0072c-0f6a-471f-b6da-ca3020c092f9"
        },
        "item": {
          "id": "faee17cd-7f20-4853-bfd3-201ffafc3958",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "f30f69a9-42c2-4db1-be1a-3107851a8851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "febfd5ef-e276-47d3-8fd2-9665fc39ebb9",
        "cursor": {
          "ref": "5a5e6cf9-4034-4ff1-85d0-77401ce1b6d1",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "dc8189df-d176-41b7-b420-4b62621f7759"
        },
        "item": {
          "id": "febfd5ef-e276-47d3-8fd2-9665fc39ebb9",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "3bb5042f-64c2-4da3-b97d-c20f98aa6fa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eabf2bf7-ce90-45f2-bfdb-9a7d1618bf97",
        "cursor": {
          "ref": "11cc5403-39fd-4e4e-8e5b-0dc9c2a3a252",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "6f070dc9-b176-4687-b942-8936b4e4b4e5"
        },
        "item": {
          "id": "eabf2bf7-ce90-45f2-bfdb-9a7d1618bf97",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "78cb9a80-2319-4950-a485-e6c8a9abe4dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa497342-16a4-4c29-91b4-ccefdcd477ee",
        "cursor": {
          "ref": "d9bed48c-869c-4b73-b926-056a46996cc9",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "edddb709-8625-4b44-b259-9fccf69fdd85"
        },
        "item": {
          "id": "aa497342-16a4-4c29-91b4-ccefdcd477ee",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "20e780a8-afd1-4fb1-99cb-2be86961a58e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f5e8cde-2e2d-48f2-b528-14e3cd68e062",
        "cursor": {
          "ref": "718cdc18-b112-4ec7-ba39-a57e8fcedc2e",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "b77dbc1d-3235-429e-b8fc-d07c5bdb824f"
        },
        "item": {
          "id": "0f5e8cde-2e2d-48f2-b528-14e3cd68e062",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d2859053-a406-4e36-9e59-43b938b3fbdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99987d8e-81c8-44fb-9118-030a2b9b6f47",
        "cursor": {
          "ref": "b3fc3aca-4252-4a5f-a5fd-dd5ea6467e82",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "2840f446-f19d-484d-8b8b-93c47e8d0d2b"
        },
        "item": {
          "id": "99987d8e-81c8-44fb-9118-030a2b9b6f47",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "26d61908-0974-47f4-a9c1-fb5af6e03cdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86969abb-a330-48b1-b5a8-46e2524e597d",
        "cursor": {
          "ref": "fb809968-8e2d-4fe8-9561-2bad933fca6e",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6f7560fb-d417-4e75-a36d-07306c6df6d3"
        },
        "item": {
          "id": "86969abb-a330-48b1-b5a8-46e2524e597d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "3e583377-4a23-420e-8aef-bc3f88556269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b51fbccb-951a-492e-a774-4be36eb3dd1d",
        "cursor": {
          "ref": "72bce41e-874c-4794-9e42-9e2fb55760b1",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b398ae6f-737f-4e7b-9b3c-0341c6b06e1b"
        },
        "item": {
          "id": "b51fbccb-951a-492e-a774-4be36eb3dd1d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "416a30f2-cacf-4250-bfa7-6d35ac29bdfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d32d1c88-f519-4316-8f6f-e91d5a1f6ce1",
        "cursor": {
          "ref": "823409ba-cc16-4a63-a2e7-d408f9d2ae1f",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "11b4a8fe-d1a1-48a5-831b-329f0118e0db"
        },
        "item": {
          "id": "d32d1c88-f519-4316-8f6f-e91d5a1f6ce1",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "cfc43765-d709-4f1d-8745-9f22b633ba85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6575d56b-8825-4482-a3ea-193117b3b301",
        "cursor": {
          "ref": "22a5ae60-1433-439b-aedc-661d28da87d5",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "5541025f-fa0c-4d1b-b218-11c517eca261"
        },
        "item": {
          "id": "6575d56b-8825-4482-a3ea-193117b3b301",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ac986c57-7fe8-401c-9558-34fea5fff0a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e311a299-4de8-4050-a6b2-c536327bae88",
        "cursor": {
          "ref": "4d5b9d5e-efc7-4874-af8c-dd5c2017d068",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "14cb029a-69a4-4ea4-b4dd-548ba4295c7d"
        },
        "item": {
          "id": "e311a299-4de8-4050-a6b2-c536327bae88",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d1504415-4578-44fe-98dc-c5c4a2910f61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "566a81ec-a6b3-4696-b48e-a6c729ff9139",
        "cursor": {
          "ref": "97d5074f-f467-4cfa-a3d6-10bb5e69d212",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "d114f479-87df-4cc4-a6c3-a67c1b145787"
        },
        "item": {
          "id": "566a81ec-a6b3-4696-b48e-a6c729ff9139",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "6313d07f-a826-42a6-af8a-35c0f6d44474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "118193f1-5909-4af3-9da4-6bc05ffdd08d",
        "cursor": {
          "ref": "d286e6f2-8e8e-42f1-8cf5-c0dde4212bfb",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "f04781c9-1ec2-4bf1-872f-d44d75d13a1a"
        },
        "item": {
          "id": "118193f1-5909-4af3-9da4-6bc05ffdd08d",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "277bce54-b5e3-49a6-92bb-06a622927ec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6480cf36-fe5b-4986-a291-ae72a9caeb63",
        "cursor": {
          "ref": "c7d9b268-a666-45c6-89d9-90dc2ed727e9",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e692bea1-cb8a-4bdc-b5ac-2dc7f013bd07"
        },
        "item": {
          "id": "6480cf36-fe5b-4986-a291-ae72a9caeb63",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "39ab54d2-4f7e-4603-abc2-e6c1da4bf361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0abc82b7-89af-4dfd-9fce-4507693d649a",
        "cursor": {
          "ref": "64eed697-070c-4e6d-b96c-ee762cc814f8",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b337ee5d-21e9-4fc3-81ad-fc681e7aed58"
        },
        "item": {
          "id": "0abc82b7-89af-4dfd-9fce-4507693d649a",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "d788d046-57b2-4752-9d90-2d26fe2383ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ec021b0-2f91-4484-87bf-21b985868d68",
        "cursor": {
          "ref": "c3ef2347-375f-4e70-bed9-7bc1c337213e",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "011f3dc5-3f93-4983-8f20-4dda1d6ff35a"
        },
        "item": {
          "id": "9ec021b0-2f91-4484-87bf-21b985868d68",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c7388519-8312-4105-895d-7a55ae46fc7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48d1a432-6e71-4ac3-8f20-2f92fdeb49f9",
        "cursor": {
          "ref": "e96a674e-0e9a-4454-ba9e-b7e98076b248",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "db3a9bf9-482d-46d8-b005-a4dc922b8db7"
        },
        "item": {
          "id": "48d1a432-6e71-4ac3-8f20-2f92fdeb49f9",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "22c672be-128b-4f84-81bb-0ed0f31f5812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88b47928-ee4f-423c-a554-1ab081e2b7fe",
        "cursor": {
          "ref": "b2506157-001b-46cf-a50f-06b8251677ed",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "79430672-9786-46cd-9d7d-6994a2d7f7ab"
        },
        "item": {
          "id": "88b47928-ee4f-423c-a554-1ab081e2b7fe",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "d837676a-44fe-47a5-816b-69ea2205749c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03c48900-da8a-490b-9b6a-49f659115750",
        "cursor": {
          "ref": "261f4e12-d14b-417c-9520-ed17fd84ee26",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "96781388-1b67-4f17-b21c-3fdd87d56e0e"
        },
        "item": {
          "id": "03c48900-da8a-490b-9b6a-49f659115750",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "4a7d1681-229c-41cd-af3a-5215a7a6795e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a91dba3b-30c1-472b-96da-9c996730f2b9",
        "cursor": {
          "ref": "1b0eaf14-a2c6-4e96-82d1-9195b05db56d",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "460a32c6-7f17-4bea-bb1e-3c4767deab6c"
        },
        "item": {
          "id": "a91dba3b-30c1-472b-96da-9c996730f2b9",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "f21a4da2-ad0b-475a-8719-33b5a9f80e4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e10f4f96-19b2-47cd-b7f8-6841d3099b0e",
        "cursor": {
          "ref": "453bf7e7-5adb-450d-abce-8388a570ca09",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "49559cd6-88d7-4e49-915d-1c0dec6a5c96"
        },
        "item": {
          "id": "e10f4f96-19b2-47cd-b7f8-6841d3099b0e",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "c3a825a9-9119-41e5-9ee1-83d307ea5cfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3934a79b-1662-4abf-b28b-6acf9ebafd6a",
        "cursor": {
          "ref": "7a55458d-a8dc-4ab4-a9a5-bc28ea134eec",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "35b22293-a961-4220-8df1-d5984e9b60bf"
        },
        "item": {
          "id": "3934a79b-1662-4abf-b28b-6acf9ebafd6a",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c8a49fa2-5321-4583-8b09-cf795d125cc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3468111-0d1d-4e13-a068-fc0dd42eb7ce",
        "cursor": {
          "ref": "acae7fee-8dfd-43aa-ab3f-e39f8dc9d92a",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "45315e04-5bae-4d63-9990-b858d720faa5"
        },
        "item": {
          "id": "c3468111-0d1d-4e13-a068-fc0dd42eb7ce",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "f3a228f1-816f-447e-9176-cfe5ac6eeee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5e06513-9fa2-4680-8477-2b26eb0b9fe9",
        "cursor": {
          "ref": "564825bd-757e-4090-bf5c-20d3f3a8ec2b",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d432154d-59da-4030-a0fd-bf911496519c"
        },
        "item": {
          "id": "d5e06513-9fa2-4680-8477-2b26eb0b9fe9",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "68488735-34db-4c32-95f9-f11255a024c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f4d44ce-aa59-4863-bc6b-4aed381de602",
        "cursor": {
          "ref": "1a1c675f-f92f-4f88-a6cd-d73f656b4481",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "251f0865-5141-4268-bb47-c9891a966917"
        },
        "item": {
          "id": "0f4d44ce-aa59-4863-bc6b-4aed381de602",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "74f7f07a-5361-49bc-8d84-d9ff209d8a99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b983c8a-e54e-439a-80d2-329f9d8588de",
        "cursor": {
          "ref": "839e3a72-24b6-42cc-8d99-6cea2a164699",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "1e85ab17-28d8-4af4-b3ea-046457f5f2c9"
        },
        "item": {
          "id": "5b983c8a-e54e-439a-80d2-329f9d8588de",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c97a9bbb-bb2d-4dc2-a832-e244decbe142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03f8b63b-a62b-4da0-8869-4885f92b70bb",
        "cursor": {
          "ref": "20f45067-2b96-4bd2-b9b2-f8d6f4e6a0fe",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "26016a69-20fe-44ba-8b81-beb72c81351c"
        },
        "item": {
          "id": "03f8b63b-a62b-4da0-8869-4885f92b70bb",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "de22baef-a62a-4549-8481-c1f8256a7525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27f5241d-918d-48ae-8bec-036ce48398f7",
        "cursor": {
          "ref": "bda7aada-1515-49e1-857e-4371834c1909",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "9f344893-0a38-409e-8b9c-23f3dad81bd3"
        },
        "item": {
          "id": "27f5241d-918d-48ae-8bec-036ce48398f7",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "844adff6-0451-464c-91a5-8e78789dbb2b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "9f2e4ece-8638-4672-84a3-16a6519f2987",
        "cursor": {
          "ref": "886ce422-b68e-48f5-b0f0-c0318740231a",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "36491b1a-fc36-40c1-b30d-3ddb1c101748"
        },
        "item": {
          "id": "9f2e4ece-8638-4672-84a3-16a6519f2987",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "8fb05a0a-c3be-4f33-a7ee-baaffe8a65fe",
          "status": "Created",
          "code": 201,
          "responseTime": 1992,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "5e328658-0222-4a0d-b4bd-64fb5e0b0a73",
        "cursor": {
          "ref": "63379284-2864-459a-b934-6169e2e646a9",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "92ba8eb4-2466-4520-9d88-b6e2bb004719"
        },
        "item": {
          "id": "5e328658-0222-4a0d-b4bd-64fb5e0b0a73",
          "name": "credentials_issue"
        },
        "response": {
          "id": "99a4e0c2-b15f-4537-88c3-2c8be2f522f8",
          "status": "Created",
          "code": 201,
          "responseTime": 2355,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "cba5ba94-7814-4272-8e31-aaba2161cef6",
        "cursor": {
          "ref": "1db72f39-18fc-4625-aef2-6deb22828978",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "8470f775-8af5-4d56-9f31-3d6e7bf0eb23"
        },
        "item": {
          "id": "cba5ba94-7814-4272-8e31-aaba2161cef6",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "ce7d18b3-fe31-4fd1-a918-d3535ecea2e1",
          "status": "Created",
          "code": 201,
          "responseTime": 2500,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4686363b-201e-4c12-8fbc-1d03d7f30cc9",
        "cursor": {
          "ref": "d9deca89-efb0-4af7-a8d1-a9f85df2e7aa",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "d0c37335-097b-4d52-82d9-7ff7cbd7fa7b"
        },
        "item": {
          "id": "4686363b-201e-4c12-8fbc-1d03d7f30cc9",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "251a843f-ce0d-4009-8e5f-a85fbce4bc05",
          "status": "Created",
          "code": 201,
          "responseTime": 2396,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7beab435-a993-43ba-ac7d-c11d0f4f6053",
        "cursor": {
          "ref": "a751cf70-5403-44ab-9d40-0cc3bf8e1df9",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "a7e8b0c1-6f0b-4a29-badc-31c36b84b0f5"
        },
        "item": {
          "id": "7beab435-a993-43ba-ac7d-c11d0f4f6053",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b137caf5-ed5a-4ae8-9e4d-d9fca2a1995e",
          "status": "Created",
          "code": 201,
          "responseTime": 2447,
          "responseSize": 991
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "955a130d-6a15-4c77-bc00-f036bcc98c87",
        "cursor": {
          "ref": "ec9aa8c4-d2c5-4dca-93bb-5257526fe858",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "38757d35-3dc5-4818-b2c2-092b56eaaa99"
        },
        "item": {
          "id": "955a130d-6a15-4c77-bc00-f036bcc98c87",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d4ac1eef-a160-4b57-b5b9-55e8d35a7f3e",
          "status": "Created",
          "code": 201,
          "responseTime": 2465,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-03-31T00:39:44Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-03-31T00:39:44Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "93fba8bd-1a7d-4855-937b-6966e51a0410",
        "cursor": {
          "ref": "dbee18e2-e04b-4854-83a3-f6f1d4fed470",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "26e33458-cabe-484e-a65b-c0dce5927581"
        },
        "item": {
          "id": "93fba8bd-1a7d-4855-937b-6966e51a0410",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1a7577d4-7952-47dc-9c53-cb2533f50723",
          "status": "Created",
          "code": 201,
          "responseTime": 2605,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e484f442-aead-4834-a340-559d2cf14aa6",
        "cursor": {
          "ref": "121cd54c-e4e8-4914-acc0-9f6339b2d030",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "4c7364cc-9c9e-49b0-ae68-346e5580fac1"
        },
        "item": {
          "id": "e484f442-aead-4834-a340-559d2cf14aa6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b8765854-8616-4ba9-a883-b80bbefb52c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e484f442-aead-4834-a340-559d2cf14aa6",
        "cursor": {
          "ref": "121cd54c-e4e8-4914-acc0-9f6339b2d030",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "4c7364cc-9c9e-49b0-ae68-346e5580fac1"
        },
        "item": {
          "id": "e484f442-aead-4834-a340-559d2cf14aa6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b8765854-8616-4ba9-a883-b80bbefb52c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3ee9a7f-a3f6-4745-8411-fb85bc0788f6",
        "cursor": {
          "ref": "fdfe25e5-2655-4866-8b2f-85658636170d",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "164947fe-fd63-4821-a2f6-e580f68ba229"
        },
        "item": {
          "id": "f3ee9a7f-a3f6-4745-8411-fb85bc0788f6",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a03c3ac5-933d-4fe1-aca3-bead523059e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1042f8bd-4de9-4fff-9985-2086ec0fbc6b",
        "cursor": {
          "ref": "41844afa-b76e-422a-a41b-c2ea28b24dca",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "b4e4c3fe-4de3-4019-bbdd-f5cbb7ef86dd"
        },
        "item": {
          "id": "1042f8bd-4de9-4fff-9985-2086ec0fbc6b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "66c4d78b-f7d1-4a51-908f-be2991144e1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbcce6d4-74c7-4b4f-9f90-315ed57b46e2",
        "cursor": {
          "ref": "17628461-ce28-4d60-a0d7-93f8f7b65a8a",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "e4f41311-df7a-459f-860e-a51fe48a4f6c"
        },
        "item": {
          "id": "bbcce6d4-74c7-4b4f-9f90-315ed57b46e2",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "72ead46e-c023-49ea-b917-e69a9bf2fa58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57a6e92b-77f3-4472-86c2-cbfff5b20cf7",
        "cursor": {
          "ref": "b843e067-bf5f-4f05-91b8-1e8c104b792b",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "fbd77864-c205-44dd-abda-9e9c17805040"
        },
        "item": {
          "id": "57a6e92b-77f3-4472-86c2-cbfff5b20cf7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e20c7bf5-0250-4341-9f28-a22592ea0aaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e68d49c7-2de9-4c75-9b2c-f2a95a874cdc",
        "cursor": {
          "ref": "e4e14173-60c3-40e5-9bbc-0b6aa043d138",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "d93d56ad-f76c-4172-a7e6-f75c4c481b20"
        },
        "item": {
          "id": "e68d49c7-2de9-4c75-9b2c-f2a95a874cdc",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "70787db0-345a-4b0a-b21f-205803c01820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ff073ef-a2ae-40af-aa36-67e5955c5098",
        "cursor": {
          "ref": "1ec6fd75-6a77-4ec4-bd4e-27decb78bd6c",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "6818e9b3-02ad-466d-9fcc-4c0f23695b52"
        },
        "item": {
          "id": "2ff073ef-a2ae-40af-aa36-67e5955c5098",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "cc67670c-d08d-4de5-b6a6-ca65ecdee4a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "404b5bb7-3713-4f41-8d89-1fc08f11378f",
        "cursor": {
          "ref": "47547e60-403c-4823-a668-705601550f66",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f901e824-cc84-4161-87da-6c4fe0c62562"
        },
        "item": {
          "id": "404b5bb7-3713-4f41-8d89-1fc08f11378f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "1580ad27-823b-4141-b377-53611bd79ba6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7274ea4c-9d74-490e-b6d7-795126e9b5fa",
        "cursor": {
          "ref": "5b4c1d57-9c47-41cf-93a1-a4d660e9ac2c",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "166f5c87-34d3-49f7-93be-d094b274d90b"
        },
        "item": {
          "id": "7274ea4c-9d74-490e-b6d7-795126e9b5fa",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8da7badc-fb24-40c4-b6e6-08ebfe6cadf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "126e6c42-8ca8-46a9-9852-d29f9b61e16f",
        "cursor": {
          "ref": "69dee06e-585f-4621-a1b5-7975bfb93860",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "c78b1fac-bf70-4557-a1fe-b615d4fe9527"
        },
        "item": {
          "id": "126e6c42-8ca8-46a9-9852-d29f9b61e16f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f02dc878-aff3-4f8f-b84f-40eb7338ab03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d73701d-3e9b-4a6b-bb74-975b3219e84c",
        "cursor": {
          "ref": "cb62297a-b613-443c-9b66-eaca7d1974ae",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "bb9dc84d-1313-48e8-b8fa-9627338bf2d9"
        },
        "item": {
          "id": "5d73701d-3e9b-4a6b-bb74-975b3219e84c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "dc11643c-1529-4159-92eb-97c832e82fe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73a64898-2dcd-4048-934d-a4ab1d7b3c19",
        "cursor": {
          "ref": "d4b67f31-7141-4891-ac5b-2287237a724c",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "208200b8-e4f0-450e-ae3f-401fc544b220"
        },
        "item": {
          "id": "73a64898-2dcd-4048-934d-a4ab1d7b3c19",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "59f4359d-bbfa-4007-a08c-dacb4e927c6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c0f1841-c519-49d5-b301-e1d990d31634",
        "cursor": {
          "ref": "a24ace68-82a4-4f45-94a5-7f95e47a1244",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "efdbe059-d886-4e0d-9b8f-04ff414dec9b"
        },
        "item": {
          "id": "3c0f1841-c519-49d5-b301-e1d990d31634",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0824c42d-7df5-4718-828e-86cca6000265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ea7b206-52d9-4a9f-855c-b77b5949f3f2",
        "cursor": {
          "ref": "e2e9f956-cd89-4611-b765-3839ed2c5441",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "087455dc-5b8a-4dc4-9b44-2934686d1a49"
        },
        "item": {
          "id": "5ea7b206-52d9-4a9f-855c-b77b5949f3f2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7c8f7eb9-2b2d-4913-9d36-f34f4119ecc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db5be9d9-7e92-49d7-871d-80793b71cbbb",
        "cursor": {
          "ref": "d272a4ed-482c-4c7b-a5f3-42b34dd4013f",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b778801a-0ec7-4e49-8995-fb8de4b8bd60"
        },
        "item": {
          "id": "db5be9d9-7e92-49d7-871d-80793b71cbbb",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "742cc59b-6d82-41dc-80b8-feabb14dc8f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e06042f-540a-484b-a240-0a13e5d67ebe",
        "cursor": {
          "ref": "cc3c2aeb-d334-4458-b617-3dc7a6a20291",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "ab87da48-ae5e-4a1c-b894-85a2f4e0b3b7"
        },
        "item": {
          "id": "3e06042f-540a-484b-a240-0a13e5d67ebe",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "8031b14e-c720-44bc-8104-bb11f282f83e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a089a85-619c-4529-ad9d-d3e744cc77fb",
        "cursor": {
          "ref": "e4eee008-4d99-44eb-8238-a2b22995cbdb",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "a5e0b6bf-9032-425d-b834-bded76e75a72"
        },
        "item": {
          "id": "7a089a85-619c-4529-ad9d-d3e744cc77fb",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f4e0ac81-da15-46e5-9325-64eea1eae3ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2ef6bae-9428-4500-965f-1570960f9f91",
        "cursor": {
          "ref": "d49f6fc7-1d1d-4dbf-a087-fd0f48012c6b",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "829664e3-390c-4fd1-ba2e-6850e218793f"
        },
        "item": {
          "id": "a2ef6bae-9428-4500-965f-1570960f9f91",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "21d95f97-4fca-4f55-af9b-3cfa8fd64036",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f665863-ff28-4dd0-86b2-bb51730d22bc",
        "cursor": {
          "ref": "c1e1d5c9-f5f8-45ea-9ecc-cae47c536831",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "dc59df81-b017-4856-bec1-922fadd21f43"
        },
        "item": {
          "id": "8f665863-ff28-4dd0-86b2-bb51730d22bc",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "11501880-172c-4ed1-985d-4acaaed8e3ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56bb9466-c3a7-44fd-991a-4a64b2fd3457",
        "cursor": {
          "ref": "d9c85188-8005-459f-aee5-7ff4c9f42867",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "b9b62a2f-dbd8-4cb9-84fc-c46ea2ab8afb"
        },
        "item": {
          "id": "56bb9466-c3a7-44fd-991a-4a64b2fd3457",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "6400cfd6-06e3-4576-9fd0-3d9b13e736b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc9afa0-0b09-4e0d-91b8-983167bc369b",
        "cursor": {
          "ref": "6e0551d4-11af-48d2-b4fd-6cfb2202503d",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "34290fc0-1bbe-407e-909a-564d1a2bd420"
        },
        "item": {
          "id": "0cc9afa0-0b09-4e0d-91b8-983167bc369b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9dcea445-f07b-43be-843f-11a34407ad58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34f4a9e5-b547-48d8-a468-0ac4c0c540f8",
        "cursor": {
          "ref": "d5ddf84e-05e9-47bc-8003-3adc32eff778",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "639bd4e2-7364-433f-b5fd-ce70f525fbf8"
        },
        "item": {
          "id": "34f4a9e5-b547-48d8-a468-0ac4c0c540f8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c79373ec-e932-41c2-bff8-9ecc9fc0ecff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3b65bd5-fc4d-46e3-92e9-67a6f43aa11c",
        "cursor": {
          "ref": "627b9b5e-f4f0-4c9e-bd73-c5a2709c0610",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "bccf3f45-577f-4898-b0c1-fe0ea3bff802"
        },
        "item": {
          "id": "e3b65bd5-fc4d-46e3-92e9-67a6f43aa11c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "af91dfba-c1bf-4460-b693-f0c39fb80b53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eb6ce93-5ce7-485c-a6f1-c5275ad09ce3",
        "cursor": {
          "ref": "f01707c3-6f19-489a-aea6-a3675d99184b",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "104903a6-5d0f-46e5-99f2-530b2d55981e"
        },
        "item": {
          "id": "0eb6ce93-5ce7-485c-a6f1-c5275ad09ce3",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "85c63eac-5b51-4e33-ba37-13c54fde7506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8631e0f-66d5-4945-a26b-35276f53adde",
        "cursor": {
          "ref": "6cc853d7-f903-49d4-87fe-bbca9e513130",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0bb1bc02-09bf-4f07-8bdd-ed255d5bf533"
        },
        "item": {
          "id": "d8631e0f-66d5-4945-a26b-35276f53adde",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d9b9b986-5ea4-49f9-b167-656aaa0947fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7e0978b-6667-4ba9-a5a2-9e23ec615580",
        "cursor": {
          "ref": "764c8612-7337-4d0e-8a3a-e2879ae9fc17",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "759be409-04b0-4e92-ada9-7b3f056b5159"
        },
        "item": {
          "id": "f7e0978b-6667-4ba9-a5a2-9e23ec615580",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "44f8ea0e-9e74-43bc-980e-88c33d18a91b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae7912b9-0145-4168-85f3-d364d5a9d0ce",
        "cursor": {
          "ref": "e3c66580-e7d9-47bc-a0b2-02f4675b82fc",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "0bb6a9c2-1094-4565-a29b-cef9e7a10583"
        },
        "item": {
          "id": "ae7912b9-0145-4168-85f3-d364d5a9d0ce",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ea83488e-fb20-44de-9a71-c89596a1362e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "784e897b-ee43-41fc-96ae-163e8d6d7dfd",
        "cursor": {
          "ref": "3b1c9c40-5da1-46e6-90f7-68f2819c9fd6",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "30eb8869-5ec5-459a-960b-18a5616f300d"
        },
        "item": {
          "id": "784e897b-ee43-41fc-96ae-163e8d6d7dfd",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ed2b4ae8-a30e-4de1-b5f3-14be8488eb31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1893e045-ae29-43e5-b1aa-aba10e997571",
        "cursor": {
          "ref": "01adccab-7873-4b9b-b272-d18e2c15004c",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "7204216f-6a0e-4254-8b7e-0c7353fc35e1"
        },
        "item": {
          "id": "1893e045-ae29-43e5-b1aa-aba10e997571",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f898cbda-c2a9-4a3b-9778-84aea1cfe7c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e71efeb-60c3-4f85-945e-21e68e956102",
        "cursor": {
          "ref": "cec95232-ca93-440a-8f4a-c340a28686ba",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "81574bc0-6ba5-4462-8165-dd1d9ddf4803"
        },
        "item": {
          "id": "6e71efeb-60c3-4f85-945e-21e68e956102",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1faf4a8d-d9d7-4201-a92d-db2a2b26f637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f47164f-23c0-436b-bf72-12c311c66fed",
        "cursor": {
          "ref": "a30b56f8-0221-4fa7-974f-ddf2ea9a6ead",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "a8b6894a-c6f0-4b54-af9b-bf8a83ffc9f3"
        },
        "item": {
          "id": "3f47164f-23c0-436b-bf72-12c311c66fed",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7461b1d6-ee84-4fab-a4e0-d2e2e4862a33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "242cf0f4-1796-4c56-a815-0aeb279e17ca",
        "cursor": {
          "ref": "d485131a-5643-4b61-a8fa-fd6f540bf7d9",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "21aba467-b63e-41f1-9c50-e2ec16453d95"
        },
        "item": {
          "id": "242cf0f4-1796-4c56-a815-0aeb279e17ca",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "bc6cb489-d43c-47ff-bbb1-cf0a2b8f3e32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1fd35c2-d987-4b90-b578-42d381ea188b",
        "cursor": {
          "ref": "e77c4272-19a1-4117-b145-4753a8f094e6",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "02f85969-8121-4ab0-a0f0-64334c10fdd3"
        },
        "item": {
          "id": "e1fd35c2-d987-4b90-b578-42d381ea188b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "94b71bb3-ccb6-41ce-85a7-0bc04f15958f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "06d4315f-f3a7-40d0-a8f7-1f865634ea1d",
        "cursor": {
          "ref": "20e57a9a-5782-4c2d-827e-16e06e5a0262",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "d35285cb-9dd0-4c2f-bb3c-cce1509fe94e"
        },
        "item": {
          "id": "06d4315f-f3a7-40d0-a8f7-1f865634ea1d",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "087ed6fa-6f32-4a54-9a7f-6571686d03aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "6d9119e2-481f-4526-99c1-fb14bb5523f7",
        "cursor": {
          "ref": "1c4255f3-f49b-46fc-8edf-8e15ec8fdbe2",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "08d4d0c6-e990-4eaa-ab0f-e4783a16a056"
        },
        "item": {
          "id": "6d9119e2-481f-4526-99c1-fb14bb5523f7",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "09a257c3-bd69-494f-aab0-236dfb752365",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d9119e2-481f-4526-99c1-fb14bb5523f7",
        "cursor": {
          "ref": "1c4255f3-f49b-46fc-8edf-8e15ec8fdbe2",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "08d4d0c6-e990-4eaa-ab0f-e4783a16a056"
        },
        "item": {
          "id": "6d9119e2-481f-4526-99c1-fb14bb5523f7",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "09a257c3-bd69-494f-aab0-236dfb752365",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9006d4c-a831-4629-b3f2-35ca2128ac01",
        "cursor": {
          "ref": "3baf3bf8-dc49-4fae-af56-950758f175bc",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "291cb9ac-84ae-40b0-b573-b0ff54e01e3f"
        },
        "item": {
          "id": "e9006d4c-a831-4629-b3f2-35ca2128ac01",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "da057730-8a59-4547-8d55-038556412cd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa60e1bd-9a01-44c8-a6bc-c50164316536",
        "cursor": {
          "ref": "bcd06aa9-87c5-45b8-a8be-9b7f7ebb7b2f",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "4b5adec1-93ec-45a6-931e-7ad625ccbe40"
        },
        "item": {
          "id": "aa60e1bd-9a01-44c8-a6bc-c50164316536",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "d8d59c06-9c0f-45a2-bfff-e6acbef50fba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7948956-6263-4907-b757-00e13712a3ef",
        "cursor": {
          "ref": "00f74317-77f4-4491-83e3-88f725be6d02",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "161e71f7-33c7-47b7-913f-b1829d4ac009"
        },
        "item": {
          "id": "f7948956-6263-4907-b757-00e13712a3ef",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5670c41c-097f-41af-9e00-71640c1b6014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "410ebf5a-7495-4f40-b1b2-1d188a0cb0c7",
        "cursor": {
          "ref": "4468168f-484e-4388-a0b6-6d8bdaa80b08",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "32c14292-8579-40ad-8542-58a20d773f57"
        },
        "item": {
          "id": "410ebf5a-7495-4f40-b1b2-1d188a0cb0c7",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "d76e6c67-3272-4c97-ac06-03bdbe2966ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "880c6374-7b73-4bbd-a585-8dc885e58357",
        "cursor": {
          "ref": "90b18ca6-f4c5-4ad0-9523-a541c917f4b9",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "16ebe2ec-bdc8-43aa-8fae-8b49e39e0754"
        },
        "item": {
          "id": "880c6374-7b73-4bbd-a585-8dc885e58357",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "8bedb254-f502-4514-add4-63a74f357e51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c0b81b-6f42-4a0f-9246-9461af768ee4",
        "cursor": {
          "ref": "6192abaf-1a57-425b-b2f7-5c2946c41896",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "06b9dd2f-53d9-4a14-bfd9-17ad1c047f94"
        },
        "item": {
          "id": "82c0b81b-6f42-4a0f-9246-9461af768ee4",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "f9600406-73f8-42e1-b1c1-9cd4d059934b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9d39b47-f517-472a-8744-1b2a38a5b409",
        "cursor": {
          "ref": "d0d36001-0fd7-4135-af19-c938fe5785de",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "042cf9d4-4cae-4b98-9993-ad6f7c9207ad"
        },
        "item": {
          "id": "a9d39b47-f517-472a-8744-1b2a38a5b409",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "73f8e326-ba67-43dd-96fd-99929c1dd6f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57898ff1-1896-42ca-b86b-3e2f589514dc",
        "cursor": {
          "ref": "93a20442-5e83-48c8-ba38-ce7d012ec6da",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "480d8e9f-0959-4e51-88e2-75d1530e86b3"
        },
        "item": {
          "id": "57898ff1-1896-42ca-b86b-3e2f589514dc",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "89e24f88-4340-45f8-bcd9-789118c41c88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20012171-3665-43b4-83eb-a8ef8950a3fc",
        "cursor": {
          "ref": "5cf017bf-b912-4f67-aa2b-b49faee4abfb",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "a4b6fa9d-06ff-45da-8bfb-1309b1412eaf"
        },
        "item": {
          "id": "20012171-3665-43b4-83eb-a8ef8950a3fc",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "291d8f4b-6745-455f-9e89-ea12e791a0a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "629e42ef-cbed-4a7c-a8ea-ad296dd682be",
        "cursor": {
          "ref": "b106d405-e4be-441d-8964-293db8b368d2",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "fe5b90e0-361e-4922-b5f9-cdc7ad2d8202"
        },
        "item": {
          "id": "629e42ef-cbed-4a7c-a8ea-ad296dd682be",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "3c72c42d-e461-435b-bc8c-6ef3a65d5c21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56ada673-cc7b-44c7-b2a0-da97c5877352",
        "cursor": {
          "ref": "70f1f3c0-9e9d-4e0a-8afc-d1b78c93ffc3",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b0a6b23b-8b33-4ffa-8963-94334cb39878"
        },
        "item": {
          "id": "56ada673-cc7b-44c7-b2a0-da97c5877352",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "0624029e-8124-49d8-a4f5-db2430b657b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00ad602f-cd99-45cc-b07f-3eeb827479dc",
        "cursor": {
          "ref": "eeb7ae39-022d-4df5-b7b0-41b98d104334",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "34388185-2781-4cd9-a97b-49b12e6cde65"
        },
        "item": {
          "id": "00ad602f-cd99-45cc-b07f-3eeb827479dc",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d5fcb5c4-787e-4326-86a7-a95f8de95eeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ec7493b-5a7c-405e-869a-9d0e4a636827",
        "cursor": {
          "ref": "53138cb2-a752-43f6-ba5a-90f20942fe01",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "ab0b27d0-8f7b-4f13-82c0-673c5f95d902"
        },
        "item": {
          "id": "4ec7493b-5a7c-405e-869a-9d0e4a636827",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "dcfbd5ce-1bdb-45c7-bf14-0e4b533ddd74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7303dc77-cc3c-45a7-8227-126073552aa2",
        "cursor": {
          "ref": "154780de-a5b9-47b1-9309-13a710207797",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "8fd51a7f-f0b2-48fc-a727-40309b3b2da2"
        },
        "item": {
          "id": "7303dc77-cc3c-45a7-8227-126073552aa2",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c1f798b3-e9af-4c04-b2a5-4bcbeab7f387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "298c10ea-0f20-4ca8-9b2e-8f301a668646",
        "cursor": {
          "ref": "5244dd9c-be08-45cb-97a7-c118b198e43c",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "671db072-9bd4-46ce-8d3b-d4a8356d42c3"
        },
        "item": {
          "id": "298c10ea-0f20-4ca8-9b2e-8f301a668646",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2259fcfb-45e2-42ed-a7ae-8b09ba43f306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d37e1d64-3094-43d0-9624-5fcc74472694",
        "cursor": {
          "ref": "b53a509d-57b9-4290-ab2b-8578e6144c9d",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "56ad97ac-508c-4111-9774-21753f69d414"
        },
        "item": {
          "id": "d37e1d64-3094-43d0-9624-5fcc74472694",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "2e5e5385-fff5-487b-b79f-b4fecd261477",
          "status": "OK",
          "code": 200,
          "responseTime": 194,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "efcb9702-1127-4099-a5f4-9db24cca8731",
        "cursor": {
          "ref": "ced41be4-6989-44a0-878d-7a12109c78b7",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "12acac0e-d5fe-479f-9f11-4fd71e7733bc"
        },
        "item": {
          "id": "efcb9702-1127-4099-a5f4-9db24cca8731",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "127f91f6-e78f-48d9-8fef-1b6544d28f3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0256d6eb-eba6-492d-af32-4a8365859ced",
        "cursor": {
          "ref": "bc3b7f89-8c4a-4fab-82f2-ca28f21f175a",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "8b219401-ce40-4330-adbe-34ac9231ee13"
        },
        "item": {
          "id": "0256d6eb-eba6-492d-af32-4a8365859ced",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "a1428988-d99a-4f64-9fc3-1fea793bf341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4715e417-0a14-4a33-b1ce-85d046f62b3f",
        "cursor": {
          "ref": "14b3ff34-c4f5-4775-8143-68067ec4bada",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "c4f56d2a-2076-42e1-853b-9b3556130cc4"
        },
        "item": {
          "id": "4715e417-0a14-4a33-b1ce-85d046f62b3f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "98aabb39-3c02-4f0b-bd9f-6ab67711de51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07e2889b-c330-4697-938d-5dc35b4896d5",
        "cursor": {
          "ref": "ee771318-6e05-4263-a53f-faf2c47566ea",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "bb2362f3-2e1b-4b6c-a27f-79423d7282c1"
        },
        "item": {
          "id": "07e2889b-c330-4697-938d-5dc35b4896d5",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "5b0353a2-beac-4b23-8b52-cde3485cce68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c05a8007-3672-412a-b572-2761bdb66167",
        "cursor": {
          "ref": "d39f24e5-2aa6-4aad-b0a0-df31308621c0",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0c7fbd3f-c8e0-4cb8-92b6-7835a7ea13b4"
        },
        "item": {
          "id": "c05a8007-3672-412a-b572-2761bdb66167",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "83ba76a5-19c5-4268-ad1b-904c70442a85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abb91d4a-8571-4349-a616-3c5ec2c2babb",
        "cursor": {
          "ref": "824b9201-d315-4dda-a03f-8d64ae221148",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "2ce43692-13f5-4336-89da-355a828c11cb"
        },
        "item": {
          "id": "abb91d4a-8571-4349-a616-3c5ec2c2babb",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "21f2c833-ed55-46e7-9e91-689b00a25d7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54792197-d98c-467a-84f4-991b4d91da71",
        "cursor": {
          "ref": "dcbb8884-1a41-4ec0-b7c8-c7588b50e222",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d8f3575c-cc73-4771-8816-f971e923b204"
        },
        "item": {
          "id": "54792197-d98c-467a-84f4-991b4d91da71",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "60ac79e6-698f-4ef8-8748-48f7d894bb6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a5d71c0-5d51-4f48-8b8e-e46fe0395ebf",
        "cursor": {
          "ref": "25944ff5-4116-4f04-ab91-b37e7e4164ed",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "53b1c34b-a640-4ce6-8d57-3c6957258d40"
        },
        "item": {
          "id": "5a5d71c0-5d51-4f48-8b8e-e46fe0395ebf",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "3d2d90c2-a4cc-49f2-a43c-1bba157a1b7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d252152-d706-4f2a-907e-984eb3c33b1f",
        "cursor": {
          "ref": "6eb2fd0a-7727-484d-9151-6e6c9a4e22f2",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "06ce4c9a-2c9d-4b52-9afb-e1314ee03f82"
        },
        "item": {
          "id": "3d252152-d706-4f2a-907e-984eb3c33b1f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "093466c8-e3ab-45e1-9ad6-3b54688df22c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9290d9e6-5ae7-49f9-a7d4-805a3810ba24",
        "cursor": {
          "ref": "090b55d9-1692-4464-9257-9ea1f9d06b73",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "34e5d273-7495-4a41-8523-bbc8d8545196"
        },
        "item": {
          "id": "9290d9e6-5ae7-49f9-a7d4-805a3810ba24",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "fe56516b-81ac-4a78-834f-1e9647d4fcbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75db1412-f83f-4442-8ef4-957a661cf29d",
        "cursor": {
          "ref": "d4e831b2-f0f5-4f9b-af73-50ae78d1b836",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "ea5fe176-8810-4df6-b880-3f89d3369622"
        },
        "item": {
          "id": "75db1412-f83f-4442-8ef4-957a661cf29d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "22f41195-dd16-44a1-a7ef-22f7f7d74d9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99b927e9-0931-4c50-827f-bc9e846ecf79",
        "cursor": {
          "ref": "35088aa8-9e3a-44bd-8c1a-aa1e35e9b25e",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "e8d506e0-a702-496f-a0ae-af09f5e3e951"
        },
        "item": {
          "id": "99b927e9-0931-4c50-827f-bc9e846ecf79",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "6730eff6-ff9b-4426-8887-44288623ed04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4757d347-bb3f-4454-9b16-5b6dc23d8b4c",
        "cursor": {
          "ref": "ff440195-f00f-4352-b92f-ae83020ad880",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "33790cc9-d09c-4ddd-87af-5f2a635bda62"
        },
        "item": {
          "id": "4757d347-bb3f-4454-9b16-5b6dc23d8b4c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "0282edb6-a97d-4333-bedc-fc13264ccf55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a1c54b3-c3f4-4235-9c7d-7ab90ba49a8b",
        "cursor": {
          "ref": "884ad101-e18a-45ff-83f0-b497ce79d495",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "b088805c-3903-4a05-bd6c-4e8f00725336"
        },
        "item": {
          "id": "9a1c54b3-c3f4-4235-9c7d-7ab90ba49a8b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "0fa9bddd-2cd7-493e-8441-b1ad7b66ff31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6d286e5-303a-4b4b-b8e4-5f6ad01e2da9",
        "cursor": {
          "ref": "c8970d34-b70c-47bd-8447-05961c5e73d2",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a279b3f3-7197-483d-9939-04a4cb11b370"
        },
        "item": {
          "id": "c6d286e5-303a-4b4b-b8e4-5f6ad01e2da9",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6740dc1c-c72b-4a9f-926c-004bdebd915c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bcffe48-3b75-4662-99a2-d004af6bcf0b",
        "cursor": {
          "ref": "743ae653-18f2-407d-80a8-3c5abf540f66",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "d0cde8a0-ba20-4380-81f2-1d7726420a76"
        },
        "item": {
          "id": "7bcffe48-3b75-4662-99a2-d004af6bcf0b",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "85aff361-4283-4f92-b854-dbc92e63a0b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87f69fe8-05f3-4788-aaf2-a00fc8811f93",
        "cursor": {
          "ref": "728f14eb-6592-4e55-b544-8180e22102f7",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "628060ff-69f1-4e33-8e11-542974d18664"
        },
        "item": {
          "id": "87f69fe8-05f3-4788-aaf2-a00fc8811f93",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "2f8922b9-628c-40ab-a2d7-519b8abffc0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "285e584d-d841-4846-8f2a-a63dd8fbe632",
        "cursor": {
          "ref": "484456eb-6086-4a1c-9047-d32a863cde3b",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "08f20c65-e99b-461a-a453-5ca32759f0f4"
        },
        "item": {
          "id": "285e584d-d841-4846-8f2a-a63dd8fbe632",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a054b7e7-231a-4b56-8833-35913ffa6c24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1b79508-a2d9-4136-b0ce-439e36d3e886",
        "cursor": {
          "ref": "ce19c258-f719-4c46-8977-91df712cdf3a",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "b83fca94-0b84-456d-8651-eacbd7f83992"
        },
        "item": {
          "id": "f1b79508-a2d9-4136-b0ce-439e36d3e886",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c8532405-df47-4b14-971e-b68ed65149da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44940b59-4870-4912-84af-82f7d313c636",
        "cursor": {
          "ref": "100a581a-8a41-434d-b4bb-377837c0a6d3",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "0fbe4571-c7bd-4d0d-97d4-7f2e67c93bc5"
        },
        "item": {
          "id": "44940b59-4870-4912-84af-82f7d313c636",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "072459d2-0492-48ad-bb8f-a3b95edd6d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23ea3325-33f8-486f-96ef-f46e1bfe5b68",
        "cursor": {
          "ref": "ed15c189-edb1-4b89-9f74-6b79f76994ab",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "200f492b-86ae-4119-a512-983a13ed63e3"
        },
        "item": {
          "id": "23ea3325-33f8-486f-96ef-f46e1bfe5b68",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "e9723136-b1c4-436e-bd9a-eb52d9ebf1a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e43a4e-1212-4a68-97cb-9c0ed06737c5",
        "cursor": {
          "ref": "03c1a045-f040-45a5-8359-b3a2b69687c7",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "18c9160f-e99a-411d-b7b0-d9be9c4fb897"
        },
        "item": {
          "id": "78e43a4e-1212-4a68-97cb-9c0ed06737c5",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "cb762e66-96c1-4281-9905-dcf315620080",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0724a8ba-38f0-43f3-8894-41ef8cca17ac",
        "cursor": {
          "ref": "0a735618-a804-4641-9f80-c3087e0a2b98",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "45df7161-382f-41c1-a57d-85be12f0fd09"
        },
        "item": {
          "id": "0724a8ba-38f0-43f3-8894-41ef8cca17ac",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "8e9a3026-a5b6-4c8d-8396-f3d7f2d46681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1be4a39-e38f-47e9-b080-e1efbe4c2c82",
        "cursor": {
          "ref": "cf19fa31-0245-4362-bcfa-cf074de90c31",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "99c81473-6aff-42fc-9076-85700c32b77a"
        },
        "item": {
          "id": "c1be4a39-e38f-47e9-b080-e1efbe4c2c82",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "c5b2857a-3253-438c-a3bd-fcce7385c686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee9744ec-794e-47f0-9a4b-05a002bf3fc5",
        "cursor": {
          "ref": "79f94662-1a6c-4744-9cb0-5b4306193b3f",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c8e75448-a558-47dc-98a6-df5859ec1924"
        },
        "item": {
          "id": "ee9744ec-794e-47f0-9a4b-05a002bf3fc5",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "7f6b0491-77cf-4d2a-9477-e7c9991367c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4195d30-8a9f-4b87-8b86-bf0b8a9c4410",
        "cursor": {
          "ref": "c5f9b9d4-37ec-4a11-9a7b-a34134d38760",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "77374321-a101-450f-a323-486ab364f7aa"
        },
        "item": {
          "id": "e4195d30-8a9f-4b87-8b86-bf0b8a9c4410",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "9ae0b19e-60e3-4b24-a90a-f9f4de020934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce492680-9144-4b5c-bbfc-590419edf0bf",
        "cursor": {
          "ref": "70e2deb2-3a46-4074-b90a-4bf028f32a1c",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "74d74126-e948-4228-9733-aa52744e11f0"
        },
        "item": {
          "id": "ce492680-9144-4b5c-bbfc-590419edf0bf",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "7523159f-0e14-4fa6-a944-1a42509184c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbafda8d-5dae-40a0-b634-5734e8db4cca",
        "cursor": {
          "ref": "987a7361-6a1c-40aa-980a-cb6d2a41e4f2",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "04364f92-7217-48df-9fa8-2b91dd83799f"
        },
        "item": {
          "id": "bbafda8d-5dae-40a0-b634-5734e8db4cca",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "f5ad68f4-79b0-4c63-a2c9-11d992d15240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb88800-14de-42c5-953e-6e38959267cd",
        "cursor": {
          "ref": "09d1ff0e-2320-4df6-992d-9f5b447d7bd8",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "537fdf9a-dd8f-4805-8b34-3a6c82a56103"
        },
        "item": {
          "id": "beb88800-14de-42c5-953e-6e38959267cd",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "88e1fd00-475d-4f5a-a642-f1db6ee07e53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99cbd8b2-cd3b-4530-8b76-6bfcd3b9ce6b",
        "cursor": {
          "ref": "7203331a-2f9a-4e03-a202-9b4eb5da4706",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "3a9db83e-a8aa-428a-a824-3e714d54d03a"
        },
        "item": {
          "id": "99cbd8b2-cd3b-4530-8b76-6bfcd3b9ce6b",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e229dc85-f3a5-411b-810f-c0a94248c438",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3789b9da-6ea8-4911-8bd5-274aa80ac2e3",
        "cursor": {
          "ref": "13b035cb-b5de-4987-a2b4-facec287b5fb",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "985e085e-dd0b-4002-8195-de4c41e645a9"
        },
        "item": {
          "id": "3789b9da-6ea8-4911-8bd5-274aa80ac2e3",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "87361fe5-8ef2-40c2-9bb2-59e8613b11d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e08ce35-a53d-47dd-aeba-eac9c7bf1d85",
        "cursor": {
          "ref": "91b8458e-feb5-44d1-a9e6-2134567c7613",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "b95f4bbf-2d6b-4f1c-bf97-22005c9c2b60"
        },
        "item": {
          "id": "1e08ce35-a53d-47dd-aeba-eac9c7bf1d85",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "49e63c54-4f34-448c-84ae-02beec928e7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0f8e07e-e941-4929-898d-d659f1e4e31f",
        "cursor": {
          "ref": "05e2d74d-b231-4038-b820-ef02cf3bb4fd",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "4c47cafc-2ff1-457a-a020-5ab1eb206f4a"
        },
        "item": {
          "id": "d0f8e07e-e941-4929-898d-d659f1e4e31f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "3cdc508f-e265-42cd-bce7-180a501186f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aac3668-3ae1-4c70-81cb-fef157ecff16",
        "cursor": {
          "ref": "cf18959f-bc99-4ed4-af62-bbf32b4ed545",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "629ce024-0a5d-4237-8972-e41d7899d546"
        },
        "item": {
          "id": "4aac3668-3ae1-4c70-81cb-fef157ecff16",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "a2b692b2-06f6-48bf-9f61-0f167d9e5d08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "261e7df2-6ab9-4444-a2e7-819b3f94a3f6",
        "cursor": {
          "ref": "a2077c51-b913-4f7f-8e2e-eb02e6ba6462",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2c37190b-d641-4206-b9e3-db8594f5e113"
        },
        "item": {
          "id": "261e7df2-6ab9-4444-a2e7-819b3f94a3f6",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b0086e0b-34c7-40bd-bfb8-4b2699baa205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7642749d-4a44-499a-9763-8fba2e3e9c07",
        "cursor": {
          "ref": "ce138fff-a3fc-48fb-b27d-4c1c139c00e2",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "bd8a388c-b158-433a-bd79-8d1bf41e00cc"
        },
        "item": {
          "id": "7642749d-4a44-499a-9763-8fba2e3e9c07",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "11e4fadd-25ff-4b37-ac14-9c8281751769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "920268c1-5818-40d6-af16-edf77ea5dd3c",
        "cursor": {
          "ref": "e849eb87-0301-4200-a166-d68e4997bb77",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a400e03b-3c84-4ae5-9471-d05c734dc558"
        },
        "item": {
          "id": "920268c1-5818-40d6-af16-edf77ea5dd3c",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "be8934e8-22d4-4a5f-8679-64ac977878d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "077ddf86-771c-42c0-bf3e-a2e4bd9f7dad",
        "cursor": {
          "ref": "40737ef2-8558-4cb8-8a20-24f552917424",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "8a0e7575-3770-4c2f-85f5-8d4182b163d7"
        },
        "item": {
          "id": "077ddf86-771c-42c0-bf3e-a2e4bd9f7dad",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "42afe0a1-df3b-484d-a79c-7a87f9fd5e2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5175430-56af-4abb-82a7-542c399d065e",
        "cursor": {
          "ref": "4b83a009-11a6-41fb-bb62-f7cd99a852bf",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "88e92132-661f-4d3e-95e5-1b6dbe72289c"
        },
        "item": {
          "id": "d5175430-56af-4abb-82a7-542c399d065e",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "9db55a86-2d70-4fb0-a90d-60c664667217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f15cf1c5-e813-4f8f-9e2e-fb024222df93",
        "cursor": {
          "ref": "504f1a2e-0d8b-4cae-a66f-aee14b58106e",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "81424615-d0c3-4df7-8093-bac0b58efdd3"
        },
        "item": {
          "id": "f15cf1c5-e813-4f8f-9e2e-fb024222df93",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d06b59a6-ff49-41a8-a8b2-eac52afff6ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe2e48b-4b76-4f9f-b269-7d0e2150b884",
        "cursor": {
          "ref": "87a131fe-ae61-4402-8acb-a3cb95e15ef1",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "76d21fb2-3e40-4801-9cba-cf7d12e985c5"
        },
        "item": {
          "id": "bfe2e48b-4b76-4f9f-b269-7d0e2150b884",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "46f7a5bb-3b87-48df-bdf7-979ee01c1a6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06980319-788d-47d0-8a77-f8560de2b9ee",
        "cursor": {
          "ref": "e70ecda4-61d1-480f-a805-00a14a422628",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "cb06634e-051f-4d46-a366-a5662fb07431"
        },
        "item": {
          "id": "06980319-788d-47d0-8a77-f8560de2b9ee",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f7aa76a9-1d22-4b91-a44c-32748d660de5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a781353b-e9b6-4cab-94fe-7fc6759899d2",
        "cursor": {
          "ref": "83aafa80-1dcd-4a00-9989-ff761563202d",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "3bc7fe9b-f831-434b-83eb-f230f917bfaf"
        },
        "item": {
          "id": "a781353b-e9b6-4cab-94fe-7fc6759899d2",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "01f9031a-44b0-4e9e-a131-502ce9116206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d897d752-8f16-48b9-b2ea-f685f4156541",
        "cursor": {
          "ref": "ccc13fd5-f396-4da2-b604-e43b3dcbb852",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "ce057f0d-63b1-4b57-876d-8e1817bc1fc1"
        },
        "item": {
          "id": "d897d752-8f16-48b9-b2ea-f685f4156541",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "9f552534-d1e5-4b61-970f-7c0c72166d8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2717782b-ea4f-450c-92e4-bd26ed6079f7",
        "cursor": {
          "ref": "3d163ff3-b8f4-47d3-80db-33eec2a6b0fc",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "dfb37c43-3e2a-44f9-ab01-3affe685b2d4"
        },
        "item": {
          "id": "2717782b-ea4f-450c-92e4-bd26ed6079f7",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "9bc4d34f-0c6d-46fe-8506-8267c838891e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "704739b6-cdfb-486f-9336-2a842bbf702b",
        "cursor": {
          "ref": "18fe1ff4-04e1-40dd-8a3c-6d41cfd28baa",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "66905cd5-0f80-4b1f-9c35-6971ba7b8885"
        },
        "item": {
          "id": "704739b6-cdfb-486f-9336-2a842bbf702b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "022a3644-ce7e-429b-99c3-5c271cbe8ec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e44dd5-bbff-409d-ac60-8ac89d140103",
        "cursor": {
          "ref": "4752181e-2ed1-4599-9d24-43e16d43469f",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "aad5812e-f215-404e-b27e-a44eda00e88f"
        },
        "item": {
          "id": "71e44dd5-bbff-409d-ac60-8ac89d140103",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "a227450a-bdcb-4ef5-9f22-f5c864e4060d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13f442ed-fdfc-4838-95dd-ab5c611fafd7",
        "cursor": {
          "ref": "b1b6deb4-afa9-4339-ab5d-686350eadf24",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "74e1727a-ef97-4678-919d-3785c0279949"
        },
        "item": {
          "id": "13f442ed-fdfc-4838-95dd-ab5c611fafd7",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "07a57678-4daa-4502-bc65-21f8560350d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f13f6aa6-3542-4c64-93f2-207b6f7612cc",
        "cursor": {
          "ref": "6e2ab3b6-441e-4d85-b0ef-8db67bae5692",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ce0d850c-19c1-4f44-81bb-5487737d7f08"
        },
        "item": {
          "id": "f13f6aa6-3542-4c64-93f2-207b6f7612cc",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "4427eaaf-c7e1-4ca2-85fa-0e41359608c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da092f20-b6db-4b56-a773-318d12af22af",
        "cursor": {
          "ref": "2c76e1d6-21ce-4e5b-8cbb-ab2fee8871a1",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "eb5d7d30-1cb2-4964-81ab-197b08be636b"
        },
        "item": {
          "id": "da092f20-b6db-4b56-a773-318d12af22af",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "93ef2a43-1286-459c-9b5e-19a3bf3e541e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df80fe87-f12a-4e23-8b72-feb5899924b9",
        "cursor": {
          "ref": "5554c773-51a5-442d-8e26-5b814d5a9bf1",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "7e391303-fb21-43e7-a34b-da030f80eb10"
        },
        "item": {
          "id": "df80fe87-f12a-4e23-8b72-feb5899924b9",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "1da49c69-06f4-4329-ac80-06274c86e60e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02fc76fa-9f7e-47ab-8526-7fce36ed232f",
        "cursor": {
          "ref": "4b3e494d-2cf7-4201-a4b4-44d538b3fd5c",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "635e0b9c-2891-4bf8-8bd1-a16dd8a6e71c"
        },
        "item": {
          "id": "02fc76fa-9f7e-47ab-8526-7fce36ed232f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "9e97c57a-a69a-42a5-adbb-0a366d27886d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a236bacb-eb79-4f44-8fb9-b094a7204b25",
        "cursor": {
          "ref": "f3d0e8f7-d44c-4368-a59d-8695c4f76d67",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "480038e3-3efb-4163-ab8e-247fc749c40e"
        },
        "item": {
          "id": "a236bacb-eb79-4f44-8fb9-b094a7204b25",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "05adfaa9-a746-4354-ae04-d7120dfaaa69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "816f498f-8d1c-4205-8734-b1eb8f8d0417",
        "cursor": {
          "ref": "637c02e4-3a1d-4bbe-9946-b278347b037a",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b1299897-be8a-4d18-9319-680b20dba968"
        },
        "item": {
          "id": "816f498f-8d1c-4205-8734-b1eb8f8d0417",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "632e47b7-4258-4fe8-8e88-fde839a94d91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86b246ac-378c-487b-8417-01494d955629",
        "cursor": {
          "ref": "9dc787b9-2f3e-44fd-bdc8-14f4e898e52b",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "28b6aaa1-a382-4d6f-b1e7-6e9bf3001500"
        },
        "item": {
          "id": "86b246ac-378c-487b-8417-01494d955629",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "1e165631-8697-4712-b0a3-b3351004d95b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35133676-db0e-4039-95ac-1b4a7a163882",
        "cursor": {
          "ref": "67a29cb8-fa25-46e7-84a5-60e98eba0bc6",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "8715f931-a5f1-4088-aa9e-864d45ea7c5f"
        },
        "item": {
          "id": "35133676-db0e-4039-95ac-1b4a7a163882",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "235752c2-1608-4156-b883-13e6f5a3c9a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf9cd732-840f-4698-a43a-74cf68dbe4f4",
        "cursor": {
          "ref": "0d18c725-c3d3-4d41-9fa1-2ee221be55b3",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "b8c3982d-e6b7-499a-a5b6-72de28361852"
        },
        "item": {
          "id": "bf9cd732-840f-4698-a43a-74cf68dbe4f4",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c317d548-9a13-463b-b07e-b08f6de95671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db03e0a6-fea5-48bb-929e-ea94978c9fa6",
        "cursor": {
          "ref": "e2f3c54d-03ac-43d9-b7db-dd745f6631c8",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "60df96ae-a3e8-40cb-937b-f4ea6ed6965a"
        },
        "item": {
          "id": "db03e0a6-fea5-48bb-929e-ea94978c9fa6",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "079d3786-cd86-4116-81e8-c40198eac645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3337e0ed-e29f-40cd-a375-6e46940138c4",
        "cursor": {
          "ref": "f25a1c60-8ea7-4574-becc-949fff1271e7",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b7e032ac-80b2-4352-993d-fd9ee73ece2c"
        },
        "item": {
          "id": "3337e0ed-e29f-40cd-a375-6e46940138c4",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "ce96ba2b-fb0e-4b39-b732-0c6b1179089f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4acc962-24c2-46b9-b7fa-bfb570d74ab8",
        "cursor": {
          "ref": "04209793-aa2b-489b-8599-6b693d21319c",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "c754853f-a137-46f8-bb00-239adfe90800"
        },
        "item": {
          "id": "d4acc962-24c2-46b9-b7fa-bfb570d74ab8",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "8bd0ce89-345c-435d-a27f-6fefe0038fdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40d2822c-fc95-4563-90f6-5342ebbb3f7f",
        "cursor": {
          "ref": "a2b1fce6-1946-4d5e-b358-22588565b6da",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d0647cf4-d918-4392-90cb-bc9946e61739"
        },
        "item": {
          "id": "40d2822c-fc95-4563-90f6-5342ebbb3f7f",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "84851110-e718-4c79-88cd-6d422409ed7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cc63c04-13a6-44a5-b61d-3b90aa1efb2d",
        "cursor": {
          "ref": "4606c507-de6f-4ab7-ab9e-7278d146f68d",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6c757f59-1015-4ac4-8206-8a8544d3cd2e"
        },
        "item": {
          "id": "8cc63c04-13a6-44a5-b61d-3b90aa1efb2d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f7a41a0b-2406-431e-afd0-6c02e68d0ebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "863fa8a1-5057-4c84-902d-7c042a10a88a",
        "cursor": {
          "ref": "c198eae6-5b8f-4fc0-8f29-2ba0cad4c5c3",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "422db390-b78c-40d6-8481-535f4cdc1b7a"
        },
        "item": {
          "id": "863fa8a1-5057-4c84-902d-7c042a10a88a",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "84c4c904-3845-420d-8031-f39625c7f5f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "989d02df-55d7-4492-b565-e606d73981c8",
        "cursor": {
          "ref": "c58e36aa-8fba-4e96-9602-a1e5252690ae",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "81c0bf5f-2077-4215-93dd-b2305b3f4488"
        },
        "item": {
          "id": "989d02df-55d7-4492-b565-e606d73981c8",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "dd988fe2-945d-4f62-a7a6-bd21aad1a310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8502deaa-68c0-4f03-837b-bb38ce5bc5eb",
        "cursor": {
          "ref": "c1e7d009-c2ed-40ef-a3e8-f3324c6ad3ae",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "4cd49092-0995-4c66-856c-306e1bf8cfb3"
        },
        "item": {
          "id": "8502deaa-68c0-4f03-837b-bb38ce5bc5eb",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e688663f-54b1-4424-9735-20c3017c1012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a08be5-dcc5-44a5-8787-bedca23430ea",
        "cursor": {
          "ref": "be64f595-b896-494a-9f72-a6e10913bd07",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "58edfe14-15e6-45a7-a723-e9d097b53d29"
        },
        "item": {
          "id": "b2a08be5-dcc5-44a5-8787-bedca23430ea",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9ad7b9b4-c1c8-4ac2-8edd-9f7d25a2c2a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6dad522-6fda-4144-8559-956fe444a679",
        "cursor": {
          "ref": "46f8ea92-8309-47e5-bce0-18c113ea5c91",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "31e22061-37cb-4213-b2ce-8b7e9a49bcd4"
        },
        "item": {
          "id": "a6dad522-6fda-4144-8559-956fe444a679",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e735fe81-16f2-49a7-83b6-816396f5ecc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64dd9b3c-b0bd-465f-84b1-63c645b5c8e7",
        "cursor": {
          "ref": "65e92e26-dec6-4463-b96a-1dfd11cb843f",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ba937780-aa30-423b-b96e-37de4896a37c"
        },
        "item": {
          "id": "64dd9b3c-b0bd-465f-84b1-63c645b5c8e7",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "7aba9ca4-a376-4b2e-b9ff-e039108e64f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b681ccb2-cea7-46ce-8862-70324d550399",
        "cursor": {
          "ref": "ab3dd104-41cf-4b00-9b68-6d602a667362",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "0551b6bc-81f5-49e8-b3da-08e1a94470f6"
        },
        "item": {
          "id": "b681ccb2-cea7-46ce-8862-70324d550399",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b75dddcf-6ba4-40b1-8102-3dafb9d6e74d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12142f31-15c8-426e-8214-935cf23370ae",
        "cursor": {
          "ref": "5d41c93f-8813-4975-a3c2-4959554d1c68",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "6ec5e65e-df9c-43af-abcd-01d0b2480e11"
        },
        "item": {
          "id": "12142f31-15c8-426e-8214-935cf23370ae",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "1cbeeace-c6d9-4229-9eaf-ade0917a6962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e85001f-e494-490e-8299-d76d03dc066f",
        "cursor": {
          "ref": "b6dfca19-d634-4a1f-90b0-3813e4217aa5",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "b6c79573-bb7d-4f05-a91b-431b97d132c7"
        },
        "item": {
          "id": "1e85001f-e494-490e-8299-d76d03dc066f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "01d9bddd-5779-46b1-97e5-ed6e8f66fc38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad94c948-5e95-4142-9b21-f842d2b62a93",
        "cursor": {
          "ref": "0f6e145f-0972-47d4-9a65-46780edc04ca",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "9ad87606-695b-420e-be92-e5c6051865e7"
        },
        "item": {
          "id": "ad94c948-5e95-4142-9b21-f842d2b62a93",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "eb08d4a3-5314-40ea-842e-1591bd86d848",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06b7217e-988c-45d7-a2bd-b4897e3f31e0",
        "cursor": {
          "ref": "7a4c040f-a546-4415-b633-b2ca7240e475",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "823ab116-72ff-40ac-ae4c-c4ce9ed6cce3"
        },
        "item": {
          "id": "06b7217e-988c-45d7-a2bd-b4897e3f31e0",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "bae59a90-641b-4ed4-a98f-1edfd4ed8893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb8c5ddb-8de2-440a-94f9-9f9392046ba7",
        "cursor": {
          "ref": "f9f728f3-452a-43a9-8aa6-7bc1b38245a3",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "9a6746f7-34ca-432f-9d05-a2555ac37cc1"
        },
        "item": {
          "id": "cb8c5ddb-8de2-440a-94f9-9f9392046ba7",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "502bc419-d18a-4ba9-8598-bf42599bcce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a67c9bf-dd55-4b12-8065-a70d71cc63ed",
        "cursor": {
          "ref": "bb6cc222-f017-45c0-978a-dc4ae58c2934",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "aba3e14c-3003-4c86-b3fe-62eafe2f8b96"
        },
        "item": {
          "id": "4a67c9bf-dd55-4b12-8065-a70d71cc63ed",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "658e38e2-7e89-47c6-ab5a-490795a16780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8470f322-507b-4535-875d-9a42adbf7f18",
        "cursor": {
          "ref": "6cd827b1-b800-4b35-9909-c55890b2718b",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "2a51a1f5-1910-4641-bda7-aa1379d18c95"
        },
        "item": {
          "id": "8470f322-507b-4535-875d-9a42adbf7f18",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "142715b4-cc2f-4104-99ef-0f1f72a52384",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c03f208d-b8e2-4b33-ae66-b089e33a6c5d",
        "cursor": {
          "ref": "bb26f562-a87b-4da5-b959-69d6267fa65a",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "2f56f894-2513-49d6-83b3-67a2493c7029"
        },
        "item": {
          "id": "c03f208d-b8e2-4b33-ae66-b089e33a6c5d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "f6ee480f-5eb3-4159-9234-112f27725552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a64656fe-bf83-40cc-a647-abc650bb0110",
        "cursor": {
          "ref": "3a279b49-9335-4c9d-bae8-2785fbfe76fc",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "4d284ef0-fd3a-41fe-8d4e-17bd9d407c84"
        },
        "item": {
          "id": "a64656fe-bf83-40cc-a647-abc650bb0110",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "c10728f6-2388-43c8-887e-ab6366885841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bc8f554-1e9d-4408-abc2-aabd5b5139f2",
        "cursor": {
          "ref": "4b07e265-8924-44bb-8365-c4ba7e5facce",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "baf47695-c76a-43dc-8301-02ab1ba4f6e6"
        },
        "item": {
          "id": "7bc8f554-1e9d-4408-abc2-aabd5b5139f2",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "07450779-c924-4240-b5d9-23145d1888cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e4d32ca-4fc1-44fd-9edc-78847ef4bf6d",
        "cursor": {
          "ref": "2940f1f3-4d2c-4b4b-89f8-7870e7b9ce0c",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "aaa9dab0-2144-4ab4-9222-5248269cdc9e"
        },
        "item": {
          "id": "8e4d32ca-4fc1-44fd-9edc-78847ef4bf6d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "dd34b5e4-c027-49f8-8a16-708e9cca4141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a27b209-fb2d-4321-9c1d-960ff5015408",
        "cursor": {
          "ref": "9fd0dab4-4a37-4307-90f6-7f63f98f075b",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "59e8ab35-a24f-4b38-8ace-20a78b378d90"
        },
        "item": {
          "id": "7a27b209-fb2d-4321-9c1d-960ff5015408",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b318a453-b4c1-46ee-b44f-a30a30b4d6bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "cfdc06f2-492b-4ba6-9792-5c2a0071992b",
        "cursor": {
          "ref": "cf29798d-3276-46d3-8323-f2d38b12ecd3",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "fdb3b6ef-24d4-42e7-900d-474e56f80906"
        },
        "item": {
          "id": "cfdc06f2-492b-4ba6-9792-5c2a0071992b",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "19de8153-c331-4263-af51-447711f3cc61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "e455a9ad-c1ee-4552-98a0-1552e791d243",
        "cursor": {
          "ref": "7315b0b8-fa75-4695-8c72-3bde40155808",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "9220aab2-3117-43b2-98ab-b6c5c4fa9c81"
        },
        "item": {
          "id": "e455a9ad-c1ee-4552-98a0-1552e791d243",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "17edfdb6-10fa-4670-af2f-8c38c3d40271",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9f9d441-00d2-47ab-8937-9a0ca00871b7",
        "cursor": {
          "ref": "40571dcb-7963-4bd5-8fa2-7308f2664cdf",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "6575d2be-88d8-46d6-b082-3cb11482649b"
        },
        "item": {
          "id": "c9f9d441-00d2-47ab-8937-9a0ca00871b7",
          "name": "credentials_verify"
        },
        "response": {
          "id": "31ef8dbd-5b7f-4836-ab3e-53592193ae93",
          "status": "OK",
          "code": 200,
          "responseTime": 3539,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "75360cfb-5905-49f1-b5e5-0ab05eff1a9d",
        "cursor": {
          "ref": "be1dc348-ca2e-4308-9d5e-f282bbc1de43",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "3d45e35b-d3e5-4787-92bf-47d22088abdb"
        },
        "item": {
          "id": "75360cfb-5905-49f1-b5e5-0ab05eff1a9d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "3db3c0c1-dcc0-4611-ac02-2f4c48ef3704",
          "status": "OK",
          "code": 200,
          "responseTime": 3328,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c9044b5-c158-49ee-ae32-7ee1afbd476a",
        "cursor": {
          "ref": "a4eae88e-a8e4-4d60-b93d-742a36f13a9d",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "91c181f5-be5b-48ee-b885-2ade1a59b152"
        },
        "item": {
          "id": "7c9044b5-c158-49ee-ae32-7ee1afbd476a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c02daf25-cafe-4de8-8c57-3993211d306c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "7c9044b5-c158-49ee-ae32-7ee1afbd476a",
        "cursor": {
          "ref": "a4eae88e-a8e4-4d60-b93d-742a36f13a9d",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "91c181f5-be5b-48ee-b885-2ade1a59b152"
        },
        "item": {
          "id": "7c9044b5-c158-49ee-ae32-7ee1afbd476a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c02daf25-cafe-4de8-8c57-3993211d306c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "7c9044b5-c158-49ee-ae32-7ee1afbd476a",
        "cursor": {
          "ref": "a4eae88e-a8e4-4d60-b93d-742a36f13a9d",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "91c181f5-be5b-48ee-b885-2ade1a59b152"
        },
        "item": {
          "id": "7c9044b5-c158-49ee-ae32-7ee1afbd476a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c02daf25-cafe-4de8-8c57-3993211d306c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "21217adf-a1fb-4ec1-b18e-c0c179ddda3c",
        "cursor": {
          "ref": "9b808a6c-60d8-40fc-b60d-c32701e43eb5",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "80c29c9c-746a-4275-aa85-07666b9ef2d6"
        },
        "item": {
          "id": "21217adf-a1fb-4ec1-b18e-c0c179ddda3c",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "fada5008-5bcc-48a3-bb96-059e214311e6",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "2e3624ff-2e9d-42af-b9f6-38e3b7a8607b",
        "cursor": {
          "ref": "6e4a4d58-12da-4a38-9714-875a41b38cdf",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d23ce107-320a-440a-b9d8-eff246d181ed"
        },
        "item": {
          "id": "2e3624ff-2e9d-42af-b9f6-38e3b7a8607b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b5925443-5fda-44da-bec8-b69c5f0d72a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "2e3624ff-2e9d-42af-b9f6-38e3b7a8607b",
        "cursor": {
          "ref": "6e4a4d58-12da-4a38-9714-875a41b38cdf",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d23ce107-320a-440a-b9d8-eff246d181ed"
        },
        "item": {
          "id": "2e3624ff-2e9d-42af-b9f6-38e3b7a8607b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b5925443-5fda-44da-bec8-b69c5f0d72a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "a8f7a2df-196e-4995-a83a-5100f840e2b5",
        "cursor": {
          "ref": "aed87eaa-d98e-45dd-8282-05c99922ef28",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "60c815d8-3ec9-4c1e-b451-32d91d154f6b"
        },
        "item": {
          "id": "a8f7a2df-196e-4995-a83a-5100f840e2b5",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "10a3e64b-f127-47f1-b8e0-c20290511c92",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 76,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "841a8f2b-441f-4038-8301-86dcfbf8528d",
        "cursor": {
          "ref": "3f830ec7-399d-4f12-abe9-88e3e1075e43",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3579a0bd-53e5-4e43-a8e5-ac39a38511a7"
        },
        "item": {
          "id": "841a8f2b-441f-4038-8301-86dcfbf8528d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4c1f9ca5-0686-4389-af92-b4b38ca45984",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "841a8f2b-441f-4038-8301-86dcfbf8528d",
        "cursor": {
          "ref": "3f830ec7-399d-4f12-abe9-88e3e1075e43",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3579a0bd-53e5-4e43-a8e5-ac39a38511a7"
        },
        "item": {
          "id": "841a8f2b-441f-4038-8301-86dcfbf8528d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4c1f9ca5-0686-4389-af92-b4b38ca45984",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "ac2db2a1-82ff-4f40-9c7e-92bd3e569013",
        "cursor": {
          "ref": "2abcdf2b-8acf-4114-b3b8-099decd2692a",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "e751d8fa-853e-41b3-9d9d-c3b03b54512e"
        },
        "item": {
          "id": "ac2db2a1-82ff-4f40-9c7e-92bd3e569013",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "97f21a06-7012-4332-a010-ed0763a2b69b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 44,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}