{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "f705076b-7d4f-4b75-a49a-784754677315",
        "name": "Clear Cache",
        "item": [
          {
            "id": "11d0c1e0-48ef-4edd-a60a-67fe73eb911f",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f9bc840c-77f2-413c-87c6-8f17d1f700f5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "497671b3-5c00-4d94-9e05-67051dd73fd5"
                }
              }
            ]
          },
          {
            "id": "e7295625-f145-4b2a-aacd-771130db8fb0",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8c977cfc-55d1-4160-bf86-03e4ab92dc35",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "97bb5168-4ae8-48db-b690-73007dbe11a6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c5d61c98-621b-43b1-a95d-2e181d7a6112",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "5a1dc1ca-6e6e-4784-bac5-7e79261a021d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0327edaa-296f-4a04-bae0-41449223cf5b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ccc78ae9-d11b-43a0-9c22-874e7f76f8a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5ae0b3a3-8c7f-4128-adba-e25e2af510b1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "060c9707-d29d-413a-828d-c163b5104839",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9393aaba-fb9a-4bf9-b85c-2f490b2a65d9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "38d8191d-c25e-43f6-8764-a2613042a4c6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "722de2d1-2c84-44bd-b5ba-2cbab03390d7"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f5705333-5b94-40bf-a4b4-6b725ff74811",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "47bb9421-b397-4f0f-807e-3fd3676c3bc4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "52216418-7732-4575-a885-ea1170d47dc6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8cb15678-7e8d-4188-980f-f094d7d5684b"
            }
          }
        ]
      },
      {
        "id": "8d35ccf6-6116-476c-938b-1ed295d57903",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "a45050dd-6f9a-4b85-8dad-10e1708ed565",
            "name": "Negative Testing",
            "item": [
              {
                "id": "572af0bd-8a1b-48f3-9424-d9424408e6bc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e096b259-b8cd-4a88-acc7-09cb2f17b4b4",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c657b3-bb03-4478-bd3c-7a3df7a5f57e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0b350f32-3d8c-4b03-b0a6-3e6870a63fd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84556c8a-a839-470c-bcb0-fab0f6ed17e4",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "369e75d3-b561-431e-973c-4989d8aa069d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6303e440-26ec-463e-9161-f3aaff5f7e9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48e175aa-7bc4-4398-b874-c6f84c1a078b",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f086756f-968e-4e5f-9a9c-1ecca680f544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f8a850f3-834e-421f-9af1-eee8f8e4feea"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2bfad8fe-c5c2-4ebe-b1ef-499f0b7357d5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "994f9a48-4abc-4dfe-81fe-1f2c84f9f6e4",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7addb6c6-523f-4e31-885d-19d9b17dda2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c6affbbd-d435-4da2-9099-b2b2cf1919fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcabcbc6-921c-4501-b232-d7958ec17272",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60680572-93d1-49c1-b281-ba823285b6e0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "32462748-b72a-4830-a047-dd8d5a79d1d0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "06bcc136-7430-4129-b1a0-0a35b345465e",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "291c40c8-8942-4633-88d5-dd5dd7274ede",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "96691f67-e561-44a8-b581-11d84ea3f9bf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "893c5553-eb09-4c26-b1f4-1372e9237fa1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "64e9e617-f897-41ad-a21c-4d81bde32fbf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f9081e49-e852-4109-b50b-aebf18b16fb9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "10a8935a-fb2e-48df-9f4e-b4f3eaf6577e"
            }
          }
        ]
      },
      {
        "id": "6f06a629-990a-4121-9f18-e1edfa5be4be",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "6c60269e-f6dd-4237-ad39-e71f30c32bdd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "103c3b7d-4803-4a1b-a78f-b20ec018bd56",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "c819ca26-5ba3-49cd-a26f-e19afa8649db",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "033bd2d4-651a-4651-be6f-fc74add0483a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c78b1f2-d92b-4ec1-8377-10737f8c2c1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a575efac-1653-424b-88c6-bbe29ca78a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "52201876-c6a0-46fc-bfd4-2040f9cdf5b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a5c0705-2bc2-433b-bf35-5dc21c24a0ae",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae058773-4c35-4c2b-86c6-3e0d90944d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9884a94-1130-4874-ae99-cdfe0879a28b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c96039ac-ac7b-45de-b62b-d1799b06f206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b5bb98e-15ab-4800-8d89-2fa56d80260f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "342624f8-bf86-426e-94e1-8d90a6b271e2",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc0752b7-ca78-4be7-a728-dbf19698803f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe537224-8613-48da-a6b3-09af67d9b69f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "884fe16e-90f0-45bc-8c15-9404c3e427db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e99a76e-88ea-4c36-be86-92a3e5c883c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d537a8a7-df6b-4043-aa0b-22c30f8e1e8b",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9417ed7f-8e5c-4ce3-aec9-d3ecad722d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c022854b-de72-4e1b-8032-18ea290fdad5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "810ebc35-aa9a-4080-8785-16541dae91a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "25f3f5d7-41fd-4442-a3eb-7035071b676c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d009efcb-fa9b-4f63-ad3e-38b64c96dc72",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a0a66fa-5187-4a21-a456-be0987407829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66dcb887-b9ec-4044-8306-8592b1074caf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a56fe71-03dd-47c8-9609-76cbcf3078e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe44c971-f0ea-4093-8d11-8174d0006c28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03adc09c-9789-4b10-8ea0-99c367c8b482",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60105c1b-921c-4ed8-ad9c-a32fa070ac75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f15fd128-cbbb-43c8-bfbd-b3c30fae10f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3e0906-1f4e-4c98-b876-f97b97426ce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c24c555a-bdd8-45b8-a198-2adf4e0c2fa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2bc5703-4884-4de6-9e6d-60125dc4f51f",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5add0ef-4683-4dc1-9939-7a6f69a91a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e47b0e62-13bb-4d39-8506-117c63be5a69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95ac1c85-7bd7-478a-8da0-d0ac7aac0d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8b97284a-eb16-431c-b3aa-4d992078fc1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b85e3674-e5e1-4a55-9368-be3066030cd0",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81cb7d57-e794-424e-b149-e21558d5728b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "088aac31-7f6e-47ee-bb22-f62fb4762372"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce42c19a-3ab5-4301-8b8c-cf78e203d378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "32f29ace-60f2-402c-8866-c56069a048c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b74c77-8b05-4fbc-bd7d-db7a8165e79f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca9d83b-d006-4099-965e-a73512930a6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2923271-1a9b-4bc8-a05e-da9200a52bc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fcb86e2-1f50-4153-aec5-5d755faea1b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8030919b-93b5-4054-93ee-a34be274012c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ece443c-18aa-4d4e-b1ac-0b4aa8a47848",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c091cbfc-9033-4d50-926c-6d404e29a819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03ff60c0-789a-4a97-b7c9-9e4719950a8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6460de1-9c0a-47be-a7c5-4d28274b7b25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e29c74c0-00c3-4b69-af8c-1475ed62c921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b4aa152-31c5-4e35-8647-29e070366902",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e73bce-0ea5-4a5c-971a-5270baaa75d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1442cd7e-246f-4956-adb6-6b1c899c1dfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77dfb11f-cf1c-4d49-bb0c-b77479f674ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b9bce120-0b4e-4011-b0b2-11f9b86141af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2725fe2-ea67-4d6a-9b53-a792587f4bef",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7aa2315-937a-4a20-8cb8-76c404b504a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb643c2d-3cb1-409f-881f-87a46891b7f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b48b4050-815c-4d8c-a5e3-5243ccd88d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5670341e-f09e-4e76-827e-a17eaa32f09a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ab681c4-247d-4e41-8931-e5adffe6eaf9",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "735c6089-2cb5-40ca-81e7-43f9e9fdae95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aba98b1-d5f4-487a-a6a9-4829e7a252a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa1d4317-e2a4-40dd-96d8-58c14debde11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bea0d0ca-3c11-4ecb-948b-b795deb03600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1073a1a-d9cb-4b80-9aec-8fd2790748e4",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5f64297-b715-48ef-ad06-7789ea63a910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cdde056-4db7-4ef2-bdc7-7a9385158b17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc7e7708-728b-405a-a6eb-b96515e330d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4a5ae7c-8b0b-4452-8962-fdb9842444d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93f32798-11de-4b21-9aa4-5b8078d8a499",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2c49674-b3e1-4c53-a302-b682cd49f6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a73fedbe-0b03-43ca-a8cc-d700f0746994"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "effb846a-92c1-42fb-8964-ab4702a06e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "732ee574-3e74-4e2e-982b-fd534a0fe93a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7e182c5-3fbb-4622-b446-1bee3d42d5bf",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22b4ee98-43f1-42f4-a8ec-9332290b6c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bebed48-d97f-45cb-89a3-a3c6693aa023"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa888c22-3a71-4ca6-b448-169b3861638d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b6bf092d-b663-4dfc-b666-00514deb70fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4257f09-a2af-494d-958a-d65182dc866b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9add902-84e0-4ffc-9717-7e115d11f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22d237b7-6f43-4193-a2ae-e781113cec71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdfeb0a8-5efa-4ce1-9eb8-412d61d542ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c1bb71e-654d-4484-bccf-b024f9667215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae08690c-8414-4b3e-bd6d-e18bdf1a9870",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "256d3764-3d05-4fb6-8399-3e1af3a2cc33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63e4ecb0-1bc1-4c47-9209-625c3f2040b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea37f9c2-67d1-4a70-a93c-bfc275f135cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a403807a-00bf-40f1-b266-853bf56ccf22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44e5cf63-8f81-46a5-b90c-1fc0bf31d686",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "980d7a73-bf9b-4cd3-aecf-46ab000e7223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49dadf6c-c11d-4e9f-97c2-35e795a47223"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3db5193f-b592-4f98-a9ab-95d58839e876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4275223-7d66-4a71-90df-a95495eeb2bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19ee6a92-b8a4-4ce4-a710-e33bd9a5a823",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e3de109-ee3c-43b3-a3e2-e1c4c5f24968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2774f64-e940-4ecb-a9f5-708727e93ddc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7b3db87-9f5c-421d-96d9-28ef41c2d9f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4adb3472-4898-4f82-b031-548167526685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84b4e99a-2e94-4d95-b4da-5419ae49faff",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "973f88e1-d7dc-4ed0-be16-9acb6415ffca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f40e8c4-669c-49db-a230-2115947ecfff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96f3f9e9-1453-425f-9842-4009c2e47ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8268475-975d-41a6-a557-719094d2d0bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5724304c-10fb-4f90-98f2-96466dcd77a3",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a29b636b-d976-4d96-bef9-888abd4c4976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "433d03c3-145f-4e18-ad76-9be4424b28bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a91d84a-1e1d-40b5-8746-821ab7baa724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "72f370b6-dbcd-45fd-ab69-bbd67d9b141e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69dfaee6-b307-4637-99a6-7920b2a565d5",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcac9c86-4e35-402b-b39d-067c673b0985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "740e9d0e-5fd4-481d-9747-ef87d2195560"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbbb6a1b-bd8a-4104-b0f2-0a41d5b4331f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "43b84341-0018-4907-99e4-35be1a87fb34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e3c27b9-9ad5-4fab-ad62-c7c6ec3f68b1",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fce8a26-de4c-4b0e-ab3e-b513d1298663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74a378af-63ba-404b-ad75-22e10da609ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c9a8be5-c40a-4e70-ad08-bda1c5f7d6fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc4907fd-8a24-46e1-82a0-cd7658f40f91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bbcbe16-d065-4b9e-886f-c89739e3384f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2509e7b6-6da8-4e8f-852d-e43fa0e6f276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "773589f1-b992-4fa6-b5ac-1f148acbb20f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aa2fa88-da75-408f-ab12-c0906e741e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffa854a3-115d-4639-878d-3c6f1c071a3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9587d46-0b03-4a9a-9dab-b48c53f71daa",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "087e8e4a-5d4d-4f9f-88fb-ead3ab38692c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67324155-2bf7-4171-aef9-91b6b0b91cea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cad5ec86-c1f7-41c6-a654-cb4470eb0d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b816f32-395a-4114-a458-cb560a07349b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdcc7f7b-fad3-4c18-97ea-37da2d31c7f9",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5ed14a7-3058-4a05-842a-c9ba61394c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9dee3e2-ae10-43ac-9c28-1957f53b4a00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a00ce8e-b143-4a49-a7df-2ba5adc46f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bba205f9-971c-46aa-ad8a-3ebf34e94f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fca72fba-002d-40a9-9bdf-5a34a2f19c26",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08b4f91c-745f-481d-8253-6956c9cff0cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "351aaefe-4481-4505-9238-94402096589a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a2f373e-6f56-4aed-ae38-60292d28a156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fa39a34-f3fb-4b8d-bf1b-6b4770b140e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d23d54-11dd-45e3-9a77-b7df20b377d1",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecf41524-67ba-457b-b15e-7008581b4d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ec92483-50ee-47ef-a888-0a70c309150a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29115143-e0a6-41c6-8f71-e344938ccea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "25c62c2e-cf10-4ce2-ae07-276323a5e61c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a766053-10fd-4928-8505-4fdeb46e6d67",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "146a65a1-b40d-476e-8fd2-ab8649138b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45f94a13-ac24-4e61-a0a1-42990419bd2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72691daa-ce58-4a61-9d38-6bebea57062f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "96598531-d065-48e6-be33-732169f3af8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "056f334e-db5e-439c-b968-75beb1c48b4c",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1744a801-bdae-4ef8-bf19-f35ac3d7137d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77fbff0f-95c6-4e55-936c-db30435d9c53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a6c49ab-a18f-4f6b-868f-e0bff5dc9c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "89a335b5-c8f5-415f-8f06-3f5f3d5ea745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "583ee60b-e962-47b0-b920-3769abb9cce0",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "675b4856-8d22-4a12-bd44-fdae453fd9c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f2e389e-c0d8-4648-a8ba-27f1519397af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22ac4786-a2ff-4f3b-a443-026d291ac322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b3d8f8f-5f35-4420-ba83-31d96972cc27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbaa68a4-fe45-451e-a9c6-ab464d2fb817",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31223405-b036-4b77-b988-7a2698dc5414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d3c3cb7-2e83-429e-aeb1-9d43a7091f6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7582f9eb-2e2a-49c1-9bd2-e01948ac2b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3716b15-72a2-43d0-b699-e7cbefef15e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6879a91-493c-410d-924e-6381da12d853",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ad8b3e4-08f4-4fbf-a084-a7d269683722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a1cc4ee-04a7-4032-9061-c51276cc72a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e353c7fd-3fba-4be9-9819-37acb79c8820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "465f3597-4054-4103-b7a6-7fdcfee24808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f138627e-eb30-499c-93a0-2f9281559c3a",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b693cd9-d5ff-46dc-ab08-1e9418e81a2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de3e20c8-2c82-48d4-927e-a9c28e9e8d5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66e1b7cc-8d2f-4a25-b3e5-29a4deef044b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "838787f9-ba87-4bce-9799-a912ec77c71b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "540f1838-de83-4b23-b388-95b6f79e8c7c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bc03339-edc3-4e7a-afec-9f8de2722aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "785e3bb2-b28e-4b72-b1a6-1d5354d675ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27424b7c-fe9f-49ae-9325-082d8dad65f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1c45c78e-7bcd-4e20-b2ae-d22f2b77acda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb644b8-d8f1-40e4-b87b-1dd017b47541",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72fb00a9-bc5e-4173-98f9-fe4b13331666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69ef3752-f228-4f35-8b42-df13ee957da5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd21125-59d0-452e-b15e-f43ac7cd75fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2606c563-70d0-4adc-8908-e4295a19646b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29b9f33d-28b0-4d2c-acad-9255ed36edbd",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e08e16be-778f-456c-b2de-d815a3ba9edd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69530644-802f-46c4-b562-0cfeb24b0d4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bef4c27-263b-457d-8bc6-d31b6bfe12af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8a430f2-6844-4dab-8d30-cbe61fd8d5cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a7712f2-4cf5-4f8a-9185-da3843c035f5",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "111c65ec-3f64-4283-b37d-35ecd6bf0031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccf36541-acd4-4e5c-a243-06fef34b0f58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9944d59-a0f2-469d-8f53-706703473ae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5d8820e-c541-4260-8383-4e557e01b5b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c809949e-792d-4e77-a831-8fa458df1e62",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d2d88b1-7c05-484a-9fd3-6558f11c0ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0b10b8a-1435-4c75-abab-51b51bf6be18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a9ed916-4541-435e-bbfb-38f2f4931871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0db07bd-64af-4813-88a7-e886ef5453ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc8999ea-e2f6-49c1-81d3-9560da885739",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55d7625c-972c-4ee4-ba7a-892a86656570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7188268-cb2e-4df4-8d58-78c76c609602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "213ce5bd-7233-46da-b8b9-add64778bea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5cfb6d1d-3da0-40be-b3c3-6615c2db58d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34795739-9381-4b4b-be4c-6846e348dde3",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab912fe-bc40-49a0-a113-cd730deefd8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4cf1756-e70a-49ba-a06a-d8c8cc1fe44e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d3c4e3-7159-45e5-8cec-8b59de259037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "ea6c3052-b99e-48e7-8676-85dd4ecc2b1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b04a1f03-f596-4f2f-bdda-233dc4daf23f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a111fd0-9560-4e7c-9bba-8350d0482209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96645ba1-eda8-488e-a216-76ed3b8ac1d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ef332eb-4e61-41ad-b62c-48dee7b8801a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "107e6c47-bb43-49b1-81a9-c90ac136cd8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8573b7ed-7aec-444f-8ecf-aa2774d2037a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df0b381a-0446-435d-8cda-456486d15169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8700f3a4-200c-41a8-a8f2-7ac6adcc7b6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5da7963d-4736-4ca6-95e6-8827b61fcb57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8a0c6d3-104b-4213-9546-4b8e22e76f03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def1a28f-84f2-4b42-a35b-cf767e43cb21",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7a1a819-1875-4cd5-ac64-b00e3677bf77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e231717-80c8-4485-8439-53c2a894a911"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ced625-b4e2-44a0-ac62-0bff1a5330db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f76082d1-dc3c-41e1-9238-bfc608fc9e6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed87e94-2e09-471a-b100-b86995fd3969",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "934a922e-b1aa-43d3-ba92-16f0be28581e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2941c09c-4153-4ff7-a3c7-9db15c9c0a72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bb06276-7b70-475a-92d9-244b1d80f68d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "10838214-230e-45e1-9385-1d09a77a5584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff9fd128-6bbf-4fea-9fa9-df226806b0c1",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b2fa761-55c0-4cf2-976b-e80f8b1d432b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bc437a3-601c-4635-a201-d55befb7668a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76b6fe2e-f7b9-4f62-9503-ddefe3fc0ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3edaf08-790d-4c87-80ee-01482aabaad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7713aac8-8da8-4a63-829a-5e7b7da6c2b8",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5583041-be66-44e8-8e3b-09686ead735d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0778ed6e-ca69-4619-a9b9-e4b8c0ffcb94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82a41196-4b8c-4459-bdcf-aa8e21720905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dcf4085b-4433-4620-9808-716a2374044f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2451674a-a42b-45ed-8dae-ec576c9c0769",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2edf001b-00e8-435e-80d0-775cf84bf13e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d20001d6-0544-4b6f-b572-bab4b1c7089d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b19c26-d314-477c-acd5-50414d7d7ea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a002862e-4ac4-4748-9ee1-90f73f85b642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f845b4e2-d276-4ff7-9690-558f97151632",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7241b9f8-96a1-4eea-b733-14c39de0637d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15106738-e1e2-449a-9ea6-202614969801"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d134a57f-acdf-435a-9e0e-431e44f79eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dd3f539c-abfc-46a1-b7c1-0fc0391f257b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "987388ee-95ce-4c10-8e2b-09471193e43e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feef4317-9210-4f75-9bc9-447efc94d51a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eee0853-d0de-4a35-ae44-341855cd50bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c290784-d4ea-4109-ae07-59b1c046d1ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "38511155-2590-4ab4-a6fd-18b4e94d8288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85bb2ebd-b107-456e-bd8b-bb8348782882",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c95b505e-072d-4080-888d-64c94342421d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56be7718-197f-4177-9f2c-037805a54061"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22904478-cdcc-4e5b-b66f-8ffc98244f18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5cc5f44-5dc2-4c8b-ae9a-aaca7a08f894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d580bb50-c442-49c4-b14b-254ba87bad27",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3795d9c0-1ad9-4f66-83ef-dae78874c56d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "544f88e2-bdf9-4bed-9077-8a955d3b6136"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c169394-6c65-4eed-ad41-08913538bf25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "159c2eb7-f9e9-4d18-b29b-1ebb2f53fd7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b5d61f5-ac29-4ac5-be5e-83dd2a64d116",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c99fb7e0-c477-438f-aa40-173aa5a9dd93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ea23b7a-2546-4685-ab1f-8d004da84b8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe74de18-f85c-4da2-88be-898573ce99f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8d33922-e48a-4ed7-946d-af3a8a00e68f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "827340ac-dd6c-4fa4-8221-8c640cf56d50",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc33ab5-f9c7-491e-a3ee-3d5e4862da63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ff20b50-27c8-479a-9c93-9d5e9ea8a3f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cdc5f54-cace-4dee-8975-c16f07e4c414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "de4d6ebc-9c06-4720-ba16-2dd845b72501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5bb48b0-0223-42a9-90b0-d0361833f38d",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c701ed8-14a8-4cee-8a82-545fb0e26553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb76ce08-9f66-43d4-a4ff-bb8cfbfe37e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0001af39-3d79-4faa-871a-dc598a4c3fea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5695e3a4-a102-4095-a95c-6d2952d54802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6094a2b-daff-4319-8bf1-7c7ef0c17276",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "701f32d5-7efb-41e6-9926-2576905d2bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "088b71b8-4d58-4c50-a4e5-a04db75248ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6e67f84-187b-4a78-987e-fc94827eeb37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab7c7150-c8bd-4a27-9a8c-d68a187e1e26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "726348cf-e798-4fa2-bce8-1a232c68988f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "447f1317-6ae1-4c9d-b762-e815581e0c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c435247-6977-4fa6-9234-d9025348c904"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1db3fd18-24b6-4c74-aa8b-d6886277f502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "87ff2ddf-0098-4726-b5e1-8bc7f3c13045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4141260-8dd7-4318-8955-590e9c240d8e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3d3cf82-181b-4574-b0a3-8f9b4bd57bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8170c74e-b28b-464e-bb77-3238c0fca311"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dcab0aa-4bc0-424b-8416-30fe0caa3ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ce7548d-04a8-4571-aad1-20ed1ea953fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a3d979-4a0a-4bf8-85e4-92d0a4b216eb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1da92bd-6820-45d8-ba65-1a789e626941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49bd7e50-2aad-43d0-af01-0b16232f827d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e3c148-dadc-49f3-9a41-6a89b72ac1ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d53b37f8-afb1-4f97-bd30-6933d2fd0778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74d4aecd-6f01-4897-834d-b956a41f3579",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f5b57fd-5339-4932-adb5-e4f29df22d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6861990-9108-4dc7-81cb-0a48245e5894"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a953ca4-bb28-48db-86e0-100fb3ac4332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff31943e-f29b-44f1-ae3e-932dfa1aa831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad8ead58-b473-4be8-8de9-cc8ecf71ebe3",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b73a350e-bbba-450c-8c8c-7a6bbbf51a97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cff9c969-c95c-41d6-b42e-5cdcb5688cd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41b562bc-2ae4-46f4-ae02-58d1e40f8fda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fc20473-06e5-4984-bfb9-d26d0f6cd146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e015166-3788-4bd3-aeca-ac5feac292a8",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "083cb6d8-a553-454b-bbef-205f09b7462d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4d0c5ea-43d9-4124-a094-cd3a234dc324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc106a1f-6cb2-4ed6-bb4f-fbb94c9d75b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5303bafc-af28-4c79-b94e-9edc031e8154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06762f58-db90-4615-89e3-6e29353057fe",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ebfc53b-33bc-474e-a812-704899dcbfe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "122ab8b0-e1f7-4d86-8b76-87ea5d9da661"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "661497e2-c871-426e-838e-1d1477ea539c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c56511f-557f-4e65-a64e-7f2365d0e1da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2461f82-d690-4b9c-b700-e12a1da6f105",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7508bf3-1d9c-4794-8419-9126d836c346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17274370-dbb9-44bc-a427-5410d05b8f39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d1ac39d-2539-4a07-8b19-b100e8d02480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a41fa48f-9a9d-46dc-94a8-9d024f03c888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4888c7ae-3296-419d-9012-aed27ecd5cc9",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "938f34be-6e6a-4297-82bf-af0331f58629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91e82a44-05fc-45ef-b358-08843c27a2cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe392e8e-71c1-40f3-9542-4005dfd73b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4595a1f3-8628-4bba-97a4-4f5c1f917a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "562701e2-564d-4dd3-a609-3649868012a2",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d8c18a2-948f-4695-8348-1be9d6b07b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7f583e8-cd3d-4fc8-801b-81ae05fcaf5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c84eac5-a167-40b5-a56b-7b73236897ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5eb559bb-3129-4764-ae7f-8b66ebf50010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ee52bcf-d0d7-4387-ab24-8326691ce9a4",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc71043-cbb9-48cf-a0f3-5403a6bdd289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb6f7794-1d31-46e8-9d46-a90451282269"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0100a03e-b0ad-4414-b0c7-fb2c4c3ad009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c2fa8a5-250b-4d3c-99c3-fb48d6176ee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bfb4688-bd58-4ebc-9314-195be697f0ab",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82c6404a-8295-4fb1-9ad2-6c25668fd7cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bb2110a-bebe-43c4-97cc-e4c86319ea96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb0d6311-7473-4957-ab39-9e85f02f3502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f805cf6-09b3-4dae-8665-165c7f9b6b88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9a75366-d392-4493-919e-59d4aa6dae26",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "247c129e-a121-49d9-9c75-b52084cbab80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "321a2a73-fb2a-42ca-8e41-598fce72a39f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd95fcd9-fcc8-4c81-9a87-37a1f559c031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "330df952-db03-45d0-a90d-731afcf2a3a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ccf123d-1252-4791-b034-b73239bea67e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27f4cd00-fa2e-4792-8c14-f2324f179560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8104e32f-8138-4ea1-8eb0-f05995313bf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b59d5a70-3e63-467a-aa9c-b0fa8bf7dea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "efbb3fd8-9fe2-4d88-90ca-543c4b66bc51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d0720e-43ee-4436-ba68-d9a9bc8a4686",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a72f1d96-8b23-4748-8077-fc9d2f59b7aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3af7bd8-d2dc-4b90-9070-cce9abb5d1f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18e592a2-dc4d-47bb-8364-4a2037cfb8f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "29d0ad93-1168-4c9b-8606-6b8b3c7223db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a617fb17-c473-4b79-9144-380342498719",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f177632d-78a5-4edf-89f1-0cfca0cfb445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ac75f78-f8aa-4ba5-9583-96beb79f303a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47174e01-3b1b-4ebe-abdb-953e341d634c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "95fb1342-744c-44e0-8f20-a7561f246e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3f37e4b-8850-4d89-b87c-1b9e0583dab7",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3939c3a0-9012-4452-99fe-0b6ed6cd4f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56264f51-ed77-49b8-b48a-92f136fcef40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "487f20ff-1e02-4d0f-a073-a74a2d171e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2c8f29d8-82ee-4f19-be20-270824f84624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b29990c-fc7c-45c6-883c-69e8c02c498e",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c70c84-0974-4f9e-8b16-314590afd6b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f08cf635-a249-4156-ad87-64866334dff8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8efe2a2f-f291-4332-9886-739c9bce029b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "148b64ab-2b79-4346-864b-0db4e2d29dae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f1a26fe-55e3-4227-95ee-a6bb91fc4c37",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e8b25df-e1da-4cf0-a4bb-681f31c0dcb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13ea8c38-eb54-43c9-93b3-f9703cc7df6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd2c70a-a4c8-48f9-8eea-9d31a8c7329b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "50735431-bf8b-4e7a-98d9-8d01eb78f357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5760ee65-619f-4d9e-a53e-e0e0a21f4d64",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ecace0-f00a-489c-976c-6504485219d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4253b52-7d3f-4284-9a8c-aee356353bc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a50f6577-bafa-4468-b71c-06011e6149ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f39b4ab6-94c3-4066-8b05-8907bae92370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a807ab36-b3b6-4072-a683-78281c3fc3e0",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f857aa92-3993-46a9-a04b-5d336310eafb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6beb00a9-a830-4500-88c2-9bfd7f768b2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a2e112-630b-42b8-b7f4-5dbd383eb55c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4e75016-6b46-44aa-88c2-eef95e65d03b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db3d1442-222b-42e3-9297-58151b74df15",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ed5ec9-ed5a-4408-a765-af7ce9ee2dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d24c34d-ebe5-4d7b-bb37-a033114a41e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91f95efa-82f9-47e4-aaf4-dc511db50228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9fda047b-d6d1-416c-a246-7e233322a910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4afc1c2-8f4b-4834-85b2-955a3d2e2f55",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb5a335e-8355-4fcc-a2ac-6e9a03b76266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19940b6f-ac57-4acc-8511-87651ec75d31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87422832-c6a9-4109-9ee9-3c56766d8e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c325a690-2d0e-410b-be21-f270e02b3d3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "313031e8-aff4-4e12-9901-a18489f48578",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "696c28b0-71f8-4b58-aa6f-40c2e50b45b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "426ac6fa-9d0b-4db5-9758-a1af3bd52377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a5ae7f4-25f1-42f2-9013-74e3af051045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d33349cd-03cf-49d1-b306-133f6b877407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53ae735e-0d8d-425b-8a9c-fc2263542f24",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe6b3fd-4863-497a-8f38-ed6e42403eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "502211f8-31a0-4d10-8b72-2a96760ccbda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4d4a92e-052f-4502-bca7-fed0e8cebbd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef476dcf-9694-4b58-acde-d51ca4794aa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b25199-2e7a-4511-bccd-eced8b2e9697",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26584756-c545-4e95-80af-0480cf7705ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73e0ee16-62a8-4f18-a45e-e6a6f815f35c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23840735-72d0-4d3e-aac5-9e5a3699936f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f58ec38-f849-473d-a80b-627294728405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c31a26b6-bfe7-4acf-bbfa-a2efc348c4a2",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec7be8aa-2b23-48df-bc47-de4d99e4a4a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "974b6c06-cb65-4133-8a53-28359c78cce5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "715567e4-4c28-4a73-b975-67fe0bfb006d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f05d343-d6af-47de-9b7c-84a37937f522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abb6c973-87db-4517-84ae-74386b36c99a",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3eddfdd-017a-4929-a0fd-66d9ac82be05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52b7568d-059e-47ba-9a95-f0287b4fc2d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67905190-1654-47c8-8e1a-9c43d1b960c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bcbb53e6-20ca-40f7-944f-a8e376b5764c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2111b5f7-b8e5-414b-a95f-4fe1d69eb8ec",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a0e3701-0c47-414f-941b-cbc1f037d980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6f003a3-81e0-4b97-8b72-6b27d9bc8423"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e6517a4-d37d-49cc-b34f-3fd8f7de1460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d4834f2b-fc5a-45fb-b8e0-8dfc7b82d82f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "239a9661-dd02-4290-a638-0667e3593be0",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65e24a3b-608b-45aa-85af-4fc8540c2a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffc75ae2-8697-4eed-8ca7-a0339a46d172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37033f36-3ad3-428f-9b30-efe0078cb4a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba27ed5a-a597-4913-97dd-b591edd1214c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91dfb5fb-d680-4ec2-b6f0-814f17bec823",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bd628df-9b4c-4219-91ed-23dc11313212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0abed77f-2466-49f7-b8e9-5b4c4377397d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c236eb-5615-469e-a744-14d14310e6f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "40aa54bc-7a91-4099-aef7-05f40f04f2ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ec0e8c-449e-4aa2-85bc-d42daa8b6341",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fd203d1-5c70-4279-8c4f-4656bdf00b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71667794-7161-41bb-965a-342c18fa6ade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03388710-adde-4008-accf-89d92c1a4519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a350289-e9e2-432d-92e4-b605d5eb24a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "990b8893-388a-4bed-a0c9-7dc8cfe8b25f",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b0452b-0039-42c2-a230-7cc70235c2b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07528671-eb16-4ef2-b03e-1548a8eab890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef15779b-bfb8-415d-9f6f-f6bec709414f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d11fdda-139c-45f8-93ea-7f6eba4df3b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9676535-daa5-44ea-ae82-0b2a385c8a54",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ecd24d9-cec6-4893-8817-3c90bd58c873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ac5831b-1c88-4b6f-8dff-9e3051d8f507"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7ef94eb-0e78-4bd0-9594-126c51634df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "487c70a9-b28b-4fff-8e89-8a2047ff55e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29a763b3-88b6-4b7e-b759-34cc3d57f01a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cedf505d-eddb-436b-9646-6ee7adc4ea1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "37f05bdb-3ed7-4380-8f62-4ee4922d47b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be0e4abd-85be-478e-8b23-6a7626b13992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "281ca448-9c00-4f66-ab88-f96627864847"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e93e3036-1b9f-49c0-af15-367e90fd9e6a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2cc8318c-6a4e-4a92-ae8d-55667b46a4da",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18beeac7-4123-4360-883d-254795ee1c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fec0d1fe-530a-46d3-a09e-cc4272cce15e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e120d4fb-0fa2-4232-a779-49138e26497e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e98f9a7e-3903-4a77-852e-ad0d5071a7f1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a6d297b5-953a-4784-bec7-eb0f05ea6e19",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "26af68be-2985-4500-873f-6b4e73a45260"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "da381159-2676-41d7-8dce-23223277d876",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7d3c034-6a4d-4f71-928b-24c9d6187ebc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4d7eb9d6-3b2d-46ad-a154-a56fe85015f0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c51d4844-b0cc-456e-8e01-0dd9b71652d0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "056061c0-583e-439a-a66a-e9df8d3525ba",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "69d0a290-5d11-41db-bdda-070a845483e5"
                }
              }
            ]
          },
          {
            "id": "ca28cc30-2ddf-4de8-85bc-cf3d6888806c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "06effa2b-959a-464f-b488-40eb43f4cccf",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "39204c3b-6978-4498-aa31-c9c2fa5777f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0ab5bed3-c2dc-4b84-8ac2-bc55c8ca67d1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a7dc47a-d62c-4079-b515-e6bc48afe253",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6c3f8a36-715b-42b4-9f1a-79950b4e2ed9"
                    }
                  }
                ]
              },
              {
                "id": "49606a33-6f0f-465b-9526-a303b3820058",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c957c387-a870-4e81-b7f5-714ec0c7a528",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d56ddee1-b820-476c-8546-3ddbb7fcaeba"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "308406b1-79fe-47c5-8740-4147b9c6db9f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9e88b87a-2198-4a39-94e3-3b94a83128d8"
                    }
                  }
                ]
              },
              {
                "id": "160917d4-77e4-4c6a-98d2-e399ece47d1f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2cd85871-d15e-457c-9249-7eb8dcbdb1d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3a94eb09-7f4a-41e5-ade4-815333fd9d2e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd340cda-16f8-48f9-b01e-19663cb49320",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d396066f-ddfa-44f9-bfeb-e3509a0a08c1"
                    }
                  }
                ]
              },
              {
                "id": "35303b32-266e-4738-b885-4ef00032550f",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a5913c0-8221-45bd-a9c5-9e06cab99a32",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6ff6049b-4a91-4d56-ab8b-da629840f340"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe3ce6f0-f9cc-4d14-8189-a30564bd8455",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "7f4dc83a-34d0-4ff7-a032-5e04a86da74a"
                    }
                  }
                ]
              },
              {
                "id": "0dc1212f-3f21-43b6-96d1-e70431049fc9",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b1cb2243-4fd6-4b5f-b8b6-dc18be521bec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "370c3509-e647-4d84-8762-8e8c76274ab3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5af98415-4179-4618-8837-2b89625c0d06",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "123703c2-dcd2-436d-9c28-159103ba12ac"
                    }
                  }
                ]
              },
              {
                "id": "f74dfb5f-5c88-4777-96d8-2136d6e5b791",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "96e292bc-3da4-46ae-a5fe-2351e810e704",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bf1a0e04-7b13-44a9-825a-1b413512b046"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fcf1d1c7-351f-4ae9-9c3f-f4998aa76c29",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a3fbe7cf-23a3-4677-acb5-839c41ae1ae6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6f84f05f-092f-4f94-8b94-0789e2c94110",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "37cf79a0-7ddb-4e67-b633-0456c3fa3f5a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c3533218-485f-4842-8de2-ada8b9a12ce6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "894e0751-0391-4078-bf5a-6a320ddab46a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e1cb2539-be1a-4747-a4b3-7d0ec82f8fc0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "5f09a7f6-22e8-4802-adb4-7ec0da4cc4f0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "38240e5b-4a2f-4790-a768-9c75123a7855",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c7a2059a-79c8-414d-8af0-338f4ce0812a"
            }
          }
        ]
      },
      {
        "id": "c80e5552-eea3-4ac4-9ec8-209b47c01987",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "2901d431-7a2c-4b99-8ca4-41895ec76651",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2d8c9676-09c4-424d-8532-24d8cf1be4ec",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "60e16511-41c6-4dd3-b465-03186dc5c4dd",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bde36ae9-c337-475b-9e04-d1760e34015f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49aa7a81-c4d9-492f-a872-7fa5cc488ed8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "246996ab-9759-49b2-9c28-ed1e30c22712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfb67403-cc93-42c6-89fc-0c0f561c9bff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "604851d7-22fe-439e-b946-5c1cd9678353",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e8087c-815e-46de-adf4-e29657ff0411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a851c1a-42b6-4fb3-810d-eb6d721ae976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "462d85c2-3c1d-44ae-9c89-b2e2ffc33eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "99843025-99e2-4228-8a9f-65444e417ed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "936020a0-809c-4350-9d00-ccb097fe9b5a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "779365be-69ae-4f6b-918c-4b8760035077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5372d62-9599-49e9-801e-63a4afd2cf12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3c23e60-9b71-4706-8144-7beec6164db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1902115-08c4-41f9-a233-817c2b7ebfbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e037a35-2a75-40c0-abea-6135c893d95a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebadd49f-518f-4639-a917-7bb553b6e8c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55bce202-f7c9-43f8-815d-3ff262b3c9c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe19f35f-7180-4172-8782-608631e16874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b857bd46-5e3a-4b70-af3f-f83821f241bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7bd9819-cf79-4572-83c0-041b9d0b53bf",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32324190-d0cc-4677-bd5e-9ce8b2036a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02247494-c90d-4516-ae1f-2b837dd978d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef5eab68-5d34-440e-a635-b658f029e337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0accb4ed-ac22-4595-9bce-172c2c7df7f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a35c7d1c-1281-41bf-9735-f2fe3d51d5f5",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d921b77-653e-4331-9f1a-62b216083441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66bf5dfa-0557-4128-ab54-301600bb5d92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73403f99-a7ae-4d06-82f4-865d2a9b9bf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f067704a-54ee-490d-a16b-fd111fe0f03d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b925edae-2773-48d4-8612-1ec9e3d9a431",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4172b9c9-9da9-4de4-b254-9ded77538e4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8551480-ebe1-4f12-add2-f6f5c740d554"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03866a09-1f6b-4312-bd49-9e78e39de6fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c01ee6b1-c277-4730-bb5f-8c9dd4d32eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df0a8fac-a970-49cf-a975-1d7237cb0883",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d89a74-a15f-4281-a07f-e5473403affd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8013f7b-890f-4c89-b211-119397550625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1b8a92d-2b9a-403e-be18-d40e15ac61d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d2b0b47-ae92-4c43-b078-58d7ed878510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e040db-58a9-46da-b35b-7407aa818494",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54ba9dad-ec98-4182-a9cb-b1fd3772a3f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6abc5d3-56ed-4a45-9158-553c0ff83876"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4af57c8e-4f33-4bce-950b-fcb4c5661de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2628852c-2062-47a4-96b9-98b9924681d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c30689c-66f0-430e-9433-67d474380b14",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "306699a7-e655-461f-aafd-b6fb97c269aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "804e7357-9487-4df5-ac66-85225ced4fc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed254eb-a7ba-41ce-ae17-b6a8b1a4a37d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "61214a11-1b2f-44d1-8811-c3345a8ee22d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e7885e-f4f5-49f1-b4ed-bec0ed4bd0b6",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cecc71b3-4f2c-48bf-bfaa-9dc2518a2b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "304e256b-95af-40cc-a1dd-8f23110d3eb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c136c88-9e20-4c4f-98da-d01ac146f321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "fb46b775-7e20-4f6a-84db-1e4123014251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b21c241d-b68c-437c-95b8-c64dcf14e7ab",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a48c5ca-d05d-43b4-9f58-5f0da9db007e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41e3fa51-445c-446f-ae6f-dcb75a5a43dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d4c3024-86d6-459a-af87-188b1cdd68dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bb0ff2f7-1631-47af-98a4-3eb359519c03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9622db6-0960-478a-8d27-07979c0ecdd8",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58401ba4-846f-4548-a26b-b8625137104a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4b88ff5-8c7b-4e54-8972-7b42f372d653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d49d5dd-14ce-4bb5-8214-8732ff7c59dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2c59963-52c4-49ca-b523-7516ca3af7e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dea2062c-b788-4098-b9b5-e4c613dd2770",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b5edf3-50ec-48c3-9e4b-2a7bdc15be66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69bf851a-854e-44d5-922d-024f84e32885"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aae5a5d5-0c2c-4be4-90a9-787ceccd2401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6f22fe1-106f-43b1-a0c8-63493cfe6e66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf692e54-6914-4d8b-8699-53353f54102e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77de1533-b7d5-43ac-b08f-e2c41901ab4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "778a1c92-c6f0-4154-89f6-e2b560e94485"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "607766e6-c4bb-4ff5-96cc-eb3b0a61c4e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d31fc05-c952-4d7d-be9a-135da9b62380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ee3d9b-b3dd-49cc-b29d-b660eaf1dc93",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b0f8184-50aa-4e0f-a679-fedec8b05c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24c629ad-e1d4-4169-bf99-315ef85ab37c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52501553-0973-443c-8284-fc8ab46b7aa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9568f33b-ec87-4300-9903-39838f60fe43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58851900-5a69-45e6-8f6b-405b7fae4d41",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f29a141-2490-4e06-a6fb-99e2b5830eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a2294de-f405-44d8-b992-f1fc5332bd11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8142995-7d61-4794-af83-1c5888d603a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "0105888e-b6be-49e6-8408-ffdd9877228d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a56c2996-3ee8-4e4d-8f92-cc68ab0feedf",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc58e2d4-5d02-454b-89b8-d2bee0bfbd6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d51b1d6-de36-4d0a-88c2-ac422e3dfb77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6838cbae-4f86-4110-882c-f4a8e0824c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "eeb74e13-e31f-473c-9c6d-ba7cf7e1b3fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "308056c1-e236-4563-9199-4698d036a254",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a26f0b1-dcda-4466-a0ce-16270eef5d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edee9d38-caaf-4915-b140-911540bd702a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7f7e9da-1cfb-48ed-831e-308ff067c725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c145642-eab3-4045-aee4-56fa8e1f1152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01b1c270-4f47-4b8a-ae60-784cea27c2bd",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b984ec-df95-4c7e-8d84-71c33db7f8e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a62962df-0033-4e57-9e93-fc3307e6298b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f9f0c0c-b416-44b8-b0a0-e9d49947b3d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a37b30d3-dfb1-446c-84f4-dee1d487994a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5eed128-a832-4479-a1aa-c1ccdbef7a98",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce73c6d2-21dd-487c-a08d-2a8917fb41ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c1d715d-00f9-4bfe-b15a-708fbd6698b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c61878aa-d097-474a-92d0-a983365fc5b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a0de155-b341-42a4-b3e0-962991c2ade4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1851e536-c154-4ee7-b484-830818f46f2e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f61b95ed-77a5-4997-a52f-bc06664791ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24117b71-36c7-4b3e-8347-066bb5f6bacc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2dbee42-4cef-4eeb-b4b7-79e49812a662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbe3e6a0-5d3e-4c74-bd89-8855dee3229a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c61ea9-89fb-47f1-bd82-c4d4c3c84305",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc2f038b-e814-42ae-80d8-d699a166917f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ff6b6ef-250f-4756-a681-1fd507b448d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61729328-ef06-44e7-817d-e83ed0364825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c47bf69b-89e9-494d-bb06-b37d90d7e850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88a0e35d-c73e-41bd-845e-f0dc085d4a89",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1922ae20-8757-4f9a-ae32-ed2e76474b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db15bf14-6161-46f2-8538-acdf88acc0a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d155bff8-5337-4726-ab4b-bc80a03689ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28631a83-7d96-425e-891b-3cd35fc074a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1be28b05-2eea-46f5-9515-53295f6da794",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d344923c-67fa-4df0-a00b-f25c938a039c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "604786ed-ac0e-47ad-aa83-49ddd8234a0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d52af6e-cdde-4635-bac2-2ad732cefbfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24e9a93b-7ce4-494a-9138-4c2159a093c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29cf4ac3-ed53-451a-93ec-03e5c13e4ff8",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79614adf-663c-4bc4-9794-96743077a1aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "403521dd-aa8c-4af1-8874-cefecf1005d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc45b238-56a4-44a8-9f40-0c5eb4724472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "220bf1db-df34-4345-a12a-18203e8488f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19193c0f-6406-47cf-bb4d-ac377673fad1",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93277d6a-7c61-4b4c-9431-92b392149c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7376849-5ed8-40ec-acc7-d55a5de70101"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fa04e40-7352-4e5e-9ed6-af74e4ac2fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "829ea9df-1883-4979-9ea1-3af2f21aeed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b810c040-56cf-4088-a274-fab69ba50240",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9caaef9-c8b0-4052-bf65-e5783dc8e409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "165d82a2-a157-4024-87de-71aad640715a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec6e870-c2a8-40fb-91b0-df2bc8244c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1733d1c8-2646-44ce-8d13-ecca227e0e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f51d614f-17e8-49da-a89c-341814cdc617",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df3f4109-b760-4d6e-b07e-1c2a22923456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed5d6177-f32d-4f55-8aa6-ec580741fdb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "266b2d1e-35a1-4d35-ae4f-2fa92c0f09b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ee74133-eb83-4cec-9d14-533e5e470447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c72442-1fd2-49c9-b461-dd482dfe658d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b1788c0-ed7c-493d-acd4-30f2071d2a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d55d215b-a0d6-4f9e-88c9-092bfd167d0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3d28d70-f532-4de7-b057-1a3087f45c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a47aeea8-b535-4f2f-8291-03528a9e2f35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c6cbb17-ac07-42ba-bc61-c14f82b165c8",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acdc3051-f22b-4b12-aa82-99cef69fae8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "912c97c4-be6c-4f3f-8d6d-2ec8dabc3b65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7377d71-2288-4760-9ba2-e58f410f2807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a01478b-bba5-4f73-9631-f069ed306836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82b0a5be-97d1-45f5-b701-aeec6972ec0a",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "196c886c-7435-472b-81f8-c81fce94a80f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3e106c8-9b85-4909-bdd1-5b021a4cd83a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc9ae6c-8f23-43af-a23e-4ebdc358fb32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e281b3c-ae0b-44df-85b0-a56124745caf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1038f2d8-5ed3-40f9-a05a-b22de069c511",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "80aa83fe-107f-4740-a509-8af0c2f4a268",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c264ceca-f0b4-4367-b4cd-3586c6a3a5a9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "3595eea6-9d7c-439f-af06-240891f5c873"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebfd40d1-8399-482e-9107-4c55df63d286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aa4cc250-f543-47f8-b81b-9f05af49814d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a12af56b-5ef1-48c5-82eb-f925709fb4de",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f8b1d777-c5b8-4f58-9604-9dee4c36e0a2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cab19774-ed70-413a-bcd2-c79b97277f63",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6018a424-18af-42dc-a2d5-6223fedd79ec"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e37cfe30-34e9-477e-857d-1be444bae7d3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0730c102-77b5-4346-8dab-210534c857d3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "956315ab-3a8e-47fb-9989-4f96989d292f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bee57eec-5990-4753-99e8-de55c9ee6da6"
            }
          }
        ]
      },
      {
        "id": "ed94dbd5-4361-4c48-927b-8e46b8451640",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "f05c2837-6869-416f-a8b3-1e1fc7a5ffac",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1ce39f0d-5963-4d4d-8909-a4fb1c25b151",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0019a979-0709-4f6e-a6ef-ccf9194a783c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b231b92f-63fb-4527-aa5f-5db367443157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0682ccbc-bb47-4fe0-9fa8-e0a1e02bafdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "303627e3-a35e-479e-b6fd-39fbc5dace04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e833512-a564-4b7d-88d6-56abf3f171ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df29e1aa-af66-4cc7-9567-37d33fb0fb88",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab9388e1-c699-442e-a60e-2ba1f22c0d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "645f04fe-8bd3-4098-b63e-6f0264537dc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4581d3c-cfde-41ad-8a72-f8cf696b3d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "252c15e0-8dd5-490a-895e-19890223c7ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "716516e8-bcaa-4939-9ffb-acad2b8f6b81",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3867c9b7-1e44-4fa5-9429-3bbd2cc167a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93341248-5963-400c-adfb-7b70cb591ec7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ed89cb9-99ca-414d-859b-a80e42baddee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a64b2418-6ed3-49d9-9ae1-e711bbee1722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f5de009-3725-4132-b8ac-72ac5ccccfc0",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de1f6a1-c3cf-4709-ac89-8a16653e5fb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02e85665-8a86-4201-84b4-2187919eb043"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d11397f-16e6-43da-b642-12d772247424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "40be0da0-ce56-4204-92bd-d74b1b381336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe665ba-8e45-4dc6-bdc2-f3c5d190bb9a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03d7fb94-aadb-41eb-9e3a-ea159f7ff55c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c85c1cc-a7fc-401e-94c4-e854b4b96a96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b20a8f1e-293f-487c-8f00-98747e7e6dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "26880d7c-a4ce-42b8-9444-29f3994641cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "058ce475-e22e-4a6f-b04f-78a9d346b6e6",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0e4edda-f661-4654-b287-cfea32993ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43ce7106-6b3d-47c6-9d79-860e63b67a0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4de8a189-d27c-4e20-a410-81292031cb12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9ae0d817-4893-4405-b123-a555ef4a3e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac9844a-bb2f-4bed-afa4-0b0c1bafc1c9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "063cac32-9a09-447c-90a6-e45f608a04fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7afb8714-57bc-4c0b-bc36-80c2e4d7b016"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c4b065-f612-49c2-a8e9-d9ab792f5056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "988cb465-74b1-4c0e-8b55-f4c34ebfcefc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4e750e5-1a63-4983-84bd-3334dd48d4fa",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d85c80a-cc21-4c8a-bcb7-8ab885cbbac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a446dd95-03e3-4f6d-a5d3-4c9f573c624b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2a9e3ff-a3f0-461b-b178-d01c5711a504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ca65646-c296-4099-a334-5adfdba109ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8c6d40a-54fa-4d60-85fd-6cfb73afec4f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7149c51-31d4-446f-b77d-3120b749db26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5228dbcc-e3db-4b67-a307-853897390df6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d22ca82e-1f54-43fa-890a-0ad6c252d2ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d672173-1a95-41f1-9904-59d44560c38f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b1edc5c-6c5f-4ccb-8988-500d898538f4",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfd470e9-8bb8-4384-8814-d8ff5f3d36cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5963569f-95a5-4f40-9b7b-d71ee4a6a241"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d20a4cd2-0c0e-4e08-9b6e-c85135b3d8f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "21526cb3-4c53-489a-bf23-9352f2fe9ca0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba5e2a50-bf80-4be0-9eea-a911253649ae",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e656243c-471a-4846-9f6a-ebf15c4dac08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1b8cbb2-6e55-4098-9061-d8dbbd5f7711"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fdd50be-d661-4787-ac37-4ab002ba796e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e6ed6b07-0af3-4030-ba32-e1efa69cc477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b920004e-432d-4a91-a93c-4436d4d8441c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed8a724-c156-4276-967a-3c36e3095fea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b4b3dd0-7c56-40bc-bd01-6566f5edb5e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065269be-b350-4c9b-bc89-0e41d2beacd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ace64a3d-7b68-4aed-9c8a-b7f5c4058a09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7838ef40-dd96-4a22-ac74-3428598939fb",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c6d4a66-b377-4378-8611-257445ebc9a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eb3cb32-eed9-4fbe-8303-d271deffa5f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7562e537-5aa9-4db7-86ae-804f244aef6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "04035771-c040-4c22-810e-a4790cf90a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4919b73-74dc-4ff0-8e2a-ba07965f82ec",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba1bb27b-8a32-407a-8243-efbc6cf57618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2dd41c3-ad5c-4097-b47b-ea38767a1e8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d071aa-7501-4463-a5fe-df56fd617988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a02bfdd-46c2-475f-ad7d-c8d1e68a63c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb8ac89-9039-4349-94f7-5aa18123a399",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "919803c0-c143-4980-83de-851adb821d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cb85ee0-f1ef-42cf-81e6-c3b9bd1ee0bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bbe6fb7-0820-49b8-b3e1-60bbda30ca69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "87eb3112-fed9-4210-8d2c-9be1a21fd6aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc67d187-207f-4285-bad0-4d9c2eb39141",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94cb084d-6fa1-4369-a476-31923f0ead87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05c6d4c2-e7d6-412a-8695-715989992c46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9a43304-18a1-4ed9-99a2-3b00be9e76ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "48492335-4c1e-4460-966f-be9c0797a655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a804954-5bc0-42cd-8b26-582c096f038a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e70184d2-2584-4dde-a39a-087c667bef1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ee47fc3-0c66-4af1-b5ea-5e426028f43a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5676f15a-0936-46f4-b105-8004d3f5c1f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e6771ce-7ad4-4841-a8cb-60d0f2230b9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20319732-d260-4b47-9dd7-c458d57ba183",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70c0d3a0-a755-4039-b9bf-172402bab27f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29e652ed-cf60-4879-8c1f-84eaebb02ee9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1768c8bf-37d9-4357-b51c-1a4d67f85afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5e3aa36-19be-4476-8b27-635bc63961b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ab95e56-ae6e-41ac-943d-fec6544b63d7",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "651a7c00-ad1c-4644-a303-d5c25048ec80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc256734-0160-4763-b20c-fc62b959f1d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d141dd-b659-4cb0-b317-ebb58c17addc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42d09c19-65ad-484c-a7bf-e9b6f0b1eca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "510506ce-3c7b-436f-b169-53010da5249d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df8ecd7-7381-460d-88ca-6d2c0e912534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "789b23d4-a10c-48c8-be72-046868a230b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56fbc0fe-fcfa-4d7e-aeec-2c60d6726718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4896a66a-fd71-4b73-a00f-4a3eb7020436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b262e36-d75c-4f31-921f-ef146dcd9990",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff179410-c3c3-457b-b9e4-dd67e714a327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b17a6a8b-9701-4a6b-aff0-310784acf8c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98c4cb4d-f7c2-449f-a612-727b29ff0166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1d06163-c08f-4edd-8184-bc05fd571207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1df4d82-e88f-46fd-b1f5-b12909849683",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51d3fb47-6921-4599-8a6c-3517a389802f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "948af0f4-50a1-40d5-839d-561e1d1ed595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4608e1f6-9828-4315-b4ab-4df4f564e21e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c2ed831-05ed-4cda-9383-32c1ad324b94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b6fea1e-016b-4395-8d81-f4061d66fd94",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c9ffa4c-33a8-4722-9f21-018dcbfc537f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc78b97a-1d18-41f2-b3dc-a8c8217a41e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "563f0711-8129-4151-82db-9f32b390b393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcf77828-c5d8-48ff-9e19-23b69af11f94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72658164-57d3-4dca-bd98-58c685426132",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1603d95a-c19f-4bca-ab6c-f9555d1572a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bfa464c-ee71-4fa7-a1a4-5dad2e60e66c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80aca878-c809-46e2-b978-d1d4291ef0e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e0c0bf1-5dee-4f46-acd9-af17594aa7c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c95ed6b-b92b-48b2-bd6e-2c6c0801f212",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcea374f-c32f-41d0-974e-b2be5f1d17fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1ac973c-ea5b-4aaa-a77b-da10448cab83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d95fdf12-463a-448b-9409-df2cee3d807d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "501ac354-1f3f-4723-a019-05ff0289d962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "728cec6e-a000-458f-8d01-e55b30a62d0c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5a31eae-d6bd-42ee-8cdd-4e99519b0457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5aed1cd-86e3-4cd0-a322-9de074043053"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47bcb2e0-1d65-4ed5-afde-25a6745d63d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3fe9914-ca78-4981-90f7-b31739ebb2d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b3f0b76-0d71-410f-a3ae-02744403084b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b9ac487-4055-4837-bf63-c90d8473a762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a0b2e10-ba56-4359-a4c1-1316b4e3a597"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a5057e4-c98a-44ef-8997-16f628e7a843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ead5d73-9cd9-42cc-b234-f41b610ea15f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a4c488f-7e47-4591-b9c4-0306d4bb2253",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b9be7f1-e1a2-405d-8d86-6950cc7a43c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aac321d6-e778-4ae9-9c2b-9dbda7603b69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e310dd2c-c719-4893-bd5e-7019fbc07dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "591223fe-a572-41c2-a5ea-174a29a2533f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a5e2dc6-d7a4-4e47-b3f4-712c46968219",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7cc66d9-8e06-40f3-9b2e-623c89a4b09b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c900d690-0347-4ea6-8f55-92a5538e15c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9990018f-1908-41d8-af5b-d36e82365ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98439835-3421-4e4a-8286-f54a2904b5ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a087110-179d-4726-96f7-8ffd37acb5ff",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f27ab60-ebb9-4370-bae3-09d4d7d611da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e01d4578-0597-4cc9-99f4-d6706f06cffd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a2db66-32bd-4b83-b92a-d0ec81cf08e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd0c3467-db7b-413c-830c-f1b7b3f6bba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ca786be-5057-4aa9-9e3e-1decb55404b3",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "409af64b-19df-49a2-9b09-853ca52fa610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dcbd75c-3db1-4192-9885-4e0b50965139"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5328566a-660b-4a3a-9c98-1f53f0082e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5287206-524b-4ad7-9050-8422bd20ff33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12a79de3-19bd-470b-b338-853db7223656",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fd8ba38-9bbf-4eed-8e51-a427902bb3e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65089644-d39f-47fe-a333-c04117a79a8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5659d829-bfc0-4d29-ae50-585b08935183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45959aa1-e5ee-42cc-b2ae-46bf3705ce0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaf34e8d-f35b-4714-b3b7-a8fd90dffaf5",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d8c3c1-5e57-48e0-8feb-5a2981412321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcde2d1f-eb15-426b-9949-bfaf0f556d73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ad59506-9de3-4db8-874b-534b735b7ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98ac8186-4b8a-4a9c-93c9-377f5db080a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d36f8f9-bffc-4ee4-9eb5-6b29cad1a586",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa891d23-f196-485d-8902-a41ee02ac756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b63c56c-b8e2-46ca-86da-83e0378bdcd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1411e6c4-0c52-46ef-a36a-f3472d66f181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37d85ac8-95d6-4b8b-b804-3cf2be965c10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50a9b847-6c04-4395-8e00-29616d7b7db8",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d2fabcf-2fc7-42c5-88ef-435f9ad84503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e8610ec-332a-4b86-9a25-647e81d8c0e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a87b7c1e-753e-442d-b0cb-9fe24dabf6af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de9cf122-4602-4e1c-8214-3b4668ddade8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e48fb5ad-bf75-49bb-9387-1c239c8b0a2d",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bafb7fe-8869-4346-95c8-7304402b5944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f775222c-bb94-4f2f-ac80-5b305afecf5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa0f974c-8520-4235-bf25-f8e586e0b627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd6a3770-c538-48ca-87db-5355f4195523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91bd5d65-3608-431b-8e7e-5024b51e3451",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3e6a326-749e-401b-a493-91a8ef68a8b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e874da5-69a2-4bc8-a632-af1acf916e47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01d61217-5761-46ca-8644-a83a87df93cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "171ece7f-3406-489e-a9a8-725624e452e7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "189993a2-5a96-47e2-be9a-30dc85533b5e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "290e96d8-57d8-4402-bd70-6c62bc2cc6fe",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90bd2fc8-e2ec-48c6-86ff-2fe261cf709f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "2b46a91c-d0d1-423e-b0ac-7729bc7249e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "436e1fd6-7627-4e4a-9fc5-11fe0bb380bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c220d5da-4553-46aa-b304-95b9e31af367"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "de73a0b8-6600-47b2-9378-0b6600036279",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae27274b-4ab5-43fd-81fe-adf3181226ed"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "53707bb9-5c6a-4d77-96af-a8b98d28d3e6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "577ccc3d-80ab-4bb2-b3f3-350e740f19d7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a0c97e54-ccaf-4628-af5d-30aa5ca16830",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "004ec008-0eb5-46ca-882c-b1a67b538a81"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "08e38338-e9ae-43c6-a1ee-3a5738ca9bef",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fe573b74-32c6-4ad8-8420-f6abc19c14a6"
            }
          }
        ]
      },
      {
        "id": "c7e8dc3c-bee7-41ee-8ac7-83e223cbe9ac",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "d1bcebfe-da3f-44f1-a8ad-39875c396947",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5c6b4d5a-0ab5-4c60-bf04-c725b6461f11",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "16e04441-f5e0-4c43-bf9e-105a48563b1a",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8f6cd6c-b323-4715-81ef-9c10a32dcaab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ad3f899-c94c-47aa-88f0-87cf5518ca36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5910eb3-4fe1-4603-a88c-2279d528a006",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a5f283-fb3b-4aac-8240-102124d77d11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06b968fa-403f-49ab-ae33-ef9dc602bcef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aefe3685-39c4-4170-b6b1-51eeade49931",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d231aaa1-91c5-4406-ae2f-05c6ee316c42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2a418e6-e13a-4a29-9af5-9bce23ed9227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8355b022-52a8-480d-9ed8-e30cff93ab39",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9abd80e6-fd69-4300-a047-6f3fbe7f77d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "165adb02-102e-4f28-8147-fb52938e5a51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1225c0d-5e6e-4e08-9cad-e828baf937b8",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf57942-a8fb-488a-8f15-fa5bd0fc4b83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3abe5cf3-ba1f-4838-b3fd-627ff70ec2f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82b96aea-70b9-4d37-9820-3ca2aecb2720",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a5a0e26-8f8f-4a07-9826-f9f78b520885",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3824f38-bd0e-4cb9-8f55-049e2d597c28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39af1238-1937-4efa-8c54-415f3b9d3fbc",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52de2f40-cc10-413e-979c-165a45392e47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af39cd67-615f-4561-a309-a155d6442322"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e7f168a-147a-4894-b181-1855f70d116e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b114e74-bad1-42d7-9a34-206653e79900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27a5a140-d514-41ea-81d3-e47b1b0c9d01",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5a0de0b-086a-413d-9df3-57e140186286",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22bf70b2-9213-421b-a1b3-adef67404ddd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28aa9de2-0f06-483a-a5fb-496e9cab8e45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ac1c0e8-f207-4c8b-b556-b5e6f928e616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da1ef565-b362-49d5-a6f2-873f88c6a45c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbd4e1ee-6233-4085-be97-64311ed46ac7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a4145f1-1829-44f2-bb2c-4f113b915a7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dacf5c3-e926-446b-853f-e37ca0503460",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35dc99ab-b2f7-4f7b-be2e-c002886278bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d97d3c-1f73-42f5-a761-63f8057d50d8",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24645f78-6cef-4a6f-93f4-718ca5fc2d48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2381f23d-3f87-43da-9e39-54b2fa1dc8ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "459c4f8e-fa2a-4ae5-821f-066ec7f81db7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "863e98ee-ee47-426a-8f3d-6251c5f031f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a69f9b-0c51-4fbf-9102-77a4e787aae9",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3ad0c03-531f-4d6a-ae0f-4ad2c841406c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1b2e167-5041-4c27-8377-b090cd14cf27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e75c25b-afbe-4923-8342-b8a60cc7b85c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0666388e-58b3-4ae0-9210-bb5fd2dc54f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4247ec42-38c8-4b03-9ddf-493989b4ed11",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c726b3c6-31f0-4751-b604-79a177a4a4b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "977182fa-89f2-4177-ba41-440c2c6c5423"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4f2b0b6-f237-4c42-a1fc-aa01c5f28382",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78add682-6d22-4f10-ad58-5a966448f70d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb09cdca-96f7-47be-b164-5977844b716b",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "676cf844-5640-49c7-b740-ae831250a409",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18e3fd57-24ec-4944-850d-0c4bbd909c29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e63811-8e21-4f6f-aa72-66a966df2ede",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9b6e2ac-a33d-456d-81f2-76cc34960db1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cca65ae3-ade3-43a9-b092-3ae7df431a71",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76829de3-ebb2-4940-a59f-3816f2558bab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63223a68-d26f-4f70-86c3-bf0805f7cad6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e20028c4-37f7-4d60-9ece-c02044231164",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0586424c-7158-4042-8122-7f58f02faa6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8120baa-fcaa-417b-a35c-9b9ee654ecda",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "963886da-3b6c-49e8-90ae-4834ecae395e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f560aaf8-4d19-4f3c-93bc-858422322647"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7407b9ab-cceb-44b0-9a33-8f68985c91d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52db0ef1-0b50-467c-b1f4-8043e0d441c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eda64c52-83d0-4488-908d-a81a967f45df",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "435178b5-a8cf-4879-8c32-335d76cbfab1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6137105-23f0-4ded-87d0-bffe9a5fb6b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f60b0a9-ffb5-4783-a2fa-7544761356c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c29751ff-fe66-46ea-8416-12ea065f0039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab514190-04fb-45b0-8ffe-1c6510041ff2",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9873bffe-302b-41cc-97ad-6e0a1cdde20c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "606824f8-82b3-46be-ab7c-5aa0f141f79b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b8d0ad9-c2ea-4b0d-8c0f-54895005a195",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4a6ac15-38fd-4f6a-b171-32b0946cc8e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74ede20a-c705-4dec-a25a-f1824bf7c76b",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2841dbf-7c23-476b-9bc9-4ba93d7a1baf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa3e686b-e581-47cd-9fd2-e2c0b0771bb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "906ab277-70d2-4bf0-9d8d-00aa746c35e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9c687c2-65e5-4fbe-bd1b-7c66888ee33b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f17758b-a82f-43ee-9c0f-08c57e5e8f86",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "593d8895-8579-452c-b5c4-e7aa9dd7c8da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b5e3046-7c72-4f70-9a78-638ede91eb95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79f55b95-3351-4437-a43c-8851b8c112df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73fbf2f7-d857-4cbd-b98f-a6f7ca2b7efc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edd38a09-0677-4bc7-a0dd-feb329d10bc6",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed073662-d8c9-4f7c-b10d-7b5b954237c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9a9a286-8549-4253-9165-f35e886a2207"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dd8c70d-417f-4b16-9037-2774287b226c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37d2a5e7-c11b-49d8-8dbd-42ff8cfbd7e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27915caa-4244-4e33-8aa6-e58c115ab529",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "337d579b-5634-4cce-a549-d2efed04ec37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ace5870d-9fa4-4e35-89cf-401b8f53453d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d108cef2-7615-41c5-ad9f-416d343d50d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b913a0e9-722e-4f96-ba6c-fd2afa2a7f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc517370-5e2d-4fcf-a1ed-d8cf0a530e90",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "262b4735-1fdc-4971-bcc2-fa25b397e6b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f1da3c4-1655-4426-bd45-ba8ecf687b9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "789eefb8-a71b-4977-9391-e1e0b4e20405",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab494fa3-6f5f-4953-8e8c-55ab3271d089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "841193c2-7686-41fb-a356-af6b89453cb8",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2a9f29d-7342-471d-8c6e-b37ba16a5799",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73f87899-135c-404e-a212-e073ee6db213"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87a4b7db-e83c-4203-8be5-7cb4b970c474",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cad26ff-d8c8-42ed-9348-f508fdc95086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa52d27b-bfc2-40b0-82ce-efe00a4fd342",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d169044-cc6b-497b-b3c6-404cf42d6a23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fa49066-3bbf-4126-bf9c-d7b0f979a97c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bbd081c-3f87-499c-9777-95d5780100e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d700321-6c11-4bb7-8607-87042464e0d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832d8659-75b5-48cc-8e50-e776b0479840",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38fad114-fa05-41ee-b396-c59cd169713c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4c75b8a-55f2-406b-87e2-9da31ad057f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9887db0-e3c2-4435-bb2f-af2da9a90367",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "072b37db-ce81-4c32-85a9-b57822f98c4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24df9567-819b-4c7a-86fe-22bbe89b892d",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8da3c503-85e5-40f3-80cf-706f36290c2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72f33938-5c1b-4f02-afd6-82b5369dd375"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55bf1e1d-ccb9-4e5f-bcfa-d63138f4cc43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5897c99d-1d8d-46b1-8afb-9514d87394b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0176b19e-eb6b-4a95-a92c-729c3a1ee4e9",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a9b3902-b75a-4099-b2d3-853cfb8f1b5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a530da7d-41a0-49c7-ac18-3b3527455a83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18c7f929-8c7c-443b-be15-c152fe272282",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba2026f6-c7e5-4fbc-8d9b-a678b9d8751b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3746ec5a-c4d1-43a2-9fa8-cb01cacec230",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02e7ddaa-6f2a-44d1-83c1-cf0beee005b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35a82b24-3098-47ee-9ea7-7854d426da20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acddbd6a-b676-4a52-b99c-72f6e775363d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45385352-a9a2-4e05-80c2-568dd382eaf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca7fe16d-5ce4-4db9-8d30-694fea622340",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd9d9433-64f8-4285-adf9-9fd1b44b8944",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4505db8-b6d7-4cd8-9ad7-c406a0aff695"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43874000-fb60-42b5-8012-a41cde87ffa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a370b2bc-2cad-4f54-91c2-214758e3f015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bae11cb-25ff-400f-bacd-d2ebc46a21c2",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b13a529a-e44d-40a3-8071-f970a692eb1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "feeb840c-aed3-477d-8a3c-c935b147adbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43aa1a78-b541-4a36-9dfb-7e4e17bc1bd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8a41663-cc35-4646-b8c6-a252d30b69c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b382dacd-3d7e-43ec-8856-854c11e089cc",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a70822be-aa5c-4cb1-ab0a-0d2c351abfdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41f441f9-f2ec-4ded-b416-f5cf2af17f97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9a31aaa-0ca3-440d-a44d-84e374d302ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbe2ce7e-6ca6-4723-8916-f3aa860c29a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0881a06-292d-4f7d-a345-19ee711b17aa",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5880c90-1337-4732-824f-5051f4501c02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ca34ab4-e0b8-4e59-aa45-5173b98414aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc6d574b-6e6b-4a0a-9cce-02a483f8141c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fb3c848-6324-42bc-aefa-0c35ed29dac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab704f5b-2a8c-4d8e-8a50-7ace4c0d70a4",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e09461a8-df0e-4399-bcaa-381ca22d2889",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c9de423-d570-4eb1-8990-a65c216a2f3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d748b113-e9b1-417c-b31c-3838b89b78ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c2967e7-3999-4ddb-afff-33dcf8ac1d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc84d568-ce15-439e-81fd-757fec2f9414",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e5c95ef-f99e-40c8-b938-cf4d95ff9f0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b098d52-9d36-473b-8c24-96247d01503f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a9a941c-c9e3-443f-a5e9-ec860d268dcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40866af0-30b1-4c59-9bbc-e42e627078c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b02da799-7263-4bd9-a29f-9efc9fc06cbf",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4be17d9a-67e2-4383-a9a1-c992aef3053c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9d1d8a0-f7e3-452f-82bc-157d0fee38f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d9ed73c-d623-4bff-9370-47f71bb8123e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5af1e209-fc20-4218-b0dd-56608db2d329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0be1c1d9-9504-4589-a18b-b8917b8715b4",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df596203-4325-4c2e-a42f-7bab9daf8dc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b7a5e0e-c3b1-4a1b-8985-2d089caab8ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53634c25-111b-459d-a547-9e4c041c626b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3be56f72-8553-42c3-ac6c-a00dee3e592e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fcd535e-8011-49b6-8a44-284f02be9e3f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e954ea-06e9-44f4-8669-dc67a1b19c4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2335a1b-e7fd-4251-930f-16f1775147a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97bd4e20-b87c-47ca-8d68-a05c3687c084",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4e8634a-0d11-4214-88fb-aff4394337f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93f2d4f0-deec-4944-88ba-55079d96a5f0",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afec83f9-93a9-4750-9e7e-dcf7de65a43c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2224b6f6-3218-4ff0-a72b-0e9337161e53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c088c92a-f8f6-4a2a-856a-1678e4991a74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92c97399-d425-4532-a601-814bdfc7d81f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09244478-8fa1-488b-8dff-2bb31b93b40c",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08b98151-212e-4f5f-8136-9f8ffb410e58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cfd9be4-7e4c-442c-80ff-5f2fff78e634"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3eb07fb-707a-47d5-b7b0-be4d111922fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fad28730-e3bd-4871-acd6-e3080d9492fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a657eda9-43a4-45d7-b4f5-2966c118344e",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "937d34a5-d6c8-48d3-b458-a8a6dae427af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c680f99e-d4a4-4c76-a911-55312b702e5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b42ffa54-2b3b-44d4-8c99-9716ff7974fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b8e2a80-25e9-448f-9db7-1417d1fff244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f3b2792-41ef-4c96-a1d0-ae1b6ca79a41",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f96bb7dc-9349-4ccc-83cf-572d919aef6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8d0ba69-2615-44d2-95d6-bfc4592e9f89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7b2c411-6055-42b9-9bb8-52bf4592ad45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3922e349-14da-4a86-9d04-f966ae329c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1ddb50e-accc-42ec-b46c-bfe3896634e7",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b77c902-a54b-441b-b623-384339b88aa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9345107d-3147-4ed2-ab89-d104f2ca9e65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be717b17-a9ed-4431-a752-c4235c0de12f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "304ed52c-39d1-4b4c-b9c3-c4646c09c046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f14c3298-7dbb-4232-af6a-10ea64b445f2",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f43863f8-c48d-4f7a-bcfa-bc367e376118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5ade690-9763-4ac7-8566-274c223644d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b749e0fc-c60d-4ef1-a5c1-8c3cb8d8c234",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86b15aea-2599-474a-96e2-df2ad8e8ba7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0ce7f61-af20-478a-ac2f-938251ff723f",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f73da1ae-9e60-4b53-bd4e-74658bdbcb37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1ed160c-24e6-4b85-bf15-eaf7e3ecb997"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9371132f-d064-4927-ae3e-0f3cb3172259",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23bb6ff9-55f0-4c59-8dc8-8c8aa14755eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d92905dc-ae29-45ad-b29a-17ae21ceb4b1",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46588f49-745b-485b-b75b-cbb6d3038cc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab67071c-eed6-42f2-8239-38013bf56db5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e8711ad-bcca-4995-8dd3-a328c55e5073",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6608857-32d7-46c5-861f-091222636b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da4cc0a3-b025-4056-8939-f2e1fbc87628",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f13439c-d594-45b6-9c70-07c7dcf17b3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "631bc37f-8c63-49fd-9b7e-f075573e1904"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9ca2629-587d-4750-b93a-3bdee7fb7aaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e355cf1-4f76-4bd3-bf1b-74abb08008ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b53fd07d-f20f-4909-9495-629a600ca35a",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc54cf14-be81-485e-8153-ecb6bc4569d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffaf219e-9a8b-4ce4-aa56-29c9731acaba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8573e10-2de6-46c6-be1b-65af2541a581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99b3724a-97f1-4688-b0b5-bb4a17b8f6d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a21e87-08f8-4c33-a588-b04b2ed47d3e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ac5e1a-406e-4172-ba34-7c5a83fcf2af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32225304-450f-4b45-b400-b6ea69323248"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89e97159-f287-4988-b6dd-743172166af7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c43d77d7-0dda-425b-b5f9-09b447ab262a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc60cab7-9a06-4bc6-896a-c4256092b1b8",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f93d25d3-dadf-4391-82b7-b15de8eacd0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f4c6656-9758-4590-8870-cc565943254a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25e9900f-cc85-4f0e-ade1-288e4c09b6a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcc4cba8-c173-426a-a6bb-68645a6799d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c712155-0b43-4f19-9802-37de9c58b75c",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3f5a1a1-de75-4634-910e-2beb0843cabb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2761ae5-18d8-47e8-9085-ec44c953c6a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2507fb66-1167-43bb-9950-32e52ded72a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79a9da56-9ebd-4401-9140-e9e9b1f376d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0d79cd0-2bfa-4719-9ab4-84b1b4246d01",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7f433a9-36d7-4edb-9be8-57578459261a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c089a67-5272-40b1-a73d-a63c9fd52774"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c8917e7-20d1-446a-bfad-b93737a49793",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d1f223b-187b-4091-9aa1-df95d814b6ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9e3cafe-0e05-4318-94ff-d6a2f0c2742d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ee88b54-0ec6-4977-b76f-eb9fb429426a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e374ac36-3f1f-48f3-be05-eb8059a82520"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2017208b-3870-4260-bc6c-8cd901f67b2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fdd095f-5f1b-4c9a-b3cc-5e247d95b116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00751030-4e1f-4a0a-afd3-2a367a7e1194",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f70a1d7-ee48-4c26-9d5b-48e95542320c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83db1fb2-1722-4e4a-b7f2-b1ca13131c68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb015a5a-f3b1-40f4-9231-f308ef636ff4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87c7d1b0-5e44-4020-8b3b-4988fdaaf2da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d470752-4aab-4cb3-8f52-77dc0c921950",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6c46531-f656-46f2-8937-eddd5f2c1c94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18d83072-a149-446a-92fe-4906e34f371a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "766f48ac-91ab-4795-a422-488f2807b589",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef8a4676-2779-4301-a175-d657a7556328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bf682b3-dbf0-433b-b8e5-58b2e3888c06",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0814ffc6-0b95-48fa-89ca-5faa05f69d96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b852cf08-b429-47ee-afdb-9d05acb11556"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b5bb577-2235-4c3b-8a6e-e017b230068e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5df7fae8-142b-4d24-b6b6-a70544cf1c1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79a2f3c0-3376-41ac-bff3-5ad186538ce7",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dccb773b-af01-413c-a50d-ace0826d10fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b41106f-b21a-4fba-95c4-87dca8d4d2b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9335fe32-9744-476e-8666-4c640b4fd5c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd570436-998a-411e-9d89-e57636e64629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42b713ab-dd25-4df0-9028-6c3c32381db4",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d988678-542d-43f1-b47a-1350cd35475a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5768d73c-6b99-4352-a609-a0477e7d1be7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dca25d7e-0e96-4fcf-83e4-8ad43fd05a06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b941d9a-e642-49c3-912c-a891cd5e1de7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f24df06-61cf-4c96-9dd0-f9201f1005d7",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3026c29a-61e0-4caa-969d-706a0796fdd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9c3e60a-ac5b-4d9c-8e5b-7be20ec705f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "345450dd-e068-4c1b-a497-0eced58620f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "033a4636-7016-43ff-ad83-b53bd5ae5260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a8faa4d-76d0-4604-bc25-ac4c70c90a9d",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f1ba9bb-c1ea-484e-a46d-9e6d28ae88f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27256911-a6d4-4fdd-a835-6ad317686b94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba370fdd-b5ee-4a84-a178-3a9a6cbab066",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b1b38bd-cf0e-445b-acd0-9c4486849910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08164c67-d259-4ecc-b4a0-bd193cd1356e",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83a53e3f-e90b-4591-85d0-4366d3812241",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da98a758-b492-42a3-bbf1-387c82fdd9f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "081c2d21-32dc-41de-be61-ac3053610ab9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba6b43bf-9015-4543-a993-4e7ec5d50054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c171d65-d274-443c-90e3-cf0c57287d05",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "519b4d7d-34bb-421d-88bc-b11904fd93a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a964c4ee-4970-497c-8f2c-b162ef82d45a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "786e975f-4444-4d40-9c02-f6c1cdc1a4a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d54852d-5262-4c52-be43-518b1f5aca12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee16a48-cc79-4053-b0ec-1e5dddc9a683",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00ad9390-33b7-4547-9828-e6518f5be1e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f134ddd-0144-4231-bed8-2da87e13539b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22d96b71-c72d-4e4d-bc1c-bab37fd9c8a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e30dccd2-b366-40cd-bce1-d50cd703cc93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4101590-bf6b-422c-bda7-59a4eb9c5e99",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da4af4ff-9390-4917-9abc-5651a89c09ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bb5f80e-bcae-4ca4-a682-9080540493b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2cb6bab-df59-4e21-bce5-3ff48efcb3d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc6704cd-76bd-426d-a59d-3043ae3115ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a7171c-8110-4cea-9e26-4c01adbae9d7",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d810ece3-0c29-43aa-8fb2-1f6a24f0a472",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e766a455-6eba-4842-8812-e5c8127e547f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4e8b501-a454-473d-a41f-a3d73daa10ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "865eaaaf-1f65-499c-8cc8-cb432c3412d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3eb9864-307f-41bd-9e22-d12817bef24f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "049d2abc-9817-40d5-92c6-74f14ac50bfb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9931a36f-a8ec-4a6c-a8aa-73a6d782c2d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d71f341-d4d7-4cf0-a482-d09a4a1906bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29f295ef-a484-41dd-a912-ca7653e0a6bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba386e13-9cbd-466e-aa20-7ad8bb50eb35",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3278b67a-012b-4980-869d-0eca4277249a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "556fe964-7c70-4379-b814-6a91bffeaea8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f9ba990-2a2a-4afd-bc28-86f7cde14921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ae31f2e-0edd-4810-94d6-bc6de129ceb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd37dd9-cb26-4165-8953-d2744ed35c06",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33a16317-d1c1-4a85-be72-6a7dde009522",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da1e22c5-47ae-467e-8747-cd90fc77867c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "705fef8f-2ae9-4ae4-80be-dc28cb7684df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c47ec63d-b854-4ecc-a226-af0ce3f90371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7f49c79-ae67-47d2-b407-9cfbcdedf1b9",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ef850f9-3dd3-43f0-8de1-c88733aa614c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca2251f0-aea4-4f8d-bdd5-aabb26cc7343"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a71d90f-3478-465f-9a76-1fc0f6753977",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbdf9b7f-95b4-459b-a154-17d6aff531cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eaeb722-822f-4109-9daa-5ad7a2479bb9",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ff55096-766a-4c9a-9649-94b13b5773d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "892bf4b3-83e1-4b11-b603-04435b3a69e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "037e4a5d-78dd-44a4-a27d-7619a1771d94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34a01f53-dde4-4cac-933f-9dfe360fa5f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4960a7a2-2feb-41c4-bf86-761ba3d702c6",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5a90d34-9aa2-4966-be75-c3e332c861f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30fd5f83-7e2e-4c3c-886c-7e149449da9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a240f6fa-3154-47c2-b781-17c2f0f3f582",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7ea665b-e286-4b92-a9b0-202d4651ac24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15da0626-ce37-4fa8-9be1-f7a0d0f1e367",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bffc253-a2f8-4cf7-90a8-450085ac1925",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a75f239-bd3a-4adb-b6c4-94c6703bef5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dffae59-d7fe-4dbd-b3df-844a6c7037ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd3e4080-8429-45c8-93f4-eb1296af63e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87563347-8c7e-4ea4-a8a8-99e52b82993a",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09d50bfb-2618-49b5-bbb9-480978ae9c9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bf9ae98-ec52-40d2-86cb-6bb0b254679c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "725a553f-9cb9-45bf-ad36-decc4c4aa405",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e47b34a6-5b73-4a53-9331-e9d8e032cb08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20f30f0b-2a99-4aee-977e-cb6cf0ef1760",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c899b5a0-b558-4a80-be62-67b7bb8d5c10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "603783d0-6993-498f-b7fc-a94b55a273e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afcae435-67d8-4a83-aa64-702d269c8214",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dcc17cd-f23d-409e-af36-5c18f3be9f6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f85a2db7-dd19-43ce-b44c-243bd9fe9c4e",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad2bc52f-5eab-42b0-857f-321d8e9230ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adf65f48-5a55-432f-81d5-6903c05e6ad2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10de82fc-d0ce-41fc-a8aa-112d08f1fd68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b042b5d0-4daf-4dcc-9c5a-1c59ec0a954e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d23f24f-8bef-4241-8be7-0d94add4548b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e35f9b4-f230-4612-bae5-ef8dd6e5a8f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7d18902-fe42-4abe-b9e0-77fd04d19079"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d55e58af-8606-47ec-b0fb-e52a868e7998",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bbc59d2-e07c-4879-b66a-5287689b0f9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b88737ab-a4cc-46fd-947e-302548e63b12",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aaf641c-0dd1-49e3-a5fa-57d8dc1475cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b278593-5097-48b2-a7ab-3497b36e30ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bf39186-c022-4078-843f-0291010290c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90e1195d-8297-4895-98a9-669d972077d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e77df82-92d9-4dc4-895c-88e8fbd99270",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a7c7beb-bd49-42cc-84b1-8e1ace96b059",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "addac551-0cef-45e9-b481-768c39693075"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8b1a627-ec18-42c8-9006-b8cf8b87d4e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a642b79-7b3e-4711-96da-522b3671aed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccd1d169-1f02-4ab6-8273-c0f01dd014e4",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f76bbdbe-3eb6-4274-a65a-aeac7e58e10b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4691ac72-8af4-47a0-94a0-e084f04e0d24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e9ef33-0f96-49d1-a2af-d57672a17427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08779640-5859-4bcc-9f3b-ca53e8789035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f78ef0fe-639e-422d-ae2c-2050a084ae89",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d25d009c-105d-405e-8630-5164e6b36179",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83d3e741-1e06-4f62-8cec-13b2334c9b58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeab3628-9522-4509-87dd-af56eed3e139",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9797553-5ab7-4d0f-84d0-f3191543db59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f89e64-f12d-4d47-a30c-c397cacc1f64",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a8a4a8d-0473-4b36-a6a3-76d004ac2153",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa9ccc53-465f-4a08-88ef-50c9aa86467d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c238835-5e5d-4cbb-aaaf-436baf18c5cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf8a8184-5b5d-469d-8e86-4772cebf82d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d445578-a145-4d10-ab0d-b25c148fddea",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1347ff70-3b9d-4da5-b266-891ff9c93e80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46054fdd-2941-4434-8a2f-5eda060be4d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af2989a7-16af-4979-bbeb-acb553c3b643",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "894537a6-ddba-45a2-91a2-078d6c5819eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dcc143b-508c-478b-899f-ede64a6edae2",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de0e9f7f-ab99-4b09-9e34-9822f61cb2e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "997c278c-e438-4f7c-97a4-b5d7f9de5ad7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d1d4132-56e6-4de8-a50c-9437394d9568",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "977ec529-4ce5-4d39-9d79-b8b4a4d8b118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e7aa0ff-6cc1-4b40-9b4b-249278e618e8",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f6ecf62-cee5-4ad7-9c16-934a4f63fec4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b6851d1-9bd9-4a71-b059-22b7836323a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42455c4a-8707-418d-93e1-b2bb0ba48868",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4134dd5c-9f87-4f2c-b1f5-04e8eb790204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aece71ff-3da4-4448-aac3-26384c8a7d1e",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e44d589-8220-466b-b942-f384c196270b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b569372d-5d0f-429a-96b2-cb3ccc0b7bbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5dc821-c1d3-44a3-920a-02a9bc1fcc32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9e24b7f-532e-4012-a4e1-068d1b987e49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c897167-e7f8-4002-91f3-cae5981bd7a1",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e53499dd-d11e-468e-8b71-b9bca4658f17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44e50f35-5fc0-4627-ae6c-ebfb68db9df3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26c54421-e835-4ae3-ab40-e924c429ac6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3a8a1ff-cdfe-42fe-8088-e01706a9b246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e15d6eec-ef2f-4e13-acc7-70ff6ae1f197",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "287c7efa-38e3-4655-bcd1-53e861f64b5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3849500-a45e-451c-ab80-2791364e9d95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b57ac6-6d5c-41fa-812e-11c87b20d85b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ba67da4-07bd-4fa3-b1b1-0d5d47af61f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d5d4639-4c76-4ac3-87d0-c9b4e8c53284",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd109662-42c2-4708-a184-4fcf0113c2a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cf3b20e-26f9-4fb1-ab1b-9c009860dd3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d682a30b-3cd0-4ec3-b5bc-f7dbeb7b8cf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32eac899-c12b-4332-8013-6e4734a0ee2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dd6f110-9775-49b5-b782-c3fee23afc4b",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d1a1748-52b6-4e9c-827b-917789918463",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b621f709-55b4-4113-a81f-24c91f81d0f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b53e790b-ff44-41f5-8aaa-6ea3b68421dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9455a16b-8522-4e26-bcbe-241bd4d859b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "918e8e63-7b47-4375-9417-db82aad24616",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02d4c635-0087-42c0-81d5-8d0f88e66403",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f191779-3e98-442b-b7db-6af354429707"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05ade9f2-123d-4d1b-a9a7-2fc2c6eb8858",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03bad485-38fc-487c-bffb-382486ac1ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2dae603-771d-4a60-bd6a-79258a7d8268",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "097ccffe-fbbd-4588-a55c-f566915b9c97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32e63629-2e13-479d-ae63-d1b15e173f83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "684bfccb-e18c-4d00-b4cb-12179311200a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86db9189-a7cc-4d94-a605-724c3e79d6e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36ae10d1-63f4-4b58-ab55-ed3022127862",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a53861-4195-47c1-83ab-3e4a6185500e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "046dde4b-90d1-418f-8f02-6767d0e79b59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bf29706-f339-4de9-a613-7182292557e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a4e1b79-8758-4eab-a4ae-db24603a71ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c165af5-8ff3-42df-bd60-633f2f73189a",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ae6413-459b-422e-a5ce-7b8128a52280",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3552e4fb-af3b-45ee-89c2-4b9deef1a84b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b33a3f4-3ac6-42a8-83ca-5801a877acfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57fdcf51-99f8-42eb-bc9f-70f27626d4e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b60e5a5a-d792-4abd-86d3-f56de62aa1cd",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ea4746c-a7b5-408c-bda5-4af1dfc691b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cac6be7-3f34-4a05-8571-8a349438bb07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97a45ac9-0a14-4128-86fa-e33b150428cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afac5460-d996-4067-8776-1cedf4898a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9550379b-4d9b-4628-aa30-92fe9ec2174e",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fa8352d-9caa-4af0-acdb-6fc61e2be81d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7082a976-6065-4295-9295-d0f3b97ee8b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91b626f0-bcae-4b71-9b47-582f43cd995c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a60ee9a1-a402-4b42-bca1-9f9035ecf300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e44129-4f86-43cd-81ae-0715580bfca3",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dce4315-8fdf-42c2-a718-1327f6fa5d8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bae6f3eb-379e-45be-9ff2-b6a34f432e80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51f6b1e1-4bce-4c87-a58b-3e86b63387b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "662070dc-ee97-4a0a-85fc-704b81c756a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51271319-55c7-421b-a8e7-b5afe6df9fa8",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28a0cd8c-56ea-4915-9a82-a0e57b55fa4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "418522d5-bde5-4070-9f7c-f259b5869535"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3635c1a6-f537-4d94-8a27-ed6c7bd4e844",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17e3f327-ab62-40cf-a10b-c6f1de796c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28706689-f999-4ebd-b558-7a30985564f9",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e1e9d57-b73f-47bf-b0b2-335d554d4cae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3177cc8a-26d7-4d53-b273-559d5ebdbe13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15bedb30-53f4-4a22-a257-fdb3521e37e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1329393-d2f8-464a-9592-f7750119f91a"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c62f0ab6-1c1e-4ed8-92ef-85f4da44aeb7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "05203f19-5608-47fc-bed4-5422a2d78009"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "09343d3e-3955-4015-8659-3cdea48a6be0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7e88729c-b244-48f3-a783-b55595d8fb27"
                    }
                  }
                ]
              },
              {
                "id": "0fcaaed5-9a49-4a92-af38-990d8872d4e7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "84772f22-5f20-4bce-883b-c582110abb39",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9543eb33-46ab-4223-b312-543cc089737c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "13080d74-db66-41b0-9ac3-3cb1a1d87cf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f984f7a0-8b15-4464-95dc-5b8fe56cceee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "28ed5539-7fac-48fb-a63c-b84cedbf7fa2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5aeead63-08c6-40e1-9ad4-4730efc20e86",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d029066a-0d7c-47d9-b3ea-feea17047be1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "947c53c4-a40a-43a2-9c6b-9b822b6a209a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d46984f6-a31d-4e9b-a4ae-0a3267ebd7f0"
                    }
                  }
                ]
              },
              {
                "id": "7c69e42e-fbb8-4a29-8e4e-7cddef338668",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "75312a2e-52ad-4987-bc7b-20a91a8389a6",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "add3cf30-abe3-4ce6-ae33-3e1228491e55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "6e770eda-5d7d-4433-952d-271902f8eb80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e538e9fa-9112-474f-83bc-403240af6013",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f68ca5f-40ac-43aa-9d55-e38c0d6f5647"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "24f7b2d3-5f7c-4510-b7cd-420378a134d2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e1ff8ba7-6dab-4acf-8af2-adc2fe6a15eb",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c396a013-e576-464e-b7e3-7d16acd4b8a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "47e084bf-e86e-49e1-be02-fdab494caa40"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1ea3986f-967f-4a04-9c78-fbef6ecbf0b9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f0743e25-bf59-4ea7-9f1c-123d75469f99"
                    }
                  }
                ]
              },
              {
                "id": "eed0fd75-046c-4b1b-9bab-2723437f1060",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "11dc29ab-c6a6-47d4-b956-371b1d785b90",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b92a900d-7b9b-4140-9728-8be1770e9b98"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e4b9f8b2-ce0a-44f9-addb-e7ebbb55d45b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "35f99a6d-0afa-48f4-ae1b-c0c4adccdcaa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b9fef79a-22d1-4eae-9c11-db31b49a4ce0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "cd689be0-4ab5-482f-b7f8-ed70ae0b5555"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7108e611-66b9-4125-b292-f9b3ed9da9cf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "85fea933-3cc6-47a2-b878-a7aee7213728"
            }
          }
        ]
      },
      {
        "id": "560fbb90-6fb7-42bf-a2a5-04bf371aa5ce",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "06ae7780-6fbc-45cd-96f2-1ec6d0cd538b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "122496f9-4fd8-454c-84b9-d3ee5a9b225d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e57be3ce-4b7c-449d-97b2-3af105f6cb6e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7d2904d-f691-44b4-867b-74beb04407ea",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3f2818b2-70e1-4511-a97c-db24a5f26e35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9523a2cf-9ed5-4b92-80a6-9b97a335f321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a561a3ef-c39a-4ed2-b599-78cbe4676508"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b7a55251-4ab9-4164-83b4-1ed879910f01",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1f5f0831-5c78-41a8-bcd7-a63faa6bfe0e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e97acff-af4f-4e4e-8b54-b30028bcb721",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "45266f95-d6af-4fd8-9aee-903f45037516"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "20354989-865b-435d-9955-b23cc19a80e6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "59925e07-2506-4eab-bf52-1b641c5d2f60"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c2614782-84e1-4f20-b789-27afdb8925af",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "88c18b61-eeaf-44e8-bbb3-33cc1ea3c244"
            }
          }
        ]
      },
      {
        "id": "c5282b34-9dcd-4baf-a940-fe5b6741249f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "5145b2b3-e199-4ff2-be34-be4c5075d7f1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d27a1bd4-6d9f-49bf-8295-a870ec5634a0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f26de757-df91-41e2-8cfb-2f81360a6b43",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbde1db1-fc1d-4624-b805-1b634ea3d157",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ad70af9-b3a1-4728-bb8f-4328a044bb46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd24c6f9-425c-4df9-b768-f5c2c1b15368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a46f2c51-68fd-4948-a6af-e65294b2a292"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f5677421-b969-429f-a820-f930d9566435",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a6f7c0e8-1f2a-4cbd-b307-7139c45288d9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3aee981b-653e-4b3e-a3da-875abae1a8f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ec9068d-643e-470f-80dd-d485c6391f9e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "28349220-c070-4348-8089-a7d208f15f22",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "01deca86-7a9e-4a52-b712-9b53f37c5012"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8eb80f44-4e94-460b-92c9-aef8307c2878",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a1f2ae76-3446-425a-bbc8-4d8ce81b8641"
            }
          }
        ]
      },
      {
        "id": "6bf48433-6f8a-4cf4-a1eb-9134ad1197c7",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "f1eace39-060c-4b2b-bb1f-9c5a9b7a6741",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1595b6ae-0f8d-49ec-9739-1462c83a3d37",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "add0cc78-5bc9-4fcd-ba3c-8ac1076de909",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d417a81-cae0-4d3f-a354-1925be6d1da3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f18e636d-2254-4aaf-84cb-bb731467fc65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb9c451a-4aa0-4a91-a40e-ad5b4e1cd528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "76c022ad-bf78-4c10-91e3-df3100346e66"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "434c6d4f-7c8f-4e01-bbe6-2397f5388c53",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0eeeb320-64eb-420c-8ed9-a7120cd1f9ca"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b3c0404b-bd0a-4a16-9998-9b299d4a5039",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "515098d1-0bc4-406b-93f5-58b1343bff06"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7a7ef85d-cebf-41f3-9dad-8de1b0914361",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9e89400f-c758-4415-8558-6e525236c869"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6d8e8786-fa87-4c7b-bda4-655306211e0c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f5a5d00c-983a-45dd-8daf-1b11e710df9b"
            }
          }
        ]
      },
      {
        "id": "ed255cdd-f563-41ab-bcfd-2aa430382754",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8d1564da-0542-4161-847c-c50812c306ed",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c462e797-2826-475b-b680-72c74e0f4866",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "80c4666b-67d7-46a7-a90f-1aa6b79b2728",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ea5f48ac-efc9-47db-9719-cf15bf8dd68b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "06c71483-92fc-4a00-b0cb-902c8001b8e7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 146.4225352112676,
      "responseMin": 18,
      "responseMax": 1902,
      "responseSd": 314.4018426267471,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1695342796662,
      "completed": 1695342850180
    },
    "executions": [
      {
        "id": "11d0c1e0-48ef-4edd-a60a-67fe73eb911f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "07581c3a-0831-4a1a-8f76-d5622d1ec95f",
          "httpRequestId": "8963a6ad-7f8b-4006-a9b2-c18c04e75ee0"
        },
        "item": {
          "id": "11d0c1e0-48ef-4edd-a60a-67fe73eb911f",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b3d13ea6-8942-405a-a2ce-d7969b3e6522",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 0
        }
      },
      {
        "id": "e7295625-f145-4b2a-aacd-771130db8fb0",
        "cursor": {
          "ref": "b802c2f1-9ed4-4e62-817d-bf4777332789",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "09937480-b36e-4ebf-912c-b85eb93ae7b1"
        },
        "item": {
          "id": "e7295625-f145-4b2a-aacd-771130db8fb0",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "3b423dba-c9e1-4357-ad32-ab97964f19de",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 0
        }
      },
      {
        "id": "0327edaa-296f-4a04-bae0-41449223cf5b",
        "cursor": {
          "ref": "cb215e9e-10d2-4f3c-9b8d-5892e91c8f4a",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "9922914d-1e72-4495-b8a8-a302542b8e16"
        },
        "item": {
          "id": "0327edaa-296f-4a04-bae0-41449223cf5b",
          "name": "did_json"
        },
        "response": {
          "id": "a4ecfd82-33e5-44d6-b342-fbd456a27395",
          "status": "OK",
          "code": 200,
          "responseTime": 215,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e096b259-b8cd-4a88-acc7-09cb2f17b4b4",
        "cursor": {
          "ref": "db3cb104-34f8-4d4b-bc20-94776a0860b0",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "089dc43d-a7b8-492b-9153-31d64525ad0b"
        },
        "item": {
          "id": "e096b259-b8cd-4a88-acc7-09cb2f17b4b4",
          "name": "did:invalid"
        },
        "response": {
          "id": "4a28bfbe-c445-44da-9503-deb0935d50db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e096b259-b8cd-4a88-acc7-09cb2f17b4b4",
        "cursor": {
          "ref": "db3cb104-34f8-4d4b-bc20-94776a0860b0",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "089dc43d-a7b8-492b-9153-31d64525ad0b"
        },
        "item": {
          "id": "e096b259-b8cd-4a88-acc7-09cb2f17b4b4",
          "name": "did:invalid"
        },
        "response": {
          "id": "4a28bfbe-c445-44da-9503-deb0935d50db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84556c8a-a839-470c-bcb0-fab0f6ed17e4",
        "cursor": {
          "ref": "c0bf51f1-b6b8-4370-b46b-abaf4f6aef67",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "4ba2a1d3-00e8-4e66-bd21-76c87d798a26"
        },
        "item": {
          "id": "84556c8a-a839-470c-bcb0-fab0f6ed17e4",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "0ddd7802-c8e7-4ad6-a811-5b633769f40b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 118,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48e175aa-7bc4-4398-b874-c6f84c1a078b",
        "cursor": {
          "ref": "5b719206-2432-4f4a-9af1-13bf561a61e3",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "1b8c0022-bd6f-4218-90b2-d57ca08d8662"
        },
        "item": {
          "id": "48e175aa-7bc4-4398-b874-c6f84c1a078b",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "2ffb2df5-a4c4-4848-8d4f-5ca840c1f374",
          "status": "Not Found",
          "code": 404,
          "responseTime": 70,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "994f9a48-4abc-4dfe-81fe-1f2c84f9f6e4",
        "cursor": {
          "ref": "e85652dc-6c07-4a72-a7e3-8deff50c8f55",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "37833840-94bb-4dcd-a00c-88f016faef09"
        },
        "item": {
          "id": "994f9a48-4abc-4dfe-81fe-1f2c84f9f6e4",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "fe25304f-ab0f-4b89-9eb1-6a52bf263f6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06bcc136-7430-4129-b1a0-0a35b345465e",
        "cursor": {
          "ref": "c420e29c-2676-475d-bb7b-ea53eadce70c",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7d59ab2b-eaa9-4f2d-9f46-aff5adcd02c0"
        },
        "item": {
          "id": "06bcc136-7430-4129-b1a0-0a35b345465e",
          "name": "identifiers"
        },
        "response": {
          "id": "cc7f4d61-d688-4745-8fdc-ca4058ba677d",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c819ca26-5ba3-49cd-a26f-e19afa8649db",
        "cursor": {
          "ref": "23304563-5300-4d6b-8328-9653adc4aa63",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "088ca91c-4d6c-45ba-aad0-540fb75ca281"
        },
        "item": {
          "id": "c819ca26-5ba3-49cd-a26f-e19afa8649db",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2d6a37b8-f0ec-4b04-9ef7-298cddc32c91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a5c0705-2bc2-433b-bf35-5dc21c24a0ae",
        "cursor": {
          "ref": "cea1fd47-8b5e-49fb-8e94-5a12e24efdd5",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "18a3670b-bee2-4d6b-b6f2-1fe65aca9181"
        },
        "item": {
          "id": "9a5c0705-2bc2-433b-bf35-5dc21c24a0ae",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "fd9dd9ef-2be7-43ba-8fc2-7de1146275f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "342624f8-bf86-426e-94e1-8d90a6b271e2",
        "cursor": {
          "ref": "afabaf55-41d0-42a0-b4c2-425819ae4fa2",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ee123d4c-f9d2-4e21-9acd-d8034196ef3f"
        },
        "item": {
          "id": "342624f8-bf86-426e-94e1-8d90a6b271e2",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "1988d338-1ca0-4785-a120-8b3e207ce3b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d537a8a7-df6b-4043-aa0b-22c30f8e1e8b",
        "cursor": {
          "ref": "e3c8541a-6fc0-4411-8d20-a80262efcfd1",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ce3a98f5-8a6a-4a71-b81c-e477590e759f"
        },
        "item": {
          "id": "d537a8a7-df6b-4043-aa0b-22c30f8e1e8b",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "81a51e26-4d2c-4746-8acb-d66c64d2346b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d009efcb-fa9b-4f63-ad3e-38b64c96dc72",
        "cursor": {
          "ref": "3f09c189-2259-4823-a35b-6db48546f47a",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3fcbde4f-eaf8-4989-a373-0d74619e060a"
        },
        "item": {
          "id": "d009efcb-fa9b-4f63-ad3e-38b64c96dc72",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ef6c2147-709d-4d42-a329-bb171a9089b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03adc09c-9789-4b10-8ea0-99c367c8b482",
        "cursor": {
          "ref": "ea2a1ca3-bf89-4400-a3b0-dd6b6bd84375",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b555357f-7451-42cc-ba15-ca15b9732be9"
        },
        "item": {
          "id": "03adc09c-9789-4b10-8ea0-99c367c8b482",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "fd5839a9-68e6-4f2d-9c65-2a5dc38385f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2bc5703-4884-4de6-9e6d-60125dc4f51f",
        "cursor": {
          "ref": "7bfa5c3d-7cd9-4b48-b2a6-c4be866f8472",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d2e955fe-4c3a-4218-ac11-0c2a78cb7a49"
        },
        "item": {
          "id": "b2bc5703-4884-4de6-9e6d-60125dc4f51f",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "88982d51-a5c6-41c6-bbc9-10f1575a7d9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b85e3674-e5e1-4a55-9368-be3066030cd0",
        "cursor": {
          "ref": "ae936b42-0944-4efb-9a14-ac36e68e33fa",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8a4634f2-8f8b-4163-a5e9-88302344920e"
        },
        "item": {
          "id": "b85e3674-e5e1-4a55-9368-be3066030cd0",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4509ff6b-7fe3-408c-b25a-25b688b5a8f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57b74c77-8b05-4fbc-bd7d-db7a8165e79f",
        "cursor": {
          "ref": "e4bbca3b-d592-48b0-b2c6-373c393c7026",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ed6f6282-d49d-44a0-9acb-9cb8caaa0d48"
        },
        "item": {
          "id": "57b74c77-8b05-4fbc-bd7d-db7a8165e79f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "9c930a26-3820-4e9d-a59a-b3032bb396f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ece443c-18aa-4d4e-b1ac-0b4aa8a47848",
        "cursor": {
          "ref": "91d2d65a-ef93-4fe3-88c3-746daa0bc231",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "93b7add7-cab0-4af9-96f3-a92a8779b2e0"
        },
        "item": {
          "id": "4ece443c-18aa-4d4e-b1ac-0b4aa8a47848",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "8f2754e8-b8fd-470b-841f-869f01413bdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b4aa152-31c5-4e35-8647-29e070366902",
        "cursor": {
          "ref": "3617544a-3555-4140-885c-2eefa9514ed7",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b30d6d36-e070-4df8-8a88-697e579d4cf4"
        },
        "item": {
          "id": "4b4aa152-31c5-4e35-8647-29e070366902",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "fd8fdcd4-ba54-4ff0-8d1b-f8e1b2068758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2725fe2-ea67-4d6a-9b53-a792587f4bef",
        "cursor": {
          "ref": "5be25dc9-b005-437f-b518-481ac5642526",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "74af0bba-353b-4050-af88-bf0e37a5356a"
        },
        "item": {
          "id": "f2725fe2-ea67-4d6a-9b53-a792587f4bef",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "ac2ecde6-8c7d-4d13-84c7-19275eaf2a1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ab681c4-247d-4e41-8931-e5adffe6eaf9",
        "cursor": {
          "ref": "df1effab-9afe-424a-910c-d2490fa766d8",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "0756e1fe-9049-4576-96ca-2067856a10d4"
        },
        "item": {
          "id": "9ab681c4-247d-4e41-8931-e5adffe6eaf9",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b8888ecd-e02d-4f5f-9537-b15ffbe013ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1073a1a-d9cb-4b80-9aec-8fd2790748e4",
        "cursor": {
          "ref": "b8dd65e6-0cc4-44bd-9e14-80901b426096",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "201199e7-9cc6-4308-b806-028d76390a4e"
        },
        "item": {
          "id": "e1073a1a-d9cb-4b80-9aec-8fd2790748e4",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b2d6a9e7-995a-4bb5-9acc-c35e062611ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93f32798-11de-4b21-9aa4-5b8078d8a499",
        "cursor": {
          "ref": "eea99209-f5b3-4e9d-b232-458a254ebec6",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "53f9c8a6-af31-4207-ba5e-e1d96477b1ac"
        },
        "item": {
          "id": "93f32798-11de-4b21-9aa4-5b8078d8a499",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "b628f12a-d85b-428d-9f35-c51561704747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7e182c5-3fbb-4622-b446-1bee3d42d5bf",
        "cursor": {
          "ref": "b1b4993e-b6ea-4443-8c4c-ab7ae17a7b82",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "8fd77c1a-1d01-4357-9955-9ab579fb36c1"
        },
        "item": {
          "id": "d7e182c5-3fbb-4622-b446-1bee3d42d5bf",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "9d271d23-1c65-4d09-a571-d2d5f404251c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4257f09-a2af-494d-958a-d65182dc866b",
        "cursor": {
          "ref": "d205c3e3-7df7-42aa-91ec-699189558d7b",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "71ebe277-e9bd-4b2c-bcf5-6f8dd28ec55b"
        },
        "item": {
          "id": "d4257f09-a2af-494d-958a-d65182dc866b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "90907b3c-9527-4edb-ada2-4256f957becf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae08690c-8414-4b3e-bd6d-e18bdf1a9870",
        "cursor": {
          "ref": "a50067b2-82c7-4c98-a27a-1cea98132281",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "129b630f-8fca-4a03-ab38-df263a604277"
        },
        "item": {
          "id": "ae08690c-8414-4b3e-bd6d-e18bdf1a9870",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "134b7b3a-72ab-40e6-97a2-a3083c7578f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44e5cf63-8f81-46a5-b90c-1fc0bf31d686",
        "cursor": {
          "ref": "144c4716-33dd-4626-8531-2b8353816e48",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8e4cd670-28cf-47bf-920c-975c29e84165"
        },
        "item": {
          "id": "44e5cf63-8f81-46a5-b90c-1fc0bf31d686",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "92925199-a2df-4faa-8213-f012d96b45af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19ee6a92-b8a4-4ce4-a710-e33bd9a5a823",
        "cursor": {
          "ref": "92fd17a0-75f8-47d8-a7e8-bddba89ab67d",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "3e9adb5a-51e0-40cd-8772-8dbe906ffb01"
        },
        "item": {
          "id": "19ee6a92-b8a4-4ce4-a710-e33bd9a5a823",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "91d6ded5-19e4-4cb3-8efd-8efc84ee5f28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84b4e99a-2e94-4d95-b4da-5419ae49faff",
        "cursor": {
          "ref": "d065de99-4dd5-44df-9bdf-e7cd0612000b",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "02132d0e-e5cc-41b4-a0ae-fee09ad76044"
        },
        "item": {
          "id": "84b4e99a-2e94-4d95-b4da-5419ae49faff",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "4e9186e4-341a-4559-82f5-d24e6fbda64f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5724304c-10fb-4f90-98f2-96466dcd77a3",
        "cursor": {
          "ref": "6c6a2363-4229-4450-95f7-f82158cfc210",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "54f838e9-62e4-4b3e-98b0-dd9454701fb7"
        },
        "item": {
          "id": "5724304c-10fb-4f90-98f2-96466dcd77a3",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "7030fe68-1f62-4ddd-a195-55926f6c0294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69dfaee6-b307-4637-99a6-7920b2a565d5",
        "cursor": {
          "ref": "8d1b3dc8-3df3-4b1a-acd6-33cb1d607981",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c7b9c52f-44c3-45eb-972c-a566de9a3393"
        },
        "item": {
          "id": "69dfaee6-b307-4637-99a6-7920b2a565d5",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "a2f8f271-76f3-4501-b734-853929e9c3a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e3c27b9-9ad5-4fab-ad62-c7c6ec3f68b1",
        "cursor": {
          "ref": "50185590-4935-4391-bc0d-a90c8b010747",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "1146dcf0-e08a-4d1e-9744-ec3aad6a514b"
        },
        "item": {
          "id": "1e3c27b9-9ad5-4fab-ad62-c7c6ec3f68b1",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "db77b58a-9c2f-4ff0-8b6a-e58c652b2669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bbcbe16-d065-4b9e-886f-c89739e3384f",
        "cursor": {
          "ref": "9f87120e-c76b-4acf-893e-947eb7bf7111",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "9c53f34a-bdc8-41b9-9385-48c866d19f2c"
        },
        "item": {
          "id": "0bbcbe16-d065-4b9e-886f-c89739e3384f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "e03f0f2e-10fd-46ff-9afd-ee82035e1191",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9587d46-0b03-4a9a-9dab-b48c53f71daa",
        "cursor": {
          "ref": "3ea116f3-70f3-45b2-be5c-4c3f65fa4e41",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5119d740-bce7-41c1-b052-6ead06a220f9"
        },
        "item": {
          "id": "f9587d46-0b03-4a9a-9dab-b48c53f71daa",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "9cb88c86-4c91-45d0-ab7e-290f76cf8af4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdcc7f7b-fad3-4c18-97ea-37da2d31c7f9",
        "cursor": {
          "ref": "d15aab1b-d992-4064-bc1c-2da64834526f",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "387be510-3805-479c-820f-74407acae6de"
        },
        "item": {
          "id": "bdcc7f7b-fad3-4c18-97ea-37da2d31c7f9",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "a8667686-3e25-4d06-a502-3ec4a25df813",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fca72fba-002d-40a9-9bdf-5a34a2f19c26",
        "cursor": {
          "ref": "e51510c2-69ab-4ff4-948d-b22e1ef43297",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "57b5ffaa-9b75-46a5-8b98-d2b526e611e4"
        },
        "item": {
          "id": "fca72fba-002d-40a9-9bdf-5a34a2f19c26",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f20d7545-d36f-44d8-b103-4b844f54ac81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d23d54-11dd-45e3-9a77-b7df20b377d1",
        "cursor": {
          "ref": "0723bf60-4542-4e6c-af00-f23644b0a821",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "1d29e3a0-3b39-4af1-aee1-ed12fe579694"
        },
        "item": {
          "id": "94d23d54-11dd-45e3-9a77-b7df20b377d1",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "9d0222bc-93ef-484f-8e92-58ad31864078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a766053-10fd-4928-8505-4fdeb46e6d67",
        "cursor": {
          "ref": "8feb84dc-3028-4877-b961-6097323917eb",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "5ebe7053-e267-4d1b-bdb2-cd85339de033"
        },
        "item": {
          "id": "7a766053-10fd-4928-8505-4fdeb46e6d67",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "cfc203d9-dbdb-4f9d-ab18-f4ec8406bc31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "056f334e-db5e-439c-b968-75beb1c48b4c",
        "cursor": {
          "ref": "3123ba20-aaa1-4a06-b1b3-ad2ba40b7e9f",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "75e8965f-210e-4789-9a0c-adaff8456558"
        },
        "item": {
          "id": "056f334e-db5e-439c-b968-75beb1c48b4c",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e998aba0-c5ea-4b91-8dfe-c82edf6b2094",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "583ee60b-e962-47b0-b920-3769abb9cce0",
        "cursor": {
          "ref": "b3a8cf0d-b5c4-4be4-8aba-062a89a704a8",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a7838bf1-2e59-4546-a58b-2ca9044495e4"
        },
        "item": {
          "id": "583ee60b-e962-47b0-b920-3769abb9cce0",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "298750c0-f655-4424-99ad-3577f53e35dd",
          "status": "Created",
          "code": 201,
          "responseTime": 1902,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "dbaa68a4-fe45-451e-a9c6-ab464d2fb817",
        "cursor": {
          "ref": "21bab98d-79f0-40f1-b4f9-d7c135bd3c10",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "04966adc-6d76-452a-a1f9-58d6f9292414"
        },
        "item": {
          "id": "dbaa68a4-fe45-451e-a9c6-ab464d2fb817",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "517a8c1e-d991-4d25-aeed-2387e550a900",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "b6879a91-493c-410d-924e-6381da12d853",
        "cursor": {
          "ref": "45ebe7f7-c5cd-43c6-8d43-2ff3e8ba5d8e",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f515c945-c5ff-447c-a9cd-410519030807"
        },
        "item": {
          "id": "b6879a91-493c-410d-924e-6381da12d853",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "19e48540-3d8c-46fd-8689-cd95421a5598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f138627e-eb30-499c-93a0-2f9281559c3a",
        "cursor": {
          "ref": "efd88da3-336c-4825-a5ce-362d263a54ab",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d0ca964a-47fc-4e4c-aa4d-1b4a1d364714"
        },
        "item": {
          "id": "f138627e-eb30-499c-93a0-2f9281559c3a",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "33629417-0fe7-45de-b7e7-2c0950373652",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "540f1838-de83-4b23-b388-95b6f79e8c7c",
        "cursor": {
          "ref": "cec9746b-812b-443a-b9c7-b450314f6868",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "af3bb5e8-a255-4e73-97aa-153a1fb18eae"
        },
        "item": {
          "id": "540f1838-de83-4b23-b388-95b6f79e8c7c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "1338a4f5-4792-4d56-b9dc-9cc47603ea91",
          "status": "Created",
          "code": 201,
          "responseTime": 1524,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "dbb644b8-d8f1-40e4-b87b-1dd017b47541",
        "cursor": {
          "ref": "d123092d-18fe-4381-aceb-1962e82c160a",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e4c5e443-8f04-4a99-8c36-473a1ed1621f"
        },
        "item": {
          "id": "dbb644b8-d8f1-40e4-b87b-1dd017b47541",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e40fd147-b6a3-4a90-b103-166a13d346cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "29b9f33d-28b0-4d2c-acad-9255ed36edbd",
        "cursor": {
          "ref": "a8b10e2f-f30e-44b8-b22b-191743730e95",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "26e097a0-2612-45ba-bc3f-bd82f667b429"
        },
        "item": {
          "id": "29b9f33d-28b0-4d2c-acad-9255ed36edbd",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "4c60d717-917a-478b-a523-28b9443e9247",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1128,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "2a7712f2-4cf5-4f8a-9185-da3843c035f5",
        "cursor": {
          "ref": "12a5e365-050e-4b69-8451-adcf22ac93a4",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "08901870-1b2b-4634-af28-3b351f29f67a"
        },
        "item": {
          "id": "2a7712f2-4cf5-4f8a-9185-da3843c035f5",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "b796513f-f57c-44b1-bd2e-5c1181cebe4f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "c809949e-792d-4e77-a831-8fa458df1e62",
        "cursor": {
          "ref": "7da4f6b0-521e-471b-b40b-aeaa9c262204",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c60b45ef-1c57-4b7b-acbb-40980096d1f0"
        },
        "item": {
          "id": "c809949e-792d-4e77-a831-8fa458df1e62",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "fa0896f4-be51-44d1-aebc-f4e48775aaa5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "bc8999ea-e2f6-49c1-81d3-9560da885739",
        "cursor": {
          "ref": "a3aaf493-ad86-4eb0-81b8-1e96f3a2e340",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f2473882-859a-472b-95b5-02d2a6cafed0"
        },
        "item": {
          "id": "bc8999ea-e2f6-49c1-81d3-9560da885739",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "97d6ba5c-0847-4cf9-b344-8dd92bebddfa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "34795739-9381-4b4b-be4c-6846e348dde3",
        "cursor": {
          "ref": "f05a7cc0-cdff-4171-842b-4716829a5b22",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2cdc135f-7bf8-476e-9e4d-55f769d46196"
        },
        "item": {
          "id": "34795739-9381-4b4b-be4c-6846e348dde3",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "353e3953-8c51-4d6d-9aa5-25718c8ed0f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "b04a1f03-f596-4f2f-bdda-233dc4daf23f",
        "cursor": {
          "ref": "c22b1eb9-5e5f-4243-bc94-35af4117c191",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "64eaed24-6022-4902-8db8-2e09861f0c26"
        },
        "item": {
          "id": "b04a1f03-f596-4f2f-bdda-233dc4daf23f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b81a5e6e-cc33-4cb4-bd18-9a119b5c4286",
          "status": "Created",
          "code": 201,
          "responseTime": 1453,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "8573b7ed-7aec-444f-8ecf-aa2774d2037a",
        "cursor": {
          "ref": "9ef6824d-5913-4eea-8c3a-8e79ff16b5f7",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "398380d8-85ea-411c-b121-4b0c1aba765b"
        },
        "item": {
          "id": "8573b7ed-7aec-444f-8ecf-aa2774d2037a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "82476343-7887-4722-95d0-3c917d6a6090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def1a28f-84f2-4b42-a35b-cf767e43cb21",
        "cursor": {
          "ref": "2d7d3bec-b68c-4a15-9f19-4943af5d2b28",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "0ffcbab2-527d-4b86-a62d-1a586527bdc4"
        },
        "item": {
          "id": "def1a28f-84f2-4b42-a35b-cf767e43cb21",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "db2c9b10-cf42-460e-bd72-cd212a966125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eed87e94-2e09-471a-b100-b86995fd3969",
        "cursor": {
          "ref": "4006c07c-a275-43b7-ab8a-5c7a8bc0d680",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "0caf297d-c0b5-4977-99b5-22486708c2d6"
        },
        "item": {
          "id": "eed87e94-2e09-471a-b100-b86995fd3969",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ff79fb81-e9e9-4c2c-965d-26fb96629668",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff9fd128-6bbf-4fea-9fa9-df226806b0c1",
        "cursor": {
          "ref": "1e4f2ea7-4fcd-4e05-bf85-dd3e7f925f92",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "63909e3c-396c-4c28-a7c8-00adb5ca5db3"
        },
        "item": {
          "id": "ff9fd128-6bbf-4fea-9fa9-df226806b0c1",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "5e2892e0-3b3a-44e2-b63c-3beebcd64fee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7713aac8-8da8-4a63-829a-5e7b7da6c2b8",
        "cursor": {
          "ref": "48e439bc-5630-479d-a9bb-b6008ff20640",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "016c6ff5-c30a-4642-a2c5-39ba669c90c1"
        },
        "item": {
          "id": "7713aac8-8da8-4a63-829a-5e7b7da6c2b8",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "66824665-5849-492e-88fb-e3d024c0780c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2451674a-a42b-45ed-8dae-ec576c9c0769",
        "cursor": {
          "ref": "3385b8f9-8af7-4ab5-9918-c400029161e8",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f932bc9a-bdf1-44a3-b522-c6e6f82a26ea"
        },
        "item": {
          "id": "2451674a-a42b-45ed-8dae-ec576c9c0769",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "deab1747-1513-422c-8a56-66b462482b43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f845b4e2-d276-4ff7-9690-558f97151632",
        "cursor": {
          "ref": "25ca5d83-a58d-44a2-8661-f3a2f1b668cf",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "deef0ba9-40c6-4be7-b344-9037084400d9"
        },
        "item": {
          "id": "f845b4e2-d276-4ff7-9690-558f97151632",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "daa22626-8ede-43fe-bd86-a5b38b035777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "987388ee-95ce-4c10-8e2b-09471193e43e",
        "cursor": {
          "ref": "8a3000a8-77ee-4104-a9d6-e6519ee18987",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9dbf3ba0-f153-43f6-8358-ab5911f3e2b0"
        },
        "item": {
          "id": "987388ee-95ce-4c10-8e2b-09471193e43e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "97e6c499-7338-4582-9e58-77294de14b18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85bb2ebd-b107-456e-bd8b-bb8348782882",
        "cursor": {
          "ref": "733388b2-7483-4c65-ad79-016e31ba3e68",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "24686bed-8504-4ae0-8c7c-55f7413175ea"
        },
        "item": {
          "id": "85bb2ebd-b107-456e-bd8b-bb8348782882",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "fac7e2d0-04f9-4b65-b633-582c81cef8de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d580bb50-c442-49c4-b14b-254ba87bad27",
        "cursor": {
          "ref": "eba2b0b3-f84f-4f22-87a5-0fbe9c6d47f2",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "5956cc27-dfb7-4007-9e86-9cb393e076df"
        },
        "item": {
          "id": "d580bb50-c442-49c4-b14b-254ba87bad27",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e260e17d-ba00-452a-93f1-43ecb2b4a5d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b5d61f5-ac29-4ac5-be5e-83dd2a64d116",
        "cursor": {
          "ref": "1caefe7a-2da8-42ea-bcb5-1b6a17849f4d",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "7b743b2c-1cd0-45b4-bc8e-32bff026adb7"
        },
        "item": {
          "id": "1b5d61f5-ac29-4ac5-be5e-83dd2a64d116",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d2d23f32-5ea2-4898-ae25-d0391cf49f88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "827340ac-dd6c-4fa4-8221-8c640cf56d50",
        "cursor": {
          "ref": "0fe224f6-7e41-47a9-8a81-92fe2e8befbe",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "ab8eee7f-b04e-4fb2-b117-9f1cf9c1d2b0"
        },
        "item": {
          "id": "827340ac-dd6c-4fa4-8221-8c640cf56d50",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "a4abee44-3e84-42ef-bbb2-f5633cdbbb08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5bb48b0-0223-42a9-90b0-d0361833f38d",
        "cursor": {
          "ref": "5a62add4-0995-423d-9146-600b8afa11f9",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "8a63cda0-06f2-415f-a08f-f4ea8a208982"
        },
        "item": {
          "id": "b5bb48b0-0223-42a9-90b0-d0361833f38d",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "19f3b41e-e1b3-4e48-893f-302b719c2044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6094a2b-daff-4319-8bf1-7c7ef0c17276",
        "cursor": {
          "ref": "91d71653-1b1d-4b3d-b689-47d245d20474",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "c70849e1-e4bc-42be-8d45-1e58ca0be2a8"
        },
        "item": {
          "id": "d6094a2b-daff-4319-8bf1-7c7ef0c17276",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a79a4683-a1ec-46c2-91ec-cc4421708abe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1119,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "726348cf-e798-4fa2-bce8-1a232c68988f",
        "cursor": {
          "ref": "ed530d8f-29e1-4eec-83c7-95713600c59e",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f5ce68ef-46c1-4905-a276-f4ee61c0c13e"
        },
        "item": {
          "id": "726348cf-e798-4fa2-bce8-1a232c68988f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "2110d6cc-cea1-4bd2-a397-c7d545081d0f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1152,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "e4141260-8dd7-4318-8955-590e9c240d8e",
        "cursor": {
          "ref": "82674ee6-daab-4de5-9641-486aa400b93b",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a544d421-c88c-4fd3-bb0a-2a2025955248"
        },
        "item": {
          "id": "e4141260-8dd7-4318-8955-590e9c240d8e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "09d34360-297e-4ecd-94e1-a261a1226947",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "c4a3d979-4a0a-4bf8-85e4-92d0a4b216eb",
        "cursor": {
          "ref": "10448ed6-b1ec-48db-9048-87ac0f198146",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "bad834f5-007e-4f3d-a147-14a5dc5a275d"
        },
        "item": {
          "id": "c4a3d979-4a0a-4bf8-85e4-92d0a4b216eb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d61dcea5-7caf-451b-96ab-ea44c84f0f90",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1123,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "74d4aecd-6f01-4897-834d-b956a41f3579",
        "cursor": {
          "ref": "4af6da23-0ea4-47e1-b242-856b39b70813",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b36a94ed-1d46-41c9-afec-4dfd005e90e8"
        },
        "item": {
          "id": "74d4aecd-6f01-4897-834d-b956a41f3579",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "61a42a8d-19b3-4ad8-bc17-923957b5876d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "ad8ead58-b473-4be8-8de9-cc8ecf71ebe3",
        "cursor": {
          "ref": "a4f984cb-c9d1-4f32-bc6b-24e768611afd",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "78c19b71-44d6-4c8a-a5c7-4495455923b3"
        },
        "item": {
          "id": "ad8ead58-b473-4be8-8de9-cc8ecf71ebe3",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e3ff48d9-7fbd-4708-a607-6f34dc73feb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e015166-3788-4bd3-aeca-ac5feac292a8",
        "cursor": {
          "ref": "d27fd666-a6a7-4d49-b86f-760609469c9c",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "8c03198d-0054-402a-8ea2-92d804424fc6"
        },
        "item": {
          "id": "6e015166-3788-4bd3-aeca-ac5feac292a8",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e89c810e-edcb-40c1-8937-47d2353eaa4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06762f58-db90-4615-89e3-6e29353057fe",
        "cursor": {
          "ref": "ca3d1c92-f553-4c4f-95b5-fa26cb43587e",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "066e8d2a-cd69-4d96-a0e9-cd63a1723eb9"
        },
        "item": {
          "id": "06762f58-db90-4615-89e3-6e29353057fe",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "eb570f91-8a4b-42ef-8b9c-c13d916b6288",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2461f82-d690-4b9c-b700-e12a1da6f105",
        "cursor": {
          "ref": "13ca685f-cb3a-4324-831d-1cf3d596697b",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "d842d8c6-14b1-4366-988f-7f4e43e33630"
        },
        "item": {
          "id": "a2461f82-d690-4b9c-b700-e12a1da6f105",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "a3bc4e66-e2d5-48cb-9315-b12328d3fca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4888c7ae-3296-419d-9012-aed27ecd5cc9",
        "cursor": {
          "ref": "f2b748ee-b011-48d9-b968-14f8d143ef6d",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "20b78c96-22ab-4990-8349-2bd953fb986b"
        },
        "item": {
          "id": "4888c7ae-3296-419d-9012-aed27ecd5cc9",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "2e5ad333-5844-495f-8e66-d93aed6809c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "562701e2-564d-4dd3-a609-3649868012a2",
        "cursor": {
          "ref": "e35ee1c7-315d-4164-b8a7-8a3fe33bf7fb",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "3e963bf9-a2af-4c74-b35a-cae01886bd99"
        },
        "item": {
          "id": "562701e2-564d-4dd3-a609-3649868012a2",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "079722d5-3bcf-4831-b415-b8caddae9305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ee52bcf-d0d7-4387-ab24-8326691ce9a4",
        "cursor": {
          "ref": "ac843d04-2864-43cb-b6e8-b735be758f92",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2e4b0b40-76af-4f6b-9944-3dc0095eb1ad"
        },
        "item": {
          "id": "2ee52bcf-d0d7-4387-ab24-8326691ce9a4",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "4c72fb16-eaf5-4fcc-b32a-087faace1378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bfb4688-bd58-4ebc-9314-195be697f0ab",
        "cursor": {
          "ref": "9f563062-25fc-4f32-8a0e-33c54cd9b652",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1e3e13d2-c5f2-4ee6-a2ac-be4f3d2a0357"
        },
        "item": {
          "id": "3bfb4688-bd58-4ebc-9314-195be697f0ab",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "37a10d1a-9935-43ad-90b9-76a13f8bbde0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9a75366-d392-4493-919e-59d4aa6dae26",
        "cursor": {
          "ref": "064754ca-29d8-4529-9e3a-45d22527cdc9",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "bd3cbbed-ee88-455b-b005-3307680e5e5a"
        },
        "item": {
          "id": "b9a75366-d392-4493-919e-59d4aa6dae26",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3dd72964-f59a-431b-8e63-d61336dcb716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ccf123d-1252-4791-b034-b73239bea67e",
        "cursor": {
          "ref": "10ffa59f-bf6e-436f-af72-f6a941cbe74b",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "902bb511-0a56-432d-b536-b247eaebfacd"
        },
        "item": {
          "id": "5ccf123d-1252-4791-b034-b73239bea67e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "db1a90c4-6f46-4fcf-99ea-261a9f38d44b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9d0720e-43ee-4436-ba68-d9a9bc8a4686",
        "cursor": {
          "ref": "8f29a26c-ca88-40fc-861e-498e600c6781",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b9ef7674-8d2e-456c-b01a-0291d87044ea"
        },
        "item": {
          "id": "b9d0720e-43ee-4436-ba68-d9a9bc8a4686",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "fc7846cd-d573-4440-8679-c478d9e6929d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a617fb17-c473-4b79-9144-380342498719",
        "cursor": {
          "ref": "d5214a9a-54cc-418a-a98c-f36d07946ae0",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "97812d4f-db2d-4ffe-bb25-5d423a4c06d8"
        },
        "item": {
          "id": "a617fb17-c473-4b79-9144-380342498719",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "27163943-9b00-41f5-aa30-d3a02cc503e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3f37e4b-8850-4d89-b87c-1b9e0583dab7",
        "cursor": {
          "ref": "64e56705-71fb-4731-b2db-617da52ceb67",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "7049a2c4-11ec-40e0-bf20-888a42d8e21f"
        },
        "item": {
          "id": "a3f37e4b-8850-4d89-b87c-1b9e0583dab7",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "57121e6c-dd0f-488a-91a1-ddb64d42e390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b29990c-fc7c-45c6-883c-69e8c02c498e",
        "cursor": {
          "ref": "d601e277-3814-494d-901a-11842a505b6c",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "2d4cbb14-b662-4dbd-8890-8977e1570387"
        },
        "item": {
          "id": "1b29990c-fc7c-45c6-883c-69e8c02c498e",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "99630115-05b0-41f1-b740-90c64f3a72b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f1a26fe-55e3-4227-95ee-a6bb91fc4c37",
        "cursor": {
          "ref": "ef36b851-4aaa-41d4-a62c-e04a6e486a5d",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "cbeb37c2-423a-455d-aba9-63e0ac26b63b"
        },
        "item": {
          "id": "9f1a26fe-55e3-4227-95ee-a6bb91fc4c37",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "8897d2b2-0389-4f0c-962e-ff683e83ba4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5760ee65-619f-4d9e-a53e-e0e0a21f4d64",
        "cursor": {
          "ref": "bac16f47-f5f7-43bb-b53c-7f2cefbe77b9",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "e4987496-b277-4fa0-b5a6-905f959cebde"
        },
        "item": {
          "id": "5760ee65-619f-4d9e-a53e-e0e0a21f4d64",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ca682436-f988-412f-b9b3-2af705361b5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a807ab36-b3b6-4072-a683-78281c3fc3e0",
        "cursor": {
          "ref": "5c7b3a50-fa3d-45a0-8278-8738363798c6",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "a2fa524a-e302-4d81-98d4-afb737c64f8a"
        },
        "item": {
          "id": "a807ab36-b3b6-4072-a683-78281c3fc3e0",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c6f7af64-f0ba-4984-9f40-94d3c38daa7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db3d1442-222b-42e3-9297-58151b74df15",
        "cursor": {
          "ref": "8ff000a9-b3bc-4bd7-8db6-c2afcecebe9f",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "9420bf16-198e-43bb-9b5b-db57b4a87147"
        },
        "item": {
          "id": "db3d1442-222b-42e3-9297-58151b74df15",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "95f297a8-cf2e-4dee-b41f-fead637b6f4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4afc1c2-8f4b-4834-85b2-955a3d2e2f55",
        "cursor": {
          "ref": "efb546dd-77c7-41c9-85a2-04d1f2c9d0fa",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "6ae49e6c-c73a-4621-bb7d-ce3879c53602"
        },
        "item": {
          "id": "b4afc1c2-8f4b-4834-85b2-955a3d2e2f55",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "99263a8b-8e16-47c3-88e9-3454aa417a8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "313031e8-aff4-4e12-9901-a18489f48578",
        "cursor": {
          "ref": "3e29b07a-280c-4851-a5bf-25653cd87dca",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "963a1d36-519d-4a47-b151-5f14b19d353f"
        },
        "item": {
          "id": "313031e8-aff4-4e12-9901-a18489f48578",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "78e1530a-b39e-438b-b4b1-6c69fa1ae58c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53ae735e-0d8d-425b-8a9c-fc2263542f24",
        "cursor": {
          "ref": "ac05f375-d5d3-4276-b4b1-dc5614bbf3dd",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "93752c47-91d7-476b-a3c0-a1306d2c3fcf"
        },
        "item": {
          "id": "53ae735e-0d8d-425b-8a9c-fc2263542f24",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "1c850537-daf4-4e7e-8db9-f7c3feca99e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25b25199-2e7a-4511-bccd-eced8b2e9697",
        "cursor": {
          "ref": "aaeee578-bc1a-4c5e-a99a-7bb511b42065",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "8fb4b81b-fefc-4598-89a4-e55b7d9269d7"
        },
        "item": {
          "id": "25b25199-2e7a-4511-bccd-eced8b2e9697",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e241eea0-bbb1-4771-a02f-27aa2c21b59f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c31a26b6-bfe7-4acf-bbfa-a2efc348c4a2",
        "cursor": {
          "ref": "6dd0bd51-a02a-4006-85b2-1d68e3c784bb",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "a99546ee-dd00-4dfb-8d2a-0feb80c5275e"
        },
        "item": {
          "id": "c31a26b6-bfe7-4acf-bbfa-a2efc348c4a2",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "398d7aa0-836d-4660-b2d6-b908f3148b1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abb6c973-87db-4517-84ae-74386b36c99a",
        "cursor": {
          "ref": "f10e441c-4fbf-408e-821f-f7ad87d0acea",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "1d99c7a1-ae62-42cf-98e3-75c03336da11"
        },
        "item": {
          "id": "abb6c973-87db-4517-84ae-74386b36c99a",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "7db56ead-1ae3-493c-868f-28644535e69c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2111b5f7-b8e5-414b-a95f-4fe1d69eb8ec",
        "cursor": {
          "ref": "c91d54a1-1446-4113-8f2e-b8bc47056738",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ba0e0b5c-6f7b-401a-9a8d-159fb40ef2c2"
        },
        "item": {
          "id": "2111b5f7-b8e5-414b-a95f-4fe1d69eb8ec",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "6faeb610-e1d1-450c-b1ab-036ab81eed8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "239a9661-dd02-4290-a638-0667e3593be0",
        "cursor": {
          "ref": "59b1db33-05f5-4d50-b91e-36d80aac89b0",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "42ab0eef-bdda-4a5b-b9c9-8d5399ef43f8"
        },
        "item": {
          "id": "239a9661-dd02-4290-a638-0667e3593be0",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "302143fc-232f-49e0-bbe6-5741ecb2bbb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91dfb5fb-d680-4ec2-b6f0-814f17bec823",
        "cursor": {
          "ref": "84f9b69e-9d06-4d49-9d62-3c9a9d386d3a",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "9acc5e32-b74c-4d25-8f6e-050a2341e8fd"
        },
        "item": {
          "id": "91dfb5fb-d680-4ec2-b6f0-814f17bec823",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "e380c3a3-0694-4384-a667-dee0dbcf56b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9ec0e8c-449e-4aa2-85bc-d42daa8b6341",
        "cursor": {
          "ref": "baccf586-c702-4927-8cef-c0136c31907c",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "f077e680-6124-4fe6-bea6-b9b247375474"
        },
        "item": {
          "id": "b9ec0e8c-449e-4aa2-85bc-d42daa8b6341",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "4c5ffe81-7f63-4167-a97d-613f929a3275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "990b8893-388a-4bed-a0c9-7dc8cfe8b25f",
        "cursor": {
          "ref": "567f1d9d-9963-4390-953a-e7a637b540e8",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "fb0315c0-f777-476a-8c86-582ca4222197"
        },
        "item": {
          "id": "990b8893-388a-4bed-a0c9-7dc8cfe8b25f",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "4987b998-49e4-4c8e-b7a1-b91bae9f0542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9676535-daa5-44ea-ae82-0b2a385c8a54",
        "cursor": {
          "ref": "55b705eb-7fc7-44cf-b88b-5d234ea98f64",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "5185a789-6ce6-4a4a-86f6-4bd8c7bce2dd"
        },
        "item": {
          "id": "a9676535-daa5-44ea-ae82-0b2a385c8a54",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "cdd6e35a-f14b-48ce-bd94-ea664c0fca94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29a763b3-88b6-4b7e-b759-34cc3d57f01a",
        "cursor": {
          "ref": "5b8e018e-89c7-40e9-b772-bf32035cdd50",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "381cedb9-fd1d-44c5-9a4f-88722a79e830"
        },
        "item": {
          "id": "29a763b3-88b6-4b7e-b759-34cc3d57f01a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "e6ac32b5-9d8b-4006-b412-272705a8a777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cc8318c-6a4e-4a92-ae8d-55667b46a4da",
        "cursor": {
          "ref": "e57b1016-4190-49c6-9908-cc697c8c5c41",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "e5ee5677-95ac-4fdc-a346-b18e1ce811f7"
        },
        "item": {
          "id": "2cc8318c-6a4e-4a92-ae8d-55667b46a4da",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "429b2956-4352-4a83-8c4b-82ccd2021553",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06effa2b-959a-464f-b488-40eb43f4cccf",
        "cursor": {
          "ref": "f12370bb-6219-40bb-b420-9203515a63f6",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "6a011275-ac3b-453d-bb42-1beb06756bc2"
        },
        "item": {
          "id": "06effa2b-959a-464f-b488-40eb43f4cccf",
          "name": "credentials_issue"
        },
        "response": {
          "id": "1f53a66b-295e-47fa-b81f-b92fdd95c2f0",
          "status": "Created",
          "code": 201,
          "responseTime": 1507,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "49606a33-6f0f-465b-9526-a303b3820058",
        "cursor": {
          "ref": "00849a96-7bf8-4cd5-84fd-6d30b7f82dd3",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "eadf393d-5d22-4f77-94b4-2540a907ad81"
        },
        "item": {
          "id": "49606a33-6f0f-465b-9526-a303b3820058",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "188f365a-e009-49d3-a103-e974d9984559",
          "status": "Created",
          "code": 201,
          "responseTime": 1412,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "160917d4-77e4-4c6a-98d2-e399ece47d1f",
        "cursor": {
          "ref": "b728868f-cb75-48fb-9983-137a3b12da87",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "29205a5b-8c91-4c62-a942-e5b2626a6ad8"
        },
        "item": {
          "id": "160917d4-77e4-4c6a-98d2-e399ece47d1f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "1709e69c-13cf-4fb1-809d-62121277bf36",
          "status": "Created",
          "code": 201,
          "responseTime": 1418,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "35303b32-266e-4738-b885-4ef00032550f",
        "cursor": {
          "ref": "538e0ce5-13d2-4eb5-ad70-4cfbfc1d38c1",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ff2b61d2-7d72-4e0a-8303-3d35d04ab644"
        },
        "item": {
          "id": "35303b32-266e-4738-b885-4ef00032550f",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "9f9de7d0-6ebe-42f5-a544-1805ceb02643",
          "status": "Created",
          "code": 201,
          "responseTime": 1434,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dc1212f-3f21-43b6-96d1-e70431049fc9",
        "cursor": {
          "ref": "8f36a4e7-f2a2-4247-b0a5-ff3698a1e927",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "e86521f2-640f-46ed-aaf4-88d35347e64b"
        },
        "item": {
          "id": "0dc1212f-3f21-43b6-96d1-e70431049fc9",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "e72bb745-2203-4a15-aa21-f053bc283b6c",
          "status": "Created",
          "code": 201,
          "responseTime": 1401,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "f74dfb5f-5c88-4777-96d8-2136d6e5b791",
        "cursor": {
          "ref": "0fe44f13-d960-4268-9df3-75d72eb3acbd",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "1c39bac8-c228-4161-b9f2-ee776d687f1a"
        },
        "item": {
          "id": "f74dfb5f-5c88-4777-96d8-2136d6e5b791",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f77b1035-ab5c-4854-82da-e2b7eb9236a6",
          "status": "Created",
          "code": 201,
          "responseTime": 1460,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60e16511-41c6-4dd3-b465-03186dc5c4dd",
        "cursor": {
          "ref": "51c4c2e7-e1d8-4855-bd5a-11c7431f321b",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "8627aad3-e075-46d8-9eb9-66a30c8baf73"
        },
        "item": {
          "id": "60e16511-41c6-4dd3-b465-03186dc5c4dd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "874aa6dd-5b46-4add-8c4e-c2d66df06962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "604851d7-22fe-439e-b946-5c1cd9678353",
        "cursor": {
          "ref": "3f8ba1ce-c772-4b9a-abb9-6601a2397be7",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "5de7aca8-ccd6-4d8c-b491-e2d99ae09771"
        },
        "item": {
          "id": "604851d7-22fe-439e-b946-5c1cd9678353",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "4728597d-6373-46a2-acf5-85248898b6bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "936020a0-809c-4350-9d00-ccb097fe9b5a",
        "cursor": {
          "ref": "684f7e31-725d-4cfa-9cd9-ca6ff120764c",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "23b30ef0-b69d-4d0e-87f0-43a35ee450c2"
        },
        "item": {
          "id": "936020a0-809c-4350-9d00-ccb097fe9b5a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "8d8b1195-7756-4eaa-8255-c5e433276e77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e037a35-2a75-40c0-abea-6135c893d95a",
        "cursor": {
          "ref": "6d7a23ea-b7fa-4dba-94f7-ea4da935cd9a",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "d155ccb5-41ad-4c27-b6e9-b02475ab3122"
        },
        "item": {
          "id": "8e037a35-2a75-40c0-abea-6135c893d95a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8294170d-c69a-43e7-830c-cc8f6ebaddf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7bd9819-cf79-4572-83c0-041b9d0b53bf",
        "cursor": {
          "ref": "7e242841-0733-49b9-807a-034242545478",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "3fba9281-bad5-41c5-bf27-1cacdfc6bc90"
        },
        "item": {
          "id": "e7bd9819-cf79-4572-83c0-041b9d0b53bf",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "22d6bb27-e1e8-4f54-bfb3-6bed41af6c1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a35c7d1c-1281-41bf-9735-f2fe3d51d5f5",
        "cursor": {
          "ref": "7cfb6248-9f9c-4a26-b918-d8f2b1c8bb3b",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "99479f41-5bea-48fa-830c-e50db92a722c"
        },
        "item": {
          "id": "a35c7d1c-1281-41bf-9735-f2fe3d51d5f5",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "33ea4ef6-b624-42e4-8c4e-30316604289e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b925edae-2773-48d4-8612-1ec9e3d9a431",
        "cursor": {
          "ref": "6876220c-284d-4e6a-8946-0c400933e691",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "7b90da23-a06b-462d-8404-dbef73beaedb"
        },
        "item": {
          "id": "b925edae-2773-48d4-8612-1ec9e3d9a431",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2e4c99a1-38d0-4218-91d4-c5bcba904b44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df0a8fac-a970-49cf-a975-1d7237cb0883",
        "cursor": {
          "ref": "8a5d0598-38c8-47a9-8f14-75cdfd690ea3",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "91637761-884e-455e-b9ad-ee50853b0346"
        },
        "item": {
          "id": "df0a8fac-a970-49cf-a975-1d7237cb0883",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d6a5278e-f65d-445d-8bb7-3fe3081f0384",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e040db-58a9-46da-b35b-7407aa818494",
        "cursor": {
          "ref": "2a7a8a73-bf90-4b6a-8bcc-dc36fe8d45dd",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "311ecd10-43e9-471b-b696-c27183f8ebe8"
        },
        "item": {
          "id": "27e040db-58a9-46da-b35b-7407aa818494",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "2e873c09-9929-49d2-b13b-eb3b26e5ef04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c30689c-66f0-430e-9433-67d474380b14",
        "cursor": {
          "ref": "08db40f8-13b1-478c-be8d-674db1a673d2",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "0a730ef6-c0e9-47e0-8017-56a70d34752d"
        },
        "item": {
          "id": "4c30689c-66f0-430e-9433-67d474380b14",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c371af5c-1253-42b2-8ea1-c8d776f171e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65e7885e-f4f5-49f1-b4ed-bec0ed4bd0b6",
        "cursor": {
          "ref": "68ed65d1-e90f-4300-9570-9c071cb0e7fe",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a51ec593-6899-4106-968b-429cea941ebf"
        },
        "item": {
          "id": "65e7885e-f4f5-49f1-b4ed-bec0ed4bd0b6",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a77a7134-a004-46fa-a7e8-1e8d496e0fe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b21c241d-b68c-437c-95b8-c64dcf14e7ab",
        "cursor": {
          "ref": "f8e0b5d4-2718-4478-bd47-09aa2d8de54b",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "2456b4f8-e4fc-4090-8012-6b9ca01c72e3"
        },
        "item": {
          "id": "b21c241d-b68c-437c-95b8-c64dcf14e7ab",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0ad0c53f-15a9-45e8-9a3a-0f3e94981200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9622db6-0960-478a-8d27-07979c0ecdd8",
        "cursor": {
          "ref": "74018c18-66ec-49be-8dea-d483c004fc86",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "8596e2b4-ab5f-45a6-bc5a-33572d6ca4b7"
        },
        "item": {
          "id": "f9622db6-0960-478a-8d27-07979c0ecdd8",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5475b643-fcc1-44cb-a92f-915818876a56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dea2062c-b788-4098-b9b5-e4c613dd2770",
        "cursor": {
          "ref": "d56ab095-c141-4ca2-b303-0ad3dd72f14c",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "523b4bcb-66e7-4f2a-b994-6e02284182ec"
        },
        "item": {
          "id": "dea2062c-b788-4098-b9b5-e4c613dd2770",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9638ecdd-310c-4be4-a9ba-e979add2ff66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf692e54-6914-4d8b-8699-53353f54102e",
        "cursor": {
          "ref": "52d534ae-d41f-4df7-aa0c-ee51727d55c9",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "eb5f1104-11c1-49b4-9b48-50e9cd33a5cf"
        },
        "item": {
          "id": "cf692e54-6914-4d8b-8699-53353f54102e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "0319d07a-6976-489f-ab88-f55706c53994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8ee3d9b-b3dd-49cc-b29d-b660eaf1dc93",
        "cursor": {
          "ref": "c7abd35b-54d1-42e6-b751-f8c9ae65f870",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d1fbfe38-846f-4e4c-9f4f-4d0c183a17a2"
        },
        "item": {
          "id": "f8ee3d9b-b3dd-49cc-b29d-b660eaf1dc93",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "8b439dc2-2010-4cf7-be87-a5f70e46b643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58851900-5a69-45e6-8f6b-405b7fae4d41",
        "cursor": {
          "ref": "012b556b-eb32-405c-a61a-4974d31bdb6d",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "c476fe33-fe3c-448c-bed9-1c6b4b699119"
        },
        "item": {
          "id": "58851900-5a69-45e6-8f6b-405b7fae4d41",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5e2e01c4-fd02-4e4b-930c-e849caaa6e7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a56c2996-3ee8-4e4d-8f92-cc68ab0feedf",
        "cursor": {
          "ref": "533fa358-e9e1-4eef-af5f-27351861f840",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "1c0077a4-f08b-4854-bdb3-b50340ac8e2d"
        },
        "item": {
          "id": "a56c2996-3ee8-4e4d-8f92-cc68ab0feedf",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "60ec01f2-ef41-4d0a-95e8-3457ed162bd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "308056c1-e236-4563-9199-4698d036a254",
        "cursor": {
          "ref": "6e6bfe33-fe25-4f9a-8148-736a88cef84e",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "32e1c7eb-4c59-43e3-9723-a44e525c54e7"
        },
        "item": {
          "id": "308056c1-e236-4563-9199-4698d036a254",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7868346b-283d-4c2f-b0a3-c34e4c5c90c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01b1c270-4f47-4b8a-ae60-784cea27c2bd",
        "cursor": {
          "ref": "2cad7555-2413-4b93-9404-d50de2823112",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f7ccc41a-ec2a-42f8-85e6-cfccb287af1c"
        },
        "item": {
          "id": "01b1c270-4f47-4b8a-ae60-784cea27c2bd",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d497962d-1716-4b2e-9364-3235728accc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5eed128-a832-4479-a1aa-c1ccdbef7a98",
        "cursor": {
          "ref": "6b6413da-875d-449d-867e-baacdeb936c9",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "748a596d-f1bd-41a5-8980-9486b911ec3e"
        },
        "item": {
          "id": "e5eed128-a832-4479-a1aa-c1ccdbef7a98",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9f0776ee-de1c-4ff8-8608-0c3bf9bfcd5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1851e536-c154-4ee7-b484-830818f46f2e",
        "cursor": {
          "ref": "a974d6eb-d76f-4e66-869b-bff95bdbea76",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3a68182c-489a-431d-bbc1-2fc2fd03c2b9"
        },
        "item": {
          "id": "1851e536-c154-4ee7-b484-830818f46f2e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "fd0bbec1-942a-4eb2-b48e-e96a4221c1f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93c61ea9-89fb-47f1-bd82-c4d4c3c84305",
        "cursor": {
          "ref": "05536db0-c2ab-485d-b57d-fc970c78c417",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "f7864fdd-1329-443a-ac17-4cb8c5f07928"
        },
        "item": {
          "id": "93c61ea9-89fb-47f1-bd82-c4d4c3c84305",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "bd32682c-28ed-4219-be85-6831151e86dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88a0e35d-c73e-41bd-845e-f0dc085d4a89",
        "cursor": {
          "ref": "b43e80c2-8a73-4d09-a486-fe7626743ef7",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "fef43e67-e0b9-4213-bf58-f5fd848bd706"
        },
        "item": {
          "id": "88a0e35d-c73e-41bd-845e-f0dc085d4a89",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "51296edf-00af-4f43-ad42-fad7cbcc8c44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1be28b05-2eea-46f5-9515-53295f6da794",
        "cursor": {
          "ref": "9f2c53cf-51f6-4122-b77d-bf65a8549dd5",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "a9394687-67a1-4976-8ae9-111c078815ba"
        },
        "item": {
          "id": "1be28b05-2eea-46f5-9515-53295f6da794",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "0d4c48b4-8e53-4f0a-bd5a-c7a8dca49453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29cf4ac3-ed53-451a-93ec-03e5c13e4ff8",
        "cursor": {
          "ref": "1b1b69c4-8f76-4062-8a86-f0c9e9c13528",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "7d6b28fa-0f7d-4d6c-bd78-ec2bd8252beb"
        },
        "item": {
          "id": "29cf4ac3-ed53-451a-93ec-03e5c13e4ff8",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "80b9da02-0d1e-432e-9524-fa463fafb44c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19193c0f-6406-47cf-bb4d-ac377673fad1",
        "cursor": {
          "ref": "3adf37f7-3879-4325-8ed9-521579ce8c5b",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "08e71cf6-cdf3-4703-b2b9-a89a2ea8453e"
        },
        "item": {
          "id": "19193c0f-6406-47cf-bb4d-ac377673fad1",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "24f4aaed-9524-401b-97f2-fcdb5c29e133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b810c040-56cf-4088-a274-fab69ba50240",
        "cursor": {
          "ref": "52f4d3c7-4048-4729-85c9-dd1463606481",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "07a0b497-8d67-4c7c-b20c-eb3ee2f9022e"
        },
        "item": {
          "id": "b810c040-56cf-4088-a274-fab69ba50240",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c1a79524-2833-4369-951c-4ca11bde7d0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f51d614f-17e8-49da-a89c-341814cdc617",
        "cursor": {
          "ref": "f36b4e4b-49fd-4986-8be1-aa31c3e67eff",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "8e644c5b-6252-4558-97f0-b042550e060c"
        },
        "item": {
          "id": "f51d614f-17e8-49da-a89c-341814cdc617",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e018a111-7fc0-43e2-9edc-2dc81167f179",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c72442-1fd2-49c9-b461-dd482dfe658d",
        "cursor": {
          "ref": "94e6c63f-b572-47ab-a10e-e7cc46b313a4",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "749405de-d54e-4cfc-b3c6-fe2731d2471d"
        },
        "item": {
          "id": "b4c72442-1fd2-49c9-b461-dd482dfe658d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "025f1f59-e1f1-4f5f-8c29-54897720b297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c6cbb17-ac07-42ba-bc61-c14f82b165c8",
        "cursor": {
          "ref": "83423e80-ef58-40b7-bd5f-42703099cf2c",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4f6ab359-1a90-4c3f-b50c-338850a16ee5"
        },
        "item": {
          "id": "2c6cbb17-ac07-42ba-bc61-c14f82b165c8",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "924af17a-cc78-4f9c-a8bf-e5304f45f02b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82b0a5be-97d1-45f5-b701-aeec6972ec0a",
        "cursor": {
          "ref": "1812d540-7cf9-41f2-9cf0-9c3ee3463f95",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "2012f8ec-71fb-4045-9807-23306aaf96b4"
        },
        "item": {
          "id": "82b0a5be-97d1-45f5-b701-aeec6972ec0a",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "5f959660-fc7c-4b39-bde5-c535b976327c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80aa83fe-107f-4740-a509-8af0c2f4a268",
        "cursor": {
          "ref": "736e7f18-c107-4944-a333-49e1b63d4488",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "ada8ac8f-d7cf-4e8a-9bf2-83ef04cb56b4"
        },
        "item": {
          "id": "80aa83fe-107f-4740-a509-8af0c2f4a268",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a1d951b2-a37b-4525-878a-3f214e2e3b06",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0019a979-0709-4f6e-a6ef-ccf9194a783c",
        "cursor": {
          "ref": "ca4d7511-a27d-40b0-b427-6a125b8cd473",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "dca39fab-c8d3-4000-9a4b-e040800ee162"
        },
        "item": {
          "id": "0019a979-0709-4f6e-a6ef-ccf9194a783c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b242cbe2-d7b9-4d59-a918-5a1e032e1c3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df29e1aa-af66-4cc7-9567-37d33fb0fb88",
        "cursor": {
          "ref": "5e6ec722-63f0-4505-af38-b65bc0eb4355",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "a05dff77-dfcc-442b-913e-6f3bea85d31f"
        },
        "item": {
          "id": "df29e1aa-af66-4cc7-9567-37d33fb0fb88",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1a230f9d-809a-42bb-8d7b-85f93251ea47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "716516e8-bcaa-4939-9ffb-acad2b8f6b81",
        "cursor": {
          "ref": "e37518a7-6a9b-4911-9934-82e66543d13b",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "3beeb487-8459-4d79-9d92-7327aa741165"
        },
        "item": {
          "id": "716516e8-bcaa-4939-9ffb-acad2b8f6b81",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e97839c1-10e1-42ab-9d9e-0dce033f214a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f5de009-3725-4132-b8ac-72ac5ccccfc0",
        "cursor": {
          "ref": "0f76149c-356e-4503-bb28-5bd0067112d5",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "972b6f73-ac09-436e-b8b9-842e28b40262"
        },
        "item": {
          "id": "0f5de009-3725-4132-b8ac-72ac5ccccfc0",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "11fd6f5b-8fa8-4ab8-9100-0a06e2a93333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe665ba-8e45-4dc6-bdc2-f3c5d190bb9a",
        "cursor": {
          "ref": "fb9e7c7a-fec8-4a5f-8e6f-479bebd73cad",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "8693ee46-9951-4e96-a424-5acc31b06bf2"
        },
        "item": {
          "id": "bfe665ba-8e45-4dc6-bdc2-f3c5d190bb9a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "35642b3c-52ce-4bc4-a2ef-e592d1e82adf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "058ce475-e22e-4a6f-b04f-78a9d346b6e6",
        "cursor": {
          "ref": "8a6f5d9b-5ce1-4795-81a0-0725622f8099",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "74e55390-7220-4a16-b57d-6210ac8993d2"
        },
        "item": {
          "id": "058ce475-e22e-4a6f-b04f-78a9d346b6e6",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "02edc39b-3277-4954-8963-3838d444b7a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac9844a-bb2f-4bed-afa4-0b0c1bafc1c9",
        "cursor": {
          "ref": "c81a72dd-50f0-43fa-9fb7-1187f7abc2c5",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "9f366ca3-40da-4c0f-8fad-29f92babffaa"
        },
        "item": {
          "id": "9ac9844a-bb2f-4bed-afa4-0b0c1bafc1c9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a36f6a1a-3563-4f0e-b14e-034b43da79dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4e750e5-1a63-4983-84bd-3334dd48d4fa",
        "cursor": {
          "ref": "1a500210-f1c5-4862-94d5-8462fbb763a7",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "e57660b3-344a-4d86-9f6c-80522e2fca66"
        },
        "item": {
          "id": "e4e750e5-1a63-4983-84bd-3334dd48d4fa",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "989a3413-d053-420d-ab36-545a6ca1a3e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8c6d40a-54fa-4d60-85fd-6cfb73afec4f",
        "cursor": {
          "ref": "e1dfa05f-7db6-46b8-84f1-bd4e07ef9f07",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "3b448314-b240-46e4-800f-dab7c48a6fda"
        },
        "item": {
          "id": "d8c6d40a-54fa-4d60-85fd-6cfb73afec4f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "548180fe-42e6-4232-bbc5-4963fc9dc8d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b1edc5c-6c5f-4ccb-8988-500d898538f4",
        "cursor": {
          "ref": "d3b4ad0b-a4f1-41f2-858c-9cd6c6e7123d",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "bcaa2fd2-4256-4f37-81d2-4a6d2c524f7f"
        },
        "item": {
          "id": "2b1edc5c-6c5f-4ccb-8988-500d898538f4",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "16bd47e0-7e7b-4c06-9e51-127fff65fc11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba5e2a50-bf80-4be0-9eea-a911253649ae",
        "cursor": {
          "ref": "b265ca0d-8906-43aa-88df-9452e7ed4e9e",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "9275b88d-4447-4e2b-8fe8-4146bc5e5f3f"
        },
        "item": {
          "id": "ba5e2a50-bf80-4be0-9eea-a911253649ae",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d4b085c1-7cbb-45ca-b6f2-7d9fd0ef5af2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b920004e-432d-4a91-a93c-4436d4d8441c",
        "cursor": {
          "ref": "5646b249-4ba7-4f95-9a96-1f6626b3b027",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "fb409edc-93ec-4375-ae48-546840750b52"
        },
        "item": {
          "id": "b920004e-432d-4a91-a93c-4436d4d8441c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b67182cb-fcc9-4380-a494-799daac4df88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7838ef40-dd96-4a22-ac74-3428598939fb",
        "cursor": {
          "ref": "79998edf-2364-4bb0-897e-e9cba845280c",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "31cb6dcf-37a4-4aa9-ba2a-b4cdb8c59de6"
        },
        "item": {
          "id": "7838ef40-dd96-4a22-ac74-3428598939fb",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4e5aa313-7753-4f35-b7bb-44fa02f31dd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4919b73-74dc-4ff0-8e2a-ba07965f82ec",
        "cursor": {
          "ref": "fa91cd96-f4f9-4676-9432-2f1ca36e0a0f",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "677e4c0e-de4b-4adc-967c-1832e03a73cb"
        },
        "item": {
          "id": "f4919b73-74dc-4ff0-8e2a-ba07965f82ec",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "43b75ce0-8b4c-44c7-80a8-ee73e388e9d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eb8ac89-9039-4349-94f7-5aa18123a399",
        "cursor": {
          "ref": "41927617-b303-4c82-897e-26aa98ae5b56",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "a8c324a2-dc78-4b6a-93aa-c76b9cdb1bfd"
        },
        "item": {
          "id": "7eb8ac89-9039-4349-94f7-5aa18123a399",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9c65acce-cfd8-4624-8cc9-bcfe4b438b50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc67d187-207f-4285-bad0-4d9c2eb39141",
        "cursor": {
          "ref": "58f8eab8-ee63-4939-a37f-367ecae6324a",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "df504e69-fc54-45a4-9b15-aed9f705e4c9"
        },
        "item": {
          "id": "bc67d187-207f-4285-bad0-4d9c2eb39141",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f6b9ebdb-a240-412b-831b-b396b3865e9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a804954-5bc0-42cd-8b26-582c096f038a",
        "cursor": {
          "ref": "99c499c4-43c3-4217-9db3-092ff9f7bcc3",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "a43e16c0-2764-4ca9-b20d-22b5e09f1841"
        },
        "item": {
          "id": "2a804954-5bc0-42cd-8b26-582c096f038a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "3ac9365d-3f21-4b71-b9ee-b2a2423d418b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20319732-d260-4b47-9dd7-c458d57ba183",
        "cursor": {
          "ref": "a2fc6972-6117-4511-8949-744e46af8b0c",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "81da490e-6d64-4a00-9543-4ac5f9299577"
        },
        "item": {
          "id": "20319732-d260-4b47-9dd7-c458d57ba183",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8d9510dd-ddf8-4d08-b99e-7335722118f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ab95e56-ae6e-41ac-943d-fec6544b63d7",
        "cursor": {
          "ref": "1071191e-fe76-49cc-a01f-c757b5c8a7cb",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e9d5d595-3f4c-4f1b-910e-1ccdbf2dabba"
        },
        "item": {
          "id": "9ab95e56-ae6e-41ac-943d-fec6544b63d7",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "8c1792d0-a086-4fbd-8b11-c81ddb9a1aa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "510506ce-3c7b-436f-b169-53010da5249d",
        "cursor": {
          "ref": "42cdc529-8309-4c8d-83a9-baedadf54540",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f70d4259-6240-401e-b7e2-9246ac38de02"
        },
        "item": {
          "id": "510506ce-3c7b-436f-b169-53010da5249d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "986f6693-c446-4d55-a657-2eebf2acdc6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b262e36-d75c-4f31-921f-ef146dcd9990",
        "cursor": {
          "ref": "2b7fcd51-051e-4aa1-a203-6889ffd037cd",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b94736fe-4594-45ae-8aec-44c1f297ff4d"
        },
        "item": {
          "id": "5b262e36-d75c-4f31-921f-ef146dcd9990",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "0505df0c-0df4-4dd6-ad51-0cda304efa0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1df4d82-e88f-46fd-b1f5-b12909849683",
        "cursor": {
          "ref": "6681f37b-9562-4870-bff2-044667e3c634",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "3cf4b307-559d-433d-b623-2b361df30e24"
        },
        "item": {
          "id": "c1df4d82-e88f-46fd-b1f5-b12909849683",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "82de904d-9066-4748-8d9a-4ed8c01fda61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b6fea1e-016b-4395-8d81-f4061d66fd94",
        "cursor": {
          "ref": "213a5ca8-8f13-400c-80ad-e2dbef105fbe",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "4cb74c7b-ae53-46ef-af71-f0c235986d9f"
        },
        "item": {
          "id": "3b6fea1e-016b-4395-8d81-f4061d66fd94",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "356871cb-6f3c-455f-93c7-75bdd1a465fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72658164-57d3-4dca-bd98-58c685426132",
        "cursor": {
          "ref": "5b136c31-9589-4eee-8f07-2f6a25bc9736",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "7b8bb23d-8bb2-499c-a5c3-50f87ea039b0"
        },
        "item": {
          "id": "72658164-57d3-4dca-bd98-58c685426132",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "660578eb-b9ed-4559-bd99-4c38fb7a5a79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c95ed6b-b92b-48b2-bd6e-2c6c0801f212",
        "cursor": {
          "ref": "5528d871-55bd-4c61-ac28-34404e8adc35",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "a8c3bb37-1dd5-47fe-8c2f-1917a9f8b6b3"
        },
        "item": {
          "id": "7c95ed6b-b92b-48b2-bd6e-2c6c0801f212",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "25f78206-9938-4f3e-b36e-887380b32a22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "728cec6e-a000-458f-8d01-e55b30a62d0c",
        "cursor": {
          "ref": "6a02987f-0ff6-47e1-853e-c2d8667b1151",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "001a8bfc-ec41-4ec7-9105-8d24c8140a68"
        },
        "item": {
          "id": "728cec6e-a000-458f-8d01-e55b30a62d0c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5f99d24b-dd69-490e-9ff1-f199e334db66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b3f0b76-0d71-410f-a3ae-02744403084b",
        "cursor": {
          "ref": "66ee6316-a0ea-47b6-8902-b417d6214b1e",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "53a693c3-e004-482e-b5e1-994f27edae96"
        },
        "item": {
          "id": "3b3f0b76-0d71-410f-a3ae-02744403084b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "98f433b7-30f5-410a-9f66-e08187a12a92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a4c488f-7e47-4591-b9c4-0306d4bb2253",
        "cursor": {
          "ref": "7fb30649-be86-44cc-9359-1d84fabfe4ce",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "87fadf6c-3a75-408c-8629-1bc2dc570f57"
        },
        "item": {
          "id": "4a4c488f-7e47-4591-b9c4-0306d4bb2253",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "81f934f0-6337-421d-888c-00f591ddb84a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a5e2dc6-d7a4-4e47-b3f4-712c46968219",
        "cursor": {
          "ref": "322b6de1-5868-4571-8533-75d400a6379f",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d12dcb8c-a344-4e0e-931a-92f5a596f571"
        },
        "item": {
          "id": "9a5e2dc6-d7a4-4e47-b3f4-712c46968219",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "aec99191-e10d-4dd8-9341-1255e8ac2408",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a087110-179d-4726-96f7-8ffd37acb5ff",
        "cursor": {
          "ref": "8583380e-0ff2-4701-abcf-3928f30e5b04",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "7a2b2cd0-cc88-4a2c-9c3e-30f43bdec224"
        },
        "item": {
          "id": "0a087110-179d-4726-96f7-8ffd37acb5ff",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "241e2abb-ff25-49ef-a946-47142f944c7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ca786be-5057-4aa9-9e3e-1decb55404b3",
        "cursor": {
          "ref": "f170de4b-4953-490e-8656-facc662e13e4",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "ce14d9c5-9732-49ff-baf8-4fbdeae9b221"
        },
        "item": {
          "id": "0ca786be-5057-4aa9-9e3e-1decb55404b3",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "941b171a-d822-4a71-9fcb-9c41ccc3d2a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12a79de3-19bd-470b-b338-853db7223656",
        "cursor": {
          "ref": "e5a0c3ec-1960-4114-86ae-37c21a5afc64",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "07719366-5227-4f9b-811a-e9c0198cb389"
        },
        "item": {
          "id": "12a79de3-19bd-470b-b338-853db7223656",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "3c7da396-376c-4d89-8d71-bf3ca48c076d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaf34e8d-f35b-4714-b3b7-a8fd90dffaf5",
        "cursor": {
          "ref": "d5f03b5d-3fcc-4793-92fa-1184f6b8acd9",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "9f0a96ab-ada2-495f-95fe-933539e2bf3c"
        },
        "item": {
          "id": "aaf34e8d-f35b-4714-b3b7-a8fd90dffaf5",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "12bb5f72-8eaa-495c-94ec-8d6e5eb280f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d36f8f9-bffc-4ee4-9eb5-6b29cad1a586",
        "cursor": {
          "ref": "5105e832-9d4b-425e-8b0e-88c18c0849ab",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "38882366-ce43-4144-b820-07cbb8f7546e"
        },
        "item": {
          "id": "6d36f8f9-bffc-4ee4-9eb5-6b29cad1a586",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "90795dcf-b793-4156-9ab7-3f6242ee4ae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50a9b847-6c04-4395-8e00-29616d7b7db8",
        "cursor": {
          "ref": "620b5cfe-00df-4f60-94a9-481880bf2d6d",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "782479b0-dde0-4dc0-80d9-63d8c78de965"
        },
        "item": {
          "id": "50a9b847-6c04-4395-8e00-29616d7b7db8",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "532050dc-9f29-4263-8c7f-3e33f1d009d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e48fb5ad-bf75-49bb-9387-1c239c8b0a2d",
        "cursor": {
          "ref": "45ce373a-6135-402d-a6dd-de90c678eb68",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "89eb55e8-81f5-46fb-81cd-e9a11bfb6fd8"
        },
        "item": {
          "id": "e48fb5ad-bf75-49bb-9387-1c239c8b0a2d",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "39be00ca-fbde-43f4-958b-c1bc7363b538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91bd5d65-3608-431b-8e7e-5024b51e3451",
        "cursor": {
          "ref": "aec4ecd6-5f4f-45b9-a668-970c681acaf7",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "6962a0f5-a6fe-41c7-b70c-2fb053c5f43f"
        },
        "item": {
          "id": "91bd5d65-3608-431b-8e7e-5024b51e3451",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "0fa33d48-ccb9-4896-b6f5-0456bc7887d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "290e96d8-57d8-4402-bd70-6c62bc2cc6fe",
        "cursor": {
          "ref": "8e508df0-2ed4-4c39-a104-5de900cc487b",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "fef6e5c4-e9c3-4f5c-8906-a2133e7adbe8"
        },
        "item": {
          "id": "290e96d8-57d8-4402-bd70-6c62bc2cc6fe",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "65861034-681f-49a6-8af4-15369ae4676f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16e04441-f5e0-4c43-bf9e-105a48563b1a",
        "cursor": {
          "ref": "8f3f9470-4f4a-435d-8624-103fb7506fa1",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "432b2e8a-ca8f-42bd-b52f-dc6040e03974"
        },
        "item": {
          "id": "16e04441-f5e0-4c43-bf9e-105a48563b1a",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "50e53821-30ac-4153-bc25-1c9191e0c4f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5910eb3-4fe1-4603-a88c-2279d528a006",
        "cursor": {
          "ref": "bd940888-f567-4097-b975-a9a1c0bd7b72",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "e7e09275-bc69-4b4a-96f8-1e4210317466"
        },
        "item": {
          "id": "e5910eb3-4fe1-4603-a88c-2279d528a006",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "06679782-5b18-4705-9ca0-86dd718a516d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aefe3685-39c4-4170-b6b1-51eeade49931",
        "cursor": {
          "ref": "9aae962d-8831-48c6-9143-166a2ce6ee5f",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "9790a459-9851-452e-a3bc-d35880cc728d"
        },
        "item": {
          "id": "aefe3685-39c4-4170-b6b1-51eeade49931",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e8fcdb67-7c62-4432-a224-c4fdcb5112c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8355b022-52a8-480d-9ed8-e30cff93ab39",
        "cursor": {
          "ref": "7c86a617-e7ce-4c53-900f-a5dcbb55f9c9",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3d464299-1a13-4997-9587-c99db4624757"
        },
        "item": {
          "id": "8355b022-52a8-480d-9ed8-e30cff93ab39",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "badb0256-ba0c-4f8d-b15c-e2b1ad0836b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1225c0d-5e6e-4e08-9cad-e828baf937b8",
        "cursor": {
          "ref": "3b0b0ddd-49ef-4a5c-8309-b4b68f9beab9",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "e3331677-6b6c-41f7-9773-e6b20976cd78"
        },
        "item": {
          "id": "e1225c0d-5e6e-4e08-9cad-e828baf937b8",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "c5f75c5c-6fc4-4d46-b281-8c6772efc741",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82b96aea-70b9-4d37-9820-3ca2aecb2720",
        "cursor": {
          "ref": "c14d0ff8-a4cb-4483-b355-e55e3c4f347b",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "9c0b6b9f-90d3-4316-a61c-157333ef1bc8"
        },
        "item": {
          "id": "82b96aea-70b9-4d37-9820-3ca2aecb2720",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "31db698a-6753-4eb9-8f26-b7efee7f826d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "39af1238-1937-4efa-8c54-415f3b9d3fbc",
        "cursor": {
          "ref": "cce4e335-f9df-4475-b06b-b1cf0e8e0b8a",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f03c19cc-6e2b-4479-a545-cc88721124f0"
        },
        "item": {
          "id": "39af1238-1937-4efa-8c54-415f3b9d3fbc",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "482f689f-8582-4d13-b017-bf9b9430b2a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27a5a140-d514-41ea-81d3-e47b1b0c9d01",
        "cursor": {
          "ref": "d459c7a5-579b-4831-9b20-decbe0943d50",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "71451544-2fc6-4c8b-9a98-9f515853ae1c"
        },
        "item": {
          "id": "27a5a140-d514-41ea-81d3-e47b1b0c9d01",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "cece9581-a934-4595-a625-279991fae78f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da1ef565-b362-49d5-a6f2-873f88c6a45c",
        "cursor": {
          "ref": "d0e0f58b-977d-4215-b8c7-ed9174fa7a93",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "705d2411-eba8-4d24-b10d-429fb1b2ce4e"
        },
        "item": {
          "id": "da1ef565-b362-49d5-a6f2-873f88c6a45c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "1aba07a7-2823-407c-a8a1-0020cd732ead",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d97d3c-1f73-42f5-a761-63f8057d50d8",
        "cursor": {
          "ref": "09d035a5-10a1-42b5-8270-81cc67d83c0a",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3d03fcae-50a7-4fdc-a90d-6a8d776731bc"
        },
        "item": {
          "id": "94d97d3c-1f73-42f5-a761-63f8057d50d8",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "389ca781-8468-40a5-bce5-decbc4849413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a69f9b-0c51-4fbf-9102-77a4e787aae9",
        "cursor": {
          "ref": "da683455-77c8-4c32-a034-46fd8554a07f",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ce75960e-d673-4fe3-8ec3-68f6a26f31ae"
        },
        "item": {
          "id": "91a69f9b-0c51-4fbf-9102-77a4e787aae9",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "8a95fefe-c75a-403c-9c59-9afe1d6d89e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4247ec42-38c8-4b03-9ddf-493989b4ed11",
        "cursor": {
          "ref": "53913cfe-058e-4507-95fb-1d5252d741a8",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "d9026a10-5044-4823-b802-d595f04dc852"
        },
        "item": {
          "id": "4247ec42-38c8-4b03-9ddf-493989b4ed11",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "ea2a71e0-c8c7-41b2-a087-ddc1159fe7ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb09cdca-96f7-47be-b164-5977844b716b",
        "cursor": {
          "ref": "57ff8716-dc16-4288-822a-2139db8e5342",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c701680f-7d12-458a-88bc-5e4c24df4e76"
        },
        "item": {
          "id": "fb09cdca-96f7-47be-b164-5977844b716b",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "22f2fcf5-afa5-42cc-92c8-9c57152014ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cca65ae3-ade3-43a9-b092-3ae7df431a71",
        "cursor": {
          "ref": "5ea5d560-9583-4370-bbc3-ed313d348307",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "38a362fb-752f-4fa4-bafd-5008e0773904"
        },
        "item": {
          "id": "cca65ae3-ade3-43a9-b092-3ae7df431a71",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7b7576c2-ae17-4053-b3ab-511f54280793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8120baa-fcaa-417b-a35c-9b9ee654ecda",
        "cursor": {
          "ref": "bef9b647-e5ca-4228-954b-a307dd9d870d",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "2e5ea2ac-fbc4-4013-89bc-19b2376a2eaf"
        },
        "item": {
          "id": "e8120baa-fcaa-417b-a35c-9b9ee654ecda",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "17f6626e-df54-49e3-82aa-da1c847f441f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eda64c52-83d0-4488-908d-a81a967f45df",
        "cursor": {
          "ref": "79f028d7-0d49-45c5-808e-c2d5c2429db6",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "aed9a82b-500b-4a8c-8b76-c2a1dbe01478"
        },
        "item": {
          "id": "eda64c52-83d0-4488-908d-a81a967f45df",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "d1695f4c-19c2-41db-aea0-caf25d0ef7a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab514190-04fb-45b0-8ffe-1c6510041ff2",
        "cursor": {
          "ref": "27f59a1e-6ebe-4556-93c5-d25f2e3b3b3c",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "3111445a-f229-4fd3-b35b-d666e1b0869a"
        },
        "item": {
          "id": "ab514190-04fb-45b0-8ffe-1c6510041ff2",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "d0b1dbe0-277a-44ae-92a3-76588276a458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74ede20a-c705-4dec-a25a-f1824bf7c76b",
        "cursor": {
          "ref": "377eb471-5fdf-46ff-bfc8-f31b5af3a4b9",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ddf33a4f-d3dc-456f-b624-3ece02d861ef"
        },
        "item": {
          "id": "74ede20a-c705-4dec-a25a-f1824bf7c76b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "879f1637-c763-4df8-806e-e6ec0a501f1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f17758b-a82f-43ee-9c0f-08c57e5e8f86",
        "cursor": {
          "ref": "23fb57d6-3d74-4193-ac00-db74d4384a22",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b8e7b2ae-b5f3-43e3-8a56-feeb7b33f372"
        },
        "item": {
          "id": "9f17758b-a82f-43ee-9c0f-08c57e5e8f86",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "b55d20f2-d33e-43eb-89c7-635754b5033a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edd38a09-0677-4bc7-a0dd-feb329d10bc6",
        "cursor": {
          "ref": "2ba1099d-afbc-4034-8c2e-8009ca65b230",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "2bc3c6f9-23f4-4195-9113-85434d77f2aa"
        },
        "item": {
          "id": "edd38a09-0677-4bc7-a0dd-feb329d10bc6",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "e2db1ec1-ad00-490a-8aa9-dcfbe464435f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27915caa-4244-4e33-8aa6-e58c115ab529",
        "cursor": {
          "ref": "e93832d0-cd69-465e-aec4-8dbc69371970",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "cf0f7b63-0716-4ca4-8fa0-7e868ff8ef58"
        },
        "item": {
          "id": "27915caa-4244-4e33-8aa6-e58c115ab529",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "49a7ddd2-3935-48eb-8bcb-7f4f209e0d0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc517370-5e2d-4fcf-a1ed-d8cf0a530e90",
        "cursor": {
          "ref": "35dda328-5fd7-430c-af6d-45badac5b961",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "5b592aab-3fb2-4420-a8ba-97ddcce82bc6"
        },
        "item": {
          "id": "cc517370-5e2d-4fcf-a1ed-d8cf0a530e90",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "be7a1ea0-3716-46b8-bb0d-8c8c658ddbd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "841193c2-7686-41fb-a356-af6b89453cb8",
        "cursor": {
          "ref": "0d0fe27f-14c0-4bb8-9b59-2fa7d738f3d9",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "be3b5702-ac80-4661-94e0-9c8f01341e10"
        },
        "item": {
          "id": "841193c2-7686-41fb-a356-af6b89453cb8",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "54f100a2-8ff4-48b1-acac-b30da973d8b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa52d27b-bfc2-40b0-82ce-efe00a4fd342",
        "cursor": {
          "ref": "837248f7-8e98-4df2-99e2-6e51ab670690",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "47917110-44c6-4bfd-ac4c-20c93dd43fa9"
        },
        "item": {
          "id": "aa52d27b-bfc2-40b0-82ce-efe00a4fd342",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4382e86b-16d9-49e0-912a-73c3b6a906e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "832d8659-75b5-48cc-8e50-e776b0479840",
        "cursor": {
          "ref": "3c6f6a60-96c2-4a48-9f61-a5364c81e232",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e70c0f64-419b-449e-9f6f-e33d2ba1d487"
        },
        "item": {
          "id": "832d8659-75b5-48cc-8e50-e776b0479840",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "0f4e2fd3-a287-469b-95e5-44884ee31f24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24df9567-819b-4c7a-86fe-22bbe89b892d",
        "cursor": {
          "ref": "4fae4179-603a-4471-b2c8-7d6a0befcbbb",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "adf94819-9491-4234-bded-4bedd7f61e94"
        },
        "item": {
          "id": "24df9567-819b-4c7a-86fe-22bbe89b892d",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "2d0ca6e3-7653-404a-86ee-71a872577699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0176b19e-eb6b-4a95-a92c-729c3a1ee4e9",
        "cursor": {
          "ref": "0754324b-3233-4901-97c5-e52c311a12f3",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "8fd1c23d-82f1-4ec6-8d0b-d27ca7dda62e"
        },
        "item": {
          "id": "0176b19e-eb6b-4a95-a92c-729c3a1ee4e9",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "8a987915-4e9b-40e0-aeaa-d503a2749723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3746ec5a-c4d1-43a2-9fa8-cb01cacec230",
        "cursor": {
          "ref": "45a0117c-f179-48d2-9e15-0685932c33e2",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0f8688df-a369-41d2-9cd4-c9748604843b"
        },
        "item": {
          "id": "3746ec5a-c4d1-43a2-9fa8-cb01cacec230",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "d391f8a4-88e5-4de1-a428-174bf0794218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca7fe16d-5ce4-4db9-8d30-694fea622340",
        "cursor": {
          "ref": "d530904b-ec1c-45f0-bfe9-872aa34403cf",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "4a07503d-cd98-4ec9-9012-f1d8c1af34f1"
        },
        "item": {
          "id": "ca7fe16d-5ce4-4db9-8d30-694fea622340",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "a3d1fb64-3d0b-4a6a-b4d0-6de3e1d5b86a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bae11cb-25ff-400f-bacd-d2ebc46a21c2",
        "cursor": {
          "ref": "a01aaae1-3c44-43fb-9f72-cb1e2b237e7a",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c3a03dc1-7436-4ded-b419-bcc087503500"
        },
        "item": {
          "id": "4bae11cb-25ff-400f-bacd-d2ebc46a21c2",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "6adde974-a250-4f68-8a58-30db2bd642c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b382dacd-3d7e-43ec-8856-854c11e089cc",
        "cursor": {
          "ref": "a56296c4-790f-4e69-b483-e6607bc18997",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "4af6d432-c7db-4a06-8936-e687362f9952"
        },
        "item": {
          "id": "b382dacd-3d7e-43ec-8856-854c11e089cc",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "29acf145-6ea9-4057-a0fb-597bd2c344c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0881a06-292d-4f7d-a345-19ee711b17aa",
        "cursor": {
          "ref": "e8dc9e53-46d3-4083-b27e-e5e1901b6c94",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a9fb20da-44f5-4973-9898-914b737a1cea"
        },
        "item": {
          "id": "b0881a06-292d-4f7d-a345-19ee711b17aa",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "0cbc6b43-f02d-4af3-81d1-3c8a2907066d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab704f5b-2a8c-4d8e-8a50-7ace4c0d70a4",
        "cursor": {
          "ref": "e9f917b7-bc9b-4527-a6d1-fb2e5c569f06",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "e9636337-d622-4646-9726-11d6a822dfc0"
        },
        "item": {
          "id": "ab704f5b-2a8c-4d8e-8a50-7ace4c0d70a4",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "3baa67f6-e23b-4574-a01e-7925d4660014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc84d568-ce15-439e-81fd-757fec2f9414",
        "cursor": {
          "ref": "7d98991b-26b7-479b-bd09-dde6e98e0b42",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "96fe085e-97b2-4fbc-ab19-491cd9a74e94"
        },
        "item": {
          "id": "bc84d568-ce15-439e-81fd-757fec2f9414",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "42bf78fd-3ff9-4105-9d67-b353af4e639b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b02da799-7263-4bd9-a29f-9efc9fc06cbf",
        "cursor": {
          "ref": "a4dca999-979c-4ad6-bb69-9f33b2167725",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "2bea109a-9b47-473d-8b42-21731e48203e"
        },
        "item": {
          "id": "b02da799-7263-4bd9-a29f-9efc9fc06cbf",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "1a2159e2-a0b4-4bec-846e-1c51c37d8911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0be1c1d9-9504-4589-a18b-b8917b8715b4",
        "cursor": {
          "ref": "8fa13061-1bd8-4e19-b1d9-fc0ce581fc56",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "dba4bf4b-4132-4d77-b8e0-a3d8e2857e93"
        },
        "item": {
          "id": "0be1c1d9-9504-4589-a18b-b8917b8715b4",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "65086582-c9a1-474e-8598-f50aa70a377e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "2fcd535e-8011-49b6-8a44-284f02be9e3f",
        "cursor": {
          "ref": "7767a896-357a-447e-b1da-89e9fc46f0ab",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d56758a2-6311-4382-b2bf-e50f7f29ce65"
        },
        "item": {
          "id": "2fcd535e-8011-49b6-8a44-284f02be9e3f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "e2285dcc-ca69-4540-a6af-02231c89905d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "93f2d4f0-deec-4944-88ba-55079d96a5f0",
        "cursor": {
          "ref": "a84a7ce7-5967-4929-a71c-2ebf1b2aaa65",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "6cca49b6-f51e-4291-be5d-96760cb5dec5"
        },
        "item": {
          "id": "93f2d4f0-deec-4944-88ba-55079d96a5f0",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "1b1bfccb-0616-4c8a-af7d-e1bb69dbe1e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "09244478-8fa1-488b-8dff-2bb31b93b40c",
        "cursor": {
          "ref": "22487e45-c3eb-4d26-b02e-ebebc677cff0",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "127c7ae0-b21b-450c-a385-f68a9fabfd4e"
        },
        "item": {
          "id": "09244478-8fa1-488b-8dff-2bb31b93b40c",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "0beeebbb-9505-4f09-85dc-1253b2c81934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a657eda9-43a4-45d7-b4f5-2966c118344e",
        "cursor": {
          "ref": "559ca98a-d6fd-4e49-9e13-a388ce5f2215",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "dcf80820-2d77-4b79-b9e2-81d9766f2955"
        },
        "item": {
          "id": "a657eda9-43a4-45d7-b4f5-2966c118344e",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ff6b7ad7-b15f-49bd-b23c-35e1a6ab2e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "5f3b2792-41ef-4c96-a1d0-ae1b6ca79a41",
        "cursor": {
          "ref": "868633cd-98e2-42cb-bb7f-a30a80b3ed74",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "28dfc4b5-0679-46c8-805e-99ec79c68b96"
        },
        "item": {
          "id": "5f3b2792-41ef-4c96-a1d0-ae1b6ca79a41",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "1fd11857-f54a-47b3-a200-cbd4151e49f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1097,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "b1ddb50e-accc-42ec-b46c-bfe3896634e7",
        "cursor": {
          "ref": "f6d80854-ebc7-425f-8ea0-dded30e1b46e",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "54b82001-e0b8-484a-9d6f-5a3159047a62"
        },
        "item": {
          "id": "b1ddb50e-accc-42ec-b46c-bfe3896634e7",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "fa31c62d-5563-47df-9951-6e4bef2adc8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "f14c3298-7dbb-4232-af6a-10ea64b445f2",
        "cursor": {
          "ref": "039e20ad-8310-427d-ab94-b67a65e73a70",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "6e843d75-3ed3-4ac4-b645-c038c6bec592"
        },
        "item": {
          "id": "f14c3298-7dbb-4232-af6a-10ea64b445f2",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4329f8c8-42b5-45f3-ab51-4d5872da1e15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "e0ce7f61-af20-478a-ac2f-938251ff723f",
        "cursor": {
          "ref": "53150905-3688-483e-aa4c-bcb1a356cc2d",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c74f1db5-9128-421d-a02f-d59b5c0fbc79"
        },
        "item": {
          "id": "e0ce7f61-af20-478a-ac2f-938251ff723f",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "2ba66562-b702-4212-ae92-ea06c5c83c1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "d92905dc-ae29-45ad-b29a-17ae21ceb4b1",
        "cursor": {
          "ref": "f265bec9-e0f9-44b0-95be-41a73305f69d",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "e60e2e28-cbd7-424d-8f0f-db9ce94619ae"
        },
        "item": {
          "id": "d92905dc-ae29-45ad-b29a-17ae21ceb4b1",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "b95cb8f0-78d1-47b5-9ac7-86287e111f94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "da4cc0a3-b025-4056-8939-f2e1fbc87628",
        "cursor": {
          "ref": "7afe0002-4367-4097-a049-42a14523b665",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "cca098f3-2ce7-4572-92b7-5e85b618fee8"
        },
        "item": {
          "id": "da4cc0a3-b025-4056-8939-f2e1fbc87628",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ade4aca4-b025-4bf8-ab74-4de6aecd6aee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b53fd07d-f20f-4909-9495-629a600ca35a",
        "cursor": {
          "ref": "bea0274f-cf55-4ce8-a7fe-5f85d35e542b",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "b020c1eb-6ebc-4874-bf96-e258bd68f3db"
        },
        "item": {
          "id": "b53fd07d-f20f-4909-9495-629a600ca35a",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "0e700abf-6171-46a0-9477-594108148b22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a21e87-08f8-4c33-a588-b04b2ed47d3e",
        "cursor": {
          "ref": "1bf8c1c4-cc53-417c-8eea-f6ccf1589dab",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "27272a23-b7b2-4a4b-bd2b-625fbf48af52"
        },
        "item": {
          "id": "a5a21e87-08f8-4c33-a588-b04b2ed47d3e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9909b2a4-c010-41ba-9e2a-f8e40ce17ccc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc60cab7-9a06-4bc6-896a-c4256092b1b8",
        "cursor": {
          "ref": "3d55506b-891b-43ab-a42e-beafa6d356b4",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "b7462c22-8a90-4a8f-84e2-67db9637c2f4"
        },
        "item": {
          "id": "dc60cab7-9a06-4bc6-896a-c4256092b1b8",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "70f91143-f402-495d-b1eb-f8cbb4be1161",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c712155-0b43-4f19-9802-37de9c58b75c",
        "cursor": {
          "ref": "751cf493-5df2-4ec8-abdf-04b243260c4a",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "1f95715c-9a4f-4596-b0de-ac6feea42790"
        },
        "item": {
          "id": "2c712155-0b43-4f19-9802-37de9c58b75c",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "7f1bfb32-c6e7-4cb3-9cd2-0180c54b2a55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0d79cd0-2bfa-4719-9ab4-84b1b4246d01",
        "cursor": {
          "ref": "1fe4ffa2-2731-47e5-9f0e-381cb475593f",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f8922afb-1df9-424a-a2fb-f894aa8e4a01"
        },
        "item": {
          "id": "c0d79cd0-2bfa-4719-9ab4-84b1b4246d01",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "dbec2428-9c48-4941-9e62-a93a5c4beef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9e3cafe-0e05-4318-94ff-d6a2f0c2742d",
        "cursor": {
          "ref": "6391fa66-b4dd-4a96-b707-8f1b8ef7f9dd",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "f08d559c-b146-4a33-aa59-18e85e9c2217"
        },
        "item": {
          "id": "f9e3cafe-0e05-4318-94ff-d6a2f0c2742d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "8ede5726-f9e2-48f9-9d81-10491668d9f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00751030-4e1f-4a0a-afd3-2a367a7e1194",
        "cursor": {
          "ref": "d8ced399-9618-4724-b629-a59257167ef7",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "5896ae02-abdc-4e76-9b53-283249211031"
        },
        "item": {
          "id": "00751030-4e1f-4a0a-afd3-2a367a7e1194",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "33b79915-49bf-47fa-b1b6-77fbc51e1824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d470752-4aab-4cb3-8f52-77dc0c921950",
        "cursor": {
          "ref": "1670f948-bb33-4dc6-81b4-e5e966b69066",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "05120755-00b6-4a41-83c6-8f3ab6f5f7da"
        },
        "item": {
          "id": "5d470752-4aab-4cb3-8f52-77dc0c921950",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "0b59980d-f84e-4832-b62f-305d4f0504fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bf682b3-dbf0-433b-b8e5-58b2e3888c06",
        "cursor": {
          "ref": "5f4fa6cb-920f-469c-89c2-9f151ec9c3a4",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "5e958fe5-7fe5-4e20-abee-b13af660e771"
        },
        "item": {
          "id": "4bf682b3-dbf0-433b-b8e5-58b2e3888c06",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "30067636-847a-4a90-9b3b-4586d3b18d07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79a2f3c0-3376-41ac-bff3-5ad186538ce7",
        "cursor": {
          "ref": "d1145502-b6d6-4c8c-81eb-4f3f51b449e5",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e461d479-1bdc-4b61-984a-bee684d05fc6"
        },
        "item": {
          "id": "79a2f3c0-3376-41ac-bff3-5ad186538ce7",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "dafdc1b3-cc21-457b-bad9-fc8d5f829456",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42b713ab-dd25-4df0-9028-6c3c32381db4",
        "cursor": {
          "ref": "ed491e4a-6340-472d-a6ee-36d19c69dc09",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "882ce420-95dd-4b68-be88-4b785d273e1b"
        },
        "item": {
          "id": "42b713ab-dd25-4df0-9028-6c3c32381db4",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "53cbf326-c019-43d3-b96a-0fde426885b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f24df06-61cf-4c96-9dd0-f9201f1005d7",
        "cursor": {
          "ref": "900efe47-f34f-44f8-b5e8-9efc805c4baf",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a575d8f8-95a6-4131-a186-7cde0d178b42"
        },
        "item": {
          "id": "0f24df06-61cf-4c96-9dd0-f9201f1005d7",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "825309c0-3756-4ae6-8e38-56f842629daf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a8faa4d-76d0-4604-bc25-ac4c70c90a9d",
        "cursor": {
          "ref": "8998ad0c-cb17-4baf-b3fa-1e501f8786ec",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "a40cf461-8a5b-435e-b33a-e5d061007162"
        },
        "item": {
          "id": "4a8faa4d-76d0-4604-bc25-ac4c70c90a9d",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "98ef35b9-506e-4f38-af47-a8e4e51a0092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1087,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "08164c67-d259-4ecc-b4a0-bd193cd1356e",
        "cursor": {
          "ref": "59e46d3b-1b7b-4041-a14e-93f634601dab",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "4657cce3-4b07-41b0-8f22-15f2bf08fdbf"
        },
        "item": {
          "id": "08164c67-d259-4ecc-b4a0-bd193cd1356e",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "cc912eee-8384-4155-a3c6-f3bc96b0ea2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1141,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "3c171d65-d274-443c-90e3-cf0c57287d05",
        "cursor": {
          "ref": "3098d4b3-1093-4a6f-ac43-b62823d3e987",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b54daaa3-9ba6-431f-a8fb-6830cfcb13df"
        },
        "item": {
          "id": "3c171d65-d274-443c-90e3-cf0c57287d05",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "3a078c65-847c-4498-935e-13e28ecf9c22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "1ee16a48-cc79-4053-b0ec-1e5dddc9a683",
        "cursor": {
          "ref": "ebc149d8-ab94-4e88-b8c9-0cb8f208e813",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "a570b4b5-1ee4-4590-a79e-467fb5bf6bab"
        },
        "item": {
          "id": "1ee16a48-cc79-4053-b0ec-1e5dddc9a683",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "5f4349e2-2f68-496d-b9a3-7348c684d161",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1145,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "f4101590-bf6b-422c-bda7-59a4eb9c5e99",
        "cursor": {
          "ref": "480e5440-7dbd-40b3-a5c9-efdfd5685833",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ae2ddd18-8b51-45d6-a787-162a5e7f4c66"
        },
        "item": {
          "id": "f4101590-bf6b-422c-bda7-59a4eb9c5e99",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "a344b423-909e-40b8-9e9d-7a6083242ca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "80a7171c-8110-4cea-9e26-4c01adbae9d7",
        "cursor": {
          "ref": "f3ada21a-b896-40b3-8755-d5c98dd30609",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "72b93caf-eefd-4e09-b2ea-d7942b42264b"
        },
        "item": {
          "id": "80a7171c-8110-4cea-9e26-4c01adbae9d7",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "862c7614-3895-4b37-934f-0fbdb9e5e3d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3eb9864-307f-41bd-9e22-d12817bef24f",
        "cursor": {
          "ref": "ca9d9570-d26f-41bf-b0c6-1f86facbd317",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "21e52401-1e09-413e-b995-05a113b8a0b5"
        },
        "item": {
          "id": "e3eb9864-307f-41bd-9e22-d12817bef24f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "914210f6-8d81-4987-b3ac-12e244846ed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba386e13-9cbd-466e-aa20-7ad8bb50eb35",
        "cursor": {
          "ref": "47c5dfaf-8e02-437f-be51-980abe83377e",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "d90256d1-548d-4678-b9fc-45efa2097d5b"
        },
        "item": {
          "id": "ba386e13-9cbd-466e-aa20-7ad8bb50eb35",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "2496e87e-c64a-4bdf-8c92-ef1157923b63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd37dd9-cb26-4165-8953-d2744ed35c06",
        "cursor": {
          "ref": "bf5f0a84-542a-44e9-9e79-45940beee85a",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "0ab0ccd4-a04d-4b6c-adb2-04e962b34c12"
        },
        "item": {
          "id": "6dd37dd9-cb26-4165-8953-d2744ed35c06",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "8d31ce69-0b0c-4b29-be9c-347df844e807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7f49c79-ae67-47d2-b407-9cfbcdedf1b9",
        "cursor": {
          "ref": "6c12e9cf-cf06-446e-b6d3-449af7e2e3e9",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f535a5e8-bd84-43cb-a268-495cdc784a2d"
        },
        "item": {
          "id": "e7f49c79-ae67-47d2-b407-9cfbcdedf1b9",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "2b32714c-45e0-431e-9f80-d71a5c778f51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eaeb722-822f-4109-9daa-5ad7a2479bb9",
        "cursor": {
          "ref": "12060f19-1a94-4db9-abfe-3baed4e22b87",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "8a5c0463-48a3-4645-80b9-823562f47853"
        },
        "item": {
          "id": "1eaeb722-822f-4109-9daa-5ad7a2479bb9",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "7e7cf8b0-bf5d-49d0-8004-6625cc8835ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4960a7a2-2feb-41c4-bf86-761ba3d702c6",
        "cursor": {
          "ref": "71c8c540-498f-46ae-88a2-f477b84f0c69",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2a59b025-18ad-439e-b846-0a4c16d75281"
        },
        "item": {
          "id": "4960a7a2-2feb-41c4-bf86-761ba3d702c6",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "bb61d8ac-1e70-4589-84a1-cc5c81e50e52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15da0626-ce37-4fa8-9be1-f7a0d0f1e367",
        "cursor": {
          "ref": "5b3fb9c3-cf0e-4470-a00e-e2c9abc9b824",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d69da976-1364-43fe-849b-28a917e80882"
        },
        "item": {
          "id": "15da0626-ce37-4fa8-9be1-f7a0d0f1e367",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "0437eeb8-0546-46be-ad55-cc51fe3cbcab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87563347-8c7e-4ea4-a8a8-99e52b82993a",
        "cursor": {
          "ref": "461178a0-b4a0-4039-876c-a1e8115eb270",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "14e01d98-b30e-43d3-9a11-4cb7422e729e"
        },
        "item": {
          "id": "87563347-8c7e-4ea4-a8a8-99e52b82993a",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "9785fb78-04f2-4ad4-b73e-31aeb6bba69c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20f30f0b-2a99-4aee-977e-cb6cf0ef1760",
        "cursor": {
          "ref": "4a721f98-9033-4e60-9b92-a0a77bec84ba",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a320db1f-397e-4261-a7ea-c3467097e25a"
        },
        "item": {
          "id": "20f30f0b-2a99-4aee-977e-cb6cf0ef1760",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "389bc8c7-d2af-467d-8ee1-bc7c20f7a14c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f85a2db7-dd19-43ce-b44c-243bd9fe9c4e",
        "cursor": {
          "ref": "1be080b1-7c63-41a7-9c17-55194ec5a99c",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "67c2addc-ac85-4c12-a0f2-7873d7d21f7e"
        },
        "item": {
          "id": "f85a2db7-dd19-43ce-b44c-243bd9fe9c4e",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "6bfcb380-0d62-47a4-bd68-e96a3d35b28a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d23f24f-8bef-4241-8be7-0d94add4548b",
        "cursor": {
          "ref": "a6e30b23-484f-4b3f-9ffc-b15dbc2cdc6d",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "426d12b7-2145-45b5-93d6-caae8e1d16ae"
        },
        "item": {
          "id": "7d23f24f-8bef-4241-8be7-0d94add4548b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "5aaf9b11-ac9d-48e3-8557-1d682a2deac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b88737ab-a4cc-46fd-947e-302548e63b12",
        "cursor": {
          "ref": "5f9f59cb-1ce5-436a-a189-d2a410a0a2c6",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "623687ad-3a64-488a-892f-81f455dc4768"
        },
        "item": {
          "id": "b88737ab-a4cc-46fd-947e-302548e63b12",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "416eb4fb-eb3f-401e-b878-ddd1883cff9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e77df82-92d9-4dc4-895c-88e8fbd99270",
        "cursor": {
          "ref": "2a21fe87-0def-475b-a8ce-f270d0979113",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "eaeea62b-50be-4d7b-8bf7-74b6ae76a9dd"
        },
        "item": {
          "id": "5e77df82-92d9-4dc4-895c-88e8fbd99270",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "d1c7a352-29dd-4194-829a-3c01fe977289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccd1d169-1f02-4ab6-8273-c0f01dd014e4",
        "cursor": {
          "ref": "b5c1fa53-34a9-4e49-ae90-72e178661f69",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "76a51aaf-19b7-4ee5-b73d-e9838799da30"
        },
        "item": {
          "id": "ccd1d169-1f02-4ab6-8273-c0f01dd014e4",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "d01a0c9c-9845-4162-a72c-8f5e377edf9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f78ef0fe-639e-422d-ae2c-2050a084ae89",
        "cursor": {
          "ref": "024d3fb0-ebf3-47b9-994a-80459899f59b",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "b72f6c93-7af4-4fc0-b205-65928c174989"
        },
        "item": {
          "id": "f78ef0fe-639e-422d-ae2c-2050a084ae89",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "bad82bc5-fff6-4ced-923e-a42752f2239f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f89e64-f12d-4d47-a30c-c397cacc1f64",
        "cursor": {
          "ref": "47a582e9-d1c4-4fdb-8469-af3994c8f43a",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "d8a5bbb5-dcdd-4105-bd34-44e8d8c69273"
        },
        "item": {
          "id": "77f89e64-f12d-4d47-a30c-c397cacc1f64",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "d71aa553-c36f-4c1f-acb0-645d8415bd16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d445578-a145-4d10-ab0d-b25c148fddea",
        "cursor": {
          "ref": "117b7af5-4aad-4820-8db9-0bbbc28b6d8d",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "843547a9-32f1-40eb-a179-8b5db01697fb"
        },
        "item": {
          "id": "2d445578-a145-4d10-ab0d-b25c148fddea",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "3da6ddeb-14a8-45f4-b4bd-6fd8bfada96c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dcc143b-508c-478b-899f-ede64a6edae2",
        "cursor": {
          "ref": "af81a79e-4bb1-4d7c-b57c-8027c88dfcd6",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "c0db7dea-dc02-4e4f-85d4-0abf998465a2"
        },
        "item": {
          "id": "9dcc143b-508c-478b-899f-ede64a6edae2",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "74dd078c-f541-4ff1-8449-7fc5d2d92cff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e7aa0ff-6cc1-4b40-9b4b-249278e618e8",
        "cursor": {
          "ref": "9f7e475b-cd9f-4683-882e-cf43b442956f",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "b19be5cf-e5a3-46b3-beb6-83833cf431ff"
        },
        "item": {
          "id": "5e7aa0ff-6cc1-4b40-9b4b-249278e618e8",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "168d0f95-60f5-4bab-aad4-54998759f041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aece71ff-3da4-4448-aac3-26384c8a7d1e",
        "cursor": {
          "ref": "c9209420-1dc9-4d41-a442-acd1dd90cc5f",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "62dfffc9-2b75-429c-a8e9-3113ed1bf495"
        },
        "item": {
          "id": "aece71ff-3da4-4448-aac3-26384c8a7d1e",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "5ff94785-2189-4e31-8ae8-a2c4215b0ab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c897167-e7f8-4002-91f3-cae5981bd7a1",
        "cursor": {
          "ref": "99873f26-0881-4991-8484-523ec8918a14",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "0a4638e7-730d-4c8a-80d1-5fbf18221cb9"
        },
        "item": {
          "id": "1c897167-e7f8-4002-91f3-cae5981bd7a1",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "b18fd1c5-ac75-4395-a552-cc927c7ce876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e15d6eec-ef2f-4e13-acc7-70ff6ae1f197",
        "cursor": {
          "ref": "d498716b-0283-4c28-b972-8dab0170ec40",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "3a5faab6-0ceb-420c-9f6a-f8cf629a0044"
        },
        "item": {
          "id": "e15d6eec-ef2f-4e13-acc7-70ff6ae1f197",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "579b3dea-5a1b-469e-8672-738c195ba260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d5d4639-4c76-4ac3-87d0-c9b4e8c53284",
        "cursor": {
          "ref": "256703ef-15ca-4595-87e1-36daa8a40e6f",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "e5afa634-c931-4475-ac39-55f28f35c069"
        },
        "item": {
          "id": "2d5d4639-4c76-4ac3-87d0-c9b4e8c53284",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "7fe4493f-dec5-4128-a886-190c6289ad94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dd6f110-9775-49b5-b782-c3fee23afc4b",
        "cursor": {
          "ref": "8a5484fd-57e5-46db-bc18-8909393657f7",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "f0da0f69-b90e-4085-89eb-1c4a96df1ae2"
        },
        "item": {
          "id": "2dd6f110-9775-49b5-b782-c3fee23afc4b",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a65eeb59-9882-4784-8623-b8bdb6b78e2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "918e8e63-7b47-4375-9417-db82aad24616",
        "cursor": {
          "ref": "98166829-1aa2-460e-9f11-fcf7a8348499",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "57adcb62-e66a-4b19-9fe1-30486ba0b138"
        },
        "item": {
          "id": "918e8e63-7b47-4375-9417-db82aad24616",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "1f2db65e-96f1-4255-a665-f977d5fb554a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2dae603-771d-4a60-bd6a-79258a7d8268",
        "cursor": {
          "ref": "b3d0aad6-eb0d-4d36-a358-0b4a3accfd98",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "6bc44526-e0b6-4c23-921a-12b6b2bd546b"
        },
        "item": {
          "id": "a2dae603-771d-4a60-bd6a-79258a7d8268",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "722e5869-979a-4765-9685-6d5add66e092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36ae10d1-63f4-4b58-ab55-ed3022127862",
        "cursor": {
          "ref": "efcfa1ab-6954-419b-9bfd-50a87406f756",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "acf63d3b-f1d2-4fc9-bfa0-5ecb8a6c377c"
        },
        "item": {
          "id": "36ae10d1-63f4-4b58-ab55-ed3022127862",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "57e767bd-d44c-4d99-9f70-30c59fcf29a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c165af5-8ff3-42df-bd60-633f2f73189a",
        "cursor": {
          "ref": "db48565f-b75e-49b5-87f6-37f3accf128f",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "781e3da6-cc1b-474c-aa0a-4fd9db907893"
        },
        "item": {
          "id": "1c165af5-8ff3-42df-bd60-633f2f73189a",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "77c264f5-65a5-4977-b2f9-dd98cc538672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b60e5a5a-d792-4abd-86d3-f56de62aa1cd",
        "cursor": {
          "ref": "bd34a65c-d9be-4642-89e8-93d6996d468a",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "ffbf0bd0-c4c5-4baf-a6bd-fdb44c856d15"
        },
        "item": {
          "id": "b60e5a5a-d792-4abd-86d3-f56de62aa1cd",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "65943a29-89c5-4bf4-940a-98b1903b3cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9550379b-4d9b-4628-aa30-92fe9ec2174e",
        "cursor": {
          "ref": "3d9e749e-8016-4cf5-9970-d25afc1f646a",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "a554b531-71a4-40db-87b5-897243030b2a"
        },
        "item": {
          "id": "9550379b-4d9b-4628-aa30-92fe9ec2174e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ad282411-50b4-44e8-ae99-0d6026fac085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e44129-4f86-43cd-81ae-0715580bfca3",
        "cursor": {
          "ref": "80028e90-eed8-4fbd-8b00-f8fd5d034110",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "08d6227a-4f39-4ce2-8cdd-04130c6ff0fa"
        },
        "item": {
          "id": "17e44129-4f86-43cd-81ae-0715580bfca3",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "3c89fbbf-535c-47de-9e70-a06000617f4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51271319-55c7-421b-a8e7-b5afe6df9fa8",
        "cursor": {
          "ref": "1945a3e1-d539-4799-9eab-1fb7cca37ec0",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "e8be9ddd-6743-4e14-8cbe-a00bb1e52f16"
        },
        "item": {
          "id": "51271319-55c7-421b-a8e7-b5afe6df9fa8",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "4e313223-131e-432c-a8a8-ae3889a9624c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28706689-f999-4ebd-b558-7a30985564f9",
        "cursor": {
          "ref": "258be01e-5d0a-4ca7-ac3b-e7740272238a",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "74fe856e-b8ab-44b3-9855-8b8b60dcdbf8"
        },
        "item": {
          "id": "28706689-f999-4ebd-b558-7a30985564f9",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "f2cf3e39-87a0-4915-8c45-f310f6d4314d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84772f22-5f20-4bce-883b-c582110abb39",
        "cursor": {
          "ref": "07dfca63-93c2-4951-8632-19ecc829a9fa",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "816580e9-47b8-45f0-8a12-a47c285fb375"
        },
        "item": {
          "id": "84772f22-5f20-4bce-883b-c582110abb39",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "efc69b13-c1d5-4d1e-b173-de761432774f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75312a2e-52ad-4987-bc7b-20a91a8389a6",
        "cursor": {
          "ref": "f70077d2-7faf-497a-b413-e6836b369a2c",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "b192e278-8dba-4a60-b1d6-8639f8158d42"
        },
        "item": {
          "id": "75312a2e-52ad-4987-bc7b-20a91a8389a6",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "2f6328b0-4673-4938-97d1-304e3bf68af1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1ff8ba7-6dab-4acf-8af2-adc2fe6a15eb",
        "cursor": {
          "ref": "bfd0d27d-6e61-4cb8-a3cb-b7660042a656",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "a1bd2f8b-3856-4878-8fa2-2c4cfc6b3026"
        },
        "item": {
          "id": "e1ff8ba7-6dab-4acf-8af2-adc2fe6a15eb",
          "name": "credentials_verify"
        },
        "response": {
          "id": "bae330c5-477e-477a-a54e-976248a90d1a",
          "status": "OK",
          "code": 200,
          "responseTime": 1069,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "eed0fd75-046c-4b1b-9bab-2723437f1060",
        "cursor": {
          "ref": "4520182f-12fd-445e-a13c-c690dedeab43",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "b9f57051-997d-4667-9a39-f1a7547174d2"
        },
        "item": {
          "id": "eed0fd75-046c-4b1b-9bab-2723437f1060",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0619ce2a-5eed-4897-92d5-0649b45fc1f2",
          "status": "OK",
          "code": 200,
          "responseTime": 1131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e57be3ce-4b7c-449d-97b2-3af105f6cb6e",
        "cursor": {
          "ref": "6bbea62c-2e12-4ded-a835-27ce1f1cd576",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "6c5e7e1b-6a9e-4579-99a5-989197b84396"
        },
        "item": {
          "id": "e57be3ce-4b7c-449d-97b2-3af105f6cb6e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8d99fc21-558c-4085-aa27-30fd850b369a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e57be3ce-4b7c-449d-97b2-3af105f6cb6e",
        "cursor": {
          "ref": "6bbea62c-2e12-4ded-a835-27ce1f1cd576",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "6c5e7e1b-6a9e-4579-99a5-989197b84396"
        },
        "item": {
          "id": "e57be3ce-4b7c-449d-97b2-3af105f6cb6e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8d99fc21-558c-4085-aa27-30fd850b369a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f26de757-df91-41e2-8cfb-2f81360a6b43",
        "cursor": {
          "ref": "bd7e71a4-10fd-424b-9523-212b4f9bc0fc",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "34ef811a-50f7-4cc4-ac48-1ae5a4d7cb6b"
        },
        "item": {
          "id": "f26de757-df91-41e2-8cfb-2f81360a6b43",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "fc92c100-5841-4231-8d17-c2aece294694",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "add0cc78-5bc9-4fcd-ba3c-8ac1076de909",
        "cursor": {
          "ref": "5a376877-913a-4b49-83e8-bd20d3d6d63f",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "80ef38fd-0538-46ec-a85d-46a29ef3c533"
        },
        "item": {
          "id": "add0cc78-5bc9-4fcd-ba3c-8ac1076de909",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d2cdf467-500e-4f8f-9077-f046d45c426a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}