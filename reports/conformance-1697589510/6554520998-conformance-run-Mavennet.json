{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "7280b016-720e-4651-8bbc-184a19eb7675",
        "name": "Clear Cache",
        "item": [
          {
            "id": "28f147a8-b729-4de0-89b4-16d6aebec0f5",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f3fd1f07-31ce-4095-b469-d9afb71d6cf3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8d9a8abf-2114-49d4-84d1-ad6e751e9d11"
                }
              }
            ]
          },
          {
            "id": "e2b459f4-3e10-4bb0-89f2-0d2876b75942",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5e7c65ab-7865-4cf5-a38a-73a19d28d32d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d1b071d8-e0c8-4c18-9a53-abd82a9ace7b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0180d032-4476-4d7d-a4ef-33b856a40f68",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "4531ae81-4093-4f0c-9914-01d66fb6e9d1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a079fef4-383f-4b18-bb2a-cd0a999902e9",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "55d20abb-f9f8-4de9-b9ce-580bf8e4f20f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "56aaa449-2e58-47bb-8adb-7765cde4850a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "14afaf86-b1a1-44fe-a18a-50e3d64a6b7c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4787f559-4d91-41ff-8669-70912a8a479d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d06ec27d-b09c-4fa9-8129-a757490c22b1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bb9fadb6-3f32-45e6-9514-85b767af24a1"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "efb8884b-df0c-45f3-be9d-15ff27c0b057",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0694abcd-4e88-49c3-a790-2062923b68c1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9698c6b0-82d4-49c0-9b6d-63225ed23742",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "05298a19-7362-4652-8a61-1f712351f409"
            }
          }
        ]
      },
      {
        "id": "8c38d34a-e35c-4302-a4c3-950f5bc8f2ab",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "c1ba991d-0ee3-48e0-af84-b53b49faa04b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "97406025-9144-438b-83b6-7a62414740f1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d23e1b5b-06c1-468d-890c-df5e73e9d820",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "086b5100-5376-4eda-9670-e5799545d9d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "46e0912a-e2e9-4df9-b69f-1c614416b650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "808d7b3c-a661-48f2-a0be-0a120d797330",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37b8b3c0-c365-4f6f-9488-bdbd7ddab820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4488ecbd-6259-4193-a12c-682dc68fdd5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ddb189-7ba6-459e-95ab-895961728636",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad4e7c99-d0c8-4ad8-bf72-436dad6461ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "24822bb1-f9a2-4169-a478-166bdf80c488"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "edb47569-54f9-4d5e-b6a5-b56fb23cd108",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dca658cf-05b4-4755-a50a-736bd8f12a31",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0123134a-4034-400f-981b-0695bdddc262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d8244e26-1f5f-4873-a293-4c8a69b37880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67183967-d841-4c9d-b030-ce4367460bbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d14814e2-fe26-4680-a7b3-a921dc87b338"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ed0e90cd-07dc-4a49-8bad-145ea09e8cb7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2205d071-df86-4347-af0a-b7cf0f3ec082",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "acff5efc-bb38-42d3-9774-419e2a279254",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "76cbfbdf-e369-4419-96bd-1f20c29cc362"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0bc3d509-9c27-4730-8593-c7a770c0a441",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "eff10804-ceb7-4a68-ae24-e9e3b82817ee"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "98b2fe5a-336c-4a62-af29-c5f5e77bb6c9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d0c5eabc-10c7-4985-b85e-e83a8f92c29c"
            }
          }
        ]
      },
      {
        "id": "99c8d276-3bf4-440c-8755-8bb750baa579",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "32610c4d-3e95-4b7c-8888-d2043701f4cc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0d1e4107-1b2a-41b8-a0e1-05a668c81c25",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "21195e47-22ad-48da-ade0-cb9f8f4aa22b",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a5e84e1-e9d0-49cb-b5ee-21a632f56f1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93f7095d-eb18-4517-ac33-33eb9f88de61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "892b844f-6431-4f3d-a2d9-dc0b60374f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b6ea6fe1-bda2-4335-9090-1cc2b42d8906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b42bb24-6fa5-465b-b3d8-41e64a67d80f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ab7dab-55a2-4cde-a39b-94be60abf2e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbf03fcc-ecd3-4887-b3ac-6dac94140a10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6de774ef-061b-4fdb-8130-f08b4d74d631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cefe6e31-d239-49ad-b2f2-ece00996c7f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8f7386c-5792-4126-9c77-66c04ef5c12a",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3002026a-3b45-4bc0-9da1-d6dcb166d2d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ec6e123-6573-462f-b864-0451193adf59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d923186-6a35-43b7-8c29-12ac38f4878b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "19309f86-4380-4094-8110-4320a9497fd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f883252-c764-494a-825c-fa3757984ef1",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6e706eb-d276-4082-b038-011e9061964f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95d8c5e8-19aa-4268-8db7-75f3148c8446"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82cadbe6-10eb-45e9-b112-20e58542fc67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bf4631ba-f26c-43d4-8817-ca25a95abd8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bff856bb-8f5a-40a0-9206-bbb5628fe5f8",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9745cf51-5159-4d08-b261-e45e50a9ea06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77b3bbc0-3594-4808-8d80-10ebc9d39b8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee841bd2-40e8-476f-9f72-e3baa87f9dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dddcde1d-6dc8-4575-a7f1-0d160d60b2ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "736fdc70-2bd4-400f-90b8-26ca164cd868",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7673a62b-31a3-4a94-8abb-4aa18547910e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa76cd6a-1253-4233-a79d-49a2e694d90f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a9b19d-ff6d-4045-8090-49b7d1b43866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "740a0fb8-a991-4abc-b7a6-661a7e50a6f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "513b398d-98c1-4d16-91bc-bc7d694bc24f",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "924637d2-a084-4a34-ab0e-bbe76c6bb8c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c98b2c41-c0cc-4aa2-8619-741f906b3d82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5548ae5a-c17b-4291-8a30-dbbaecc8c960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b607d2e3-fd53-4ab4-b358-90fb612980f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e1bcf9-4140-4b31-998c-9a79730d01e3",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "890c8758-4d34-4ef6-a27e-d987b0d64fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22197d8d-5a42-4e12-9f28-1f0c4fc93592"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66531c87-6181-4a59-9599-b134be77bc7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "88351c8a-a14c-40e3-991c-10850c1d4d15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "210e37d7-5a1d-4089-ab6f-d3fdcda28a12",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe946e8-13b9-4cb7-bddd-dda8c0b750ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45170a29-e4d9-4985-8026-eab497e95185"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e4c6a9b-f9cf-46af-9426-4676d999177a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "65265f39-2da2-405b-83ba-2557f143fa4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed209c6-902c-4299-af2c-48c2fd92001b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e69e4e87-5291-4616-aec6-6d8e83519764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f080695b-8a00-4f90-b40f-f310db13ea25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97e9ac08-6f97-4da3-873a-c200e31108be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b8b77e0-b17a-4e29-82c8-5be0495601c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eb64ad8-4dd9-4183-9b36-08d559b3c397",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d877dd0-2337-4ecb-b684-94cf15c907b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2913d15e-4b66-4a5f-869a-c535dac04e99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "947a9043-7859-4e93-849d-aaf666ba9b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9a4b4540-09bd-4395-941f-6b5936382a7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08fe88a2-c396-4557-9368-5654b153e11d",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc87f41-a95b-411e-9b8e-dd7fdaafa429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e1e8f37-be4d-42a3-9672-1e7c7ef7bb3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0520ca6-b1e1-48fe-8991-3b9d903e2538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae466c20-695b-4543-98c0-9e3b7befd496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25791384-ac95-4814-b30a-50f98e73d801",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e38f8095-2c32-4b90-ad6a-f329dbf3f37f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01195fd8-87be-470a-9bcb-94873efc5031"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc352370-4097-436e-b918-f8590a6d9702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a77c344b-8a3d-43d7-b7fa-cfbd8f62d465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f300362-8c44-4e14-8349-443da431ef8b",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b8cc53-68cb-4d38-934f-f93eeb2a07cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60095cef-441f-49bb-b467-a948fd5ff8fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b8f7f2-699c-4c0e-8340-3b44484d118b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "964d5c1f-01d5-46ef-83fd-f587975654ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77e914c6-9338-4448-8dce-457b06602bc7",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc70d15b-d0de-4d9a-8fb9-4c83769c2136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d204a7a7-d053-496f-a8d8-d0b9d4a2381a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa74678-2e8b-4ae0-b82e-9015eaa6ac0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b65381e8-6ea2-436b-a05c-26b1e16d9c54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ab24c6a-1e6a-4a46-a1c4-c3978abb4df2",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf86ed74-af5a-44b5-89b6-7c9b6e4605ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02d5fd63-4597-4fe0-b21c-1bc3139927a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f62dd3d9-2b54-4079-b9f1-75f5596153bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e00270a-0d36-4a8e-b200-9a75a5374e5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc60308-5270-4846-85a0-6b3535fad714",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7425198f-6753-4fdb-a54b-852ccd742867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5da89cc7-6ee3-49ef-873e-1a9f1aabb68c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0789677d-a462-4b32-94cc-321356efa192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e24e4b1-1cd9-45b9-a271-bdb8b16537df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cced001e-ac75-40a3-b248-42b614fda82c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccea23b7-95e9-4465-8616-5ca76844c5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53f5ce38-e5fc-42b0-9d5e-479d0d78f378"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9ea3a99-474b-4b57-86b4-5df246797997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fbebb24-f204-4d92-be24-b0e0c80d6f86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "748dc41d-2d5e-454c-837d-51fb36eeda09",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0331a2da-90f1-4314-8954-719b9bc73040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84b6ce41-788a-4eaa-a276-69c27da8fff8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd1ec70c-4406-44f9-9442-5c5ba1d927e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd75f51a-31a9-474c-b333-78207d4cfae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c8569f2-ea5d-4279-8e24-d6df6a5b8e9d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00cf0db1-04ca-44ca-b2d2-5d4749b40f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9cc4a7f-b1f7-4bbd-a9c1-a871cabe4207"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae8a4802-cc5c-4da6-b373-9b080fe3c79b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "338ffeb8-e88b-4d04-896a-b5d95e0a972b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5f54a6f-5ef1-47d3-8e47-f1110b12676d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3ed7a10-d834-49ab-84e4-257bd4bce8aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d22bacb5-f818-439d-8934-a25bd43e60dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cf56317-52af-410f-b4e1-6721dd6109b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "97f6b8bc-e2af-49bd-bcbd-0cdf0be6e8cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3866356a-467d-4b96-97fd-57d1d4a6a7db",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34c9e758-b848-4a59-9c83-213ab3e3bf0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2c6c04f-4519-423c-ada8-cd915f69760b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6b941d7-f8b8-4ce0-9512-fba8af2a5652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9237744c-247b-4538-a3b3-409d6ff36522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b073d79-4da7-4980-ae39-f3232b5fd6ba",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a827d4cf-89e5-4494-8f0b-e97920831b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b69175c1-22e2-4009-8eaa-d2c9f5c06085"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad3b3f4a-5aa5-4c9c-96f3-e8dfe0adda48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6fc92491-7cca-4e61-9897-7e14657141ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88a7f7a2-ef45-4e36-9e09-b21a879fee3a",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "428709ee-055e-4bca-922b-add075aef014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84da4e88-81ea-42a3-b7d5-039d640620b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81b1eae8-8150-46bd-9530-ba84d1402a78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "765fa70a-f57a-44fe-8ba6-1fb63f7ff241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed4af7e7-9957-40bf-b4e7-4e164b0922b8",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b6dc16-9c36-49ec-b8e7-ac7116854bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d14595aa-ab8f-4da1-9910-d24e20f98765"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fc7fe42-ee7e-4bb0-b5f2-aec6945a85e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "61dac039-90b2-4863-ad56-453f6f7a0578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c5faa9-03a6-4ba8-b8f4-38190e6a8ade",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c77f2ac-b975-4a85-8183-76bb576b538f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b45332e-3d50-46f7-9ba7-dfef95550b58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cce2d75-e888-4674-b906-4210d961a312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5d2148d-58b4-4101-bec1-fed6269a8ed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf09c87-a9fc-402f-8529-f1e1862e5db0",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c02ffb7c-4eab-464e-9978-63954a59b8d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95fe1ad9-3f89-45f4-99cb-e993433dd1f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "785c124f-5a61-4235-b409-5a9f16f3f2f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a9f50b0-741b-4a16-91fd-1074fefaf6bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "833e01e6-89e7-4f17-9a48-dacee506062b",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72545150-a722-43da-9b9f-1799553966e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07e973ea-24a1-4327-9014-31900a14fb0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65608056-ed00-4e43-b9ca-6771b57a9641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad260a41-7b24-4466-931a-f31f6f4fc90a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af1d891a-0177-4ae9-ada2-8d2dd297e95e",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1541f0e7-8d66-40c5-b997-e7d104217643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52589d2e-8bc9-4cf2-a143-571d57bb2863"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37a996ee-746f-4453-86ff-eeb08e3521c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "63941e32-8eda-4e9c-8319-fc143f8b9ca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eda362e-4cdb-4221-bf72-d9efdf5ae60d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b580014c-a848-43cb-81a4-2f30c8f514c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dc5cf5a-e775-426d-9032-8015d36f81b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d8b32e-da86-44af-a8b0-fd9d64c07b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5200353-6156-4d74-9180-b1df0b920568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4eda3a7-4117-4008-9e55-5ca7218db0b6",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d18d4f74-6f3a-4a49-8f14-73f5afcc96a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c57733bd-808d-46f6-9ae2-5b83361008aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe5fd6e1-53d5-472b-8793-420072f59f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8222d248-004a-4dc9-b585-8c5589f9080b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da61de9a-9edf-4ef9-8ee8-992fb6c145a8",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aab4ffa-5623-4d95-8e52-ca056de49770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33d7709a-97ed-4030-9bcb-bedc7b703ba2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11536cd1-f47a-4273-8fa7-357011041ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e05a406-f3fd-4dc5-8aa7-18387d0a557c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3baed4a4-124a-4615-851a-029e0eec99ad",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c2ed914-1bbd-4343-a2c0-75488fefac50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21e76bd5-16df-4872-99a7-336771dce3d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0b42a00-4bb3-4071-8480-4414a8648825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6385bac6-f126-4453-9e1c-e12c7c274729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b30cdca6-6ba7-451c-801e-3a5246785086",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b421e69-999d-4e6c-9273-829b4c8e26de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7843ec25-a743-4e76-b7f5-78e889477511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49125e53-c046-4c28-826f-7667f36b8e54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "adc12515-9405-4751-a687-79a777135442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a1f8c97-8401-4e1e-8345-7934d229a7b0",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f23a02a-beca-4d59-bbb2-1b27e10d540b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bca232f-478c-4bf9-acca-29c7b8486969"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b99ea58-2499-43da-bc88-7829a6b4e111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "8e947edf-49f8-4f3b-a631-ee71d25a98da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b33c7661-0bc8-47f9-8575-d064719975ea",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3655c730-aad3-464f-859a-90db7e0f8b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4a0742b8-9db9-4a75-ba02-940098848bef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb3679d7-d02b-4fda-9576-aa580e569bc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7bb36751-94f8-4165-b216-019f498ee6a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b237b7c-1d95-4035-a5f8-4665415b4868",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d707b08-834b-435e-ade7-bf4bdc41a64a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d53c6273-aaf8-4e28-94e8-7cb2c4d4a60c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4d00dd7-79fa-43ea-9b2f-1da9975d3223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9a473dd-8878-4439-a349-71d96c720489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05fe8871-a408-4840-ac03-d50e65758687",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c0dfef-6e9c-4fd0-a572-c094ba579874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d62bbebd-6792-47f4-acdc-6779ba8e515d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a4535f0-058d-4a76-a0d8-fe475f1fdc4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b8e921b-fb46-4848-82bc-d04b796f53e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c780974-22fb-4531-b858-cf1793834aa2",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a6bc5a9-4cd2-4028-a665-68f2cf109dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb3dd85c-bb08-4b8a-a706-f7c6b294d72a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcf5bc0e-1a8d-499b-a2c1-f5c02952a278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1fb015e-3920-4dad-b547-fffd41b70052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbee8ae8-fd41-4489-8bbd-8f49e85ee73f",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "245a2d4a-ebc1-4423-8c0b-8c8c5cd3b827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30934200-9c5e-49f1-85b0-4e7b268bd782"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7378dafa-f03c-4833-ada5-7cc6ef9f156e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e770fde-e2d7-47e3-a93d-d9c0ecaf7a3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0f952df-0882-4211-9b5d-58c39431063f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "572fd107-5e0f-4d2e-8085-abf5202291b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9245ef19-9aab-419e-a92f-44110b5e1aab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b267fe9-695e-46a8-b727-91b0ea034ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c397054b-f7a5-4340-b9fc-be0bea1b4ed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99610b0e-aede-4d78-a35a-9098e46022e3",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7502759b-ae66-41c1-b6cd-de160d269c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ef30a02-cb40-4713-a9cb-2c088b389ea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f25805b7-4c17-4f6a-bbbc-a194e840b2e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "4ea730da-70bc-49ad-9560-ed54bd6b43b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c84c171-3887-46aa-adef-36bdbd0f74df",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd3d9f2-11b5-4a01-94fc-4d27a550a3d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d208965c-e242-4cdd-9097-c0d53740d072"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a781c3-a919-4dde-8250-b645e6906ded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf2a1e6d-23ad-40b6-97dd-de4efa9ef9ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f237909a-6bf5-43c3-a16f-9d3fea62f517",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de4c94f-6e06-4aae-bf81-36a8441895df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "291f10c2-6cf6-4931-8fb4-2e289646c77c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a7bace4-c462-49fb-a35f-674a22c744ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "a839f081-9c14-4788-8a03-d891a18b38a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee6291fb-593d-4429-b85d-fc6605d27d8e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ebd2b26-5cbd-423c-86b0-20d28399bc35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eacec147-1d3a-48c9-8bfc-2fd480b58eaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5df8b03e-a788-48e6-a339-a1a52b5dd4b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "73565a6b-2157-4173-afd3-dfd82d228522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf03f403-d406-4864-acef-44271477e9f4",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b26b4919-b1e5-4b68-99a2-c4e5a1a9d1e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd7c12d8-65c8-441c-946a-ad0a77ff48ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0ca2c19-a369-40a5-b010-3fea09147e17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b0675ac-a32a-4436-b5ef-2883a6262b2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fefafdaf-493c-43a5-beec-60d5656a7074",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "692ce6f3-a0e9-43b9-af3c-2b05f0b94d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56b32f59-9dbb-47b7-9920-54394d548fef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e550ea84-a22a-49ee-934f-a8293b8afb17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd91f3a4-3b68-4a5e-bedf-e5db6889aba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab0c41c0-9cce-4508-b7ea-aa39d6e037bf",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03469313-bb94-4ffe-b392-4f7e93bac3be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab6b43d4-6ece-471c-a5aa-ce604d3ca049"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b27cb8-9bbb-4e86-9c49-224b3237462a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f633cf4a-5481-4979-89bb-9d47e86c405b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b072c32b-957d-41c6-9939-1b7f17534413",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65a77c90-a2e3-4101-86fd-ffb200a7774a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0952638d-8b1f-4117-a74f-48146a1f62fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9de04f73-8086-4b0f-be16-21487f1f4b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "efb18617-0788-48dd-81cc-b63356a07d47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e616b238-0d77-4fd5-9f90-f5e5ef066579",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a70d19-e654-43de-860f-d545d2874b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc43dc19-54e6-4adf-9f30-d1bfdbd7583c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67be6bb0-675c-4501-beb8-90d12ed1779a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9648d42f-5525-42f4-a72d-ab72e6a28dcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cc0cdf4-7f3b-4fc1-b52e-7f6ad2d0f62f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "144a73dc-1126-4287-b41e-d4300c781e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d338e700-67aa-4595-921b-d5fcefc6b8ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f269722f-8e89-4ac4-903a-c464d8bf0217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0b71505-875a-4aa7-84bb-57b05709a294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "251116f7-abc9-4a76-89a3-08fe09e4fa53",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbc5484e-9131-4ac2-8667-090b418db897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7e52962-4603-4801-bf59-79b43d611eb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "408da60c-cbb9-482d-a595-0f02bca46ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ddc3ee0-b1e7-48f5-a862-90e8a76a4724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdc147fa-7701-4959-ac3a-c1297d1c5779",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "708b4b18-2272-4d4b-af6f-d1ce34d23b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e679d6d3-cca5-46f8-bbec-9eaf884f2ff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c32fa5a-7a42-4522-a70d-72be5521871f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "48de0f7f-d608-462e-9eeb-8eaac08e4ef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f56833-ef81-4a45-b2ed-1d6b99dcc5df",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e053e214-c69b-4574-95f3-9b47499015dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ace47db-9535-441b-b49a-61ce038197fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "125eeba0-a906-4cb9-886f-5521cf6abd8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "94b8ce01-8705-4bec-9e37-1f98ec48a6f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "141813cb-bf43-4ef1-89bd-ac75ea778776",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4838b951-6121-4000-830a-3144472b946b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53e3523c-bb74-4b9c-b058-9aa59f361d4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5315f3f9-051d-4c21-98de-b17c782a38fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "47a83944-5896-42ef-8624-60eebfc0e754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e9f0d42-32a6-41d2-9b18-6ffaf11d0bfe",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f468a360-bd1d-4aba-9d58-4bcd076c9353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df60336c-fe48-4811-b307-b26945f80c97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bfa25f3-83ca-493e-8b82-54009b6f7234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "15a7fffc-beb6-4f97-86d4-b93937f85a71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76a37357-8b88-4ea3-a59c-fc67b91bf83d",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7cd45b9-4aec-412e-902c-c7fde5400f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5d9338f-1095-4fa9-b79c-cb5cbf817914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39eed3ab-8d2d-4d2b-9654-c4ed1e375ac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a75e9db-cd28-4b74-b25d-6f71fa059486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60959119-6760-40e5-90a0-38b3a73f4556",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee5c1849-16ad-4f19-a231-560ec126b590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c4e04ab-fac8-49a5-b8c5-a6d67a272dee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac9ad0f4-73ce-42a7-90a0-5cef0d20dff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7493b53-cabc-4de1-9dda-7ed07b712606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7eea509-07ae-4392-8d8c-cb53d382accd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "448949dc-e46a-4371-a34b-83b392a1c436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b9b6574-03e7-4d2f-abd6-ad6ca63391d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00312e46-bd22-4beb-a72b-003d50a24234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c4be437-a210-4e4c-9240-7c78fce6942e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3be1610-4227-4aeb-b53b-be5f2f4819df",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be9a0a22-898d-4c95-9a6b-8c0ae524b8f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46b40b3e-f19b-4781-9278-5c6aa021f643"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11e81a89-25fd-40eb-b654-b7cb45e1196e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "246965d3-4d7e-4bd6-baa3-0222a6947a84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e9bedb0-ad85-4368-a60a-88effe8b8eab",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "924f5c0d-d03c-4817-8227-888ab161c3de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14f18d45-4576-46d6-b300-dbc3ccfc6419"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44f8dec8-68c7-4b5d-9e57-973a7b9db49f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2b17f969-b358-4ba1-92a3-766134fa8077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "617989cb-fdce-4ea2-a26e-9cbb866cb398",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16d44eee-7f99-4549-882f-1a3b478250c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf3c8625-d3c8-4276-8a73-cd901ece06b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0211c05-a4d9-47e0-a5d8-c6418b200d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "5968d085-4551-435e-a104-2d6870f8d8e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca7de790-f0a3-48b1-a669-7a2d397cd471",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe471e71-275c-4bce-956b-2ed0469c4cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3050140-1613-4d0a-9a1f-32ffb9442cac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e808b0b6-602d-4e56-a282-ab8545860586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "184cad73-8819-435e-9aaa-a89a076169c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b44a24f-f80d-4586-8731-48b21e79dd2a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f6f923-823c-44e8-a5d1-ef17ec327174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26d3ef3e-aef0-4766-a57c-e3d03f216733"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1e6e2b9-cf8a-40f8-83d4-9fbe94e79332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "82b65628-aa77-4672-8a30-2bba4d771f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecf93427-cfd2-4416-8862-4d88b4be2d8d",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb00548b-8a5a-4c4b-a48f-98eced72a599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ace8cc7d-2669-4094-8ba7-c9e30eaa5d61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cd8dd38-7479-431f-8312-77ec81c72294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d53114f2-96bf-4c5b-90aa-114321f0c825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9af794ad-c182-46e0-9178-b4998ff53c88",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e56969-a8c9-43b4-a49a-4fbaf49a2fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39182c52-c0ab-415d-8aed-8f6046f1a49d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df859a2e-fda9-44b1-9c7d-53515f832985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "686b6cf0-d4b4-40a0-bfb6-f275be84fb72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f373dd5f-036e-41ec-8bd8-550457c5a302",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "102c41d0-20a1-47e4-8a88-f9563f57ddb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe5004cd-c097-4aed-ad94-9a5be0715a96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08c47b4d-f0a3-4c95-92a0-f9c5acd88b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5cf001ae-5d49-4551-b376-435a120bf255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84631163-fcf8-40d3-b433-5c59637a3bd9",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca5701e7-b5fe-430f-a356-4ecc8ab4a295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ba20804-84b3-4221-8955-0d7997f99a0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2838806e-ff4e-4dda-8cc8-e088f31bdbb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c06ad679-14c9-4c0d-9d9f-363c6fa65fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d660727-1755-476c-8310-19cd75a184d0",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb5eca42-391c-4d15-8f5a-4c393ae4ff20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fea2d8ba-cbb1-4a3f-b7bf-bbe5ca4b16e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "497dc3ae-3904-4bf5-a11c-ed0c0efc851c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a1efee4-dfb9-489e-a2ca-528985b8437e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f00394b-1d2e-4c2f-8083-dc952b84b5f0",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ec17cee-bf8f-462a-85af-56f97ebc158e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dc8fa57-54ab-476a-860e-ace8b86a1183"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95152a07-c4ec-4954-9496-c045958d270c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "118095ad-c5d1-48bc-867d-a900825dcc19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "356b44d3-80c9-4ca0-9b58-2d6ed3919996",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e68d32-53f0-4f71-bb83-6ffb8f0cf2ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84b3f52d-3012-4bc1-b44b-24e4d2e8fed0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d38cd5c-b309-4c8b-8022-7108454380fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "10bc3b16-228d-408b-bf29-42cfa311ac2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a0ab56d-05d1-4dff-9610-e91d40238ac2",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43d4aae6-3f96-4392-8cea-45759d32e3a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6750552d-257c-48bb-b2aa-6e69a8e3d82d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0867a287-bf60-4b79-a8b0-dd0a25bce9f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "feb44349-5356-4a15-9a32-b71f74418ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55221dc4-52e7-4320-8f74-51994f7d2588",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4009e84-2c50-4833-8d33-7f147d07b171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97b784b6-a82d-42e8-bde7-4e313edc804a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d6919cb-7e76-4b43-b18c-c45939b2fb85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0bc3fb0a-755b-4063-a79d-7a37d503d002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ffd4ab-902f-4e70-be4d-091ad61273ba",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f54c42da-bd08-4861-a4db-653ddbd811f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c651e04e-1df9-4f45-8dd6-43a1cca73be0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cae53e5-3adc-401e-83b1-f7a7c3ee9be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6082a313-1cfb-484d-a15d-b9e1a5e0431b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1345c7f-cda9-4344-8b22-d26be1909a04",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fddea480-b3bc-4396-835f-babaad945c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1d5f5dc-43ce-4410-8a4f-61131e52c052"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4d99e1c-220c-486a-86ca-ca86e0e6bb08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb4ff5e2-8d0e-49c5-90e8-071888b9361b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab62b2c6-57f7-4095-a375-aee1783cb058",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84b2ca21-5b77-4418-99f4-1f96746d031d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a008fa40-1171-4111-96f7-be6a66f76528"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4948c1f9-1e0b-4324-9a2a-0bdf1ad2ebae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6acf5e46-7813-48ba-9073-f8a605e81a1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee6833e-4c72-4787-86a4-3c131b3f6602",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57d7bb66-eaef-4f9f-ae3e-c39bbef7a1c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a7592a3-30fc-483b-b63f-c55670122392"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9151a22d-b9e9-442e-b220-1ece1cda060c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "97580202-f8c7-4af9-b900-bfbd0751e2a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3047569d-e561-4988-8d95-bb91c833b382",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2bb17ea-7cfc-467c-82e3-138dca8306e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5233d72-d839-489d-a1ca-c596c815491d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c5b3b9e-dea7-482b-87ea-acf2dc599ffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb7a793c-c38e-4302-8b5b-20984d7c0d8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9352b29c-88be-4b14-9d5d-584a7d92f648",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d61e017-5d78-4736-b138-70b6011fe57f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffb92d6a-14ac-4406-b3bf-7ca8e74e644d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7b04e7f-d29b-4a17-ae6f-369396ad5c76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d6e9927-7234-4aca-b1ef-45a0b49df588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dec7eefc-78c6-49ed-b803-8dc1c4e345d1",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7bd31c3-6aa0-4a3e-9bc7-356a7b5d0a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efa88a3f-f9f7-4016-812c-dca56e98f8fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a04c696-11c6-4748-9c5a-3addec474e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4029e6db-f9d3-493f-898d-4ef9b4019bf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2780c79-115f-474e-b6ef-8c5d561fa023",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb0d1108-b085-42cd-84f0-00849295a049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e9ddfda-3882-40cc-a1a3-99928a60667f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a5da702-57f6-4724-805c-1518574d4129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ce5b6fc-715f-4684-a034-d7a9c1ca59af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a95517b8-ce90-418f-b0c2-050136b9071e",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75157917-d1a0-4c72-b39d-dffafaf7ce12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d75bafc-a4d3-4729-a510-b10a466e5f7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f32db3ca-9634-4462-ac08-1540955ab6ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "110fa2fb-70da-4965-b824-790ed7cf4f29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5e1a427-2ee1-403d-821f-0137de4af8fc",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "466c9c8d-f750-4c7c-80bb-bd315419dd47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59190e95-6a0d-45a1-b52c-0d89844a5719"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b619372d-92e5-429f-a499-ba0fc7c4d831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8dd0ae6-46da-4bb2-ab65-65282d084c84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef5f484-65d7-4d48-b0a2-ac8196794080",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e69ce7a-6130-43da-be09-385ccf490aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82a19ce4-fcfe-4b37-86f4-8f469f605aea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a53c9920-db07-478a-9648-62458dc5132d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d81459a8-85c1-47ba-b691-1b22ac67f40d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa5e78b7-908b-49c5-8b6c-6c63fc1c0bf2",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97e9e302-57a2-44b5-9fad-c0ed007f07ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b85dec9-252e-413f-9196-f7b88649f4eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7e120b2-03d3-4261-910e-2d2959f70e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d9a42fa7-55a0-455b-b518-5432c6705427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4081a5e4-6a3b-4688-8377-d991a4b41fb2",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f599e2b-b091-4a26-be05-7e1f3ca6c963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a18cf9e3-f1df-4d11-b77a-5076590d5ffd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31d95059-d844-453b-8c81-82b2315a41ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe923700-77f3-49b8-adaa-94ac349ec724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "716bfeb1-0c6d-4500-814a-ad8c02ec8585",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d54c1e77-590d-434b-b21f-e1a08b9d1653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec5b4d14-06be-486f-9f12-b0d239ea3faa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e14a0fe-0cfd-4143-94dc-7444ebe4082c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "84f460e8-7199-4ecb-b5c5-f63086ce826b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "056ff886-bbd4-45ca-88ea-0a15707c7628",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd6842e-d245-4aa3-aaeb-bc70ee1c23bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4d86d33-0b34-434a-bb4b-ca9db084aa1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90b5ca2e-a48e-42ce-b358-daccf62e778e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7177f96c-ca10-4635-bfd9-7093435969ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9145382a-eeb6-45e5-8fc7-32c403e829e5",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82d6abf9-50e8-48d1-bbd8-13cb4b8d3ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1abd9de8-2b1c-463a-9871-8f4a54b7fe97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d792dba7-58e6-4944-9fb3-23895899171c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e63dc399-b593-4d41-9a0b-7816f27f32b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85cfd8a5-9292-4a21-9e2b-0e393891ce15",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15ee8ec2-b46f-4831-a8fe-e53cb267878f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e5f92c9-a66e-484b-9c00-725311dee809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e54a61a-1f3f-4048-9219-7f73a3ecc9fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e6d3b9c-1a71-4f3a-a588-faa52a9da658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "995107f4-6af8-4ced-8151-8a93d7bca3f4",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f3da61-a459-4c2e-a169-e204af3fc747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6604a61b-cc8a-4ab9-b303-400910f20988"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2800ac78-edd3-4b33-8f24-6dde706fad52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "27e4a7c0-e6ff-4886-8132-f067421e4fa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbcfb0c9-6117-4048-a45a-8f030e5950de",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "befe8ee2-60bf-4858-bc09-ffb53ed59291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "060d2b7f-6a07-4c24-a382-3f57b7415a1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "784d7a3b-ae86-4c4e-9e96-f5d193f75f93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f451028b-2ec4-4c08-9201-06540a0757d4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "82d4c5e7-f0a6-4231-9570-02160f8d7ab3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b44dfde0-faef-4455-a8e4-12976036f8a9",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4422a2b-59f2-465e-be75-9b862bf43097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c09fca7-8d9c-4eae-9cb3-554ce9c7fe87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b05614e5-5c49-471b-a97f-21a2f4e8c9a4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8aa57623-edcf-4ebf-9e1b-e143d66945fe"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a32c77c8-de48-4bb0-a236-4c723ec9707b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7aa2f4e0-2da9-4c8a-91aa-7e38d61e2ce7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b770968-0d7a-400f-b99a-0f0aa37ff416",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "155b6d9d-758d-4218-9969-a275a44b51cc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "51de44e7-8868-4f0c-b520-f335aa1c5f8a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "da8f8914-68d8-4e50-9392-d5d6bdfffa27"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "61e38e89-6e46-4646-bb71-a16db1205699",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5a7fbc74-f918-457b-9268-1745dd838031"
                }
              }
            ]
          },
          {
            "id": "82fbb860-4558-4949-b2b0-44e2fd5605aa",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a9bbd95d-96bb-4605-9c39-ac268af460d9",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "7edbfab6-a715-468a-bece-9c4014f6b371",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6d220b6-018f-4e9b-ac15-979989c93e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "3ecc36c6-e3bf-4d18-8dd1-2af0b7c2ecca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3aebf53-7efd-4b46-b3b0-230b8face9e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfdb33b3-b298-4ca4-91c6-07f4726d1434"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "30649697-078e-46f2-9af1-27efc8388d14",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e4050968-ca50-449f-990b-ef35edf31aa5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f2fdb4ea-67fa-4a5d-b2f3-e6d8dfca8d5d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b0dc3b62-6a59-41d3-9da2-a8d39de07d5b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cacdc436-7ed9-4106-b222-7f6902e2d217"
                    }
                  }
                ]
              },
              {
                "id": "e2e9b5cd-5e8b-4cac-aae2-bfd4716175db",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b891eaa-65f7-452a-a60f-40b5002d0616",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "438237fd-7b54-452c-af80-235cd1a99cb8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1d7b17bf-77e4-45b0-984d-321319b1c7d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0a435340-1f0b-4e87-9b2f-c2f426369d72"
                    }
                  }
                ]
              },
              {
                "id": "7243b133-65ad-4aaa-89a9-990ca4a9a681",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "92b40bcf-78c4-4008-809b-b1ede354fb8f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fec13ccd-0a6b-419a-be8e-c4fd8d89806b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b5188ff-1fb7-41bf-8d86-e1ebf8b7788a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5a6900ab-112f-4e4f-aed5-cae2f64475ed"
                    }
                  }
                ]
              },
              {
                "id": "3e99658a-aa24-4a7c-a994-086fa3914b37",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "85ff3624-36df-404a-bf52-051fd0bb8204",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bd23ae3d-09df-44e8-b733-99b369264021"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7ecdcfbe-793b-4d0b-ab56-e4723152d715",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "70e5e551-8faa-4c48-8407-453a260ca279"
                    }
                  }
                ]
              },
              {
                "id": "2865f6c4-4d0a-4396-ac6e-6d47aed30f30",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "85fd9864-fc6a-4504-8794-61ae1d8d12e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "42ceb2aa-94a9-4d8d-90ef-5f9e36116a8c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e89437c5-e393-4a35-a1c4-34361bdeca2b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "9f0d0df4-3568-4b2d-9437-426c26c416b0"
                    }
                  }
                ]
              },
              {
                "id": "8f6605cf-2149-4770-b2e1-3f2c439546fb",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2168a3d0-afd0-4124-b587-f3bb14a3a1dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3b092b7b-9dda-4186-a6ba-d81c9c4bf814"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4db49110-1b11-4fc2-9ca1-141ed3c3c5a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "334f2be6-cf88-4b58-b9b2-0329735e44ad"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8e2b73a5-8aaf-45ff-a828-ddbd5004cc93",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5414d63a-c295-4847-aa76-9252ecaf8dc5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0edb019f-59af-46e6-8157-311e5a9fe30a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b6b8528b-488e-4a41-a54f-145ffddba540"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a939702b-859d-44e3-a7ef-2b4fb827f1cf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "570132ef-fa09-4bf5-a72a-4a6516e84e23"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "67d68f1f-9336-4ee5-aa44-664b91eddc07",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "72d558eb-9831-417b-b35f-3ba8fb41c8ed"
            }
          }
        ]
      },
      {
        "id": "1763d30e-7e93-488c-b50e-76a0f40850e0",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "57999c4a-f58c-4611-94d2-f323ea78e2dc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a6eb1bc9-b05d-4f61-8734-2a8822d7277d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5949ae43-9890-42c1-a098-a8f77507d242",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79e40862-12f9-438c-9317-ab5d57903773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e786da6-e116-4e39-92b9-eb0327265d6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3874d9b6-4209-4bac-bfc9-fc294f079459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "3df3562a-6f84-43b6-b6e3-baca0ef33dfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ce61d3e-27a0-4999-bea1-47e9cf247efa",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eff8e12-5240-4569-b47e-c8bb31c324be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f0fcb6b-7d56-4c1d-b488-b75b04a1af52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db7b359a-3163-45ea-bae2-79eb221777eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "86b16c08-1b1b-4199-b772-675d83e0b1e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "728ffece-8d1d-423f-9c8f-16dd3b2d3b6b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce2912fb-e6d3-4842-9f63-ec4112b7865a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07cfb72f-424d-498a-b779-adeea5bcc1c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbeee5e6-8667-4a31-8d1c-2bf7325e7343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fcd096f1-7156-4a55-bcc8-a2bcee02de70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0feac6da-7345-4514-9ed4-a5dd5b0e96a0",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc547eb2-cb7a-4ad2-96fb-7d71972e4719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d137902-2817-4fd6-bc8d-6cf05a62f54b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "890120e1-c929-442d-8251-e5c1053c4c71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cab9209-db3f-41a1-b3d2-a25282199ba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a8c805a-79b2-450f-87d8-b5c02325ec58",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0acc6ac3-d538-40ca-9e9f-2e594089b23b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b69fca1-c743-42bd-ba36-f3c9f645ff25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f267ee-de34-4f38-9bd4-5d08f2792a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f00d47fd-3224-4c26-938d-3b0fd9b10972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d8c2194-eed9-4ce9-a0b3-53a0249becbe",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "950b781d-84fe-4366-a1af-731b14972a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85236b95-9f0b-47cd-abe4-aef5145189e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c894e0-a44c-4c5d-9c42-3be1cc24d057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c76bf03-62ad-4141-8c42-a85719297d38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d6a5f75-b743-41a2-8e8f-3b74895f16ed",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d0d2e1-4417-4f49-b1cd-d7a77f5ccc3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "500643c4-f9fa-4261-8a92-2a65e8bfbcdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba4c404-8e1a-4b91-a77c-b7a3785002dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5027d048-38e7-4205-8beb-3eac824cdb17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d828721-c5b2-45b6-852d-a96b6fee6863",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3273edcc-b373-492f-b540-0b65aa0df83e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8f4d49d-0d4f-4df8-8b39-862d42d470f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70cd6743-c912-4cdc-834a-b4889e0c6614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7e3c127-2c17-472e-834c-82e2c59a0e16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd033ed-eb43-4b42-8c79-314042352637",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02122c29-ee74-4e7b-8c1a-e714800027fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cae23ccd-2032-44c7-8539-5c598e7ee29f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59cfeb89-52c9-4eef-ad63-fa32cb1943cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb384cfe-3763-48fd-a463-a4c749c46efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16935cf7-3b42-4526-b6c4-5491da8ac4ae",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d78ff066-8ea5-4bb5-9a9e-dbaaa5daadd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2975eb52-5bba-401d-9fac-a6d126f161b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44fa2f88-68ed-4f22-b83f-69b27938c6d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a0babd0-713a-488d-9dd3-112cc1289797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a01ac56b-565e-4d76-8411-f11ae1cd825b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef158515-fdb3-47ca-bded-665cf29c47c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "389774bd-f9d0-4961-b825-22c88930f02b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e59152fe-e685-4868-b7b4-83b76aa1e66f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "cf09dafa-d41a-4399-b2a8-58ea7648a355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e17448f7-3f1e-4c9c-b5c5-67bb3adf37be",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "349cf909-88fb-4ef9-9329-37397c58fd49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10e58c71-3ec9-48cd-9159-fa3ff05cabbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6de55f6c-34e2-4e25-992a-79b15e33f948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "42d6d524-a014-4c96-a5b4-8ebaf7563838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6003aefe-86b7-446a-942c-bf68322c48ad",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c87c75a-ac67-4d1a-8b9a-4c2ea98579a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ff722de-5389-46b0-a191-317cea6866c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b95cc7c0-7b69-421a-abb2-385feb3636b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e975b4d7-a15a-4640-8841-b637c379e915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb0477f1-0fed-4708-adf2-c44632d5c1f6",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d86e701-6e78-470a-bfab-133cc5bfde3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebad1fb4-dcaf-497c-9692-d90f9328fe9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "447d9573-8200-4557-a75d-72cb76c7f881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a8a102c-0fd5-42dc-9c3a-ff83fe24b38b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be628c7a-d96e-46db-82f7-62c8c34fb8bb",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3fd58ec-58fd-48c1-bf93-3169f973fc13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0d28585-7168-4805-afab-a9a3b398c856"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee087107-517b-4ea8-b28a-e5e8b5da8bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "738a4433-1cf7-4069-9f92-a357796634e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9648b9f9-3a55-4acf-94c9-3983fe138e63",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97d03136-5fd0-4c1a-9898-a755fd5f9048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4cfb3c7-913a-4c60-9130-65870e983a5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6998907e-28a6-4c80-bac6-047727d034c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "99075f8c-831d-41b9-bf98-3ddc52c7ec30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1614508c-436a-46e7-83f7-82a06ca9b7cc",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e773bd6c-5ec1-46ec-ae81-8d9d58bec6ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4cf940c-466f-4362-9213-cc93158ecd51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8544ecc2-a15e-4e73-8992-e8d6c00f174a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "88c78908-4a62-4000-ae94-03da381b8706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94b90f81-bdda-4da6-9189-038ace8bfd37",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a0e53e8-7c85-4700-9f2e-fa2cf405964c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b19e242-a498-4251-ad31-8681d43d7ab1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "178e5272-9282-43ea-81bc-c659a5c6032a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "271823ef-a5a0-4b21-b30f-51f6185faf5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76232bec-b9f3-4ea4-957b-4d1d9e4d8020",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "830a0e36-8075-410c-b5ef-023fd55be0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "090fc792-4ceb-49be-be87-e282d5ffb5c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe2fa1a6-1c85-48e5-8edf-0e705d9fd307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65c26b90-094e-40b1-bc1d-369f4f74faca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73a113b0-92c8-4aab-a9cb-198a65fe50ef",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea7a33d1-98d9-44c3-b8e6-8e62b966307d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "673c9e29-1001-4cba-b2eb-647fb1057315"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f20ab260-f2c2-4640-b55f-f823e52fed0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "89aa0041-9ca2-47ed-a2f5-e575b4d5a000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4331491-7732-4430-a000-58e5e9631309",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa4167f5-a562-472c-af1c-0a685c20eaee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e542528-9cf7-447a-86db-c0ae956d691a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "053001a4-6efd-4b27-9478-5546d33c3586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dcad34a2-ac96-4318-9696-2ccb92d3d52c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39cdf950-5a0c-47c8-9a8c-a10ebb1d3b27",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce052b9e-8efe-409f-b62f-b190c51aeeac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4805569-d5d3-4f62-9ec2-1eb5e4fb7746"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9df8bb78-3c43-488e-a794-38b25742f8db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce9daf18-11a5-4c64-97d4-fc98cc3bd0e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2af2309-67eb-42a9-abb9-7780e537ce14",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "606da04e-7fb6-4c0a-970e-fa83d76ad541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c76ce79d-a13e-486c-ae35-a13e532f9f1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc6f7779-0ebd-4b7c-b97d-19097419aa61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec8578d1-cbaa-4a64-b72f-b76be4025600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8ae1370-146e-4844-9727-4682720b2707",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6257973-7e99-4e9a-84af-2840552e789d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16661446-3fab-4e1b-aaaa-373389d5b6f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49553202-bbc6-4a07-a71d-96c9995eebe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ba974ab-daf7-4a01-8808-8ff5f9888caf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e438469-8524-43ad-8093-6af5556c3d82",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7be72ad-2398-4cfd-9e34-47032cde327b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c900399-7672-4645-9c2d-19c87cd940c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83c751ba-3c8d-4478-b39c-a583c923d461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7aa95347-ea55-4c83-8873-1c0cfb05eba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24971d76-4acc-4007-b66c-a341ab2200f6",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e1c32f0-3d7d-40bc-af2e-fd1231bf2720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff859db3-772a-4198-a4e0-5c9c685be131"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb30985-0e88-4b52-bd04-38dd00cd4f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6144526d-1b97-409c-9813-0dd5ef4cebd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e7be449-01ee-40f0-960d-d8f9764f8964",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3598937-a935-40be-8143-4ab95a351a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bef52a3c-8d40-4de7-8063-4e2012024479"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d19dfeba-0bd8-44a1-8e93-2c76131b9108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e01b687b-0239-498e-b875-fc1b09c270c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8639bbdd-c00e-48c6-b722-974ae10bfc82",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a9110f-141f-4507-aefe-4a7ee1294a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5947bd5f-a03c-469c-bc5d-a239439c06ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54cdc381-569a-44b8-ac9d-134ed1b65736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ab1967d-5066-488c-8dde-6588da32a091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "783de998-855d-4300-8740-54f0df97163a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9b8ca2b-87b4-4734-a13b-cbba645c7ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5f117e1-1865-4ac7-8a0b-218cb1c8bde8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "052ad14a-93d0-475a-80f2-02dc1f0117d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb3a37ad-4f92-4a78-820c-fe42b736be7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a073199-561d-46e1-98aa-0c5926a8cb96",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44c33f77-e1c1-4cbc-93e7-7b0a9a394107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2980b9a5-58c9-4ea5-8423-53cf95ea2fe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e37c213-58d1-4bfc-b59b-c01aeb9c7207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7040dc58-3f37-44d2-a074-164c1cac24fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bfd0925-cd09-4041-a9d9-89fdc6af6e6b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7d5fefb-0c21-44b3-bf66-e1df72d3b67d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bdfaadc-8ce6-494b-8b4a-96efc7575c33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97453b65-e777-4011-882f-1df4b1944318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4076bdff-3a54-4924-92f6-610b0bbe7f30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f32cfd3-4936-41ba-9a0f-dbfec7160dd1",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a9200bd-a399-4277-b803-226430798971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "616de2f0-7652-4874-b9f6-bb019c4bc984"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "633aca8e-a97c-49c7-a9e4-c8b24c7a8fdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8212b4f-554f-4d1e-ba2a-c1df634d153a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f528b027-f495-48c2-a3c8-53711b261d8d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "25bcc314-c0d1-41c9-b943-8abcbfe24e15",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59a28c1b-6720-48bd-a01d-232eff881bf4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "4a4b5d47-d2cf-4eb9-8e36-5c8c0755d051"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55161d7b-d50d-46b6-a64f-a430674c10db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "33a81719-6709-4c80-aaa1-7602bc0af9e7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "41a3a200-a4e5-4a2f-b8db-f0512aba15b2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f3cd6b3a-3e13-480e-bbe5-5b2a12aa053c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e6de84c7-6520-4077-a9e2-4614be6cd581",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41586325-d4bf-48f4-8cc7-bcb9b21d73ac"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d0f18c94-e0e7-4c42-adc8-81119a6381ec",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d4f186f8-1835-4c8d-9e49-ea469850d527"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f4203179-8077-46a8-a5eb-9bebe76f7484",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c7ad5ec5-08ff-43f1-8b1d-99feca84ebec"
            }
          }
        ]
      },
      {
        "id": "c256e4b3-f0df-47f6-a474-f70b69d6f3f2",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "9e3f6d40-0db9-44a1-8637-98aa2b36597f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e9434f3f-8254-40bd-9217-e0735255c544",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2e34f749-dc81-4cac-b894-e9022ab9cb81",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf7ce22-4cff-4d16-b4df-3841b4589a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5b9034c-4223-4b2a-95ce-cad5dddb0d45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b35b930-b048-4a4e-8435-11968a436984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "b43b0239-b8cc-4175-8c37-c9a7831401c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cd54530-f218-468c-adea-56590a6a15fc",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f2e712c-adcf-4fc8-b8b7-4c0fb765bd3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c398a33c-fe3f-4a56-b7c0-9f21dc7ed15d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "143a721e-ff38-48e8-90f3-0da04e9fa0e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9949de2f-d2a7-4f0f-9e21-a91ae350c5c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b9c8d96-cccd-462e-b124-3e4190fe9df9",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb7b58b-65c6-49ed-b45c-5700a931de78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b4b51c1-b74c-4ad8-a573-9e7f918f2f79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc76c182-eebc-44da-8a7a-ed3e8c384900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2718bc1b-b503-43bd-8577-c5fb1334de66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df94b2d6-0433-449e-9a6c-90805dda17b8",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c536a0a8-fcf5-4c04-9e7b-0c6a052a6a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "113f74bc-a6cd-4a04-8537-45d755d31035"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6b12095-9f17-4280-9a27-a9dbfa746bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "21ea65f6-0829-40e8-9216-f188449f479e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a8abcbd-f510-42a7-9ef3-6cd3759ade7b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db413820-cc91-4149-bb3b-946fc18ba740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30a87182-f3c5-4f2f-b15a-965a53c94517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1477d32-c74f-42a1-a5ec-0d1a052f78ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "989ff302-9664-4897-a0af-16c648030bcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57d1148e-ca9d-49be-8aaf-ee6fe26d72cd",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f16488d-d0fe-4e75-9fbe-9261bb39eaf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce1e8f5a-70de-491d-bec8-3dfefa4b9a64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2461d6d5-3371-4376-95ad-2eddd5f44d41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee0a56ff-0791-42cc-9b05-66c805087ab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "216ac5c9-415b-4de6-96df-a1108e8dd1cb",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc35287-ee05-4a91-8a76-cb113f2eeab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9460ed8-56d7-4095-972c-dc3d01bef4c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88612dc6-192a-462f-b5b8-fece23c60297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c287f008-db0a-49c6-9c95-448b3ca2ebfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "058fccc6-21af-4f89-947d-020cbb4889b4",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9a2a367-15eb-4a7f-b39b-f3716654f766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cc74f65-fdec-4077-9935-1af1791330a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6db6a406-d5ac-4304-ada9-a97919c50a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e95edec7-e025-478f-8971-56b29f951b21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86fd4ccb-0ccb-42b9-833e-0a0c03109f93",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1e80eb9-fb6a-44eb-846e-37d044928921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2baa00f-cc54-43bd-9ced-6681558535ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c499b902-51bb-41d1-aec7-64afa8369fa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "34234e02-3aa2-4c2a-a729-f16a0242c01f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7606c2ee-0afa-4d15-a100-331d52c2a6eb",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e6b6d38-29d0-42b5-97ca-63112a182ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e24a633-8922-44c7-90c3-4c2bcd1c29af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f860c99c-76ed-432b-8306-a981aeb3cb0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "faebe98d-a1d1-475b-a400-6b38eec22578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "834995e7-8a1d-49ed-9347-cb6549591e08",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fdeaca0-6a73-4e21-a1ed-7d12595d9ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfe8da82-a979-4e41-9889-313d8896586b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48e22826-a55f-417e-890c-d36dadaacced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f806c1ae-d406-4aca-9412-52a6f1733426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c77aec80-b994-4f0e-ba52-1da82b601fca",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53481669-9443-4749-87d7-f65a4d80f960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e2983b4-541f-49a8-a17f-df9f3a6cbe90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c840da6d-ed68-412a-8798-8070bffd30a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ea93dd7b-4828-47de-9817-e43421690997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2565f0bd-7911-4698-985b-7c8787c3ae18",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89899fa9-b7bb-44c0-93f6-fe559314ba1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78ad5298-1e23-4666-ae87-126d0b2d1a74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d9452e-cf9a-4a6e-a64c-3cccf2e9d004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "16dfbc11-de78-4ad4-ac33-52cdb9920b31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad808296-db16-4e3f-bdae-548647b80b9f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b065ff90-1257-4e50-80be-fbf572aa8a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11041bee-34ec-4c65-bae0-54fc51f910ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7168042d-5e17-4c4c-b2db-75cbef29cafc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "213ba573-059f-4087-a7fd-530824ead587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2770f6c-73f3-4d2c-920e-0b7c2c77d1cf",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9189339-5c7f-4b68-9796-11fc378b7807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6b4ba67-2ae9-44ad-85dc-e5cba1578586"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "458f3959-57a4-4db6-b2c8-ad23f319639e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "42830859-2e37-4bea-a3d0-a0a3a842740e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f681fe58-ec5d-4310-95b0-78d95db8a546",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4010b56-b3d0-40eb-bb31-0cfc92ee236a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6532a11a-7f0a-4ea1-9711-7a66a4a0f2f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec66a33a-a088-49b2-8946-9c307e909789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7468f00c-8c7e-4cff-b6e5-d99158be9158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41988cb8-53dc-4a69-b496-17712451f5dc",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f1115f7-a901-498d-b903-965542c67003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b77d8f3a-7fcb-42ba-9c49-05a31737e551"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18aacad6-0e7e-4cb5-a19b-d072b12af9ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "37ac8293-4f36-40fc-a866-652d516086ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beea04d7-c754-444b-8f54-825bb3879129",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d40ffc4-0453-4ec8-8653-592f0c2b65fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ad97ee3-93c6-466b-ba2a-8303943c455c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1792cef0-586b-4cca-805f-7881a269d8eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "06add5ab-5d35-4360-bfe9-52fe56154fa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "998238f0-dbe5-4b88-84cd-aa8ec9a4ecef",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3415dcd-edfb-415a-afb1-884bf66079d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00735178-6220-441e-8450-9144ff146e20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "971d95a9-7b48-4b21-aba8-19c05931cd6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cea103f-ec12-4773-adfa-73479510831e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc09af04-3026-4c80-8591-9d9f7f81fe5b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d84c01c-7e50-46b5-abf9-25dd76d1efe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3d9d260-6971-4f33-8810-5ab9671ca258"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a0f73b4-5b9c-4f1a-a524-3a8fac2ec809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d8867f9-b00a-4af2-b167-8fe5c61c775c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d86230-ef66-4320-891d-7756eec0191d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5302bde9-27bf-4bed-83eb-85f5c379a2ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e211e4e6-8e2b-4498-8dca-e50da6358bde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51fcabc6-d2d8-4110-853f-1308595328ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52d2bb8f-dac4-42ee-87ee-5040ba660ffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31ec82dd-56ca-4f0a-a853-d4aa73ce9626",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84dccabe-640d-46f0-9816-1cdb81a5e6ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3bbf9ce-3610-46eb-a6c0-ddf21cecddd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5714aa5a-b521-4af1-8968-0f613969b1b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc5fc3c0-ba05-409b-8b0d-c5fe73ba2711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31badfb8-3d90-460f-8b4c-f72992c01169",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7d90a00-4392-4578-abfc-0c4e0e6c5ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "266ee2e9-bd32-4103-bdf2-bd13d94a53da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dcca589-131b-49dd-b63b-8dc2cb2b67e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28a6f80f-97b8-401f-a4b3-0bdf6549a80b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79549093-0797-4112-ab11-89375f11b291",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcb8b198-7604-4089-adac-8c77df930e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d06b71c2-ebf6-4eda-bf44-c25a387bec3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98033b67-0117-45a3-ab93-308a8b6f075f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90fa9529-125a-466f-8a0c-e7398ef42fcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a931ee4-091e-4da9-88e4-226c3e32eb43",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce26c18-e4f1-4dad-8570-18a257335a78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "104860c6-0727-450d-ae74-2e73723d3a17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "686c863e-09b5-4187-a51f-72c8aa01c294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "551e9ce5-06fa-47ec-8c09-337b243a8592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e41eeee-6de6-47c7-b6c0-ac52ed9d9b90",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a11869-29d9-4116-b50b-7668d261d746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bca98453-4355-471a-97b7-3098b23169f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccca1301-ce05-4ab8-86bd-bc3653cb1ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a55a465f-319a-48a2-9e86-95ad55199549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a402c531-d65a-4c4b-9236-54dbc26dc52e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15c2cd68-a2ff-419c-a6a9-84576a144a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d25fd425-1051-4c03-95d6-a18b3dcf355a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1afc4b91-474f-493d-a696-03922f20024d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e309c98-4963-4991-8061-e126c006a5e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed15b3b-f249-40f8-be98-b48a4da480bb",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6250feb1-2b88-4944-958c-9ad5ba92698a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09780473-1b5d-49ae-a56c-379bb0dcc46e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a42fa270-b32e-42fd-b375-3cafeaed8b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f18dd5e2-f82f-45fd-b862-b87bc2eb70f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a070add0-a8e7-405e-a418-4579e764a4ed",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86f9115c-7f22-40b5-b7db-8137e22e8148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caffff82-47ef-4b91-bd42-b1a703eb7a34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e05447fc-6338-4b59-855c-978fe52eae18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32be02cf-665c-4f6e-ba58-747df5d2b76f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df51eb49-a2d0-4e6c-946f-9242b065cc71",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dbcb18d-de4c-46b9-a380-d68782d0da02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f5a4e38-5796-4bb2-90bb-20b18c9908df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d551450-c343-4c36-a38e-683183ad3dc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b55de043-3f2d-4108-b027-af12c0f2236d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b56e5f82-83bb-4f64-bc15-8a455336f616",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaca29f2-0fea-434b-b3f3-938df4ab8528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16a385b8-b105-4485-beda-3ce8c1e44af3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a307ab8-65e9-4650-b16c-4d1bfd027f5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e76a202-9ef9-4809-bc17-be91a3f2542c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc868b8e-4dc4-409f-9aed-5287f55313b2",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de773a6-bda8-4b85-932b-78381bb2baad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c11086a7-3363-4aa9-a50b-4715d589477a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b585e330-07c3-4027-a1bd-14adfd8e3c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f086241b-5863-475e-9eee-5b1f86d8f122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f50d5819-1e75-472d-950e-dcf21ee5bd51",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ff5d97a-3922-40c1-b5e7-a2ed9014f652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fa26d5b-a402-4343-bc9d-36c047372307"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42080745-1d6a-45da-80ac-0250e9505333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e9d5800-6f54-4208-8814-db6894bb80a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de1a2b22-9562-47fa-b38c-35b402225fcc",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82ce566d-cb27-45cd-8e73-8b2edcfd10a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e615bd5f-46c3-441f-9249-14ceee820d10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4ccf2c1-c3fb-4ca5-8fc1-119a01034145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f10251a9-adaa-45dd-ab0d-1ea776e25b2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48446ebc-bf69-47c7-b0a8-fe268d9d9c03",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ff8672b-b19f-4fdd-a845-d62aa2d84724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19d34c64-e321-4de9-9ac5-2ef6b87d0e4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a109f7bc-8524-439e-8108-8fc67d477957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9220730-cd6d-4b7a-9175-ad8d30e9e223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db8bc003-edb4-4919-aaf9-dfd99f1e92c6",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a0e2731-c4b6-4937-897a-b5ad9132cc7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eb2608c-9707-4e15-a96b-ae5f6b1b43e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "972fad29-ea74-4336-a4f0-db35bf56c93d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13d87572-6bed-4362-9311-ef5219b1d7f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9a2a9b9-cfa9-4cdc-8478-b9ef68c02349",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7d6e5de-de28-4377-819a-7d31d7b8caa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28aeb285-ad26-49f3-8b19-e4070e3777eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4be872a2-b29f-40a9-b1a4-b0abb59c4598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21e3f66a-7d30-4999-a214-203ef50011f5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a449eede-dce0-4ed0-aff8-173f1ca74627",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d6306821-fd1e-40f9-8df4-256b085a3ba1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07966582-3257-4730-9fd2-4a1c5f10f5f2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "2acd8e27-faa0-4feb-a87c-78de586a8540"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2686b469-cce5-424a-bb0a-f80718d8a09a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0a7faccf-ef8c-4c16-bf2e-d33c05a547cc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7dc5dd6b-da1e-448c-b968-8db1531f0a7d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "67627c76-0019-4d5d-afcc-63aa077e63ff"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "413c0878-019e-4470-82a2-a3af29c5405e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9a63e04c-ac6f-4833-a2af-f460c2eee43f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1e479049-c75d-44ec-a488-89b9a7ab8d77",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "60a91ede-3538-4989-b86e-a606bff896c3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "264ba199-1ac5-4311-b4f6-bd8cf05e1e98",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4a98c65c-2c64-4418-853b-6b90d9454a09"
            }
          }
        ]
      },
      {
        "id": "e4ecb29d-af10-4abc-bedf-2d74286ac74d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "2094a1f2-5cd3-4bb4-85cc-19a7f8a87706",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b792e5ff-77e1-4b33-b465-13a6e55099fe",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ccb61bb5-7bcf-482d-8dc4-f24661279eec",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac4b59cd-dad9-4fd6-a01c-59490fcf11a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca94143c-8b52-45ff-b97d-bd32285e3e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "377dfcc9-f208-42ab-a9fd-192f67cca815",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "023f0c20-7a03-4135-8eb2-5ae15294c97e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1858748-3948-4a2c-9d7a-633b5e2a0a64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "761ca7c8-dfd6-40f1-ac0d-ec5ac82d2bfb",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3ede95b-e0d8-4b30-abf0-a9adad561ad6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "877ba68c-d367-4f89-8fce-fbea8aa711da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20d26b88-22b0-43ba-bb0c-7e857e5282aa",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3f690c8-ea5a-458c-bb88-891abc3915ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95f9ab32-668e-4bf6-ae46-326c522aef9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d34943-ebfd-4c78-8c55-f40ef964cae4",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "812cdb56-1f05-44ec-9ff4-38675a8b06d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f181442-2572-4cf4-a291-d59f6802a5bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d825545-77f2-4257-abbe-c681eb675c65",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "662d4806-3c1e-4476-a5c0-12a5b935f3e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee954bde-f2e8-43bf-9402-783ce9ee0994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3adb6e4d-f3ed-4909-9e8d-47c33009f92c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83e1438a-7942-4ade-a3f9-727d00e44f5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9479937-a86a-42e2-8a1d-7dab0d2aa0f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abf3aeb4-6059-4549-ba40-3256efa3d88c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "392af1c8-0dfe-4975-ad79-8f9fcafbb9bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a50fc33d-fe60-4225-8571-cc353069a7bd",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dff3854-813c-401b-9773-005598ed0235",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac064c5d-8680-49ca-9c35-9467242f0330"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "147cdb73-d5a4-403d-b1c5-ee1332748ff7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49d31029-90b2-49a4-99dc-f2c6bc4519a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f36c576-df6f-406d-99d6-1d234b9ca6fc",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41011e01-a2cf-41fc-b4d7-dd837ec8c361",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b62bd7b-87d7-4f85-b259-529982083522"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a96d4dec-da84-40d7-a605-5cb6b86c2361",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b564df9f-03a7-481c-b44c-3fc4daab4955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a84646a6-7e7f-4b40-939b-45cfeb24200e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80dd49c4-8d44-4c47-9a02-8c47783a0803",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "999b2e9a-6737-4cea-a303-af4b56400973"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0adf81d8-3d5e-4a63-92ed-d4752c29651f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5655fa74-426b-4528-9641-121afb17a3a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c082bf1c-4cec-474c-9b3c-80d374b027cc",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3694db08-4270-41ca-9317-ec4bc1ce5f75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0878539-0cf1-4dfc-a3aa-d036a84e0727"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "098e29d4-9151-4e60-8ee2-bfba121ec1db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eea8d4dd-9078-4f87-ac2b-a9dbb250493c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9ef189c-d9e9-4677-9ecb-3bc918f5e5ff",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "046a9583-3901-47a1-85f7-d4da94499aca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c502793-2ec5-49c8-aaaa-633813074e9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f87446b-5029-4095-9ef3-36bd224df889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80706c72-12e3-466d-a2aa-c74f7aebe65d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d7f1d6-7a14-49be-aa9c-09c3f77da395",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2043bfbc-8970-4617-a890-c012f5ae9c8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9575702a-afaa-415b-87af-5ae77e29d23a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "315e277b-1cbd-4df0-b755-9f5608f7f92b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b056bdf-04d1-484d-8a2e-e5af3603a613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da3475e8-3e2c-42d9-969f-8c1ff6529136",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b00a3bb3-ec45-4402-9f84-e79761931e39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15cf3f80-f0c0-4de1-ae02-36873a782a50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdf83ead-e432-49c3-9ce1-4d4e2ef6abe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c1bb3df-e1a5-42bd-b881-ed12fbb2f9cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42674dde-2d03-4cb3-858f-0d2ca74b7daf",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c0477c-963a-4aa7-a9aa-60e7191303cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84a17b14-87ab-480c-93e5-a16c4e872e05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08b9f7bc-62f7-4da5-a13b-a81a642ad574",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4329945c-0843-4a03-808a-2ae34bcc657d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a0d791c-dc16-46f1-99cc-82a85aac6aa8",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26bfa728-4e30-4f13-9ca2-778c77b307a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c99849a5-120b-4dc4-b50a-c03953423c4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4230e41d-b6cb-4c07-87bd-b9c03f3f7bae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6339ee28-ab2b-4e0d-a14e-5e747833582d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e86422d1-1596-482e-8fe9-c4b52973c4bb",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7994ba50-44e3-4be1-b59d-f13062356fc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aef9fc91-0bea-45e0-95b1-ef3141d12653"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "614a6339-bcce-4c16-aff4-13a2b8a08cfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d3ce0dd-9c07-4f82-9d14-db6d8c6f19fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ab9241-b3ca-4e84-81c6-db4e9773d384",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70a53fe7-2d33-4f42-af59-80592b8ace38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "858a3b6e-4ec1-413b-b99d-10a10e362e3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e78677a3-0549-4a7d-b222-a5c1524f71f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e92ec19e-80a4-4339-8d65-51e015b9d19e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3155813f-0ef2-4131-8914-fc8b18c1724c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3807d5d5-ada0-4d90-9cca-db4b4d5fc032",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc9a54fe-d706-49cb-b12d-e15a23361fce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb573bb6-dfc7-40a2-a9f7-2455e9121b79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91766811-3b48-41c6-bd8f-628fb0598233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e4ca27-5393-47a2-a110-14c4367f5263",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0b9452e-c512-40c0-a8c6-c0ad8d5b005b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "775ce86d-ca3c-42e3-b55c-213cd0f3b834"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff3fe7d2-0b09-4fbb-a233-16692ec71eb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "143228b5-c8ea-4149-b3c5-6c820b9e6468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d65bbe65-ff6d-4584-892d-5e9e5fa59664",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8f4c1bf-f26c-434a-ae72-1a575b2540d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38992f64-e5ae-4ec4-b975-dcd75edcacf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d922d3cc-7011-4fe6-9a03-6630d978cc3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68389fa2-dbd0-4752-9e78-558f0441e320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b607a6a0-4d3c-4337-be83-15c9670a6480",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b00932eb-a220-48ea-83c8-e215eb0ad9d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1763ecab-36b0-4f52-9cf1-382ff81a6e27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bca9e011-1e04-4e7c-9c5c-a9852a9906aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b2849f1-c17e-4aba-ba71-52875a0b7fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a92a29-6a2e-405e-9973-9d40261c6551",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74353b4e-3a2c-4413-96a0-a02b19e07f3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb1cb5d7-a54c-4374-93e5-e0e180216a16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31e7a879-872f-468c-a829-d13c9d1c33fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b680abde-9b5b-4503-8bd9-638dfef785cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8554379-ba73-4d71-ae2d-1e9903ba64e6",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "752618ec-a79f-43c2-833a-04b29eaa2827",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1634aa13-db98-48a7-818b-25678d7c4328"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0b2f854-0c3d-492f-80f7-ee56dcdcdad5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b608f120-142a-4646-9402-b5df93c6e7c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1509330e-ce86-4fd5-8a55-3196279b9379",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dd90546-f8a0-44bc-a538-e44c36e98f17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf5d0663-69b9-4972-8774-9b6c39fde728"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e6808c0-685a-44f8-a59f-2e726ab3313e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdd0d254-e7c3-47ba-8f89-4edee20ece17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f92d575-a7ef-4721-b9ca-cd54c3d16d83",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c46996ad-ca32-4ce4-9f9c-0fc1c67be2d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "660239f1-f97d-443a-8bab-1c9cbcd44822"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dbe265e-b5aa-45cc-8ad2-741af6444421",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2a99878-3ebf-4ca6-bc39-f7220d8e780c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c2179f8-c9c4-4cf0-84eb-b79f93f95bcc",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3b60ae9-0fc5-415f-b64f-004efc0a1567",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aec2b8d9-8942-490e-a855-8f53a930fcca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7276d2f3-fb51-401b-8f06-fc20c8b6397d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc5946d7-39c7-40ac-8a14-f1042d75f757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edca0197-7417-4fd2-bf62-1cee572ebab2",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "594e5261-f0fa-422c-b397-6b8bc6e97263",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40de8597-aa0d-413f-86f7-5e9cbc96e0ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f7c54ff-7f12-4211-a570-dd4f1f19712e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e240e2e-936f-49f4-8666-0336c3ce2ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "185cf03e-800a-4ca5-98c6-e048e8396464",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dc39bf0-7033-4585-8ec2-82cc4bdad82a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02ea896d-d2ce-4f07-bac1-e215df423c14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf40336-72de-47f9-b811-481d3435fdfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6faf2d23-9db6-4cc9-9576-fc5d76bc20d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54e399e4-82f0-446e-b25d-ea575966d443",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c10f7e1d-c470-4be0-aa71-d7a038ef8193",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9abf50a-822c-49fa-8d4e-5a11fe7f507b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c791492-8e15-431c-a74a-f596009018f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9ead5c4-c7fe-4c08-b0cb-578ca46e4f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb9619a-c419-4b51-ad7c-e5924bbc70fb",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0fa6f5b-6def-454c-aeb1-40eecbe2b7a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99382a80-c221-49a5-9e7f-553ca9e94fd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ea3947-1c0d-4d15-b922-ef65782ec9ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36c7ec5b-ece8-483c-a1e2-f8c9d78b98ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "030bc195-15de-46d4-8199-0c3811838529",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85b3e2c-4b10-4345-b462-1146dd67c60a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06f4c04c-437f-4d11-a202-e3e15bc8a9b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68273fc0-7f04-4495-816c-ff3f47f9886d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59e25346-58e4-4deb-a7f6-ffa333327220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d996dfd9-f1b2-4fea-a1d3-766c07abeb5a",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23969034-e626-4841-85d1-835d34a9c601",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab224e24-55b9-4999-b941-39eff6afbe25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75386235-28b2-4ce4-b759-9bc91b1904bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebc9e498-00df-444d-9069-cf011d2addea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19cddc60-e5cb-4291-8cc2-de7a9563593a",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ad6a92-89dd-4389-916a-0cac2a7f54ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09a37f8e-483b-4cd3-be66-4ea4060ef626"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad5b1141-cb24-4647-a415-6f478af468e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2519e3c6-2cd9-4523-a2a8-0c553392a6ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8446844-c835-4869-81d0-b6d13dfc3662",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bcf9a91-415c-4041-9edc-00ab41aefb2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "102eea25-480b-4993-8c3d-217cb101c178"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "180ba3bb-8347-4719-8a56-d65e00598022",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40482181-de22-414f-9063-0e0777764c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "775db22f-513f-49bd-bef9-bfcc80906695",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "858c0417-1454-413b-b892-41ccf5a1995f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c083fc83-5a53-47a4-bba2-3d3d935f4a53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddde942a-09ba-40ed-aba0-2126ec79c9e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d95a091-6868-4a9d-a002-2fadf27ec4b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e095e464-3cd6-4ee9-99a2-6a9205166858",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc2f17e-4e7d-4f10-b4bb-61e049929056",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1537e97-7711-48a1-bd6a-c8c014b7ea3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dcd786d-63a7-4535-9825-cdf9319964ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "792e82a2-0261-4b6e-888a-52bf882f2607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bc30212-b1be-43bd-b7fc-ff3b3b90e640",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a12ab32a-531e-459e-8075-79445e2d0267",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8ffb10d-79ff-4fa7-bf6b-474b747d7207"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c14604f7-c84c-4691-addd-ed8e1a159a32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72d1ab38-1440-4ea6-8b49-599b779274ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b04589-04c9-43ca-ba9a-9db27046f89e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d350d0b-096a-4a32-ab6c-071621526a98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ec6b4d8-b69a-4107-b8bd-3f7a9b1ae94a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b452b65-2651-47d7-bc7f-b33883c10360",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae3eff92-aa90-464b-8414-159631ec2227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d868ff77-5bb6-4210-a334-c5b2582c4a80",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b4a9d8-2cbe-4efe-975c-a66f7fc09161",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18b4181e-be55-44d9-a3e7-4f1eea7d1e22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d1c5b7e-091e-407d-8c3d-e7e4affff554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd557004-cb49-4f5b-a6d1-8f6b24fe66ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50fb40f2-459e-4f2f-9f10-5cbc121b0095",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fb67f25-382f-432b-ac6d-093c81206206",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6bcad49-228c-4c6f-9db4-17f0857353ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d290cb79-3b23-4a56-96d9-f6ccc4636928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "949d558d-4d8c-4120-8f69-a1371d6cfb54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3a731bf-f165-4840-8576-0a1882a70ff9",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "824b4a6e-2773-4082-be67-8a33574846fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04729b4b-a4fb-4397-bc66-c88ede8cca3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acbd41a8-0565-4498-b83d-ed5f19edd179",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96978848-61a0-44e7-ac27-112109a3d61e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ced54a70-e49e-4a52-b3c3-fa1ff96b3370",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d68976-8cd1-4263-943c-f5d40584c35c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7334e66-d344-48b7-bdeb-15cb65cf37ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee8afc7c-8797-4bcb-a4d9-5c55efd66509",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "209b5bc7-3c10-4a11-8863-3fcd8922592f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c700be3-ac67-4196-abc3-180df8b1002b",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0e042b7-3e1e-43d2-9541-3076cd373be1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50a6b1ac-6b05-4441-a14d-408892136c45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cedfff9-ef5f-4a4f-8fc1-ca073cc5e7fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d6ca822-509a-49bc-bb00-e052751d19d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da40465f-2693-430d-9aa9-6f774b9d7c3b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31567ab1-548d-45d8-9789-1fd3fabca832",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68dcea8e-0e45-4421-bc65-3286f81b1648"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b06b8aac-c50c-43d1-862f-231e713fcbfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23503fb6-6705-4c03-aba4-63e4f647b82d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf157171-969e-4a74-a95a-6d21e5413e17",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6493a9f-3332-4213-b8b9-c39cfffa51c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9792293f-94a9-47d8-bee1-15798a2fc0b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d21f09b-139c-4c19-9996-48633e43c1a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f656c1eb-424c-492c-a9f6-14fa7d7df616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be9b6041-f413-48ff-bbee-5ebd8ef0f19e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c70e1be-0c33-4dc5-bcb2-b31f4b786569",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c762c3bc-b61b-4e60-b7b5-14944d361d36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "261e4545-7236-47a5-8235-915b2b614e55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02738664-3b1a-441e-ba2b-9a3be6437785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86bd3873-54c9-4e7f-9075-4fa35f77f353",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcb2aa00-b722-4a39-a0e9-5ea5b5177860",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf15f4a8-be46-40ce-b5d5-95d86431995f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "692da5fe-fcf3-4a20-8786-bb83851d018a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bef0584f-a347-4044-9add-345830b3de56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac7f7a95-903b-4875-9665-41b3dbbc7924",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28fed0b8-94ea-4043-aa52-83e466682937",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e56aac91-053b-4f57-ac4e-55314e0710f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebd450bc-97de-4d0d-96da-02eee7e881e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c724774-fb46-4491-a00a-6d62e5c43a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf8c3bf9-5560-42c4-b061-596859e61393",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1b4bfa1-190a-4a7e-8434-bf7a6f9da5f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dcc0a87-aa37-494a-86ab-96528c647cd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8801577f-af0c-4c90-a628-b30383505942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d8bdc61-9586-4467-927e-c05c6ff67345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df974fec-302d-4164-bcb2-ad5fa90cdee0",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40d79dfe-36d5-4a9c-be85-ebf80e244119",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6bc2c8e-513b-4511-9bba-d01f7e52442f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33097d8e-2b2e-48a8-a731-67e3bfc66825",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34725dda-34bf-4713-a455-3b89713a3f34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bb045c1-bd9a-48f8-8a5c-528a46a64116",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c93f2ef-8584-45d1-8eca-67b5ac785315",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20b4c6c7-82bd-4e75-beea-66e4ec9b04b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24fb3e05-5b3f-4461-96ff-b9492a084a2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6a93821-5acd-435e-b66b-051e019d7b7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "237c738a-e14e-4dfa-be77-ad5f1554ee60",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bb0da78-6aa8-473d-8bf8-212d9b35f6a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76ad8f2c-83af-4696-aa05-8b6d717bb233"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a3227ab-4fc1-4453-9958-77f1e0d7ed0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d28be4a2-20f2-48b6-9e16-68068520dde9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f166fd4e-2f23-423c-9a5b-5735f9d6aa11",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba3daec-ea80-49fe-863d-7e030acbaaaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21adedf5-f818-461a-8cb2-03f192248dea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44e62011-17cd-4940-ada8-1354a531490f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b00217d1-2913-4f0d-b868-20dddd383de0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9be3eac-756c-4659-9c9e-49f72d5e494a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da1e7bca-6d6c-43fc-bc5d-56b67b738de5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14f6bc6a-3404-449c-84f7-71745e5a3689"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19bcd097-6ff4-43e9-83f8-1a1f35011550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6302bc2b-3249-4d2a-a6b1-849cca78876b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59d8de4d-a5d3-4e85-82a7-a6446abf4139",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daa08529-bc3e-4a88-b2c1-9cd37f99e75d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ad8b09d-d385-4f7b-91ac-f4b9c434109f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b47b8fad-dcc9-4f94-8931-92406d817cd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74b46861-8bf7-4101-8554-27574951f1c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfc50afe-610d-4b82-bf14-7627b62f6dfb",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e04858f-eea4-4407-8e6d-4db967ccbe3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdf70003-e749-4b1d-b372-d7ffabc0fa8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "445aefed-32b2-40d7-8744-36df59b88a92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68c9a1fd-4358-4e35-b517-a87c9db3a653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdbb265a-a959-4183-8582-9a8323286713",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ac577f2-97d4-4af2-bc9f-fd547543fe60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62e531e4-2c68-4879-b817-91ec1fbf93f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a8a4026-5792-4116-b208-d591ca235b77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "884fb36a-2e33-405f-9593-5886ea1a20c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a144db2-e306-44fe-8d19-fff01fc4727b",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "284928b9-2bdd-45e1-9ae3-655419c0eff9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac3460e6-0fbc-4d0a-bc28-bd3b5329e8bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e967ed93-126e-4cdd-b81e-43a74d52930b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8b5338a-97ba-4d03-bfac-a0b4336a86bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a02159b3-90a8-4370-af7e-5d79b1e9c8fb",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ba646f-f5eb-44d6-bab6-b75941b9588b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65da84b8-1509-4474-9039-6d2626e94755"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a903c2d-7016-479e-aadc-211a99cf61d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce613c9a-96dd-4e6f-b291-dff56ef67297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4174e13-8c1d-415d-93e1-c350e3f5c01e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d3836f-80b6-4b0f-8ef1-186901d52c13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3e70595-159a-4df1-85d8-cf376f3967f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffae97e7-37da-4c93-9f39-9cb5b5264bfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c31a039-07ef-473d-9011-7606e5e084bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a343ed3-1db8-417e-9e01-97afe8d6114d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61854cfe-9f78-4719-bf75-896b48420a47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "590d4b16-6fc1-4b91-a4e1-41450ae6f0d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "177bff29-b425-4dfe-ba44-4a13b5567e6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b95e6451-b960-47f3-849f-2ef097b20ab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef53d0e-fb4d-4c97-9519-d52b74429090",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d258eb22-b041-4b87-9ec7-e73bd29de024",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24e3f387-fda8-4b45-920e-9f9067e3724a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10495d5b-9ad3-4b62-9e8e-65408ce5181e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8978e61-c791-4b34-90a4-f76d2c62eb5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5451af1b-be38-4d02-ada9-01e0fdde6549",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23a0708b-fedd-4484-8caf-6b5f3ec13461",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a6552f2-db28-4e40-85ea-2e995b5f8e57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a609ed94-a716-48bc-b806-21ea4987fa18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8cbeebc-1471-4ee5-8bd5-0fcf673daead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee28dc5-0ab2-43c7-b35b-68ba98017814",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e27641d-668d-4d87-b950-07677ef5c533",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6727a401-eabc-4a84-bdb5-b1725b2211de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99e522c8-a478-4de7-b91c-20252caec0fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "222f6c27-0723-4cd5-ae74-05b012305e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4aec5c9-4f99-43f1-b6f6-c77746e51cdc",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e49dabd5-0229-4b4d-b081-2b0e6e482003",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "435bef77-e8ec-488f-bdf4-81f7a3d1403b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3590c1a-1a01-494e-9729-953285f6b106",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77398bd3-57e9-49f7-b68f-2e6171f533b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fa1f99f-8686-4e8b-89c9-32101b189872",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a861da8-e6b2-4e64-9ae7-71cc32017c10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "384eeb6e-abf9-43af-93a8-8e362b562490"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf70950e-72d8-4b31-b1ec-53ac37a62f38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5817b119-fa49-4d7b-a483-93d34016af2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10522b9c-d78b-4603-9b08-7f81d21b37e1",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0c6a77d-7565-442e-ad21-d2f97a6b1cea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efbc629a-e215-4560-bddc-c5d76f709f7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc69f08-47ab-41b6-8ec4-432602f122e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60077132-9f67-4b73-8ad4-92eb29f613a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "039675f4-dcfa-457c-873a-3d7ae4d34745",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9428b8da-e3d1-4317-a253-5c650c8ff017",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cba04e38-55ad-4286-9823-ba6cac45c1e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46545d20-c3ad-4d7e-9407-cc80a1e11cdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48bfeeb7-29d5-46f5-b896-b10ac36434d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c14a3f55-8547-4fde-852c-d63a87b6eb76",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d87cf45-da6f-4820-a328-6dc1dae352e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48f03476-70e7-4935-874f-5c5e61a66fe4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93395006-c3d0-4cd0-8a6f-c781fff6b282",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e645e45-8123-420e-9c5d-e9d565db37af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d6d07ed-a02c-43ab-af42-3a3b9f6d58a5",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f334c5-948e-4cd3-a15a-783a60e9a61d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "221fa843-bbad-4a0c-9cb7-424382bd20e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cabb41d1-8f6a-465f-a4bf-6a34c0c0fee4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52a85263-4dce-43c5-8fe6-eaaabbf1b270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b926a1fb-4d63-40d4-8b6e-4bdd79f06dd4",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94fa3ce7-6523-44e4-95a8-77eb09658497",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27f1975b-b78f-4a4e-a29a-9835376bf5eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "659a426e-5b04-4f18-a38d-7b839324593a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfd86cf5-b8a7-43e6-9fc8-638410e7ec1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832cc2f0-50be-46c1-8f64-004fe52145c6",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b48437c-2e41-49a0-a49c-c07c955cca80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96467ca5-627e-4d16-af33-638372c8c9f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae09b76-6956-424b-ae72-81f001d8c0b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cad9485-c55b-4ebc-a136-c82b62d7bc7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9649b340-57b2-4275-a898-5381d0302aa7",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f5efedf-10aa-4458-9f66-2e751adbc27f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db3c7cff-6238-4246-911e-67c641ebaf95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c40316c-232f-4d21-b092-961798f93c50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19bdb842-5582-4bd8-a852-9ab41b53da87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad862263-593a-412f-9ed2-f2564ee70b58",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96c2d9e3-a366-48a6-a6d3-dcd4bf484cd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53452211-6b07-4847-92ab-4af2a20c2941"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a17bebc9-5a7e-4ae7-a274-3258cbbb90da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40e3f2ca-a830-46ff-90ce-e78209aa2766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d90f1e25-1222-4f06-97f9-f5ff776c7ae8",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b41b7eb3-9f63-44e5-b307-4e391e1174b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de4fcba0-9f71-4155-abfa-7bd3ab7641de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8465da1-a3f5-4c21-9253-cd730c892b83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60f7b25e-c26a-4dc8-9cf8-6a3c7a8d7d5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d7bd714-06c1-4104-af2c-e77d4656b841",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbd3ab84-05ca-432e-879e-7b265d2e92ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2be2d6c-0a5d-4925-8f52-7b583c000e81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7ecbdab-f844-46a5-ad8d-b33c5f163410",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cc61bbe-175d-4dc7-9396-f6a682543586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9340abb-94a8-42e1-9d40-19ad51eca89a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f34f6578-3978-431d-b377-15c0f3ebe532",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3f46099-4594-4b76-ae29-15bcd9806406"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d20113-96ca-4e85-ad76-2efe1811435a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2586c38c-4555-4ffe-b940-daf03a0e37c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdd2c897-b471-4d78-80e6-99978e73212f",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ae5faf-3019-4499-b544-f8286bb2819f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a0a8199-555c-4bc6-8d79-174f92c23886"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d66f26d2-a7f7-4e78-915c-df81d71dbbf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b0eef02-e961-4bda-813c-9f1c866f85af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3e4a666-6adc-4778-93f7-ce1dc1ab6c11",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0c3ab9c-10c2-4196-bd4b-8780b29c2759",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9594b45-20a8-445d-b830-188a9aece697"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d69191-99d4-421b-a7ac-38e70ded5835",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89aa647d-8979-4b27-a3c3-4928cbd471ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "099ba00a-bc72-4ecd-af96-d18274381fa7",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f60ad3d-2b15-4558-9694-02390f95d6bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b27e60e9-7be7-432b-8f5f-5eb4d27f7a4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de30b11-b1ce-4800-aa93-7d0551bf5c25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63686c4b-b9a2-4d5b-ab7f-05b4c1669dee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6329edad-84b8-4567-a19f-9c0b4033e966",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe782c38-9570-45b9-9e45-996b98731538",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9062b61-3bec-4046-9c53-203393a02f7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d31a7cd-1cbe-4c36-9295-ed01ac174fbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed9a2ef8-9ee3-4550-ba88-1aecb720437c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ac7c04-b50e-47e3-a46a-13e557fc843c",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "279edbbe-5068-487f-aefa-ba0a894ce63a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "054d8f9d-2bd7-47d9-a680-993d973d75b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2234e8a-6bfc-4c17-87a9-43c39ab6478e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35b13b8b-71ee-4769-98ed-9427417a936c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4573fa2-a5d4-471e-9853-5979f83ffc08",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "049af714-4690-4017-a388-a650ab7c7794",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adc4ee9c-6c05-4cac-b50a-6f75cc035d22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b97c3f14-3dc1-46cd-999a-3dc51ddb98a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5774a91e-f42e-42b2-907b-042c0dcb3820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e7b2d8-5d27-4233-879a-52d3d371d3f4",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d074b3ed-ef12-456b-8784-e8866fe29624",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9454a142-0341-4299-ad04-34e58b0c2559"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf01adc2-f177-4917-a2a1-dca3cb242ff2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e8accec-7e3f-4c48-a669-804638f2d5d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c160b298-370c-45a3-86fa-1a0692406d99",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b77b981-af6a-410a-bd3b-9f9ffbfa84d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13a532d2-faa9-45a7-994e-d050efffeec2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4e823a4-079d-4e2a-9dd7-fbef1e37bd88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4661006-5df1-4169-b3b6-24978fba9d92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f3273a-189a-4022-a3a6-747f1bf683fb",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b8ffc6-fe1d-42da-8a56-78cdd1106476",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f56f6559-37dc-4e0f-92cd-eecb92f27fbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "000e5db8-7108-4fb5-98d2-5752408c9e02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "056158a1-9507-46f7-ab16-4171fa9637cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2db8d34b-a6b7-4535-8f56-5fcefd97bd50",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2ce65e1-d846-4a9d-b190-9bf8a0f4652d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "497e0230-b5a6-451a-98c5-d6e95e843c98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e07c9aac-9be7-4c39-99e4-89e5cfff9a93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8360fcb3-13fd-40f4-adbf-6f0fb3ae3b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76e2b36b-5c5d-4627-a12d-517c071926ea",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1dd4675-daf0-48e7-ae4d-5aa53b4fef30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a49ada6-20bb-41f3-8b05-8cbbe2e0ffb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb73f77b-359c-4a38-aa98-9658bfe406ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e43d01f4-e796-465a-8417-01710a000ce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03ea8d75-2baa-4194-b2d6-3d5f1b0e258b",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfd51cfc-30f0-4c3b-a2c8-fe30868d7e31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d20e68ae-62b7-4c5b-af0f-44857cab22c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39eea5a2-f985-4764-a745-03204046355e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca14aadb-4d28-41fd-984e-364adc5016fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b131cb61-e803-4d5f-b7c5-f0511fb8e15c",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "920b86a5-331a-4851-a128-9614334ce3e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18a2c8de-06b2-42fd-9309-da89ee5f099d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "175b4c49-0ec8-4715-91f7-bca394fcb67a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d569ddb1-3f7c-4dce-a437-c003baa4572c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c4c19ae-065f-412c-b4bd-90e1d1f5f276",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa49b35-cda1-4a28-964c-bd00074053a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4759b66f-573b-4085-85f8-0dfaa2ee1fd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca8f86c9-1180-418b-be08-4380c0bdb2d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2efd6ec-d922-4767-82be-a77e6958f729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a3689de-cfff-4497-bf61-aecfbb37ca87",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bab6a993-cd10-4685-8ca3-becce8d9f2ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1273721f-16d0-4d04-a06b-1f0da124f6a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e0f8dd3-c4b8-493d-b4d1-c097bbf6899b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7346a8b6-2ce8-47eb-89d4-cdeab3307613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41703450-1e2b-4ee4-b59b-396c887ee8f5",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8c200db-edc9-4873-8b9b-d3ced708cabb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93eb211b-3cc9-4f08-a517-281c06857194"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c64cb44-988d-4953-bfca-ddea3f0ce463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70d6133a-fc8f-47c5-8bdf-95ea13c4cf23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fdf01f0-efc5-4666-8c8f-aaf116cd6e01",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b2c6006-52b0-473a-a065-cd3ec7da02ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f5211fa-bff6-4587-bc47-e7c1885ecf30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74192dee-197f-4f7b-9c97-9b2fcbb30bb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00becf53-f2e9-4007-922a-eac77c719d03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f199842b-fbfb-4bc3-9b48-4871cf91716d",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9706717-b61f-41e6-b277-ac6f51569742",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e793f88-b763-485e-a581-123aad5b4045"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b0afa30-bc38-4300-89c2-665ebebd8290",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fff19fa-5903-4b01-88a9-3ad09ffafeec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59439d70-bc5d-4a8a-8487-36b4093ac135",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f083276c-f5db-435d-8610-428264a57e8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86d77169-83e6-4b8a-91f4-9d7a1013a873"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e70247b-5bdb-4944-9881-f5c02d180d9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcdf8373-2d9f-442e-a4ec-af8625cf02d6"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8ca28915-57c1-4ba4-8dd0-7ea4471c68c0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "12fcc9ec-3357-4437-9000-16ecbdd72e7d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "34a70fcd-a736-4ee4-bbf9-bec00355d237",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c86b5302-ef9a-4aff-a92a-134d6ab9dcf7"
                    }
                  }
                ]
              },
              {
                "id": "c545cded-af44-4f75-b7eb-c6f074f07348",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1b2c7a28-ef30-4eb8-af18-773d98f3a960",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3481fa4-3422-4ddc-b1f8-1d8f5545d9e1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "349e3214-ac91-4cf2-ad04-bb536892ea48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca966b17-fbc4-4de3-ad69-3de743e8ed53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f6770fb-f639-478a-8bb8-9439a1122a64"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "41828d52-dd1c-40db-ac78-b4b365cdc660",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "865d9b48-5524-4c74-98c7-c89868842f1d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f7f99bb1-fad8-40d3-9f73-1aa2bc7db9d4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "076fdd58-7e48-4229-aefc-9c0cbcd229f1"
                    }
                  }
                ]
              },
              {
                "id": "7d6385d8-c114-4dab-9fd4-b7c01c731113",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "ff5949b9-f7c5-4b2e-8508-c26083b32498",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f17f8d42-cf2a-455e-a035-e4a8172e7e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "b349883a-9dc9-463e-b75a-660f2e6062b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec0c3f4-ba4b-4bda-a58b-f0936f898c00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "338cb42b-ef14-4219-a691-877859e6b9ae"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b99adcca-49a1-4f0b-a076-cfab5c4eb6d0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ac86d083-f0f3-4741-94e5-019287ae45da",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb021ef5-12db-4cf1-8311-1b060dd12926",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4931bb72-d9c8-4dc1-9c1b-3a8c2ccb6598"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "643e554f-08e8-40eb-9b94-3c63747efcc7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "24cd4be9-c0c2-4d50-9947-ab54d9650ed0"
                    }
                  }
                ]
              },
              {
                "id": "1c29acd1-f88b-43a1-828d-1dac7a5e7bb9",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c72cd8df-0e58-417a-a492-fbd9a1854830",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1886cd32-de36-41eb-8330-e1d8c201f4bb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d4b97260-ab10-4a68-a4cc-996c8b9fd7ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89830a4f-4045-492d-91b9-beb20d3b1bea"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "78c38da6-ebe6-4dde-bef8-d34417e6b6ea",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "7aa6fa68-1cdf-47b8-9915-111bafa7c3f8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a144e93e-6cde-4ab5-ba7e-4448109dad6a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bd4ee55b-738f-4040-b56c-1293b6d7f1e4"
            }
          }
        ]
      },
      {
        "id": "888330d7-698a-4359-b0e3-52c7ee8ab8b7",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "5d21239a-e42f-4218-9843-2ce4283d0abc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d7232849-5094-4ca0-98e5-75f70cb5a47a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "065587ed-d585-45fe-9397-cd2bb0e26853",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d9b4b06-7a20-4d91-8b57-76eaad5fc976",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e0117781-80ec-4a9c-acaa-3d2ec6d2f2db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d057fde-5c5f-4ae5-8747-e17aa715a3d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a85ed36a-365a-4fb2-8f53-773a99dca387"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7f693433-b266-4c99-8a93-bee3bc174169",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e9f677a9-9438-42e4-984d-9e3aeedddfe5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "51ea37b2-9250-4516-98c0-879addf04835",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8de01718-649d-4ab6-9063-b10c604d0849"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c4a5df97-705d-425e-b0f3-8ed30ad7a096",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e21d1e3d-e7b7-4528-984e-10020061faca"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1dc7cbf5-7e4d-46ac-84a8-d620b29077d5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5145b9d7-3f18-40c9-8f73-aa7f30b37869"
            }
          }
        ]
      },
      {
        "id": "9c8eebdf-5aed-49a3-a290-caf01b7df438",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "db054d0b-1afa-4305-849d-b3d936bece4a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7e22faff-644a-4e40-9beb-7a0b33b2c231",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6ee835f7-1434-4655-8ad0-341f118c98a8",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475ba987-15f8-42ac-8cdf-a179c211f435",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "22611d0a-8c65-4cd9-83f9-e5fe92821442"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2866fc29-3f70-4ca5-82a5-308a3cf5fc5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8e66b9b1-ddd3-45b0-9a06-2f8d071eaeb2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "222b464e-455c-49f9-9aa6-fcc2f5d906dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60ed170b-c3dc-456c-8fd5-2eca3780a1c8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e040db39-9962-4718-a2de-4d8f48edc5b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c2d66dff-fb3d-43db-b36c-1cda80ea8c45"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "499860c9-9942-4ccf-8502-6ba1f86e6ae8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5d8b4656-f98b-4aeb-b754-567a717c3e03"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fac7dd2b-2d9b-48f5-bf09-335b34be12c9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "55a95b69-2a56-40cb-8a9f-8a5ef828ce1d"
            }
          }
        ]
      },
      {
        "id": "296ff6d0-b441-46ad-b0c0-495afb6d31c1",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3e81e252-f48c-46e0-8aa8-be0339a02c75",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e1a3c332-f6d4-4597-80e4-89aefeefcef8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "386bfbb5-390a-46a9-94b3-a8fab1f5d9c5",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c836fa0b-e142-4d77-a921-24b538a8f438",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "460357be-6cbf-4fe6-8798-b7f4dcc453e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85f070e0-e24b-4a56-880e-bbd21c20159b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "93a993b0-adc3-4776-807b-3894ad1b6acc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9df6678-955b-483e-b876-e45f461ab2fc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "700a6c57-c842-4483-ba0c-23fd8c30665e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d4ddc6e-e7d0-4011-95b2-e636d1424090",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ca70b41-18a0-4512-b108-44008f80e939"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4ca4bf21-011f-4dc8-88c5-85a9602da5dd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2cd01985-5b6c-4540-835f-a6797f29746d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3e5ea78b-4cc0-482e-81b4-53f15caf3161",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6a6d3727-ebf6-40ba-9eb1-1ef184db0cf8"
            }
          }
        ]
      },
      {
        "id": "2f4b2f09-2f49-45b4-b257-2148074597f8",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "caf185f3-09b9-4688-8edd-f7fbe5ecc1e3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "13630bb5-0698-4c60-91a2-3d5d17835e7e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "21b240f1-21ed-4a3a-97a3-4539b9f2dae5",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fff60f76-d733-4b3d-9b44-a6ad3e54243d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eac54033-cc07-4410-b0c0-210016e0b743",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 55.2105263157894,
      "responseMin": 6,
      "responseMax": 467,
      "responseSd": 68.51772387994149,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1697589229847,
      "completed": 1697589258465
    },
    "executions": [
      {
        "id": "28f147a8-b729-4de0-89b4-16d6aebec0f5",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3d5ad0dd-5f37-4b9c-b255-681896c030f3",
          "httpRequestId": "5b9b10f8-5e46-4309-a9e4-557b2d3b947b"
        },
        "item": {
          "id": "28f147a8-b729-4de0-89b4-16d6aebec0f5",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "d4210b8f-5a7b-4fa7-889d-dbba69d5f286",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 0
        }
      },
      {
        "id": "e2b459f4-3e10-4bb0-89f2-0d2876b75942",
        "cursor": {
          "ref": "3422f44c-c239-4819-aa63-ce3b4296b9f6",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "bb4f6953-b005-4c1d-933e-855ab661fd62"
        },
        "item": {
          "id": "e2b459f4-3e10-4bb0-89f2-0d2876b75942",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "a267559a-2533-4f33-85c4-7ccc9e9321a1",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "a079fef4-383f-4b18-bb2a-cd0a999902e9",
        "cursor": {
          "ref": "7b0f1f98-9c2f-4ae9-a7d7-5a6f3653518a",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6b6bbe53-a79f-479d-a5ae-de7516ee9af6"
        },
        "item": {
          "id": "a079fef4-383f-4b18-bb2a-cd0a999902e9",
          "name": "did_json"
        },
        "response": {
          "id": "243a3005-8023-4966-b162-bbb1cc22e90b",
          "status": "OK",
          "code": 200,
          "responseTime": 389,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d23e1b5b-06c1-468d-890c-df5e73e9d820",
        "cursor": {
          "ref": "2645eca5-2feb-4096-873e-e048f48698d9",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "603b2987-36ca-487c-bc79-f38dc6a77df8"
        },
        "item": {
          "id": "d23e1b5b-06c1-468d-890c-df5e73e9d820",
          "name": "did:invalid"
        },
        "response": {
          "id": "e972cd3d-6e80-4c17-80db-3f288456a39c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d23e1b5b-06c1-468d-890c-df5e73e9d820",
        "cursor": {
          "ref": "2645eca5-2feb-4096-873e-e048f48698d9",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "603b2987-36ca-487c-bc79-f38dc6a77df8"
        },
        "item": {
          "id": "d23e1b5b-06c1-468d-890c-df5e73e9d820",
          "name": "did:invalid"
        },
        "response": {
          "id": "e972cd3d-6e80-4c17-80db-3f288456a39c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "808d7b3c-a661-48f2-a0be-0a120d797330",
        "cursor": {
          "ref": "3ba69edd-4247-40bd-aa12-47f06bc823fb",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2ab77a3c-f21c-4387-8b63-b762437d8d37"
        },
        "item": {
          "id": "808d7b3c-a661-48f2-a0be-0a120d797330",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "93ff5c9e-c42d-4eaa-8bbf-e0fe5ba91bcd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 89,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2ddb189-7ba6-459e-95ab-895961728636",
        "cursor": {
          "ref": "d334d827-f2f8-4acb-b6a5-40f402832dd7",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "1f9fa42b-6caa-4dd7-899b-5e006dae18af"
        },
        "item": {
          "id": "a2ddb189-7ba6-459e-95ab-895961728636",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "c959b5d9-9b8b-493d-8205-72d1e6c19388",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dca658cf-05b4-4755-a50a-736bd8f12a31",
        "cursor": {
          "ref": "9961d101-0608-428c-a70c-a5e9712d40f6",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "137bc96b-eac5-4478-b2a7-004d937cfbde"
        },
        "item": {
          "id": "dca658cf-05b4-4755-a50a-736bd8f12a31",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "18a99b70-eae5-4326-bafe-eb5147627f7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2205d071-df86-4347-af0a-b7cf0f3ec082",
        "cursor": {
          "ref": "f02af006-03c2-4276-ab37-3ae8ca99ecc8",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "541ea334-0a76-49ff-a83c-e25587905d3c"
        },
        "item": {
          "id": "2205d071-df86-4347-af0a-b7cf0f3ec082",
          "name": "identifiers"
        },
        "response": {
          "id": "13cc83c1-3c46-4446-af0f-e7266c3a7ae5",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21195e47-22ad-48da-ade0-cb9f8f4aa22b",
        "cursor": {
          "ref": "de1326c1-649b-455f-bad3-b37a39672429",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "54351d70-a0de-4c4e-95d0-05fc502e0ccf"
        },
        "item": {
          "id": "21195e47-22ad-48da-ade0-cb9f8f4aa22b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "0c760ee4-bec1-4b54-8bee-6fd36149458f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b42bb24-6fa5-465b-b3d8-41e64a67d80f",
        "cursor": {
          "ref": "700198b2-1744-4e4f-a331-bd65d1295833",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "cbbe4b3a-73c7-4a31-b20a-675cc064da40"
        },
        "item": {
          "id": "5b42bb24-6fa5-465b-b3d8-41e64a67d80f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "606d5788-f0cc-4b00-a6c8-80919fc08977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8f7386c-5792-4126-9c77-66c04ef5c12a",
        "cursor": {
          "ref": "d344d4d6-c5fe-44e4-bead-1aac7ade878a",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "78e530cc-0e5f-47ec-a28c-3bb33b40ceb5"
        },
        "item": {
          "id": "c8f7386c-5792-4126-9c77-66c04ef5c12a",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "4df190fb-3f94-48e6-9ef4-7a862d619aa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f883252-c764-494a-825c-fa3757984ef1",
        "cursor": {
          "ref": "700777d0-c286-4f9e-9f0d-21f4c9a30b5d",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "57b1eb15-2528-4763-b8e2-880e269ddca7"
        },
        "item": {
          "id": "6f883252-c764-494a-825c-fa3757984ef1",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "8e7a1a3d-39e7-401b-9e92-a7ee464e8b77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bff856bb-8f5a-40a0-9206-bbb5628fe5f8",
        "cursor": {
          "ref": "6888ada5-139c-432e-adb6-9484e57256f6",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2f91e16e-fa99-4e39-aef0-e9f0cdf6e10b"
        },
        "item": {
          "id": "bff856bb-8f5a-40a0-9206-bbb5628fe5f8",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a0255396-1cd9-4b81-8978-5147572cfc89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "736fdc70-2bd4-400f-90b8-26ca164cd868",
        "cursor": {
          "ref": "51663e96-b2e0-4805-860a-99a9ae544b3b",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0017dd51-8c3f-4162-92da-a5f9fa5091ab"
        },
        "item": {
          "id": "736fdc70-2bd4-400f-90b8-26ca164cd868",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "3f24c79d-03a1-4f11-8172-4b49dca62697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "513b398d-98c1-4d16-91bc-bc7d694bc24f",
        "cursor": {
          "ref": "629ae2b5-add0-4a5f-9b84-be5b3335bd10",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3abd22e3-18a5-45bd-8ca2-9213309c1352"
        },
        "item": {
          "id": "513b398d-98c1-4d16-91bc-bc7d694bc24f",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "61148556-9db4-41d1-8c34-ffb3a5cfb8ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22e1bcf9-4140-4b31-998c-9a79730d01e3",
        "cursor": {
          "ref": "03b2c934-60ba-4083-840d-5d3495e466fe",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ce674345-a5d5-466d-807a-e66b9a098d57"
        },
        "item": {
          "id": "22e1bcf9-4140-4b31-998c-9a79730d01e3",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "27ef18d3-94fc-4ec9-b7b6-5eb7189220c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "210e37d7-5a1d-4089-ab6f-d3fdcda28a12",
        "cursor": {
          "ref": "d5fbec83-01d8-4764-8e1f-9d3519ea4046",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "970126e3-9d4a-4b2d-9f85-13d2a6da9d08"
        },
        "item": {
          "id": "210e37d7-5a1d-4089-ab6f-d3fdcda28a12",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b1549681-fbe4-4d17-b99f-95eeba5cc0a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eed209c6-902c-4299-af2c-48c2fd92001b",
        "cursor": {
          "ref": "468bb051-4702-4b47-a011-c97aa22a1983",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "34d20fba-c8d0-42a4-9c3e-536440013dda"
        },
        "item": {
          "id": "eed209c6-902c-4299-af2c-48c2fd92001b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "0659a8a1-cb66-4e05-91e8-1e0aa45e53c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eb64ad8-4dd9-4183-9b36-08d559b3c397",
        "cursor": {
          "ref": "8a3c6e11-319b-4873-8a05-d2a599409251",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "5c773c74-eea9-4eb4-a051-42936e05b656"
        },
        "item": {
          "id": "8eb64ad8-4dd9-4183-9b36-08d559b3c397",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "72dc4eff-7074-4a90-950a-9f4682536e62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08fe88a2-c396-4557-9368-5654b153e11d",
        "cursor": {
          "ref": "763b9a55-acf6-47e5-a548-17785f8c4028",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "36fbe65f-28b6-4086-9793-ea3068d7e29b"
        },
        "item": {
          "id": "08fe88a2-c396-4557-9368-5654b153e11d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a1a99a8f-d519-4b2f-8d89-f7d704a8bbcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25791384-ac95-4814-b30a-50f98e73d801",
        "cursor": {
          "ref": "c6194f4d-d393-4afb-9320-c0c802af17c1",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9fd843ad-c33c-4b9f-82a3-bf66809f7efa"
        },
        "item": {
          "id": "25791384-ac95-4814-b30a-50f98e73d801",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "12fc0ed8-56cc-46b1-a986-f4f1a6d0d5ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f300362-8c44-4e14-8349-443da431ef8b",
        "cursor": {
          "ref": "e8bd9731-3076-4638-9cf8-bd6648b054fb",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "06facf29-ed4f-4e3f-ad0e-20932d8d242a"
        },
        "item": {
          "id": "2f300362-8c44-4e14-8349-443da431ef8b",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "fbeb91dc-df8d-4041-9c4e-d97c8e4e407e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77e914c6-9338-4448-8dce-457b06602bc7",
        "cursor": {
          "ref": "179997b1-f061-43b6-9a27-a93bcc2451b7",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0cd2959f-37e0-4455-acae-c54ea7358d23"
        },
        "item": {
          "id": "77e914c6-9338-4448-8dce-457b06602bc7",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "b4a22094-6971-49ed-9948-db8753d8ec55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ab24c6a-1e6a-4a46-a1c4-c3978abb4df2",
        "cursor": {
          "ref": "437480e0-907e-4edb-82ad-fd07e58cc6ab",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "5e3579a6-df4b-4951-8f58-96da05accf00"
        },
        "item": {
          "id": "8ab24c6a-1e6a-4a46-a1c4-c3978abb4df2",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "a9c066b8-f57d-4c6a-a742-d7db615765aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dc60308-5270-4846-85a0-6b3535fad714",
        "cursor": {
          "ref": "e79c56d5-bdd2-4a54-a997-6e39c23b29f7",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f5187b27-c4bc-4ff5-9f12-c08892b895f0"
        },
        "item": {
          "id": "8dc60308-5270-4846-85a0-6b3535fad714",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "65b56783-f960-4f2d-81b6-66714472fe0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cced001e-ac75-40a3-b248-42b614fda82c",
        "cursor": {
          "ref": "cffcfb1e-54b3-4e16-8985-0c9b7df91a30",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c951e9e1-d8cd-43a6-b672-eae8f8309928"
        },
        "item": {
          "id": "cced001e-ac75-40a3-b248-42b614fda82c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6acbcb9c-5143-493b-9def-bdf51c3a798b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "748dc41d-2d5e-454c-837d-51fb36eeda09",
        "cursor": {
          "ref": "382aaabb-5279-4eb3-85ea-cc91d5163576",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b7746d00-67bc-4647-8c17-2d3d3ce337eb"
        },
        "item": {
          "id": "748dc41d-2d5e-454c-837d-51fb36eeda09",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "7689efed-48a1-4b60-b61e-604dc68c0a2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c8569f2-ea5d-4279-8e24-d6df6a5b8e9d",
        "cursor": {
          "ref": "383108f0-ec0d-4e60-a2a6-b340e667d874",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "aee33031-9d46-4a1d-885b-fc53a4b08f5c"
        },
        "item": {
          "id": "4c8569f2-ea5d-4279-8e24-d6df6a5b8e9d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "bdb00257-7f48-468b-8473-d24a11b68f48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5f54a6f-5ef1-47d3-8e47-f1110b12676d",
        "cursor": {
          "ref": "f666b802-fa4d-42b6-a96e-3e0934485f23",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "6f9536b3-6daf-446e-85b9-013f6a2a0d55"
        },
        "item": {
          "id": "b5f54a6f-5ef1-47d3-8e47-f1110b12676d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "04bc5d45-4d3f-4cf1-a13b-c8411042ac53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3866356a-467d-4b96-97fd-57d1d4a6a7db",
        "cursor": {
          "ref": "4e6f6352-9a39-4117-94de-878bd42e1d4e",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "6a477f6e-94a0-4c6e-b1f9-65d02cd8df52"
        },
        "item": {
          "id": "3866356a-467d-4b96-97fd-57d1d4a6a7db",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "1b70903e-a5d3-4685-807d-6456313d7c75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b073d79-4da7-4980-ae39-f3232b5fd6ba",
        "cursor": {
          "ref": "afe58543-ef9e-4ea8-84c8-3abc7d30051b",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "30d5b1a7-cd39-4477-84c1-317caa0c3411"
        },
        "item": {
          "id": "5b073d79-4da7-4980-ae39-f3232b5fd6ba",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "aa116fa5-1b87-4a8d-bc43-aff282fa2a98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88a7f7a2-ef45-4e36-9e09-b21a879fee3a",
        "cursor": {
          "ref": "920a380d-b36a-4b4e-b28e-e978d589f2b8",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3b3c0348-d89e-4f7b-979a-7ddedb5ac03f"
        },
        "item": {
          "id": "88a7f7a2-ef45-4e36-9e09-b21a879fee3a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "7304b0e4-8140-4be6-81d1-3998502547ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed4af7e7-9957-40bf-b4e7-4e164b0922b8",
        "cursor": {
          "ref": "ae9b683b-74e3-4572-916f-4a04799b00cc",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a372b860-1146-4b10-af09-8618afa68a43"
        },
        "item": {
          "id": "ed4af7e7-9957-40bf-b4e7-4e164b0922b8",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "c0321e85-c97f-48f4-86f4-b6937dd4cd83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09c5faa9-03a6-4ba8-b8f4-38190e6a8ade",
        "cursor": {
          "ref": "ae5bf71b-681e-4843-82f4-3713e58c14a6",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "56832a7c-547c-4d27-a6e1-b01ea674a49c"
        },
        "item": {
          "id": "09c5faa9-03a6-4ba8-b8f4-38190e6a8ade",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e156db2d-edb9-4238-bc25-99326ede0c4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf09c87-a9fc-402f-8529-f1e1862e5db0",
        "cursor": {
          "ref": "86b31535-993e-441d-b6aa-bb4ea742f367",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "e6a91b12-b289-400a-b5f6-e4e19c009511"
        },
        "item": {
          "id": "caf09c87-a9fc-402f-8529-f1e1862e5db0",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "5511e88e-1243-4a5e-b6a1-051910f0e51b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "833e01e6-89e7-4f17-9a48-dacee506062b",
        "cursor": {
          "ref": "1b87a4e2-4b26-4922-a847-20d15baab73b",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c9b6a790-4388-4f7c-88ca-60b590f3ad58"
        },
        "item": {
          "id": "833e01e6-89e7-4f17-9a48-dacee506062b",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "c80326e7-c47d-4ba3-a069-20ed5b003971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af1d891a-0177-4ae9-ada2-8d2dd297e95e",
        "cursor": {
          "ref": "55c5b92b-4674-47a8-8e4d-425c94099e34",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "27b1075e-ddb6-4146-8c4b-71c8e6dad00c"
        },
        "item": {
          "id": "af1d891a-0177-4ae9-ada2-8d2dd297e95e",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "df1d6c10-2600-4d35-badb-8d34b5e9fd71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eda362e-4cdb-4221-bf72-d9efdf5ae60d",
        "cursor": {
          "ref": "2b94a522-a136-4be2-9312-1fb4d26c6b4f",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7f44b77c-3108-4434-b300-9a5a95372092"
        },
        "item": {
          "id": "8eda362e-4cdb-4221-bf72-d9efdf5ae60d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e3a81678-86ce-4768-b499-7bc1c1173de0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4eda3a7-4117-4008-9e55-5ca7218db0b6",
        "cursor": {
          "ref": "a1e5f425-c30d-4c28-8c1a-8d86aea1d49d",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "2f2fd694-6701-4f0a-a74f-78ca3acd0399"
        },
        "item": {
          "id": "e4eda3a7-4117-4008-9e55-5ca7218db0b6",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "799619bc-d902-4dcd-bdc0-767c849fad8d",
          "status": "Created",
          "code": 201,
          "responseTime": 452,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "da61de9a-9edf-4ef9-8ee8-992fb6c145a8",
        "cursor": {
          "ref": "1c8fac39-23d6-4a78-8eed-bcf1b2fb440c",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e603091b-7412-4e63-8063-f88c5587c05c"
        },
        "item": {
          "id": "da61de9a-9edf-4ef9-8ee8-992fb6c145a8",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "46d496d5-ce84-4e2d-bd23-d58d4f8ba08d",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "3baed4a4-124a-4615-851a-029e0eec99ad",
        "cursor": {
          "ref": "3ac37069-cb90-4b51-9961-31b0de22293d",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "dd957f40-7af6-4993-b58f-35972f43c972"
        },
        "item": {
          "id": "3baed4a4-124a-4615-851a-029e0eec99ad",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "b2863ef6-cfec-4d87-8b2c-4d9833b375e9",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "b30cdca6-6ba7-451c-801e-3a5246785086",
        "cursor": {
          "ref": "7c84696d-d908-40bb-99ee-59cee3b6411f",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "08e944ae-e413-42df-adb4-5f587c85d12b"
        },
        "item": {
          "id": "b30cdca6-6ba7-451c-801e-3a5246785086",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "27bcd420-a603-4b5e-a755-15905d9da66a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a1f8c97-8401-4e1e-8345-7934d229a7b0",
        "cursor": {
          "ref": "f384529d-5850-4038-9de9-13e01a58d394",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "2f42fa2d-4059-4387-8d52-024b01edecbb"
        },
        "item": {
          "id": "2a1f8c97-8401-4e1e-8345-7934d229a7b0",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ce4af6c1-96a7-4fd7-b8cb-4eb00c1f7f10",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "b33c7661-0bc8-47f9-8575-d064719975ea",
        "cursor": {
          "ref": "479922e6-9e8d-469b-b3f0-c250e39af769",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "b2e5fc69-03bf-4c30-80a5-dce37d8750a1"
        },
        "item": {
          "id": "b33c7661-0bc8-47f9-8575-d064719975ea",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "aa613d45-d598-407e-9b75-3afdbd9ec2f4",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "4b237b7c-1d95-4035-a5f8-4665415b4868",
        "cursor": {
          "ref": "5afc208e-479f-448c-a20d-170fcc553f10",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "54de21ff-daa4-43b2-8d50-b7c0f8bb29ae"
        },
        "item": {
          "id": "4b237b7c-1d95-4035-a5f8-4665415b4868",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a5fb10ab-b6be-494b-ae61-6723da39bc97",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "05fe8871-a408-4840-ac03-d50e65758687",
        "cursor": {
          "ref": "977670db-fecd-4605-adfe-11994d00b44a",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "2f57e464-eb63-4c02-b8c2-c2e97c894bd7"
        },
        "item": {
          "id": "05fe8871-a408-4840-ac03-d50e65758687",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "d1d27e25-d84f-4550-ad3c-b16e794ca2e2",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "4c780974-22fb-4531-b858-cf1793834aa2",
        "cursor": {
          "ref": "705cdab8-1b36-4cfb-885f-92202e6d3e59",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "d3c43c4c-44ed-4ebf-a937-892b0e437741"
        },
        "item": {
          "id": "4c780974-22fb-4531-b858-cf1793834aa2",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f22eae9b-51f1-40b2-99cf-3abb1ddd3ea6",
          "status": "Created",
          "code": 201,
          "responseTime": 215,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "dbee8ae8-fd41-4489-8bbd-8f49e85ee73f",
        "cursor": {
          "ref": "3f192c7d-cdd4-4178-a1d8-1a89de25298f",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "07a9ce6c-5d71-4a06-9347-3b20b86c113e"
        },
        "item": {
          "id": "dbee8ae8-fd41-4489-8bbd-8f49e85ee73f",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "87def85f-a761-4958-98bd-b1c56097f316",
          "status": "Created",
          "code": 201,
          "responseTime": 219,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "a0f952df-0882-4211-9b5d-58c39431063f",
        "cursor": {
          "ref": "6406993e-e706-43a9-8964-83987aac1972",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "5329b350-2c90-4254-8cfe-968e19806837"
        },
        "item": {
          "id": "a0f952df-0882-4211-9b5d-58c39431063f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "f4c9123f-8b46-446d-ba72-c8a3c478d461",
          "status": "Created",
          "code": 201,
          "responseTime": 222,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "99610b0e-aede-4d78-a35a-9098e46022e3",
        "cursor": {
          "ref": "63c22c0a-246d-48c7-8966-9df25d879ca5",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "07b43d19-109e-4eff-989d-feb2f4e0f66a"
        },
        "item": {
          "id": "99610b0e-aede-4d78-a35a-9098e46022e3",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "f6c28308-7e25-4c6d-9805-4ad2666392f3",
          "status": "Created",
          "code": 201,
          "responseTime": 215,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "3c84c171-3887-46aa-adef-36bdbd0f74df",
        "cursor": {
          "ref": "38ea2df4-b465-4095-970b-f9375f509276",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "649f9f95-b533-4aba-a6dc-c16742f8671c"
        },
        "item": {
          "id": "3c84c171-3887-46aa-adef-36bdbd0f74df",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "bea9c7cf-a3a9-4fc5-9992-35abf95672fd",
          "status": "Created",
          "code": 201,
          "responseTime": 467,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "f237909a-6bf5-43c3-a16f-9d3fea62f517",
        "cursor": {
          "ref": "0155a560-9770-4ea0-bcc9-edc8334be00e",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ed8785e7-0960-4a74-abb0-5a5219732358"
        },
        "item": {
          "id": "f237909a-6bf5-43c3-a16f-9d3fea62f517",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "554a8931-3595-4d08-9444-98e24037d77b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee6291fb-593d-4429-b85d-fc6605d27d8e",
        "cursor": {
          "ref": "5d77ba32-a999-4308-94a7-870da1edf2f1",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "7831d12a-7ca4-4b9b-851f-00b154b08d53"
        },
        "item": {
          "id": "ee6291fb-593d-4429-b85d-fc6605d27d8e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "837caf63-6e44-4f69-9490-08b18c260be2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf03f403-d406-4864-acef-44271477e9f4",
        "cursor": {
          "ref": "1842f2e3-acef-41e8-85e4-32c54dc951d3",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "795549e1-6edc-41b7-8274-ba70d51faeea"
        },
        "item": {
          "id": "bf03f403-d406-4864-acef-44271477e9f4",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "0c1fc002-3f93-4680-adb1-f6f5a0e01235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fefafdaf-493c-43a5-beec-60d5656a7074",
        "cursor": {
          "ref": "021d5fc7-40eb-4cb9-b087-ece81c30b98d",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "79340172-de11-4173-83d6-b73f5327e909"
        },
        "item": {
          "id": "fefafdaf-493c-43a5-beec-60d5656a7074",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "6fb30ce6-2b2d-4355-ba34-3e8d5925b2ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab0c41c0-9cce-4508-b7ea-aa39d6e037bf",
        "cursor": {
          "ref": "a31c8782-4861-4f39-94a1-11c76704fe76",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "027623a5-df72-4db0-b1b5-183818e7c4e2"
        },
        "item": {
          "id": "ab0c41c0-9cce-4508-b7ea-aa39d6e037bf",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "82fc8b5a-0c12-4290-9c24-188698d54194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b072c32b-957d-41c6-9939-1b7f17534413",
        "cursor": {
          "ref": "833055be-368f-4345-8735-8884d94431b5",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "44b71c43-d1b2-473a-ab3d-958b1935ee4b"
        },
        "item": {
          "id": "b072c32b-957d-41c6-9939-1b7f17534413",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "af2cb985-487c-4107-8926-b0b92127a8ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e616b238-0d77-4fd5-9f90-f5e5ef066579",
        "cursor": {
          "ref": "12c24ab3-a520-4771-a736-cd415ea2102d",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "07245cba-0140-411e-b796-446918cff710"
        },
        "item": {
          "id": "e616b238-0d77-4fd5-9f90-f5e5ef066579",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "78b78fee-9da0-4f60-ae48-da52ef9d2a2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cc0cdf4-7f3b-4fc1-b52e-7f6ad2d0f62f",
        "cursor": {
          "ref": "7dc1d7e9-bf4d-4c95-baef-d909120696ed",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3278bc78-9869-4775-938e-b80c1639be2b"
        },
        "item": {
          "id": "5cc0cdf4-7f3b-4fc1-b52e-7f6ad2d0f62f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "3daccf15-4fc8-4e4b-9c7e-a47a6bf152aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "251116f7-abc9-4a76-89a3-08fe09e4fa53",
        "cursor": {
          "ref": "d5516641-71a6-4c3f-be2b-eb5005e66c21",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "40cac708-8fbb-43c5-ada5-d20fd039d1ff"
        },
        "item": {
          "id": "251116f7-abc9-4a76-89a3-08fe09e4fa53",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "bb60f2a9-3bf7-472e-a45e-5be0e9c24672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdc147fa-7701-4959-ac3a-c1297d1c5779",
        "cursor": {
          "ref": "a27063d6-b8b2-483e-a134-ccd54e25b655",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "9e6f4259-c1da-4a77-a794-cebc9cc79536"
        },
        "item": {
          "id": "bdc147fa-7701-4959-ac3a-c1297d1c5779",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "5653beaa-cebd-4246-9599-810b8fb4826e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f56833-ef81-4a45-b2ed-1d6b99dcc5df",
        "cursor": {
          "ref": "8a551987-e539-4d3f-9b19-a665ef8e362d",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "492b8bed-ecce-4434-b2fe-54bd25ba913a"
        },
        "item": {
          "id": "c4f56833-ef81-4a45-b2ed-1d6b99dcc5df",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "e64fb5ed-72df-464a-ab21-65284d78e360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "141813cb-bf43-4ef1-89bd-ac75ea778776",
        "cursor": {
          "ref": "3c8be95a-a806-415b-a27e-ec745b4815b1",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "04d59790-8a56-4e49-ab96-bd37d89b7885"
        },
        "item": {
          "id": "141813cb-bf43-4ef1-89bd-ac75ea778776",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "15686e1c-c174-42a8-9720-8063b4f76d3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e9f0d42-32a6-41d2-9b18-6ffaf11d0bfe",
        "cursor": {
          "ref": "30bd7f18-ea57-491d-98e6-00225f450a7c",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "8f9c441f-7388-491a-9302-3b5fbf7e1e8c"
        },
        "item": {
          "id": "9e9f0d42-32a6-41d2-9b18-6ffaf11d0bfe",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "8b6783c3-c9a6-4c49-a49a-fb69bd2cde03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76a37357-8b88-4ea3-a59c-fc67b91bf83d",
        "cursor": {
          "ref": "4cf9531c-aca8-406e-831e-b65e23740bdb",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "702eed27-3eeb-40da-8ff1-a886d3529465"
        },
        "item": {
          "id": "76a37357-8b88-4ea3-a59c-fc67b91bf83d",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e569d094-21ac-4318-acba-b69c51eb9d0f",
          "status": "Created",
          "code": 201,
          "responseTime": 223,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "60959119-6760-40e5-90a0-38b3a73f4556",
        "cursor": {
          "ref": "7e37682a-6b4f-433d-93f4-bff2b5a58fbe",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "72876cfa-f29d-4209-892a-4734c501f67c"
        },
        "item": {
          "id": "60959119-6760-40e5-90a0-38b3a73f4556",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b50c6684-ad56-445b-9b8f-ef9f105ae60c",
          "status": "Created",
          "code": 201,
          "responseTime": 221,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "c7eea509-07ae-4392-8d8c-cb53d382accd",
        "cursor": {
          "ref": "787ee42c-20be-4dcc-98bc-e6dcd441c8b0",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "744966dc-8182-448d-9bd1-aa56062b89c6"
        },
        "item": {
          "id": "c7eea509-07ae-4392-8d8c-cb53d382accd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "2b238f2d-492d-4079-976c-55473c00c086",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "b3be1610-4227-4aeb-b53b-be5f2f4819df",
        "cursor": {
          "ref": "c1b785fd-5c9a-45a8-af1f-cf62e174654b",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "ae5432db-63b2-4629-b201-91dd6680f8a1"
        },
        "item": {
          "id": "b3be1610-4227-4aeb-b53b-be5f2f4819df",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "5f41de3b-8adc-4a6e-a80b-3590dcb67822",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "1e9bedb0-ad85-4368-a60a-88effe8b8eab",
        "cursor": {
          "ref": "763c37f7-8fd0-4886-a32b-9cda417debb9",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "1a829861-be75-4aec-9d05-f9cfadf4c273"
        },
        "item": {
          "id": "1e9bedb0-ad85-4368-a60a-88effe8b8eab",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "76fc6bf7-ba83-4f35-bc87-acb8a4ee1e1d",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "617989cb-fdce-4ea2-a26e-9cbb866cb398",
        "cursor": {
          "ref": "eb303a50-4ff9-4212-8c42-0c391aeb39e3",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "1cacd533-9c0a-4376-a0ff-27e6197ae91a"
        },
        "item": {
          "id": "617989cb-fdce-4ea2-a26e-9cbb866cb398",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "df9cd03b-45e5-46f3-bef9-8eb1d633c28f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca7de790-f0a3-48b1-a669-7a2d397cd471",
        "cursor": {
          "ref": "73b84e61-6d97-4df3-acf8-14759794bd00",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7fe744a4-9f1c-40e1-b13e-8ec676e2de5b"
        },
        "item": {
          "id": "ca7de790-f0a3-48b1-a669-7a2d397cd471",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "5e250aac-a55b-4bec-bcba-ed4ab2794197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b44a24f-f80d-4586-8731-48b21e79dd2a",
        "cursor": {
          "ref": "31da17f7-665f-4f2d-a4d9-c424c66a6dd1",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "b2430a53-bbb3-49e1-bd9a-b1da6c6fb571"
        },
        "item": {
          "id": "1b44a24f-f80d-4586-8731-48b21e79dd2a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "8405d528-e63f-4e9b-bf47-3cc8d4059356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecf93427-cfd2-4416-8862-4d88b4be2d8d",
        "cursor": {
          "ref": "c20ae322-3176-4c06-b72c-dde564b777dc",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "2806c3fb-ffbc-4b12-8a7d-ee89177da4a9"
        },
        "item": {
          "id": "ecf93427-cfd2-4416-8862-4d88b4be2d8d",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "19771b83-f8ab-49af-8f2e-9bd6d63959e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9af794ad-c182-46e0-9178-b4998ff53c88",
        "cursor": {
          "ref": "2ebae05d-a904-49a9-8656-3b18ad508982",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "96cdfc2c-b456-4ed9-9e07-822c3cbd2cc2"
        },
        "item": {
          "id": "9af794ad-c182-46e0-9178-b4998ff53c88",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "3af4702e-34bb-416b-b855-79734a9cb758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f373dd5f-036e-41ec-8bd8-550457c5a302",
        "cursor": {
          "ref": "85017c7a-28df-4b8a-b4a9-37d913010506",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "985285c7-45b0-491d-8474-9b0acdfcff0e"
        },
        "item": {
          "id": "f373dd5f-036e-41ec-8bd8-550457c5a302",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "75e791ea-26fd-4baf-87b1-ada4e8c4a25b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84631163-fcf8-40d3-b433-5c59637a3bd9",
        "cursor": {
          "ref": "97c02d87-ce03-4518-8957-444a654b5a7f",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "8ef000e3-3ce7-4919-b5d6-0ec1be4e424b"
        },
        "item": {
          "id": "84631163-fcf8-40d3-b433-5c59637a3bd9",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "2458d4b6-a692-4e5d-9558-0991f959aa05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d660727-1755-476c-8310-19cd75a184d0",
        "cursor": {
          "ref": "76189f91-3a26-4828-82fe-a6e971bb5c3e",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "71a317ff-4351-4819-b50b-32d25fc75812"
        },
        "item": {
          "id": "8d660727-1755-476c-8310-19cd75a184d0",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d0fb8edc-6137-4f5a-8adf-f8b0be01ba26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f00394b-1d2e-4c2f-8083-dc952b84b5f0",
        "cursor": {
          "ref": "128514fe-6609-4173-aa34-38dc145e437e",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "a6da8065-0f51-48b4-8fdf-fe6daba2d4a6"
        },
        "item": {
          "id": "0f00394b-1d2e-4c2f-8083-dc952b84b5f0",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "24511878-f754-4954-aea6-455b7707f4c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "356b44d3-80c9-4ca0-9b58-2d6ed3919996",
        "cursor": {
          "ref": "dc04d6a3-8b8c-448b-8edc-70679372caed",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "c53ec8c2-3f83-4c33-b82a-5d1da1d69be7"
        },
        "item": {
          "id": "356b44d3-80c9-4ca0-9b58-2d6ed3919996",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e0f2fbbf-1975-4a1d-a13c-76271a75c437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a0ab56d-05d1-4dff-9610-e91d40238ac2",
        "cursor": {
          "ref": "e05f368a-ad5a-45cc-8d83-d5c50de1a184",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "9b39b017-f00a-46d5-9c0b-ba244b6ab25c"
        },
        "item": {
          "id": "5a0ab56d-05d1-4dff-9610-e91d40238ac2",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "045becde-d84c-4d03-bfea-946ebab36633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55221dc4-52e7-4320-8f74-51994f7d2588",
        "cursor": {
          "ref": "38d7882d-7729-438b-ad0b-010b70b2dc45",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "e6ea2a14-3f5c-4340-a38d-34be10936512"
        },
        "item": {
          "id": "55221dc4-52e7-4320-8f74-51994f7d2588",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "9046ebc5-cdc7-44a7-899b-73f7015dd498",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ffd4ab-902f-4e70-be4d-091ad61273ba",
        "cursor": {
          "ref": "c4b1beab-f110-4867-96cd-67916f12c910",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "84b92ba2-2fc0-4093-80a5-143ad089d864"
        },
        "item": {
          "id": "72ffd4ab-902f-4e70-be4d-091ad61273ba",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "39e414b8-64c1-41ce-a73c-fcca58867d37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1345c7f-cda9-4344-8b22-d26be1909a04",
        "cursor": {
          "ref": "1e7e54ab-f8f6-4b34-817b-5b05fdf3f484",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0b23c145-278d-489b-a009-a54c8b70de6f"
        },
        "item": {
          "id": "e1345c7f-cda9-4344-8b22-d26be1909a04",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "e88a2ce6-c3fa-47d0-b066-94e04eed71a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab62b2c6-57f7-4095-a375-aee1783cb058",
        "cursor": {
          "ref": "efa4e328-d20d-4df1-8dd5-a5b075e4ada0",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "6662ffb2-42c4-40ee-a636-d32a02e3a5d4"
        },
        "item": {
          "id": "ab62b2c6-57f7-4095-a375-aee1783cb058",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "7d63b339-bd64-4f74-a225-5d296cb2b162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bee6833e-4c72-4787-86a4-3c131b3f6602",
        "cursor": {
          "ref": "5e1fa709-34c9-47eb-822d-33ce6a390ada",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "0496efdf-cb4c-42bd-b379-7773a280405b"
        },
        "item": {
          "id": "bee6833e-4c72-4787-86a4-3c131b3f6602",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "067c4cbf-dbd4-4e69-a564-ef6f99cd4c75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3047569d-e561-4988-8d95-bb91c833b382",
        "cursor": {
          "ref": "262ca1da-8ed3-49bc-b6aa-5f6e06608237",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "cf876845-8682-4400-beb6-86c7e749c0c1"
        },
        "item": {
          "id": "3047569d-e561-4988-8d95-bb91c833b382",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "0895d3ff-aa05-43ce-8bbe-cafad2c9af22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9352b29c-88be-4b14-9d5d-584a7d92f648",
        "cursor": {
          "ref": "a1fe5b9f-5723-46fe-a159-97fbe1034d10",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "318671a0-764c-4923-bfa5-d736fead2f07"
        },
        "item": {
          "id": "9352b29c-88be-4b14-9d5d-584a7d92f648",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "dd245cb2-c2d1-4a8a-b9b6-f3b7bc84c227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dec7eefc-78c6-49ed-b803-8dc1c4e345d1",
        "cursor": {
          "ref": "f78ef092-834e-41ca-a0c8-897e63c550e5",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "36f10091-9114-4645-b385-79924fcbe3af"
        },
        "item": {
          "id": "dec7eefc-78c6-49ed-b803-8dc1c4e345d1",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f7a173a4-2b29-4c37-b054-57425fa78202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2780c79-115f-474e-b6ef-8c5d561fa023",
        "cursor": {
          "ref": "cdedb21a-f972-4cd6-a9fb-2bc99a4d31aa",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "391fc445-cf8e-4971-b61c-773d2853f080"
        },
        "item": {
          "id": "f2780c79-115f-474e-b6ef-8c5d561fa023",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b58e0c8f-727a-4bc2-9cca-70beb4304c98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a95517b8-ce90-418f-b0c2-050136b9071e",
        "cursor": {
          "ref": "878bfd27-5401-46d6-b4c5-e1b9af65d8e2",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "43d4e83c-b527-4ed8-9e02-f71ea9ca4340"
        },
        "item": {
          "id": "a95517b8-ce90-418f-b0c2-050136b9071e",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "b9e4fa06-a25d-4dbb-8150-048231ab0245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5e1a427-2ee1-403d-821f-0137de4af8fc",
        "cursor": {
          "ref": "838d74f3-1ca2-4dc3-89d2-920caf0abe2d",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "6bda954e-279f-4627-beed-573da82ca2b6"
        },
        "item": {
          "id": "c5e1a427-2ee1-403d-821f-0137de4af8fc",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e14fdc54-70c1-43a6-9ab4-35eba6182c93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ef5f484-65d7-4d48-b0a2-ac8196794080",
        "cursor": {
          "ref": "f19f9194-1409-4aa0-8580-dd051bdaf457",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "443eb11a-fba4-4330-96c3-bf4c5a8abc36"
        },
        "item": {
          "id": "0ef5f484-65d7-4d48-b0a2-ac8196794080",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "21d8a163-3248-4f5d-8f33-917f03cc840e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa5e78b7-908b-49c5-8b6c-6c63fc1c0bf2",
        "cursor": {
          "ref": "2abdd7e4-1fe8-41ae-b829-9d3590b41236",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "b11f7682-a8d6-4ae3-a2b3-68ab51c2cec5"
        },
        "item": {
          "id": "aa5e78b7-908b-49c5-8b6c-6c63fc1c0bf2",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "384ca0c4-eceb-4411-b569-a593d555c12b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4081a5e4-6a3b-4688-8377-d991a4b41fb2",
        "cursor": {
          "ref": "4813dbfc-b9dc-434f-9078-83b22b56d4cf",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "48d0f56c-c75e-40a5-93ca-f8919fbd55b3"
        },
        "item": {
          "id": "4081a5e4-6a3b-4688-8377-d991a4b41fb2",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "1414f711-4af7-4b7d-a2dc-ebd55c367787",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "716bfeb1-0c6d-4500-814a-ad8c02ec8585",
        "cursor": {
          "ref": "7374778e-4107-41ca-b797-c40dacf7a177",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "36250f38-456d-4104-a18f-11a99bf0df42"
        },
        "item": {
          "id": "716bfeb1-0c6d-4500-814a-ad8c02ec8585",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b5f4f7c1-e791-40b0-9e68-5f7380f084c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "056ff886-bbd4-45ca-88ea-0a15707c7628",
        "cursor": {
          "ref": "54358fca-27a1-4e1f-83c7-1750819e0888",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "104e3c0e-6ca4-4ee1-867d-773e771e104b"
        },
        "item": {
          "id": "056ff886-bbd4-45ca-88ea-0a15707c7628",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "6cc92ccd-a2f2-4dba-96e0-222777b42f79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9145382a-eeb6-45e5-8fc7-32c403e829e5",
        "cursor": {
          "ref": "38a92a9a-fe92-4c3d-8730-9dee21333c0c",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "87695af7-9a98-4d8a-ab91-5c710056f4fb"
        },
        "item": {
          "id": "9145382a-eeb6-45e5-8fc7-32c403e829e5",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "fca15455-d1fc-403a-8c3f-0fd710703573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85cfd8a5-9292-4a21-9e2b-0e393891ce15",
        "cursor": {
          "ref": "4b5d839b-c152-4b93-aacc-08010b9e163a",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "1011fdfd-c36e-4ba5-b9de-22e5c847a0f5"
        },
        "item": {
          "id": "85cfd8a5-9292-4a21-9e2b-0e393891ce15",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ea77d1fd-5d5d-4f24-86d6-d22fd658dcbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "995107f4-6af8-4ced-8151-8a93d7bca3f4",
        "cursor": {
          "ref": "cd52b221-3f19-4177-88dd-9ce4895ca03a",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "dcbddafb-6121-4342-94df-343799ab8717"
        },
        "item": {
          "id": "995107f4-6af8-4ced-8151-8a93d7bca3f4",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "e8fe12e2-efd3-4422-bdd7-88ad302ee7f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbcfb0c9-6117-4048-a45a-8f030e5950de",
        "cursor": {
          "ref": "43e974a2-46c3-4834-baee-5fb109429b31",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "8403795c-c29c-4f0f-8d76-df2adec06f04"
        },
        "item": {
          "id": "fbcfb0c9-6117-4048-a45a-8f030e5950de",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "853814c1-bc37-4f89-9546-e376d9d754c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b44dfde0-faef-4455-a8e4-12976036f8a9",
        "cursor": {
          "ref": "95a26949-39a0-4ccd-b262-fd5b5e0cf64e",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "e205917c-6367-412b-b908-87eb05b81303"
        },
        "item": {
          "id": "b44dfde0-faef-4455-a8e4-12976036f8a9",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "217dc538-173d-4f9c-90b9-e17723f92ca7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7edbfab6-a715-468a-bece-9c4014f6b371",
        "cursor": {
          "ref": "22b25bc2-acd2-44a3-81ea-699dd686be43",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "8381c754-8f86-4f43-a6cb-931c4f978ebf"
        },
        "item": {
          "id": "7edbfab6-a715-468a-bece-9c4014f6b371",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "1a008340-905d-4b63-a1ba-adbc8d108096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "30649697-078e-46f2-9af1-27efc8388d14",
        "cursor": {
          "ref": "31038b88-3611-4893-b39b-ab028a72f207",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "71dc6993-9089-4eab-8654-75bfa6d0f244"
        },
        "item": {
          "id": "30649697-078e-46f2-9af1-27efc8388d14",
          "name": "credentials_issue"
        },
        "response": {
          "id": "2415279e-2d57-4145-b03d-81abde409a96",
          "status": "Created",
          "code": 201,
          "responseTime": 222,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2e9b5cd-5e8b-4cac-aae2-bfd4716175db",
        "cursor": {
          "ref": "69b3f8ad-598e-40c6-97f5-f05786ecb03e",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "1f4c9f6a-8b09-4d1c-a286-afe5b956dac7"
        },
        "item": {
          "id": "e2e9b5cd-5e8b-4cac-aae2-bfd4716175db",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "ba5bdc53-f9ff-46ed-90c8-73f990be2c69",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7243b133-65ad-4aaa-89a9-990ca4a9a681",
        "cursor": {
          "ref": "8fc80171-d2bc-4ad6-b398-1e95910dc7f1",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f3f053d2-8793-4f49-be15-d1b0f45a769d"
        },
        "item": {
          "id": "7243b133-65ad-4aaa-89a9-990ca4a9a681",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d60b7aac-08bf-4d72-b92a-9acd22463ea5",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e99658a-aa24-4a7c-a994-086fa3914b37",
        "cursor": {
          "ref": "5191b2a7-c5d3-49b2-b3c2-12b7cd17f52b",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "fd4ffeb3-e753-430e-be07-cf583726f320"
        },
        "item": {
          "id": "3e99658a-aa24-4a7c-a994-086fa3914b37",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "f59117c8-2d2e-4ae4-a236-35a094bcc452",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2865f6c4-4d0a-4396-ac6e-6d47aed30f30",
        "cursor": {
          "ref": "b4bd5065-79cd-49d5-ae0d-f01b2e3d62c7",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "0c479043-1327-4529-9e3e-c33bf467b33a"
        },
        "item": {
          "id": "2865f6c4-4d0a-4396-ac6e-6d47aed30f30",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "cb8d3d6c-b911-40d8-97a8-6694c4435fb3",
          "status": "Created",
          "code": 201,
          "responseTime": 220,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-10-18T00:34:04.172Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-10-18T00:34:04.172Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "8f6605cf-2149-4770-b2e1-3f2c439546fb",
        "cursor": {
          "ref": "53344276-f661-4125-852c-8c0e7b4bd26a",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "007baddd-19ce-4c00-add7-f85eb5fb45e5"
        },
        "item": {
          "id": "8f6605cf-2149-4770-b2e1-3f2c439546fb",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ad46e897-1745-4620-94ea-08b51bf8ff12",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5949ae43-9890-42c1-a098-a8f77507d242",
        "cursor": {
          "ref": "4613ed71-cedd-4dae-83e4-bf046d59e94c",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "8d139863-cdbd-4281-95e1-0cbf1690042b"
        },
        "item": {
          "id": "5949ae43-9890-42c1-a098-a8f77507d242",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "062ff97a-a3d1-4262-b4af-ae05e3b7d346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ce61d3e-27a0-4999-bea1-47e9cf247efa",
        "cursor": {
          "ref": "73acb0f6-4982-49ba-adc9-de6621d26590",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "176d1b43-f626-449c-ad52-616a0f2f49bb"
        },
        "item": {
          "id": "6ce61d3e-27a0-4999-bea1-47e9cf247efa",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "96905ee5-32e7-4ba6-af95-1c5c72de10d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "728ffece-8d1d-423f-9c8f-16dd3b2d3b6b",
        "cursor": {
          "ref": "f7afa5e2-3f5e-409e-95dc-e91c209b9b54",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "11faa41a-021f-458a-b70d-1671fc715c82"
        },
        "item": {
          "id": "728ffece-8d1d-423f-9c8f-16dd3b2d3b6b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ca6b0dd4-b0cc-4a16-ac3a-1798cb58dcd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0feac6da-7345-4514-9ed4-a5dd5b0e96a0",
        "cursor": {
          "ref": "52c126ca-f3e7-468a-a905-05c8d9c85bdc",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "03f68cf6-4dae-4350-9f53-63631bb98015"
        },
        "item": {
          "id": "0feac6da-7345-4514-9ed4-a5dd5b0e96a0",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "7d83c13a-db39-462c-af61-d51b2f1961a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a8c805a-79b2-450f-87d8-b5c02325ec58",
        "cursor": {
          "ref": "2cd613c2-cd2c-492d-920c-fe1538dd8efb",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d1a74ea1-9d6f-4680-8454-91339b41aa13"
        },
        "item": {
          "id": "4a8c805a-79b2-450f-87d8-b5c02325ec58",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "22ec5a61-cca1-44a9-b63e-4aa114b9354d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d8c2194-eed9-4ce9-a0b3-53a0249becbe",
        "cursor": {
          "ref": "3ee4f53e-fb98-487a-9f03-af7a8dde2bd8",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "b1ab45d2-0804-4917-a1ea-5b781b85e9b9"
        },
        "item": {
          "id": "2d8c2194-eed9-4ce9-a0b3-53a0249becbe",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "4fa9a079-8517-41e6-a99f-0230ffbc0e49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d6a5f75-b743-41a2-8e8f-3b74895f16ed",
        "cursor": {
          "ref": "a06d8a1b-a453-45c1-b2cc-95e3214a0fc5",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7cc2efa3-b48a-4aad-a865-abca1c0749fe"
        },
        "item": {
          "id": "3d6a5f75-b743-41a2-8e8f-3b74895f16ed",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "0686d674-e56e-44fc-9e24-926030b6b1ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d828721-c5b2-45b6-852d-a96b6fee6863",
        "cursor": {
          "ref": "6df347fa-0367-4731-8144-dfbb654576e1",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "42b50591-55cf-4cd1-a018-3a355ec1d5c4"
        },
        "item": {
          "id": "7d828721-c5b2-45b6-852d-a96b6fee6863",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "401d47f5-e494-459f-9b2f-72124b68060c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fd033ed-eb43-4b42-8c79-314042352637",
        "cursor": {
          "ref": "5adda9b0-e47a-4cff-88d1-1501998d536a",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1bb460d8-ac8a-427e-b8e6-de2d1f6f5bae"
        },
        "item": {
          "id": "1fd033ed-eb43-4b42-8c79-314042352637",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "dd84d686-ab20-4edc-8ac2-942e187747f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16935cf7-3b42-4526-b6c4-5491da8ac4ae",
        "cursor": {
          "ref": "caf510b5-bf2d-4f93-a40a-b4a91788c0a0",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "96510a52-9177-4827-aed4-d440de38107d"
        },
        "item": {
          "id": "16935cf7-3b42-4526-b6c4-5491da8ac4ae",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "9016fab9-37b8-4398-b217-73761aa5c159",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a01ac56b-565e-4d76-8411-f11ae1cd825b",
        "cursor": {
          "ref": "50110772-def0-4b90-8e90-16fdd98edc19",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "146220f0-4cae-450e-87cc-dce785b3eb47"
        },
        "item": {
          "id": "a01ac56b-565e-4d76-8411-f11ae1cd825b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "5d23c997-af84-416e-be65-e64ecf25dc78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e17448f7-3f1e-4c9c-b5c5-67bb3adf37be",
        "cursor": {
          "ref": "631142bd-d2b4-4f9a-83fb-4afad189a928",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "cedf3a60-9998-4efe-9096-2079f5fe468d"
        },
        "item": {
          "id": "e17448f7-3f1e-4c9c-b5c5-67bb3adf37be",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "00aec247-24d5-450f-ac99-5d908f87b57b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6003aefe-86b7-446a-942c-bf68322c48ad",
        "cursor": {
          "ref": "313351c2-f54d-4d02-b8c5-70e57ebcccf0",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "afff265b-3641-47fe-a176-24ec19d27987"
        },
        "item": {
          "id": "6003aefe-86b7-446a-942c-bf68322c48ad",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "eecac076-711c-47f3-b71c-7dc512ec2493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb0477f1-0fed-4708-adf2-c44632d5c1f6",
        "cursor": {
          "ref": "789010fe-13ce-4a1a-9a55-8b6d183d4f03",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "5d97f4fd-086e-4583-b20c-e804707e58e5"
        },
        "item": {
          "id": "eb0477f1-0fed-4708-adf2-c44632d5c1f6",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "05cbfdc4-9a5a-4e0b-84b1-798df65eeefb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be628c7a-d96e-46db-82f7-62c8c34fb8bb",
        "cursor": {
          "ref": "bd450d67-967a-4c81-bf78-3a709e8d78a2",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "9893c2b2-f13f-4ba2-b5f5-d8d9e206224a"
        },
        "item": {
          "id": "be628c7a-d96e-46db-82f7-62c8c34fb8bb",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "908d7ca9-fa67-4123-8a95-96baff936b6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9648b9f9-3a55-4acf-94c9-3983fe138e63",
        "cursor": {
          "ref": "9aa2c9db-ef5b-498b-8725-3f622adbfa1f",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "c00c6b8c-146f-411f-a597-d1d3d4b435f0"
        },
        "item": {
          "id": "9648b9f9-3a55-4acf-94c9-3983fe138e63",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "785eefaa-5b11-4012-9631-46cd5995ec25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1614508c-436a-46e7-83f7-82a06ca9b7cc",
        "cursor": {
          "ref": "2e7b66f0-2850-4709-9100-c67143130f8f",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "0de6b431-c6ab-4922-8b5b-e8e8ca915435"
        },
        "item": {
          "id": "1614508c-436a-46e7-83f7-82a06ca9b7cc",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f8ebd128-9123-458e-9fc5-6c35238efdaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94b90f81-bdda-4da6-9189-038ace8bfd37",
        "cursor": {
          "ref": "ce4ee4cc-0b36-4d44-9690-36682489b1f6",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "80b15231-dd84-4688-8aec-933d6b5d3648"
        },
        "item": {
          "id": "94b90f81-bdda-4da6-9189-038ace8bfd37",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "58032750-cc88-4319-a419-deb70da61a1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76232bec-b9f3-4ea4-957b-4d1d9e4d8020",
        "cursor": {
          "ref": "90b5f722-4a98-45d7-9f93-418125e93a41",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "50462ead-fcc8-4a9e-a98c-d2db8a65b08a"
        },
        "item": {
          "id": "76232bec-b9f3-4ea4-957b-4d1d9e4d8020",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "fa6bb9c0-766c-4b2e-8770-05c03ffe1c30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73a113b0-92c8-4aab-a9cb-198a65fe50ef",
        "cursor": {
          "ref": "7c900f5c-9248-4822-b136-9105bdbca7ff",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "b83d7b70-7979-41f6-a366-72174d4a8ffe"
        },
        "item": {
          "id": "73a113b0-92c8-4aab-a9cb-198a65fe50ef",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "92f6a03d-f99c-4cc4-8c4f-e3f07f88f163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4331491-7732-4430-a000-58e5e9631309",
        "cursor": {
          "ref": "c8949a09-a1a2-4bca-b73d-db19d67d63df",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "53639449-8d68-4378-b443-dfd53d86b88f"
        },
        "item": {
          "id": "c4331491-7732-4430-a000-58e5e9631309",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9fc5653b-9c53-465c-b0bf-ec31a55d2dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39cdf950-5a0c-47c8-9a8c-a10ebb1d3b27",
        "cursor": {
          "ref": "5c99d479-7584-418b-8ac0-e5c7b1883cc1",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "359e6e0e-c25c-465e-a283-7d13eb8e6c84"
        },
        "item": {
          "id": "39cdf950-5a0c-47c8-9a8c-a10ebb1d3b27",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "22992cfb-370e-4f8b-95aa-8432d89ff2f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2af2309-67eb-42a9-abb9-7780e537ce14",
        "cursor": {
          "ref": "4c3e80f8-78bf-4c40-8def-40b17b07a4d9",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "8713ed99-f375-48fd-9f78-43b0a055a32e"
        },
        "item": {
          "id": "b2af2309-67eb-42a9-abb9-7780e537ce14",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f8f29521-89ad-4ea7-b35d-30dcf16cff37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8ae1370-146e-4844-9727-4682720b2707",
        "cursor": {
          "ref": "8f8d873b-c040-4209-92b2-9adfdbfef88b",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "294e45e3-840d-4603-afe2-2bd3d5a64126"
        },
        "item": {
          "id": "c8ae1370-146e-4844-9727-4682720b2707",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "475a3be8-4bda-4111-b677-ec17e4f31653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e438469-8524-43ad-8093-6af5556c3d82",
        "cursor": {
          "ref": "650ffc7d-1b27-4a5c-b1ed-3fafc1ef5b1b",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4cda1b90-890f-4908-834f-5c6932cf2d4f"
        },
        "item": {
          "id": "6e438469-8524-43ad-8093-6af5556c3d82",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5daab8c3-9443-4c26-8453-5c96d0e95772",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24971d76-4acc-4007-b66c-a341ab2200f6",
        "cursor": {
          "ref": "7fc69771-e189-413c-a613-6d6b28714c76",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "81d23d0c-cccd-4538-83ba-7ea721067489"
        },
        "item": {
          "id": "24971d76-4acc-4007-b66c-a341ab2200f6",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7a0f5657-f498-470c-b3c0-ff24c689f9bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e7be449-01ee-40f0-960d-d8f9764f8964",
        "cursor": {
          "ref": "3bda131f-b671-4899-9d67-f86301643c2c",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "e98e0647-5c10-41bf-b19f-3237b2962778"
        },
        "item": {
          "id": "6e7be449-01ee-40f0-960d-d8f9764f8964",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "cebacdc5-1766-4e45-ae58-6277c0d1c3cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8639bbdd-c00e-48c6-b722-974ae10bfc82",
        "cursor": {
          "ref": "f42cee99-75fb-463a-8a1a-f907f905734a",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "255fe127-429f-4ac1-a099-c1665430ca5c"
        },
        "item": {
          "id": "8639bbdd-c00e-48c6-b722-974ae10bfc82",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b3b3ec1f-edb7-46f6-8f0f-b666eeca311d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "783de998-855d-4300-8740-54f0df97163a",
        "cursor": {
          "ref": "0e1201b2-daf8-4d8d-959f-33b1ba0edb96",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "6d6aa4d8-e568-4cce-a930-507bc8243d8a"
        },
        "item": {
          "id": "783de998-855d-4300-8740-54f0df97163a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e3c02a62-6b96-4398-98bf-a35db1b9d79a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a073199-561d-46e1-98aa-0c5926a8cb96",
        "cursor": {
          "ref": "db57eaca-4e57-4404-9b72-b6e1722b044a",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "7b49f5f3-704a-485f-b36c-8840f0678d7e"
        },
        "item": {
          "id": "1a073199-561d-46e1-98aa-0c5926a8cb96",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "42b2abb7-4855-494b-9493-aab18e247739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bfd0925-cd09-4041-a9d9-89fdc6af6e6b",
        "cursor": {
          "ref": "7f5ba503-b904-4efb-b793-04d09852ef49",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "5dbfa5ad-f2f8-4626-99a7-d0199d28c1df"
        },
        "item": {
          "id": "2bfd0925-cd09-4041-a9d9-89fdc6af6e6b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0af901c7-b52b-402b-b88a-f0ab6e115c25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f32cfd3-4936-41ba-9a0f-dbfec7160dd1",
        "cursor": {
          "ref": "e32a8eb5-b26d-4255-8f9a-19c9ef4b2d97",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "2b058d4f-474c-4c72-a304-f056fecfe4af"
        },
        "item": {
          "id": "6f32cfd3-4936-41ba-9a0f-dbfec7160dd1",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "047b74fc-10b2-4242-a401-cac9f88f28ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25bcc314-c0d1-41c9-b943-8abcbfe24e15",
        "cursor": {
          "ref": "1eb8c62a-99a4-4a2c-9917-8a5714bc226e",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "55954f46-b258-4d5d-8fa4-85c622abbb0d"
        },
        "item": {
          "id": "25bcc314-c0d1-41c9-b943-8abcbfe24e15",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "72c0faa9-2c4d-4559-8314-c565fb35cf4f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e34f749-dc81-4cac-b894-e9022ab9cb81",
        "cursor": {
          "ref": "7111a077-fecb-4182-a308-22d2c6dce9b6",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "be41f54f-2c9b-420b-8285-df181d894395"
        },
        "item": {
          "id": "2e34f749-dc81-4cac-b894-e9022ab9cb81",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8749d2fb-2205-4c53-b3f3-4086a2d1484a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cd54530-f218-468c-adea-56590a6a15fc",
        "cursor": {
          "ref": "de7ed357-d93c-4348-990c-378b81b0f163",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "eeccf619-d05e-4c1f-bcb1-7d54c8b27029"
        },
        "item": {
          "id": "3cd54530-f218-468c-adea-56590a6a15fc",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "de5ddb59-321d-4352-855c-f0e7f49d457a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b9c8d96-cccd-462e-b124-3e4190fe9df9",
        "cursor": {
          "ref": "a08f03ac-d741-40b9-8628-b8ecea9b04c6",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "24fbb65e-5531-4ac1-b48d-a15cac2f45a3"
        },
        "item": {
          "id": "0b9c8d96-cccd-462e-b124-3e4190fe9df9",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "2f91e7b2-494a-49e0-b268-e9bad80b8660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df94b2d6-0433-449e-9a6c-90805dda17b8",
        "cursor": {
          "ref": "ac016a12-a154-4c3d-8ad9-86d62748f31a",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "bc516041-e07f-457e-88e2-7eb07b821093"
        },
        "item": {
          "id": "df94b2d6-0433-449e-9a6c-90805dda17b8",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "0075ef52-44f9-46f0-8318-2ad5f22bac6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a8abcbd-f510-42a7-9ef3-6cd3759ade7b",
        "cursor": {
          "ref": "f065ed14-a315-44d3-a777-4f185fb9b80c",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "54eb7500-5a56-4d8a-b28f-84f7a0fc8178"
        },
        "item": {
          "id": "1a8abcbd-f510-42a7-9ef3-6cd3759ade7b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "21413cdc-b0b9-4fc0-b07d-3f390766daf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57d1148e-ca9d-49be-8aaf-ee6fe26d72cd",
        "cursor": {
          "ref": "a2c51eec-cd2b-4ac4-bf8c-e7e5fb047905",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "17393307-80dd-44c3-9832-fc338a017536"
        },
        "item": {
          "id": "57d1148e-ca9d-49be-8aaf-ee6fe26d72cd",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ae2dec9d-d2b7-4fe4-a9e0-b37955d4aeb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "216ac5c9-415b-4de6-96df-a1108e8dd1cb",
        "cursor": {
          "ref": "be77441a-be38-4857-8d86-9d1bd002971a",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "bd304221-20d4-4b00-aaad-1b6a5dfa44c3"
        },
        "item": {
          "id": "216ac5c9-415b-4de6-96df-a1108e8dd1cb",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "033994d5-8ac0-44e7-97bd-4d68eba7f71e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "058fccc6-21af-4f89-947d-020cbb4889b4",
        "cursor": {
          "ref": "18366ded-aacd-4bac-9a3d-2ca21bb27c92",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c341bdd9-970b-4c56-8bd0-041953d4f92f"
        },
        "item": {
          "id": "058fccc6-21af-4f89-947d-020cbb4889b4",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "1dd9c1ac-754b-483e-a372-2fc7e77331ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86fd4ccb-0ccb-42b9-833e-0a0c03109f93",
        "cursor": {
          "ref": "89134488-843e-471b-88df-c7c53998f7ea",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "36cde20c-a453-4c00-9773-0844419f0b87"
        },
        "item": {
          "id": "86fd4ccb-0ccb-42b9-833e-0a0c03109f93",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "22967f7e-8578-4c2c-8fbe-8faa49cde969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7606c2ee-0afa-4d15-a100-331d52c2a6eb",
        "cursor": {
          "ref": "6ad9d0c8-3874-4bbd-bd80-aca53cbbaa10",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "c1f6c11b-00c4-4bd2-a4e4-22381e23c101"
        },
        "item": {
          "id": "7606c2ee-0afa-4d15-a100-331d52c2a6eb",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "67a3923a-40a4-4d85-83b1-cc684fec68ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "834995e7-8a1d-49ed-9347-cb6549591e08",
        "cursor": {
          "ref": "421335cd-4f83-4676-9625-3c292ff895eb",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "3e5343d4-a83a-4982-a0c3-05699cbb030a"
        },
        "item": {
          "id": "834995e7-8a1d-49ed-9347-cb6549591e08",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c11def12-0ae6-4df5-bd50-b622d2b27cb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c77aec80-b994-4f0e-ba52-1da82b601fca",
        "cursor": {
          "ref": "79167785-48ad-4170-a3e1-0d99e5cd2971",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "72419598-5b5f-4f2e-aa33-7dd7a193274a"
        },
        "item": {
          "id": "c77aec80-b994-4f0e-ba52-1da82b601fca",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "cbed0a2f-c751-4557-8723-c2c28b54df75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2565f0bd-7911-4698-985b-7c8787c3ae18",
        "cursor": {
          "ref": "dde26906-f3a4-4f1a-8bde-b19b9a3b9578",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "26b9bb6c-e539-4a74-ba70-e2ea489026d0"
        },
        "item": {
          "id": "2565f0bd-7911-4698-985b-7c8787c3ae18",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "32d9be2a-092a-441e-96c7-69d7b0530379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad808296-db16-4e3f-bdae-548647b80b9f",
        "cursor": {
          "ref": "d916313b-9493-4cce-b4e0-e10e94babfc8",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "3f47c6fb-be34-4b6d-b3d7-4f0f31670bd9"
        },
        "item": {
          "id": "ad808296-db16-4e3f-bdae-548647b80b9f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "82980115-492e-4666-92ac-afb2384bfac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2770f6c-73f3-4d2c-920e-0b7c2c77d1cf",
        "cursor": {
          "ref": "eda17f10-d365-45e3-a554-fd44dc546db3",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "22a11d49-492d-4219-a01f-3766b83d9c38"
        },
        "item": {
          "id": "e2770f6c-73f3-4d2c-920e-0b7c2c77d1cf",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "73bfe0ef-5ef3-40fb-983c-547ea787a333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f681fe58-ec5d-4310-95b0-78d95db8a546",
        "cursor": {
          "ref": "1b72afd8-ef37-4df5-9bc6-f8a05edf352d",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "85d9d531-379b-42d2-baba-0c6453d5c9bf"
        },
        "item": {
          "id": "f681fe58-ec5d-4310-95b0-78d95db8a546",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f7405b8a-ab17-4e9b-97ea-cf266e218195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41988cb8-53dc-4a69-b496-17712451f5dc",
        "cursor": {
          "ref": "bb0e8c74-a5ab-4b9a-bbec-ba8770eecd0b",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "9e0165a5-8d34-461b-b93c-21e51b951018"
        },
        "item": {
          "id": "41988cb8-53dc-4a69-b496-17712451f5dc",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e1671990-0c7f-4717-8db3-56754c3bf833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beea04d7-c754-444b-8f54-825bb3879129",
        "cursor": {
          "ref": "6eb2233e-2e6f-4ecb-9164-97138f733d85",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "3ffed52c-9745-4a84-93fc-944cc81f1226"
        },
        "item": {
          "id": "beea04d7-c754-444b-8f54-825bb3879129",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b87d5981-3c27-45f5-9956-533007088f1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "998238f0-dbe5-4b88-84cd-aa8ec9a4ecef",
        "cursor": {
          "ref": "b649cc75-adae-4b1d-aa84-0b8b6b6740a8",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "7d88c528-7bfe-48c6-8eea-fa8b9b994a8c"
        },
        "item": {
          "id": "998238f0-dbe5-4b88-84cd-aa8ec9a4ecef",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b2f37bd1-d6e7-4398-8e3c-eee039efaa88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc09af04-3026-4c80-8591-9d9f7f81fe5b",
        "cursor": {
          "ref": "5d30c20c-5387-465e-86f0-520d83effc63",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "5dbbec27-0897-4596-8a13-bccf21cda023"
        },
        "item": {
          "id": "bc09af04-3026-4c80-8591-9d9f7f81fe5b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "cc0ad4f1-dbc4-41f7-b17e-fecdc59a6554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d86230-ef66-4320-891d-7756eec0191d",
        "cursor": {
          "ref": "955bcd37-7a08-4bb3-af56-e377aeea401f",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "9e695f0b-63dd-40c2-863d-a5b29e00020c"
        },
        "item": {
          "id": "62d86230-ef66-4320-891d-7756eec0191d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "29380147-7b5e-4e97-a81b-f550dcc9a19a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31ec82dd-56ca-4f0a-a853-d4aa73ce9626",
        "cursor": {
          "ref": "16465419-dca5-45a3-b457-4fad60dc0c1d",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "c9834855-7bc4-4150-972a-44965eb1c406"
        },
        "item": {
          "id": "31ec82dd-56ca-4f0a-a853-d4aa73ce9626",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b225c662-51a5-4efd-b8fa-1f79647eab11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31badfb8-3d90-460f-8b4c-f72992c01169",
        "cursor": {
          "ref": "b3a3a8f2-7c11-4926-a354-7af2fc7369ed",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "833c2859-0410-485d-a4df-4600104068d9"
        },
        "item": {
          "id": "31badfb8-3d90-460f-8b4c-f72992c01169",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "1c96eade-bf14-4c26-9799-29397c6668d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79549093-0797-4112-ab11-89375f11b291",
        "cursor": {
          "ref": "c2578a32-5422-47ff-a82e-3f2686e49109",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "6a35e4c6-2489-4fa0-8701-718c7c399a23"
        },
        "item": {
          "id": "79549093-0797-4112-ab11-89375f11b291",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "99e4d8e1-3ce3-48d4-9c42-0a5c38ac1906",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a931ee4-091e-4da9-88e4-226c3e32eb43",
        "cursor": {
          "ref": "7b8d65b6-2ace-4b35-aae1-50411f0e57a8",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "57c85b18-aa94-4721-b733-1e2433a952d0"
        },
        "item": {
          "id": "3a931ee4-091e-4da9-88e4-226c3e32eb43",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b792122c-28e0-4936-b014-489c57e18875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e41eeee-6de6-47c7-b6c0-ac52ed9d9b90",
        "cursor": {
          "ref": "b9f2de14-f201-4075-a099-984b1b2c6385",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "359ac1e1-3602-4c18-9ac9-07e3fa842127"
        },
        "item": {
          "id": "0e41eeee-6de6-47c7-b6c0-ac52ed9d9b90",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3eb4519d-4b5a-48b1-b5f6-2381f335adf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a402c531-d65a-4c4b-9236-54dbc26dc52e",
        "cursor": {
          "ref": "12440ead-af74-4039-a99a-99d446ad9064",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "e5893e60-259f-4a5a-9926-f980e15fb239"
        },
        "item": {
          "id": "a402c531-d65a-4c4b-9236-54dbc26dc52e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e15bf52a-603c-45d4-a45f-b68e8f2e0790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eed15b3b-f249-40f8-be98-b48a4da480bb",
        "cursor": {
          "ref": "c75c95f2-6cd0-4952-b0dc-e5732d3fd0a3",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "559999e1-ac8b-4dea-b4e3-fcdb4c981cde"
        },
        "item": {
          "id": "eed15b3b-f249-40f8-be98-b48a4da480bb",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "134ef859-d137-4c25-aad6-c43346305248",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a070add0-a8e7-405e-a418-4579e764a4ed",
        "cursor": {
          "ref": "be9acde1-0fc8-46ea-be81-550197dee8b4",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6fcd09e5-789b-4e9b-a5ac-371131067f2f"
        },
        "item": {
          "id": "a070add0-a8e7-405e-a418-4579e764a4ed",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "467e185a-3048-4a7b-a5b4-70042676dda5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df51eb49-a2d0-4e6c-946f-9242b065cc71",
        "cursor": {
          "ref": "1e98fe38-7e4e-4492-af92-b9ecfff9ef9f",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "6db26f49-377c-4800-9783-151a72e9313c"
        },
        "item": {
          "id": "df51eb49-a2d0-4e6c-946f-9242b065cc71",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "926d7d9a-41a7-4b0c-b46d-950981ab02b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b56e5f82-83bb-4f64-bc15-8a455336f616",
        "cursor": {
          "ref": "7f72a29a-599c-46f7-baa8-615d0f741b92",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "dda156fe-f626-4f66-ace0-e5787ff3edd4"
        },
        "item": {
          "id": "b56e5f82-83bb-4f64-bc15-8a455336f616",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "96e5c58e-40bd-4193-85d8-2e9962bd72c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc868b8e-4dc4-409f-9aed-5287f55313b2",
        "cursor": {
          "ref": "841e6d7d-ca85-4684-a69f-64109ddf33f8",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "4f99d527-ca28-4526-b0af-71db691b234d"
        },
        "item": {
          "id": "bc868b8e-4dc4-409f-9aed-5287f55313b2",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "99a0e71d-54a7-477a-a9f2-1e561046c15a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f50d5819-1e75-472d-950e-dcf21ee5bd51",
        "cursor": {
          "ref": "5bbb8b6f-0c29-4b75-be63-63775a1eb454",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "6044ba7d-00e1-4b57-b9ea-e3d971c4a5a0"
        },
        "item": {
          "id": "f50d5819-1e75-472d-950e-dcf21ee5bd51",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "c51e55ce-a0fc-484a-a50d-04f854627cd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de1a2b22-9562-47fa-b38c-35b402225fcc",
        "cursor": {
          "ref": "ee979f30-a740-4ce5-8746-265eabcd2a66",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "9254844a-c1f6-4568-9ce5-0293f60f1bce"
        },
        "item": {
          "id": "de1a2b22-9562-47fa-b38c-35b402225fcc",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "ca93aa86-8677-47b1-b0f3-1df1262cc937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48446ebc-bf69-47c7-b0a8-fe268d9d9c03",
        "cursor": {
          "ref": "787c6c80-4f12-4476-8c5d-b2fe5c09f02b",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "ecc61899-1416-4247-9376-e99bec85d659"
        },
        "item": {
          "id": "48446ebc-bf69-47c7-b0a8-fe268d9d9c03",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "526fca9d-4e1d-4602-bf17-928aa5a9f275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db8bc003-edb4-4919-aaf9-dfd99f1e92c6",
        "cursor": {
          "ref": "bb11ed90-9cf6-4f8a-9452-9fe7184f164f",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "d71835c8-b1b9-4ca7-9acd-9d636a25ef89"
        },
        "item": {
          "id": "db8bc003-edb4-4919-aaf9-dfd99f1e92c6",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "7353e163-7a15-4755-b77f-a8782d501753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9a2a9b9-cfa9-4cdc-8478-b9ef68c02349",
        "cursor": {
          "ref": "8e5d3c18-72b6-4147-9f57-c687503476b5",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "729ff580-9f0b-44e6-8371-c4b0b9e4ea01"
        },
        "item": {
          "id": "b9a2a9b9-cfa9-4cdc-8478-b9ef68c02349",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "201ec1f0-893e-4d2b-8ce3-5abea6f428ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6306821-fd1e-40f9-8df4-256b085a3ba1",
        "cursor": {
          "ref": "af496277-aae6-4804-82bb-aa9c0c1bc5e4",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "2ee89040-fcd9-4fc7-ae4f-2d58c3617507"
        },
        "item": {
          "id": "d6306821-fd1e-40f9-8df4-256b085a3ba1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "31106df4-fefe-4529-be9e-1c6d0acef3f8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccb61bb5-7bcf-482d-8dc4-f24661279eec",
        "cursor": {
          "ref": "3efd9f99-6167-4d0f-b44c-fee199dad9c1",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "1179a8b9-95d8-4058-b527-46b2df698dc3"
        },
        "item": {
          "id": "ccb61bb5-7bcf-482d-8dc4-f24661279eec",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8d3b9a14-24f6-4c88-8bdd-2d7f79218e44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "377dfcc9-f208-42ab-a9fd-192f67cca815",
        "cursor": {
          "ref": "444ba5e0-a3f5-4875-ae2a-068cc80479f0",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "7cc48541-2e8d-4439-b513-8edf6ec4bdb1"
        },
        "item": {
          "id": "377dfcc9-f208-42ab-a9fd-192f67cca815",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "72e00891-97b4-4283-a6a0-bb225cca92e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "761ca7c8-dfd6-40f1-ac0d-ec5ac82d2bfb",
        "cursor": {
          "ref": "ec0cb6b9-654f-45ed-a89d-69963252ef13",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "7563a106-1d5a-4612-a30f-d9a237dcda5a"
        },
        "item": {
          "id": "761ca7c8-dfd6-40f1-ac0d-ec5ac82d2bfb",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "5b9300ed-c185-45fe-836a-bf0369a951df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20d26b88-22b0-43ba-bb0c-7e857e5282aa",
        "cursor": {
          "ref": "d57b0219-da28-413d-aa9e-fe63c376e383",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "e5e26cc5-906e-4a4b-9203-d6558e2144e1"
        },
        "item": {
          "id": "20d26b88-22b0-43ba-bb0c-7e857e5282aa",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "8a9a473e-0241-4c57-bcac-318d4cb8b9d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d34943-ebfd-4c78-8c55-f40ef964cae4",
        "cursor": {
          "ref": "a89f8d82-507e-416d-9c3f-8518166edf5a",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a3a3c574-563c-4bcb-8662-47d268fe67ee"
        },
        "item": {
          "id": "47d34943-ebfd-4c78-8c55-f40ef964cae4",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "0ed70b04-4518-44a2-9cfe-706784737708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d825545-77f2-4257-abbe-c681eb675c65",
        "cursor": {
          "ref": "7b2d5b12-625f-4056-8897-b5a1ec174351",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b0888836-9218-445d-b3ab-4f07c8093d94"
        },
        "item": {
          "id": "7d825545-77f2-4257-abbe-c681eb675c65",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3d34917d-863a-4b74-b568-e3ca551c4844",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "3adb6e4d-f3ed-4909-9e8d-47c33009f92c",
        "cursor": {
          "ref": "42970fc1-d6eb-4774-b133-01f04fb37621",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "582b8100-2c59-46dd-b40d-72e5c62322f8"
        },
        "item": {
          "id": "3adb6e4d-f3ed-4909-9e8d-47c33009f92c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "889805fa-e435-42f9-818c-edb9233dae0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a50fc33d-fe60-4225-8571-cc353069a7bd",
        "cursor": {
          "ref": "77ebfb85-27ee-4ee2-a386-446dea4a8126",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "3fd72f9c-11f6-4189-9c19-9b8f9e8a829b"
        },
        "item": {
          "id": "a50fc33d-fe60-4225-8571-cc353069a7bd",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "d45ac71e-80ff-4495-be12-0f8664f463fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f36c576-df6f-406d-99d6-1d234b9ca6fc",
        "cursor": {
          "ref": "5c10cbe2-febc-4eea-93a3-2adad0f9093c",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "8dbf5ea3-6b75-475b-b2e5-adc4d1b193dc"
        },
        "item": {
          "id": "8f36c576-df6f-406d-99d6-1d234b9ca6fc",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c1eb3614-0293-44ac-8804-127f2ebfa012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a84646a6-7e7f-4b40-939b-45cfeb24200e",
        "cursor": {
          "ref": "7ec01f44-b93d-4ac2-8497-4727033bf88b",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "889fcdde-5eaf-4cdb-921f-88935d68b55e"
        },
        "item": {
          "id": "a84646a6-7e7f-4b40-939b-45cfeb24200e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "7d111a4f-43a2-47af-8282-06c67befc6b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c082bf1c-4cec-474c-9b3c-80d374b027cc",
        "cursor": {
          "ref": "bb960397-cdd9-4cd8-a1a9-d060bbf125df",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "80384109-92a3-49c9-95f3-c380c68821ce"
        },
        "item": {
          "id": "c082bf1c-4cec-474c-9b3c-80d374b027cc",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "cfb371cd-b2a8-4e80-9a85-53d52c74cf43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9ef189c-d9e9-4677-9ecb-3bc918f5e5ff",
        "cursor": {
          "ref": "1348550f-9d21-4b7c-855c-fa89f497c5ea",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "6a549845-175d-48aa-87fe-b6dc07a8f56a"
        },
        "item": {
          "id": "f9ef189c-d9e9-4677-9ecb-3bc918f5e5ff",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "51cab05f-ae77-4fe9-8a42-bdaa4c4c6567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d7f1d6-7a14-49be-aa9c-09c3f77da395",
        "cursor": {
          "ref": "2a58c2ca-3a45-41fc-94ee-cec49823ce24",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "ab924cea-7529-42d2-b848-de3d4475fb20"
        },
        "item": {
          "id": "97d7f1d6-7a14-49be-aa9c-09c3f77da395",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d6c61307-b822-4710-a10d-c3c9827d6dd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da3475e8-3e2c-42d9-969f-8c1ff6529136",
        "cursor": {
          "ref": "38b381ae-c353-4b1c-b6d2-e266060d05e4",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "f27ef2d4-8c15-42fc-ba5b-ceef7e0b90e4"
        },
        "item": {
          "id": "da3475e8-3e2c-42d9-969f-8c1ff6529136",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "2450dd9b-9d75-4916-87ac-4578cfcdf09f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42674dde-2d03-4cb3-858f-0d2ca74b7daf",
        "cursor": {
          "ref": "e2255c5c-686e-4a52-98f4-7a8954d7abe7",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "32448a1c-7d91-481e-bc6f-3145bb51a56b"
        },
        "item": {
          "id": "42674dde-2d03-4cb3-858f-0d2ca74b7daf",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c80b8c59-a1e4-41ea-bba9-02d74b8fd17a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a0d791c-dc16-46f1-99cc-82a85aac6aa8",
        "cursor": {
          "ref": "18fe7bda-043d-4120-8edd-c6d77dfa23f5",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "09d4a1b1-a0ea-478c-bc6a-a248211351f9"
        },
        "item": {
          "id": "4a0d791c-dc16-46f1-99cc-82a85aac6aa8",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "aea8269d-0a00-46d2-b0ff-108fb26643b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e86422d1-1596-482e-8fe9-c4b52973c4bb",
        "cursor": {
          "ref": "6a3ff33c-0b10-4138-ac3b-e3aca31f2801",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "05f2bc89-681a-4972-b4b3-e0f3fbfbe8b3"
        },
        "item": {
          "id": "e86422d1-1596-482e-8fe9-c4b52973c4bb",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "3060c7ab-6f83-4681-bf36-e2eb4b3047ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38ab9241-b3ca-4e84-81c6-db4e9773d384",
        "cursor": {
          "ref": "23146fe0-8160-48d9-8a67-922d273eb56c",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "61d3bc3d-3c86-42a0-b8cb-6a1963f21601"
        },
        "item": {
          "id": "38ab9241-b3ca-4e84-81c6-db4e9773d384",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "f423e6cd-17bb-4866-9baa-e2f41625ee2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3155813f-0ef2-4131-8914-fc8b18c1724c",
        "cursor": {
          "ref": "842225f7-a732-4899-ba5d-b03a385ee7b5",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "a11c9fa7-80e2-413e-a7c2-653d8000acf2"
        },
        "item": {
          "id": "3155813f-0ef2-4131-8914-fc8b18c1724c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ad784527-7664-4f26-b3ab-42b5485f4fbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e4ca27-5393-47a2-a110-14c4367f5263",
        "cursor": {
          "ref": "df7700b2-3ff8-42f3-8e26-9d2af0ef9c26",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "d80c9af0-9f2e-4344-a66b-8f986b2fcf61"
        },
        "item": {
          "id": "91e4ca27-5393-47a2-a110-14c4367f5263",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "1db14505-2a66-4d90-85e7-dae819077ad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d65bbe65-ff6d-4584-892d-5e9e5fa59664",
        "cursor": {
          "ref": "e370a651-b75b-4958-aaab-ec653dc99400",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b5e028c0-7941-4559-bb69-0652c79cd72b"
        },
        "item": {
          "id": "d65bbe65-ff6d-4584-892d-5e9e5fa59664",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "117540e5-3fff-42ca-b17c-61bfa46f535b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b607a6a0-4d3c-4337-be83-15c9670a6480",
        "cursor": {
          "ref": "b64bb9be-ee7c-4c40-ba07-c6caaebe74d1",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "78ea59b7-b261-4556-8a67-dfb99169aade"
        },
        "item": {
          "id": "b607a6a0-4d3c-4337-be83-15c9670a6480",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c1caa9b1-07ed-4826-a074-0562dd86721f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49a92a29-6a2e-405e-9973-9d40261c6551",
        "cursor": {
          "ref": "8ed79f7d-17f9-4813-a909-1f2b40599dd9",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "42504748-01aa-4a9c-9505-4ab9b180b273"
        },
        "item": {
          "id": "49a92a29-6a2e-405e-9973-9d40261c6551",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "266b94da-9e16-453b-8d37-2d916daabe06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8554379-ba73-4d71-ae2d-1e9903ba64e6",
        "cursor": {
          "ref": "249f10e9-5f45-445e-ae63-dfde0d696f0a",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "1c42e4c5-504d-4c1b-b021-7aae805206f1"
        },
        "item": {
          "id": "e8554379-ba73-4d71-ae2d-1e9903ba64e6",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "3811884a-0e48-4b1e-a57f-36f3db160a8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1509330e-ce86-4fd5-8a55-3196279b9379",
        "cursor": {
          "ref": "a03bbaa4-3d15-40c1-9e59-40bf6bac2211",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "409e2f9a-b729-40a8-87f3-21afd5dc9422"
        },
        "item": {
          "id": "1509330e-ce86-4fd5-8a55-3196279b9379",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "90cd5f28-50cd-4d57-9284-b47ea703ec9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f92d575-a7ef-4721-b9ca-cd54c3d16d83",
        "cursor": {
          "ref": "025bfc76-74e8-4c66-8f78-77b52fe06fcb",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "8e3ddc51-a7c3-44cd-a44c-32559f727f62"
        },
        "item": {
          "id": "9f92d575-a7ef-4721-b9ca-cd54c3d16d83",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "125b0469-65af-4985-bc62-0f811b9193cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c2179f8-c9c4-4cf0-84eb-b79f93f95bcc",
        "cursor": {
          "ref": "e07129ac-8850-4d62-b79f-4114b7b96bac",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "e6e17c8e-b2c5-41b2-b067-85b31a3d3fff"
        },
        "item": {
          "id": "6c2179f8-c9c4-4cf0-84eb-b79f93f95bcc",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "1dd9010a-2d31-4624-b4f1-3c60c15d1c37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edca0197-7417-4fd2-bf62-1cee572ebab2",
        "cursor": {
          "ref": "c682b7d1-5d90-424b-b37e-c1880bf95190",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "28e54884-964d-4982-8e8e-208b4c66aa57"
        },
        "item": {
          "id": "edca0197-7417-4fd2-bf62-1cee572ebab2",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "eda07868-cc21-44cd-b1a0-9d0f3833b3f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "185cf03e-800a-4ca5-98c6-e048e8396464",
        "cursor": {
          "ref": "de4ca6df-b83a-4360-b5b6-180e4e4b1314",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "72d8412d-b9b9-471b-afb8-3e70aa4a63a1"
        },
        "item": {
          "id": "185cf03e-800a-4ca5-98c6-e048e8396464",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "4315f2e6-19da-46c0-bf8d-da666837b690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54e399e4-82f0-446e-b25d-ea575966d443",
        "cursor": {
          "ref": "86e464fa-8e5f-4bec-8232-aec91c6ed47f",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e2e95af6-64a5-447d-b951-82709e6e1f9b"
        },
        "item": {
          "id": "54e399e4-82f0-446e-b25d-ea575966d443",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "469a1d20-e485-43f8-bd33-811dfc81d592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb9619a-c419-4b51-ad7c-e5924bbc70fb",
        "cursor": {
          "ref": "2c80ba1d-cf8e-42ea-b34b-0a35a3e7ecfe",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "53547c4f-a20d-4c5c-a47d-6c19e0b33f2a"
        },
        "item": {
          "id": "dbb9619a-c419-4b51-ad7c-e5924bbc70fb",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "07f510d2-1fa6-43bf-8bb9-e5065c66cb9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "030bc195-15de-46d4-8199-0c3811838529",
        "cursor": {
          "ref": "531dfacf-460d-4998-9fb5-1d473960a1a5",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "2d58e504-d55d-4053-8024-4a9b1fbed1e5"
        },
        "item": {
          "id": "030bc195-15de-46d4-8199-0c3811838529",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "a9414c4b-2d21-4ab6-b456-ef38d846bd96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d996dfd9-f1b2-4fea-a1d3-766c07abeb5a",
        "cursor": {
          "ref": "3f66c015-87e6-4662-882c-60264b6c2317",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "91a34853-c569-426b-8957-588d049d130a"
        },
        "item": {
          "id": "d996dfd9-f1b2-4fea-a1d3-766c07abeb5a",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "61fa4d04-ea9e-4dc2-8a25-4500742b4be7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19cddc60-e5cb-4291-8cc2-de7a9563593a",
        "cursor": {
          "ref": "b4311ed0-7e14-42b8-811a-e9d3adfeac1b",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "09212322-2602-49e6-b478-7923b977ba07"
        },
        "item": {
          "id": "19cddc60-e5cb-4291-8cc2-de7a9563593a",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "28510e80-f25d-4c62-b4bc-a3995c4be89e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8446844-c835-4869-81d0-b6d13dfc3662",
        "cursor": {
          "ref": "06a788fe-1b4b-4589-81ef-b7d27a66d265",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "4aebbaf1-cda7-494a-b9a4-a9fcbc91784a"
        },
        "item": {
          "id": "f8446844-c835-4869-81d0-b6d13dfc3662",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "04405c15-7888-48ff-a127-453b9b69e5e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "775db22f-513f-49bd-bef9-bfcc80906695",
        "cursor": {
          "ref": "880894a0-b9af-4fd4-8671-2c79bc150eab",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "7d71e4e5-3e67-4515-bdc5-7a6279e1de99"
        },
        "item": {
          "id": "775db22f-513f-49bd-bef9-bfcc80906695",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "1b2f1f72-1f5d-43d1-b748-81ccc6a6806a",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "e095e464-3cd6-4ee9-99a2-6a9205166858",
        "cursor": {
          "ref": "cdee48d4-854a-4c7b-a9c2-515a4393b066",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "b99c15be-8efb-4a52-908b-9886113432f2"
        },
        "item": {
          "id": "e095e464-3cd6-4ee9-99a2-6a9205166858",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "14cd4da8-9c8d-4c7b-ada8-f003f9bb8fdc",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "7bc30212-b1be-43bd-b7fc-ff3b3b90e640",
        "cursor": {
          "ref": "023412e0-9c70-49f3-b656-85104987fb63",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "b1142692-38bc-4b6d-a001-92dc275d96de"
        },
        "item": {
          "id": "7bc30212-b1be-43bd-b7fc-ff3b3b90e640",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "4bba19c4-79f2-4ed9-986e-531ba290f7a5",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "c7b04589-04c9-43ca-ba9a-9db27046f89e",
        "cursor": {
          "ref": "64b53c1d-4648-4976-b219-f7e13a7cfe07",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "e7c70985-fcb2-4fb6-a08f-fbfa22ba1e84"
        },
        "item": {
          "id": "c7b04589-04c9-43ca-ba9a-9db27046f89e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "4f07ca02-3f40-4cf5-a0b5-2db8d095dcc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d868ff77-5bb6-4210-a334-c5b2582c4a80",
        "cursor": {
          "ref": "3ea5fc75-a865-41e2-b523-cd9851fffe81",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "4c8ea908-e243-4324-bbce-64f0504881b4"
        },
        "item": {
          "id": "d868ff77-5bb6-4210-a334-c5b2582c4a80",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ece30c87-dc22-4698-9528-361e067fd219",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "50fb40f2-459e-4f2f-9f10-5cbc121b0095",
        "cursor": {
          "ref": "f19853ee-4d75-4c22-8546-170911cf3b62",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "bc7c2792-37a9-4eb0-aa15-2663c71e8f66"
        },
        "item": {
          "id": "50fb40f2-459e-4f2f-9f10-5cbc121b0095",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "bf1797a2-0aa9-4bfc-8849-d2ed5dfccdf5",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "f3a731bf-f165-4840-8576-0a1882a70ff9",
        "cursor": {
          "ref": "fc1f31b0-a7f1-43fa-8893-b09dc8854790",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "85ee7fe8-3141-4b60-b1eb-0ecf6a3917af"
        },
        "item": {
          "id": "f3a731bf-f165-4840-8576-0a1882a70ff9",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "012c5b70-ffd6-44d6-8626-de1f34e778bc",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "ced54a70-e49e-4a52-b3c3-fa1ff96b3370",
        "cursor": {
          "ref": "238e7362-0899-4943-a1bc-201f5d60a89f",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "9866cc68-73bb-44b7-a109-d32114e6a605"
        },
        "item": {
          "id": "ced54a70-e49e-4a52-b3c3-fa1ff96b3370",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e5f8d737-9029-4f33-a1e6-cbe1c214d31b",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "6c700be3-ac67-4196-abc3-180df8b1002b",
        "cursor": {
          "ref": "3c0bf68e-f04e-4c32-b66c-6412476e67e1",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "9b87a243-5817-494e-9991-6acceba5c051"
        },
        "item": {
          "id": "6c700be3-ac67-4196-abc3-180df8b1002b",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "3441f0bd-270c-457f-aa8c-656c9477941d",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "da40465f-2693-430d-9aa9-6f774b9d7c3b",
        "cursor": {
          "ref": "fb020c23-ac42-450d-8c22-321b413d0179",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "38786d42-5482-466f-a1a0-f22eb5d5dda3"
        },
        "item": {
          "id": "da40465f-2693-430d-9aa9-6f774b9d7c3b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a9dba674-ad6b-4621-b2de-fd73d30d14f4",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "cf157171-969e-4a74-a95a-6d21e5413e17",
        "cursor": {
          "ref": "e98a6664-1cce-47a1-b181-b4c96d5808da",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "b9f94879-d85f-4c9c-8f62-95b90295bed9"
        },
        "item": {
          "id": "cf157171-969e-4a74-a95a-6d21e5413e17",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "760d2845-8e99-4010-a2f3-fb853f2bcbaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be9b6041-f413-48ff-bbee-5ebd8ef0f19e",
        "cursor": {
          "ref": "52dcfd4b-98b3-48ad-89b9-ab74c37c9687",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "eb3cd5ee-3cdd-486f-b95e-18074128f561"
        },
        "item": {
          "id": "be9b6041-f413-48ff-bbee-5ebd8ef0f19e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "49f71264-fb00-49c1-bbf3-da346b6758bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86bd3873-54c9-4e7f-9075-4fa35f77f353",
        "cursor": {
          "ref": "2548a9f4-b7d7-4c80-b4de-dcffe7698362",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "bc5aee53-3a53-42fd-9016-6daad1fe617c"
        },
        "item": {
          "id": "86bd3873-54c9-4e7f-9075-4fa35f77f353",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "5b946622-ba84-4851-994b-cea6569c517a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac7f7a95-903b-4875-9665-41b3dbbc7924",
        "cursor": {
          "ref": "9bdef5e8-7ce5-4289-93f9-34c8186464a7",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "40a0747e-f296-437b-a83b-2c9292990d75"
        },
        "item": {
          "id": "ac7f7a95-903b-4875-9665-41b3dbbc7924",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "3e5f9f50-027b-4cca-9dd2-8c6b9ecd05db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf8c3bf9-5560-42c4-b061-596859e61393",
        "cursor": {
          "ref": "2d64ff35-3e2b-4c28-86f0-189f7fd3a9db",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "4d31e097-4e71-4ee9-b655-2b58de9c6524"
        },
        "item": {
          "id": "bf8c3bf9-5560-42c4-b061-596859e61393",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "d5d40901-3d20-4140-ae84-06dc0ba7f3f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df974fec-302d-4164-bcb2-ad5fa90cdee0",
        "cursor": {
          "ref": "d8955a41-7b6f-4058-8765-55624154ba1b",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "918ebd90-ac9b-46d3-82cf-9c55eb3cf576"
        },
        "item": {
          "id": "df974fec-302d-4164-bcb2-ad5fa90cdee0",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "cb0f32e8-22bb-416d-b305-d7d2d211ef3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bb045c1-bd9a-48f8-8a5c-528a46a64116",
        "cursor": {
          "ref": "083a8d70-0fc4-4844-935f-a42c74561c70",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "304097d4-b9ae-4c1f-9b86-3654dd38d1ec"
        },
        "item": {
          "id": "1bb045c1-bd9a-48f8-8a5c-528a46a64116",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "8bc37ba9-ccfc-4d8c-8b97-c80035e014a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "237c738a-e14e-4dfa-be77-ad5f1554ee60",
        "cursor": {
          "ref": "645b135c-1fdf-4844-bc37-48d567cd723e",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "09881249-0045-4ecd-af38-dc7e3b159dea"
        },
        "item": {
          "id": "237c738a-e14e-4dfa-be77-ad5f1554ee60",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "865d6f5f-fd2e-4f1f-93fa-0cbe8b28e6bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f166fd4e-2f23-423c-9a5b-5735f9d6aa11",
        "cursor": {
          "ref": "4101daa6-a8c3-4921-99c4-3892250f33c8",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "c48c179a-621d-470f-b1e7-e615c1cb0db3"
        },
        "item": {
          "id": "f166fd4e-2f23-423c-9a5b-5735f9d6aa11",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "3a919a29-8ef8-47c7-8b7d-6272cb6146eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9be3eac-756c-4659-9c9e-49f72d5e494a",
        "cursor": {
          "ref": "ee20d3fe-aa5c-4744-b42a-566843b9d6e6",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "409f0b86-fa11-484b-bad7-7b1b5cdb0b5a"
        },
        "item": {
          "id": "d9be3eac-756c-4659-9c9e-49f72d5e494a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "04ef9fac-7147-4692-8d31-235e6ea4def6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59d8de4d-a5d3-4e85-82a7-a6446abf4139",
        "cursor": {
          "ref": "f33e0f4a-2f5f-45b1-a5ca-6cf25f6475d8",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "942e8f25-2e1d-40f5-8c7c-9a7e2a714375"
        },
        "item": {
          "id": "59d8de4d-a5d3-4e85-82a7-a6446abf4139",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "4389f8b2-58d2-4eca-a5de-5677516bfc28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfc50afe-610d-4b82-bf14-7627b62f6dfb",
        "cursor": {
          "ref": "4a13e111-c8a4-4917-aab0-ecb1b34fb584",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "41d17d4c-1a3c-48db-9e7f-b7de13dce896"
        },
        "item": {
          "id": "dfc50afe-610d-4b82-bf14-7627b62f6dfb",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "bf8e0d22-8f1d-40c7-8682-d41e2190962a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdbb265a-a959-4183-8582-9a8323286713",
        "cursor": {
          "ref": "629f2496-0458-44a3-b6df-10fb8bc20ba9",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "8fd68cc5-44c4-4fe9-9689-655012a436fe"
        },
        "item": {
          "id": "cdbb265a-a959-4183-8582-9a8323286713",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "da703510-6b7c-483f-8253-0e9af7898877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a144db2-e306-44fe-8d19-fff01fc4727b",
        "cursor": {
          "ref": "a4223143-4af5-4a85-af69-ab7c85c0ab97",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "33212113-f3f8-4df1-9ca3-d95685e589e3"
        },
        "item": {
          "id": "3a144db2-e306-44fe-8d19-fff01fc4727b",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "365cb2f4-ab49-40a6-b966-5656ab7f8cfd",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "a02159b3-90a8-4370-af7e-5d79b1e9c8fb",
        "cursor": {
          "ref": "196e21fd-dfe3-4bc9-b1e5-d97be3e46618",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "221372d2-5e27-4bd0-9154-f78b0b8f62bb"
        },
        "item": {
          "id": "a02159b3-90a8-4370-af7e-5d79b1e9c8fb",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "9c799d00-059c-4cda-923c-74c1ed9a446a",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "c4174e13-8c1d-415d-93e1-c350e3f5c01e",
        "cursor": {
          "ref": "df18f903-1160-4f83-95d2-ed23dafad225",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b3e35bae-b0d2-4624-a498-f6414a1cfda6"
        },
        "item": {
          "id": "c4174e13-8c1d-415d-93e1-c350e3f5c01e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "08936a3a-7a12-4399-ae73-a3e6b766cbc1",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "0a343ed3-1db8-417e-9e01-97afe8d6114d",
        "cursor": {
          "ref": "77d60c34-0a78-4bc8-9a23-c8ba2567d1eb",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "872320ca-7109-498f-bbdb-5ea97e9be84c"
        },
        "item": {
          "id": "0a343ed3-1db8-417e-9e01-97afe8d6114d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "b6996b16-3026-4c6a-aa76-a0728bba3ff7",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "4ef53d0e-fb4d-4c97-9519-d52b74429090",
        "cursor": {
          "ref": "6b4f3549-b473-408a-b9cc-45878ea4919b",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "34997c06-c5fc-41b9-918e-5f3050b4e50b"
        },
        "item": {
          "id": "4ef53d0e-fb4d-4c97-9519-d52b74429090",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "1f9d4a64-3899-418c-96d0-5fc2c3ebdacc",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "5451af1b-be38-4d02-ada9-01e0fdde6549",
        "cursor": {
          "ref": "0c6d9a8e-372c-4168-9183-83c9a3d62056",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a0fa3c32-910b-47f8-9f09-3e6f3f182412"
        },
        "item": {
          "id": "5451af1b-be38-4d02-ada9-01e0fdde6549",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "9a782310-3a36-4ed9-a62a-4fa57702f3e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee28dc5-0ab2-43c7-b35b-68ba98017814",
        "cursor": {
          "ref": "63eb4e5d-d56d-464f-a211-3f7b206b58ad",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "5ab68dd3-baac-41fe-9f43-e7434920e13e"
        },
        "item": {
          "id": "1ee28dc5-0ab2-43c7-b35b-68ba98017814",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0732f658-41a3-4b6f-b8db-ba5625f7a8ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4aec5c9-4f99-43f1-b6f6-c77746e51cdc",
        "cursor": {
          "ref": "182d54d6-dc22-4a9e-ad54-fa2ba02fba2f",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "816fa551-1a72-48ee-b183-7ea2d4952b85"
        },
        "item": {
          "id": "b4aec5c9-4f99-43f1-b6f6-c77746e51cdc",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "80e37ef1-b281-476c-b1e7-a65780576fbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fa1f99f-8686-4e8b-89c9-32101b189872",
        "cursor": {
          "ref": "d05054ef-d97f-4a69-942f-034cdd55ce5a",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4bf24387-7e7d-4cf2-a25c-6bb8eff3c4a1"
        },
        "item": {
          "id": "8fa1f99f-8686-4e8b-89c9-32101b189872",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "9d5f7793-a37b-4df3-804f-4621562a153d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10522b9c-d78b-4603-9b08-7f81d21b37e1",
        "cursor": {
          "ref": "4714d371-ccbc-4b46-839c-5ec3f994f154",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "fa782fd1-7154-4aed-bd10-51b5fcb5f738"
        },
        "item": {
          "id": "10522b9c-d78b-4603-9b08-7f81d21b37e1",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "6d33e397-2b12-498d-9948-e3dd98e51425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "039675f4-dcfa-457c-873a-3d7ae4d34745",
        "cursor": {
          "ref": "2b5de119-8b3a-40d2-938a-78b08ec39731",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "78c3fb28-90ce-4fd0-aa68-6dc60c636d35"
        },
        "item": {
          "id": "039675f4-dcfa-457c-873a-3d7ae4d34745",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "f1ec93ac-c888-42d3-945c-8d2d11f01088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c14a3f55-8547-4fde-852c-d63a87b6eb76",
        "cursor": {
          "ref": "9964a03d-861d-4274-858e-13fbf87598dd",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b7355961-7dd7-4c74-ae08-f07f9dcadfaf"
        },
        "item": {
          "id": "c14a3f55-8547-4fde-852c-d63a87b6eb76",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "7428020f-dc2d-4704-93dd-4f29d616d1b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d6d07ed-a02c-43ab-af42-3a3b9f6d58a5",
        "cursor": {
          "ref": "c26844f9-5cf9-4b80-be68-9d55053087b0",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "9070318c-9f60-43ab-b9ed-2463c423d4a4"
        },
        "item": {
          "id": "2d6d07ed-a02c-43ab-af42-3a3b9f6d58a5",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "9a3b2a9d-5a9e-49d8-87ff-55a66a572b29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b926a1fb-4d63-40d4-8b6e-4bdd79f06dd4",
        "cursor": {
          "ref": "7490ddf5-babe-4555-a248-1ce88170ee85",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "d282b92e-22e4-4da7-8af2-b768023c62a3"
        },
        "item": {
          "id": "b926a1fb-4d63-40d4-8b6e-4bdd79f06dd4",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "bfa70844-491d-4fa1-8a7f-f82a9a290101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "832cc2f0-50be-46c1-8f64-004fe52145c6",
        "cursor": {
          "ref": "54c76fe2-32f6-4fe0-a2ac-cb6c15ebc382",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "f6f301e8-5267-40c2-aecb-1f8b361a2a97"
        },
        "item": {
          "id": "832cc2f0-50be-46c1-8f64-004fe52145c6",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "69285155-b9de-4337-ba87-1671ce76da5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9649b340-57b2-4275-a898-5381d0302aa7",
        "cursor": {
          "ref": "00503120-5d7d-4289-ab21-8ab1a63a7448",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "5240e56a-b6e7-47ed-8c2f-19eaa23e9fe3"
        },
        "item": {
          "id": "9649b340-57b2-4275-a898-5381d0302aa7",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "01ed551f-1e75-4a61-9270-a5bc12c5740f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad862263-593a-412f-9ed2-f2564ee70b58",
        "cursor": {
          "ref": "a3de1143-22a3-4aff-8634-ef3c932b15b4",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "3c77dae5-c546-4d0c-82b1-632226a2618c"
        },
        "item": {
          "id": "ad862263-593a-412f-9ed2-f2564ee70b58",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "6197ecd9-45b8-4e0a-9e43-9fb167b5db9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d90f1e25-1222-4f06-97f9-f5ff776c7ae8",
        "cursor": {
          "ref": "4b8866c9-b928-4400-8fe0-271199441ba6",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "392123e0-d665-4100-823c-ac8d015883c8"
        },
        "item": {
          "id": "d90f1e25-1222-4f06-97f9-f5ff776c7ae8",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "08020cee-d03c-4a23-9af8-e3a643a73863",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d7bd714-06c1-4104-af2c-e77d4656b841",
        "cursor": {
          "ref": "fd9f6705-3098-4038-b11f-1179d81be067",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "05b59f79-49ca-4aa9-a7f1-bd19006c8ee7"
        },
        "item": {
          "id": "2d7bd714-06c1-4104-af2c-e77d4656b841",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f1208efb-86af-45e4-8645-fa213f625ba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9340abb-94a8-42e1-9d40-19ad51eca89a",
        "cursor": {
          "ref": "a185e8c5-db5c-424f-afc3-5cc6b7e18c7f",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "4971464f-6ab8-40c7-a376-0e1655701048"
        },
        "item": {
          "id": "f9340abb-94a8-42e1-9d40-19ad51eca89a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "03c0122d-659f-4514-9135-4c7459fe1d74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdd2c897-b471-4d78-80e6-99978e73212f",
        "cursor": {
          "ref": "717c4101-1d2e-43c3-8f5a-e7b29ec13edb",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "90694922-4fd8-49a6-af01-461982856c07"
        },
        "item": {
          "id": "cdd2c897-b471-4d78-80e6-99978e73212f",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "4d323a07-c40a-40ff-84ba-33e033dbcd1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3e4a666-6adc-4778-93f7-ce1dc1ab6c11",
        "cursor": {
          "ref": "91b4be6f-e44d-407e-86ef-de8fcb1e73ac",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "854913ac-3c5b-4e0f-8775-29db9025a581"
        },
        "item": {
          "id": "f3e4a666-6adc-4778-93f7-ce1dc1ab6c11",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "d66b84e6-1776-4bc1-b6f7-900a89fade55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "099ba00a-bc72-4ecd-af96-d18274381fa7",
        "cursor": {
          "ref": "d0ea08aa-72ac-4ca0-86fd-868831fcf45b",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "434a764f-8a87-4375-b075-b94fa23de6fb"
        },
        "item": {
          "id": "099ba00a-bc72-4ecd-af96-d18274381fa7",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "3ea1f9e8-f22e-4848-9006-3f11922778a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6329edad-84b8-4567-a19f-9c0b4033e966",
        "cursor": {
          "ref": "dedb5ab0-d7e0-44d9-9314-a9fb3e94ad32",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "c74cf64d-c72c-452c-a40c-0e94cfea60d8"
        },
        "item": {
          "id": "6329edad-84b8-4567-a19f-9c0b4033e966",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c731f140-68ff-4724-bd2b-10666e1bb595",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2ac7c04-b50e-47e3-a46a-13e557fc843c",
        "cursor": {
          "ref": "5fb1befb-d8a0-4ca4-83b2-7f5f75c805c7",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "8a9792c8-3f01-4ffa-b0c6-9a8dc91a8bd9"
        },
        "item": {
          "id": "c2ac7c04-b50e-47e3-a46a-13e557fc843c",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "21769dbd-96b1-496f-8beb-815eda9a69df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4573fa2-a5d4-471e-9853-5979f83ffc08",
        "cursor": {
          "ref": "6d0f06ca-0b9a-41f6-aace-357ca3336d75",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "410de3cf-3969-4fae-9ed8-fd26f8c096c9"
        },
        "item": {
          "id": "c4573fa2-a5d4-471e-9853-5979f83ffc08",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "1a43c8c6-e92d-4168-93dd-cd4ec3486305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e7b2d8-5d27-4233-879a-52d3d371d3f4",
        "cursor": {
          "ref": "d00d5b61-df12-4e6f-b756-f2a1cd733e34",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "dc13ff58-8b5f-402d-80bf-e82d5864b6a3"
        },
        "item": {
          "id": "66e7b2d8-5d27-4233-879a-52d3d371d3f4",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "63c4267c-4658-46d8-9840-5de7fceb5e8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c160b298-370c-45a3-86fa-1a0692406d99",
        "cursor": {
          "ref": "eb9dde1c-3e92-42d7-901b-d84eb0c30d76",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "31545f06-1c83-427b-abe0-117ad7be89a7"
        },
        "item": {
          "id": "c160b298-370c-45a3-86fa-1a0692406d99",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "2884bc86-a678-432a-8e25-aec9e7645bf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9f3273a-189a-4022-a3a6-747f1bf683fb",
        "cursor": {
          "ref": "4749f41c-73df-45cd-920f-7bf505936604",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "09744ebd-d536-4d9e-90cf-dc866b8b563a"
        },
        "item": {
          "id": "b9f3273a-189a-4022-a3a6-747f1bf683fb",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "23e86cf4-3469-4b14-a3ce-2ae9ec1f93c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2db8d34b-a6b7-4535-8f56-5fcefd97bd50",
        "cursor": {
          "ref": "cb2db09b-6455-4bdd-bf5f-78a1c32a5505",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "37bd51fd-34f4-4a13-98e6-0d4dd368122a"
        },
        "item": {
          "id": "2db8d34b-a6b7-4535-8f56-5fcefd97bd50",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "886ef485-2257-4874-9f0e-751b412cc97f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76e2b36b-5c5d-4627-a12d-517c071926ea",
        "cursor": {
          "ref": "712faa82-0c5f-4d66-a829-5ce73ccd4fe7",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "76b2c535-d626-4921-ad19-bd16b9054b90"
        },
        "item": {
          "id": "76e2b36b-5c5d-4627-a12d-517c071926ea",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "dbc22d8d-3942-4ae9-802c-0387f1e6fc26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03ea8d75-2baa-4194-b2d6-3d5f1b0e258b",
        "cursor": {
          "ref": "6c9fc7a2-05b2-49fc-95a2-7dc0765baee9",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "73c70f46-95eb-4ffa-8776-03b580b4ca82"
        },
        "item": {
          "id": "03ea8d75-2baa-4194-b2d6-3d5f1b0e258b",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "6c644fdb-538a-4236-855c-ae708b335c5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b131cb61-e803-4d5f-b7c5-f0511fb8e15c",
        "cursor": {
          "ref": "b521fbb3-91d7-482d-8a67-4462e2251a86",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "27e566a1-f498-457c-b5d4-04d2eccf74fc"
        },
        "item": {
          "id": "b131cb61-e803-4d5f-b7c5-f0511fb8e15c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "00fb7ff6-9e4a-43ac-bd32-556b370669eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c4c19ae-065f-412c-b4bd-90e1d1f5f276",
        "cursor": {
          "ref": "d0e911a5-a1e2-4d38-86c8-237b4642acc1",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "b06218d0-50f4-48ab-85b1-5d2ea0c846ab"
        },
        "item": {
          "id": "9c4c19ae-065f-412c-b4bd-90e1d1f5f276",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "abbebb86-ef5d-4a46-b927-c72701a723c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a3689de-cfff-4497-bf61-aecfbb37ca87",
        "cursor": {
          "ref": "bab67353-d8f5-410d-af15-6540c337dedb",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "2d51e04f-889a-42fd-8ff9-7a8a5593b9ad"
        },
        "item": {
          "id": "1a3689de-cfff-4497-bf61-aecfbb37ca87",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "ccae61a8-ed18-410a-9df0-8640f6a94770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41703450-1e2b-4ee4-b59b-396c887ee8f5",
        "cursor": {
          "ref": "1668569e-40b7-4034-bfa5-cb5bd2d308f4",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "c912025d-1451-4255-9a34-e626297af270"
        },
        "item": {
          "id": "41703450-1e2b-4ee4-b59b-396c887ee8f5",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "63fba31e-eee1-4124-965a-86be81e01da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fdf01f0-efc5-4666-8c8f-aaf116cd6e01",
        "cursor": {
          "ref": "2d4c61a3-f074-4ae6-aed1-b52e7dca8fa2",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "32b129ec-57c2-4fa8-896d-d1db7ed4fc7b"
        },
        "item": {
          "id": "9fdf01f0-efc5-4666-8c8f-aaf116cd6e01",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d63ff4e0-6913-4051-8f44-f169417edb57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f199842b-fbfb-4bc3-9b48-4871cf91716d",
        "cursor": {
          "ref": "6b98b80d-0eba-4b4c-9b4c-0922c05c42a2",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "1adc0cec-6568-4b70-ba70-da78f2f01059"
        },
        "item": {
          "id": "f199842b-fbfb-4bc3-9b48-4871cf91716d",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "47dbee49-99eb-4951-a287-84e8fc08c768",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59439d70-bc5d-4a8a-8487-36b4093ac135",
        "cursor": {
          "ref": "789bb36f-0c5b-4fab-9dd2-ecf082c7c421",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "ab68038f-29e3-481a-bdea-be74eeb8069a"
        },
        "item": {
          "id": "59439d70-bc5d-4a8a-8487-36b4093ac135",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "1f135870-99ae-4054-8f70-8fe37fddaadd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b2c7a28-ef30-4eb8-af18-773d98f3a960",
        "cursor": {
          "ref": "b7122fac-73e0-4fc2-91c4-4e165e0b29ee",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "eff71218-382b-4a6d-aeb2-9cafd7124935"
        },
        "item": {
          "id": "1b2c7a28-ef30-4eb8-af18-773d98f3a960",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e3eb4c24-ae86-466f-9eba-b74accf68ac7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff5949b9-f7c5-4b2e-8508-c26083b32498",
        "cursor": {
          "ref": "4d9bba89-26f0-407c-a12a-81628182dd81",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "68ae7d85-cc38-4d82-aae7-a68f48dd8470"
        },
        "item": {
          "id": "ff5949b9-f7c5-4b2e-8508-c26083b32498",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "8cf4810d-ee4b-4a40-8b1a-9eb388037c1b",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "ac86d083-f0f3-4741-94e5-019287ae45da",
        "cursor": {
          "ref": "702321fe-4578-46b0-af70-142f4521c699",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "901ef734-bf73-41d4-9c04-cbad98fd99df"
        },
        "item": {
          "id": "ac86d083-f0f3-4741-94e5-019287ae45da",
          "name": "credentials_verify"
        },
        "response": {
          "id": "5db00a26-460b-438a-87d6-0b0f49eb7ffa",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c29acd1-f88b-43a1-828d-1dac7a5e7bb9",
        "cursor": {
          "ref": "48f4655d-bf5e-4fd5-bf39-2aa9a6283270",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "f3944187-ee3b-4299-ba04-ef15f81ce709"
        },
        "item": {
          "id": "1c29acd1-f88b-43a1-828d-1dac7a5e7bb9",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "e52ff302-de11-4931-9dab-c3096488d618",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "065587ed-d585-45fe-9397-cd2bb0e26853",
        "cursor": {
          "ref": "92e0a47f-1e40-4940-b1c4-7214c45d72a6",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "1a5d8a7f-f558-467b-8819-d823ad3a1bb0"
        },
        "item": {
          "id": "065587ed-d585-45fe-9397-cd2bb0e26853",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d93e1e72-2c64-4557-8336-c170bd9c1cdc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "065587ed-d585-45fe-9397-cd2bb0e26853",
        "cursor": {
          "ref": "92e0a47f-1e40-4940-b1c4-7214c45d72a6",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "1a5d8a7f-f558-467b-8819-d823ad3a1bb0"
        },
        "item": {
          "id": "065587ed-d585-45fe-9397-cd2bb0e26853",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d93e1e72-2c64-4557-8336-c170bd9c1cdc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ee835f7-1434-4655-8ad0-341f118c98a8",
        "cursor": {
          "ref": "ef19fd3f-e96b-4ac6-83a8-85c903c9cc33",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "c6f24eb2-5d78-46c4-9306-92601b52345a"
        },
        "item": {
          "id": "6ee835f7-1434-4655-8ad0-341f118c98a8",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "47847f42-470c-45d6-a4a1-141611e17991",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "386bfbb5-390a-46a9-94b3-a8fab1f5d9c5",
        "cursor": {
          "ref": "7cb63a27-1282-4938-9238-e8c643645f44",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "7eaa718c-dbd9-44cd-b3a8-114e118015cd"
        },
        "item": {
          "id": "386bfbb5-390a-46a9-94b3-a8fab1f5d9c5",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "413e4164-92a3-48c5-8fba-2f28ff8aadb4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}