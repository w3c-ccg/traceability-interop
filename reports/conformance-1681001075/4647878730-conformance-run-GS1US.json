{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "34f23e3d-5805-4ba6-ad28-b4951494b330",
        "name": "Clear Cache",
        "item": [
          {
            "id": "61ac8c56-f35b-4f22-9111-595c4766ffa0",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "66f3592e-bfb4-4c15-a1a9-79d80ff6023d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4615db53-239b-4055-a7e5-be9cdf264144"
                }
              }
            ]
          },
          {
            "id": "4eaa21b4-91c4-4254-9096-622a574ca466",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c7b71215-cb8a-4be2-96c2-6a0fe5bf1779",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4de86cd7-a4ab-4e64-b51b-4199523e8e16"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b42c5dcb-9dcb-4a95-93a9-e4e97a88a7eb",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "9a139134-1d34-44d0-9f77-0e965e122008",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c6e757ea-33a3-4cb2-bafd-8706dab8fca7",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb2e6147-c4e0-4dcc-9345-dac67e388f98",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bf12625c-d51d-4d50-8ef8-ec2124adc82e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "63f444ef-b2da-44fb-89b4-2e65e4c0e593",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d109564d-5afd-4133-9925-ea776ba9512b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a7064d94-6a89-4e33-bca6-944555a8a3eb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "aaf84042-4ca8-4633-bda9-d3532fb4c267"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cc87a77c-f144-461c-a042-1bd4687a614e",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "79b9967d-5798-4707-96b8-7ab23d12ef38"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "57a521c2-f8c5-4d2c-a691-9faf905f4c81",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "35305634-997f-4918-a74a-bbd5fb180c40"
            }
          }
        ]
      },
      {
        "id": "5e43b203-3c5b-4ed9-b47e-7af8ed025966",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "2e4e6f06-85c4-4a91-8c76-a0b602b60953",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eb729784-60bc-46f4-8579-f0923a4d5347",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8d5e639c-a059-4251-a356-098a760efecb",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe8a6b89-9bec-4479-a31d-73de41f83d53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b89c0b89-544e-4417-b323-bf32cb45b86e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c010fc3d-850a-4961-a1dc-01fd1994586d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f4d208d-0b00-4c12-aabf-ce5de6578d9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "273230e7-5390-4c36-87fb-b5588ac5b021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6afa6ab1-8c3f-40d0-9802-cc63e90aff30",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fe6a3fb-eb93-4951-b32b-f33fe16d4696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9bf20ecb-10b9-485c-bfd6-f1545aa664a3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "87c98f01-2e2e-4900-9dd4-ee8f9b504e35",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9fc852df-eb8a-4fcf-ba28-2e7603d5f5da",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "521d7a72-7b08-43e6-bc83-fc984d660f5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "534f8bb5-e57c-45b4-95a4-52d6ec003727"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9e64adf-9d96-446e-a5fd-9f48b4deb619",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50e2238a-3b42-4b53-af9c-8caacf6d5576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04de1f0c-9a95-41f1-be9e-128167ab5287",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9da4722b-c13b-432f-962b-af339ac3bfc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e235efd7-bb0f-40af-911b-25e4b262ad9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e678a894-2f36-4bcb-8ee5-752af7c5db62",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "2f9b23da-de4d-42e4-9088-fcb6437a45df"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bc8725b1-aa18-4960-be86-a9b09cd9abec",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ccc6b6a1-4a9c-4031-8e01-c3a61167259f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec1a1ede-ded1-42ef-a5e7-9cac7c3fd303",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "cdd16968-e4cf-4703-881a-859fda023529"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b29a6068-2ae1-4ba7-827e-f54b353b1f85",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "feb79f76-b944-4a96-82f1-f62df8872cdf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0f66c8a7-afff-46cc-a0b7-dc57d90da5ca",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2ec0a673-dd78-4f58-be97-8d2e7da87975"
            }
          }
        ]
      },
      {
        "id": "84f96dcb-ea8d-45fe-8bf9-03a18f46714b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "fdf1ad2d-3e4c-4afd-9c89-3f2f2314889c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e4ae8b4f-2a06-4711-96cb-17872a387f0c",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "c7209925-39f0-4aab-9e07-4874897116e0",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76b87b1e-0013-437c-8f2d-f8c9848c4b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "188c3e4c-386a-4e22-b8cf-30eced88c49c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6628cbd-a7aa-42cb-996f-946c08ad9181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c53de97c-933d-4d34-85a7-705d3c048561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "141495d5-bba7-4250-b14d-91da788189a8",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb6363f7-f861-45cf-84ee-8bc9ebcc8744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af82bc18-5734-4689-be0e-1a09da9ca9dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5acb6043-e4a1-4c13-8749-b6dd8c1f2b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d28c49a-7248-4b02-95a4-a50f5a950569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a77f1fd0-0da3-46cb-832d-8a44f1ad8b16",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f823b8de-f416-4390-9b23-f8bf9bc02df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "073fc438-bce4-4ec8-8451-621e04440729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2a65742-39fc-4b9e-b801-9760081b8421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "211a57c3-fdb9-43b9-8b0f-b7850ac89e62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b6da0b0-7f07-4376-9ebd-9dc2516989de",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ba7988-0907-4fbc-ba59-6de94e5b80b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcc167c2-e79c-42f9-909c-d6fcd0b06f81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5600926-d37b-4f14-ad2c-fba1d5a2d647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a42b5b6b-74ef-4051-9314-606738ef2697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3528f00-0386-4fc7-a897-6f10798560b6",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1df1301-ee67-4bad-ab80-e429ddfa94e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5ce13e1-2258-4fff-8172-0edb5a876847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39624767-a9a2-4e1a-b7ad-93760a01ddca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "74ddb603-02f1-474e-b01e-034c93c9d228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4cc783f-ff20-4559-a61d-a236b96a02bb",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2773b67a-1635-42b6-8415-e82a6b6d0fd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e93effb9-ef44-4054-ab1a-86e0685b678e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49c6c7f7-2e5e-428a-9bed-0eeb41c572a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95e13ec4-19f1-495a-9259-6b15213b80a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3900d37d-7b4f-4d65-8556-084ecc561596",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93984395-0004-4ac6-bc82-7d671cffafd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f05cbea3-69ca-428c-81d1-5360546addf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc24bff-2452-4ef9-a38d-5b0827cb284c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3914cae7-898b-4b59-a286-a8fa38d218a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db6eb08-eed9-44b4-b4cd-f1aa3fc96848",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31db61a6-8d4d-4cef-a780-e33641a67a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "850d889b-c98a-4dc5-b7ea-26369daa929b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "495fd450-6d3d-4097-aa3f-db72faffc91c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8de72656-0b60-4ca1-a2e7-55d9da65aa6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba1b23d7-9b75-41e0-a58b-50c212131d6b",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d11ec4f3-5a4a-4abe-8ec8-cf826bbe5c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ee16063-5db3-4502-9638-c90bc9da208e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3d63c6b-1c37-4432-999d-d18bf0a951b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b2a59d27-c7e8-4001-bee5-248e66d7ef48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e40ae38-002d-4511-8873-5a03f062956f",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa53a7ef-6a4a-4ee8-9c40-7f30aaa3a305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4f2f898-f8da-4b3d-b28a-ed720ab2c006"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c851f2dd-3eb9-4bd8-979f-a9b3f565708a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "892070b9-fe31-4b2d-8d00-4c25b860a790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01aae603-6616-4a8a-92a6-6a6fdba0bec4",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2250667b-638e-47f5-8a86-8cff56f983b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0caaf07a-5e59-448d-aa7f-857b6336a2d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "023f1721-a198-4925-86d3-725a3277d5d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f9274d1b-7ab1-4d16-9f77-6e4b2ae4cb60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f47cd7e8-db5c-4db9-925b-d38c6a5de57b",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2d645f9-f168-4aff-af46-ec5bef8eba01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9091bd4f-f98c-4b1a-ba2d-81743a9ac4a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ebab804-976e-47ba-ba64-8a9c96db04e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "909955b2-ec69-4acc-8613-bc7f56427675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41c521ff-0b6e-4e2d-9583-a2c8d94b5506",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "677ea782-ac68-44e1-831b-cd40f64db68e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8464b8ee-e73d-460d-be58-2de4b1340a09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2afac822-17bb-4abd-9bf1-36ca3da40d75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8aaf762f-2f22-4de5-96db-b8dd24ee6de0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e100ff2-e193-4e05-a1b5-541c5912bebc",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9642a5ff-2f66-42ba-8f9c-c08e1d3c3b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4a38878-d6dc-4427-8ef4-402b1a25aa74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de5e1bf-489b-4916-9e8e-1b2478299c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "58c4adfa-a5d6-44f4-9251-5a41aba3ae96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb22a28d-b1d3-4468-b312-6f03e92c8077",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8edae45-e1dd-4f5d-a5df-4bb531554367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65ab7c90-85f7-44ee-be4d-be45193ae92f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bb28a40-2378-47cd-a733-d3f2fd914a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aac75e3a-78af-4e02-a09b-536068de4386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2353bd3e-a501-4f31-93a8-10dbf74d278e",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a0a8df-b49a-4f1e-8859-87b8ecc6820e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfb313ad-3523-4fd8-b0ce-76c2a9235088"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48550366-b18b-4deb-9813-22468e997a65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db489b3d-07ff-409c-8960-6742a085e40a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f04d801-4540-4f32-8084-b15672ab88ea",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca29c11d-caab-4b9b-9033-ec88c32e234d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94854bd6-9dcf-4180-b374-dd46b97d9806"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "712a896b-0ec0-4aa8-bde6-5e88e58c4eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73f7fea2-4507-4a29-8ada-837a29c68bbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e537ab-b081-4973-82ea-5af47799d9ad",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c5598e3-f75f-4916-8b7d-b50b2792b29e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4987fd12-3571-4640-aeaf-a5968e1e2c09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05bce269-a34a-41a9-8c77-5492966e0062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "082cb44a-d0fd-4a45-960b-7d700628eab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84cc8d62-67a1-4e59-80a7-03b073f91d91",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d689a804-7d0f-43be-8b6a-32dcae69f1d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66ede88f-e634-4147-8663-66c554bf9ee0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26d0851d-c147-465b-8051-caa0af135519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e99eb1dc-3684-4d9e-a510-f3a1da88d29d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3b771e5-f66f-4f45-af9c-d82859904864",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95d0a66f-db93-4ce4-bf3c-398bee4aada4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d87fc6ef-da5a-4cde-916c-e776365374ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e483f2cc-f920-4813-8032-8e309455f0a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3561ad6-e301-4747-b322-008e4c319baf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f89f33c-b83f-45b2-8a65-f3dc2e4cc42e",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d567ed79-a1c3-4e30-95e8-c9c11aaf9f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b864cb62-90c3-48e8-8522-aea383fa229f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e31f28-93f5-45c3-be6d-6941f66e45e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "02bc8b44-e9f5-49b8-9a01-535b1708939c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1086cfa-dfcf-436a-b6e9-962d0d0d8834",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a4eedae-7c67-4aa1-9d16-8c79a3fbaf51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7267c6c-5f24-49b6-8bd3-222f3282c8b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4daee6fa-4b99-4d52-acfa-a20a96528fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "99d5ef2f-a6de-450b-ad7a-a1b86215ade2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8c7c349-132c-4985-b2a0-95e969ae3154",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd6420b-1156-44e0-b3fc-7544112a2e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91441c89-4005-4897-b146-9d035969bf9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47c749e5-4c22-46c1-b6cd-292c93952481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0d9757e8-bea7-48fd-8023-9f6fbf50cbd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89b03d48-018b-40bf-b89e-a5ab09fb6dd7",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91ba9d0c-e6c0-4829-b161-028b3473d7b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "684e08dc-42c2-48cd-95f3-07d5c7f220d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8c4bab2-40c2-4948-8bc8-6cbc24807df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "26acd082-6822-4e2e-88d8-79d3d0d12a77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed635658-0927-43b4-8c7f-776a81a3cc7d",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "333eaf74-90d7-424f-b892-aed12dfcc74b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8402a4d2-d935-467f-919b-436e2083e4c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2217fdd6-cf6a-4922-930d-d64c2fd7d725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "72f79321-c153-4ecc-a147-f1211b6c51de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77b30b8a-9452-49a3-9a71-68f172a50ec6",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7223b06-40de-47b8-9246-1e39651778b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff7141c4-d4a6-4594-a7b6-510e29b4615e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b1fb88-6fdb-4371-bb19-6c2706900dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9c2c2c6-4b6d-43c0-976c-bbd4d8ca1054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e898b705-a43d-4cb7-af5a-f1645b23d9be",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46f56609-070d-4573-a1b3-7dabfd7e10ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5a1e1d4-b85e-4c61-9913-8f4993e72f86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d4aa002-3971-4675-99ec-3be568a449b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "413af3e1-3df7-433d-b00d-5e11c7c0b53c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "009b65e2-bdba-4945-8842-53b7739bb6a5",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f16fafd-b3d4-4138-be1e-ca2252ceae45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7830a962-48d7-40d2-b52a-a5b90c172fb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "715480eb-ba95-47b3-82cd-9a68c186a0d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb11bfdf-7ff3-4faa-8d6e-3bbc7c6e1d19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff3ae3d1-f7f5-41c4-a7dc-7e17bc66d2a2",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c57a19e-9901-434c-86d7-5069d93a08f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e399b13d-4db4-43b4-915f-1ddd57614108"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f210696-b4de-4633-878a-e13943d43b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "efae251d-931d-41f6-b1a3-5bc7a74f4dfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07d7f7fc-bda6-48c9-af46-99200603a32d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e94af952-05b6-4776-a7e2-f1c8f8b0d38f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f28ed745-932d-4f86-bc6b-e84314e02d79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c08d4bc-4fd5-41c4-b4c6-1e0d58b6960f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "09e42a37-9b64-4b07-b05f-719cd1108aa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e088853-2d53-4dd6-b3d7-fd2dbdebb49e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ca67ba-59ac-43e4-a9d6-15e7dbd36c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50aa4aee-51f3-4b3c-8c25-591de904f5fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27d4bcdf-bfae-42ed-bbcc-d2a529a25863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a1c81c9-30b0-4c74-a120-a05abe40c9be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e4e3d9-ea45-417b-83c3-2866e000aff8",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab65fb10-e90a-441f-a9bd-e3be156d96cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc44408c-15fa-4589-8f1f-837ae3de894c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce33300f-62de-492f-a86b-fecf8ddec8d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "35c4f636-a006-42ce-9e7e-11c6b7aaa549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8a60f84-55a0-46d4-8dc5-a09fc93ddb32",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b28d326-6679-4cc0-b0cc-ab0036f3082c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bedb190e-bc9e-4f36-98b7-7b51645ddcbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "843844a2-a80e-4f9d-a160-999a81d10ffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3de7d08d-d221-4330-8f8c-d5c129b55583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c5d1858-7984-484f-ba4a-74c6f5de95a9",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51285613-38f3-4027-8abe-54f60a1d712e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9484e21c-2b08-409b-8b85-c4a5067b0fd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4114e0f-0d62-4f62-90d9-0bb25a996ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b694f0e-d1f3-480a-9aa0-a0a6ff43e68a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "264db724-fd3b-4e0b-8b88-42a56b312f99",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "162c0cfe-42e5-47a9-9c94-65c35c8250e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baaf9edc-f8a5-49e0-95e7-bfe95b9e893e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96e47507-6f95-4491-9713-3be0dad5662a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ba9b95ec-bf91-4d2a-8736-a7f2b0e8c359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21cef797-8da4-4ccb-8f77-3844bdaa2941",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "231d6e5f-4f2b-4360-a614-850cee99ad97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc6ca7f6-e4c1-45e1-9b1e-fe5a9af6db55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcbe9166-692d-4641-988e-edde68d18cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9003907f-4dfa-4d05-b9ae-5b481810c618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3fa197a-8904-461e-869a-c66e1c313941",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f348cf9-7d5a-49d8-9ff8-210e04eb5cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dd8bc98-83b9-472d-a683-3f3ba505de78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1de9d179-0fb4-4bab-b992-da5f630a5d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "550f5d86-5c49-4e5f-beae-53936b8e6adc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74236265-6e12-44a8-a71d-adbe082548a6",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5095628-fe84-45bb-92b6-adf04cebaa71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "692fd9d1-6d92-403d-b32c-3c88fe9dabe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "563a88da-0f34-426e-bffc-4b92ad78ea2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b7502e4-a7c4-4ff0-8075-b99c14925b5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b83838b-d7ec-46c1-810e-79c85b4bcb9e",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c80072-e2b3-4903-bd31-4260fb791047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2350c1ae-40bb-4aec-a46b-70e3c6a778ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76530520-d3b7-4d6c-8420-66fbf6d983eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d4ee987-891b-4df0-870f-93010a244c58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23ab066f-5d01-4ad4-a2aa-251f13954f95",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b354a69c-a1bd-4edd-8e77-5dabfdc2edf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09cfc47c-7d8f-4715-89ae-8aeb4449c395"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f919494-6d29-4ca9-bd9b-f4940183b488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a884f16c-4be0-4161-9d46-e400903a79f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9891f6bb-cfa3-4c4b-808e-da86b83db526",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf7ee41-e329-4ece-beea-4400af22d607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb828dc7-2d05-4475-8c6a-70487cf1c52a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dcea269-d077-4b64-8a8d-ba4a81e5c5cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "631c4dd6-dc4c-44cf-b0e5-de5434734980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c63e2f-7758-48d2-a840-7f3445097ff0",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e71e3d-eeae-479d-8109-18d330f0d2ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ab69885-355e-4e8e-9ce9-d2774f0ca67f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5bb2f01-a1e0-4e58-bc4c-6188b47c11ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "6347ce82-6cd4-4aa9-8c99-74810f24e5a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8186ca7-0a36-48aa-bc20-67929b1a7c40",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc45f326-ad9c-4e4d-8f94-d23747ba5171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e6a37a9-1071-4d33-b37b-82dd1d53fbcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da09d34f-08d1-4311-b093-25158d7e2eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd6cd199-c852-4c8b-906a-181701d10528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a65bd183-91a3-4978-98de-6871c914a049",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c77811e5-b146-43d0-8598-65667193fd6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcc76513-695c-4c79-94cb-6a0ab0ecd473"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f1bba54-bf0c-4ab0-b7b2-372e96d5314d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ded8bc6-8508-4b15-8c45-c73f099e58a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d00aee-1960-4047-a661-78e0057124fa",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8721860-02b2-4a91-8443-6e8b402c9c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9405bb25-afdb-4542-9f2f-0d521779b48f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6148914-5d96-4dc1-a403-eb3cad937a58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fb0cc11-cd8b-4aed-a6ad-150f6445bd2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11032c1a-a6fd-47cd-b9e2-a0e601f948ee",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c77c3eb0-6422-4699-88c0-cfb071623087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f5249ba-3001-4aa9-a2ef-a6c9bf4fd4d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "051a2302-1b2a-40f9-9e4f-183c558cc4ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2335f4fb-7c9a-444d-8b65-02a0a233c55d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db41705f-7e73-46ae-9355-c05fa0427c69",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "174f6b4b-1a9d-4100-b73a-5061fc3c4d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "504b4c4e-4ee0-43ac-9e30-953b67cfd0b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c308bc-7fe2-4eeb-81fb-967cc6448751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b608e80f-a679-4824-9425-dfb290feb2eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b86bf56-3487-4d60-b0e2-4d21e7d67e69",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2c6e504-b99a-4645-9cc9-782ce2ffc9f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "240fac10-a075-48cc-a001-c7f282e36579"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e0aa19e-a858-4ead-a11e-849e7a001083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eada1275-fa0b-4529-9a2d-8392173dc160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2c78de1-4f6a-4e94-8b8e-532e3ac3698f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9b500f8-8790-4f8e-bfbe-2613a8ded269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe4e8edf-c4d0-4d2b-9bcb-91cd8ffb9d78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa49ba12-2b64-48b7-9a29-a515fa9e324b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "18ee52c2-a637-439d-a9fc-e3dda2f46c86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebdc3889-a3de-48e7-a6b5-23203788aa1b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b53598e3-bdd2-4573-9ac0-e9378594e72c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ca44857-62ea-4951-88ca-00bae3bc76b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d36a1342-0a43-44a3-9d13-b090c6e36d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f69adf2b-d106-4af4-b8c5-9bcc629d5ca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8628384-df7d-40a6-9c62-97a5571595f7",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "482c48e9-8e23-4317-8648-4c10f9550639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "251ba8bb-8622-4397-826b-0395329414d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc8ab7e-061e-4f92-9459-ee1d8c06f3fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "28d99643-8310-4e15-802c-5acd1418daf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7ca8905-11ca-474b-9c36-2addd39b89f2",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd600b0f-d968-4ee6-a24d-1dba77a4b058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0894dfa-f863-458b-a6fd-b170b2b592a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "413d74c5-3338-428b-aa83-673044214f31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "36bbccbf-aa57-4ed9-b98f-e223c0c9b2e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cfea648-3b1a-41c0-9343-aab968c771bb",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35c6a3cf-84b9-4abd-8a3f-02e775d3b74c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87011276-9b87-40f7-88a0-5dee4b94c0b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3702473c-4332-41d0-8f57-de5237b269ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9dc32262-c70d-4af7-b1b8-31d7f2c07a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d74aa98-1803-4bac-bc3c-415c05e8e907",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cbf4272-4bcb-4d15-8625-e39bcade1e4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d890872-fe1d-4ee3-9f8e-b91e0828d54a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f3a39e-f5b5-4bbc-b50c-470989736d50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d71aa818-338b-40c9-b002-bf25555137d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b3123ea-f93a-436d-b462-a9c5aa12294d",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0a741dd-2478-4690-9d28-f5c9a03ebbd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb49a88a-7d47-4a52-8fa3-23111ab37300"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "986f4e24-2646-4e14-9d6f-f8882232d33e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fa712f9-c49e-487a-a3f3-e26a6190ebe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac90868-075f-4439-a90e-1af3dda7c40c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45bab94b-c468-40f1-84ae-f2041fc37576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9515ac60-ac71-4176-93a8-4b37c2a10986"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "942d86e9-d44e-4f08-a919-53c87a2f413b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "8868248d-e50d-4aea-a508-16b55da39df3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1a849ab-b8f0-4f39-a806-da2e0b923ad1",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9316569-e6fd-4921-b644-311451b4a14d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fcbb514-1ca4-47a2-8eae-b98902dfb9b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16566692-591e-4a31-b810-6bfa3f7ed11e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d0b3dc6-169a-4853-bc23-d037951975c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "153503d8-ee10-4108-9c3b-29ad9118c0ed",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7384401-c643-401c-ac24-1d048ade8f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d2cdf88-3591-4579-b92a-d25edd159561"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "908438c5-c0c0-40c2-b8be-a0f5f9e7f2be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cdb43907-4df3-4da5-b5ee-43ef5439677b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61c9ea03-1b48-42c0-a5c4-69450761f61f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4acc8ea6-282b-42ac-82ee-3b600151de0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ef87358-a0fc-4a6c-bf91-f567fcfbfe29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d44320c-aba9-41b8-98de-c5aae6a5851d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a8d3979-49cb-484a-aa82-93b7e4f258b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fe0af03-bcf3-4ce5-869e-5395788d9903",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e12ece8-2de7-4eb5-b783-3454ac0425c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a688a13-5c41-4765-8aa2-7cf33c3a8be1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8c7d309-329e-40f7-a355-b02717a6936f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "17caab50-4155-452c-9966-9986923974bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76f75cde-8cb6-4d34-aaf5-aefdfb309e7e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "082dcd24-a15a-41a0-b9a3-18af63b8067e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ec4d8aa-bf8d-4fe8-b8a8-0396dfcc9c57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9197942c-5284-4a6c-a78a-23b6b7cdbfe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4f7c528-1400-4f2f-b09f-c634bd01ce7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f739248-3031-4051-b0ad-6b5996c5d7ed",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e1bd13-fb61-4a4d-a3cc-02174f7194e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4699459-0c6b-4c97-b1e4-ade244422b26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d61e4b7-bff3-4104-bf2f-db0063413e82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e65e508-92ba-4944-933f-1cdab8d4c392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75e4c983-afb9-428d-89a8-5168bf61e977",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dbbbd25-0a1c-4e34-b5d8-2836e9da20f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afef126a-342b-48fa-8c9b-7872c7beffd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0827e22-ef64-4c40-9b81-7b147eb4658e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6af176ef-5a71-481e-a76f-b1616ba54ef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "703662f3-a1ab-4d05-a543-f1aff45d5ed1",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97c0a16f-7b85-4cc0-8e33-4bfc1e846b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7300f10a-7a28-45ce-b352-87ed7aca6eca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdd26a11-2f8f-405c-9e8d-81b4239c89d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd0145ed-ccfa-4a95-850f-e041254c6f8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5913bfc1-661c-412e-8d29-5d9c89c8c98b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74501895-b71d-4465-bcc6-f61c036c5c93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8e02766-54f7-472f-b767-12ee0fbd066e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96e6cd4f-8b0e-450c-92e2-fe8bcc5fb0dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d292c421-48c8-491b-9210-a2fe348b7c5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b0ce136-9367-4bc0-92bb-0b99f39a50f1",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "559e1df8-1504-4750-8136-cab7613e3079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46cec0eb-9f9a-4df7-8f26-31893515891b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2b45f4a-b8f3-483f-9bfb-709120bac8b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "84376762-fa84-4df0-b509-56b648d1c6a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "905a5f97-51f8-452c-abe6-582bdf372324",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb720893-2a50-4c36-a5a1-f08bb00ee1ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "754a21eb-dfd8-4fc5-8e87-69c3f840e2f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf0cd159-31ff-4576-b65a-e132f486d991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6c49e208-fe92-4c08-a366-bdcc71bcc97b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "486fb2cf-4575-4c82-8a93-9e6db3f1309c",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fc719c9-d2e7-4530-9420-ed08515f2895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34886fbf-1d61-4877-bbac-a81c3c2a43df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a62ba995-a895-41cf-a069-69b3e140325e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f70c9395-6e42-4bbb-8681-937dd6363fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c6d23b0-b96b-4c7b-b1e0-73942c5a20ce",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50068c62-f0b5-46a1-b3e6-800822ac23c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95a46bed-3a5e-4d65-bc54-2515f57c876d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2393c5a3-02f7-459b-b972-896f7f70ad43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "479fd2ce-7068-4f35-b197-e36b2d8e59cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1db9a80d-7c7f-474d-84ef-19db2e3af549",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da9f4cc5-2d0a-4ddd-bcac-65e11061297f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41feab62-e5b2-41e8-8d50-82b0be5e8b37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "538b5e34-505c-4247-af20-07dcbb848fe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "549a8bdb-4d64-4e81-a303-f08a56e4aba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c0d5992-64c1-445f-b300-9a1a396971db",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "399ccd6c-70b4-4a5c-937c-f62115af4409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7674e09f-8456-4580-b026-3758c96722c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "446dc665-f658-4202-876e-e2bcf89ec8dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "875622c6-a1fd-45f9-ab14-8de7d99a269e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aee805a-41eb-429a-89d7-911f45944cd8",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c707b8ae-5f13-4afa-9c96-163efe887eef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a905eac5-9a24-4528-90be-59c9cfd68c63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca24d76a-6659-4fa8-9449-25ebeb81a309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "11bc1d13-beb0-49c1-b334-490bc820ff2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab038f7e-c4b4-43a6-adae-14aaac402ca7",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75d946e0-fb42-4f0b-a9f0-7a28dbb613fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77e25b3b-8ac3-47dd-85d6-f975791612e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "177514bd-2b7f-44c7-9460-cb135cae6e16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "55c8b073-d3ff-4329-a4b7-3d4137f69170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "422ab181-0113-47b5-83ab-d2b9c4277e4b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a37309b2-5b7e-4deb-b011-336c00c51a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88775017-0e88-4489-88b1-93c8284f97e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab001c86-72a9-412f-bf06-b661a6e93483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0c7e2f9c-b740-4bb5-92d0-13f74e3d5ffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87a1f235-52f8-4505-b797-a640356dee51",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec8141c0-1db1-4d89-a89b-8b05b691c9b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c715964-2271-4cc5-8bb4-b817998396e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9abe0ed-58d5-4718-90bc-fdca34563801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a595c5ac-5d3b-4a7e-94cc-18892da830e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c2427ec-ea39-4bc3-94f6-d0a283af6d47",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2e6e1ab-569a-4b34-b2c2-3641a25e4093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61f1bcb5-3b0d-4ded-baf8-0b14c8d3ac8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa1e206-ddec-4515-891e-8adfe9e5b827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "14f46357-6ae3-4bec-9ae6-c53fb106aef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19b98ebb-100c-4b81-98d9-2302a000e524",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c53c34f-8fe5-4d92-91bb-4600c587e615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e2ea4f6-7146-4c74-a8b8-12d5ccc0f521"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d18c72e-2a63-45e4-8ab6-2921723f36fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d68da33b-4593-4b59-82d3-85da2432f0a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddb36865-fa2b-48be-9260-c5ae3f5541a2",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bebfa2f0-46d0-4d01-bd36-ffd050b3551b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58926999-8120-417c-adf2-cd7ecb5c91fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd3a044c-9eb6-41a8-b3e3-90df10e8a7bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "80d8ed12-dd8b-4bc2-84e6-d8a046a46af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c22de7c-3694-436f-9a30-46e93eacabe6",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "912981d3-216a-4832-8bf1-71cde87c653c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e604c83b-d293-470a-b742-e12ec6385477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8feb3cd9-59b3-4f4d-b5ac-f8861e13572c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "227d059c-d8f8-40ac-b138-c426a798dee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "825341ab-32c3-4201-93ee-a2d0faa32041",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e48f3e67-a82e-4c4a-9bd6-ec3aa0447e13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a259fe1-f4bd-4488-aa9d-7596960d98a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "510dd727-a455-4b2a-a155-68cb97addb6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "abed459c-8041-4164-a7d5-43642a59ef8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fbcf822-fc62-42db-abc8-69f31e9ee1a4",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b7c437-e8a8-4a70-a5ee-3775847ef03b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46b0d22a-4971-401b-bd05-f28294fced12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9963d657-055b-4f79-8719-25bd2400eeac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b70720a7-8b6e-404a-b583-11a040cbfe7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a54ab2b-a37d-4105-ae85-c6d2b5cfc2d4",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76c7f3e3-9929-4741-8ba3-01ba1c5f7187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9b4c3be-a59a-4d07-be97-92851fb261a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9237d583-f735-4b0d-85b3-2ca77062a2ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "485c7db1-7de5-4aec-94d5-71d76a4f863b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bd1bf7e-e177-4143-b88f-1dc810dead53",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f468563-68f8-4042-a623-801506a2074c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ae5b2d0-5fec-4d2d-8b97-b41a43b7fc9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d0b483c-9deb-475d-9b81-127728b55e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f33f7bb-f352-4d38-a389-52c261ae74e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49e75ed1-075b-49fd-a759-aa35d9a6a85f",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79335bbb-dc73-4fcb-9aa1-d19e12c4f976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1453a586-1158-4552-8981-04531956e90e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fe354aa-e471-456c-90d0-a145d35b4aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "da25cc9c-bebc-473c-97a5-392e8f6299b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d39b5d6-d510-4d35-9f95-dddd366498fb",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d942a998-57ee-4bc4-871c-600f96492747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24149415-29ef-4b7f-943b-2e77a3faed67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47ddd71a-d2f9-46f2-9f0d-fb2cebe01334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ef04c259-08b4-4ef4-b5d1-320ee70f944a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a83f6e0-8e01-4043-a0f0-d375d103297a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c36dc9d-45ce-4ec6-96b1-e6c6257d8609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3af6534f-6825-4ddc-add6-00ab385c4a01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d8e9e2-1b75-45d4-8e81-f47c6e20c111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "86293333-aa5b-4168-bc67-9164976a0cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20020498-390c-454b-addb-3a049f46fbbb",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7cd24d4-d978-47b7-889e-4fda044fdc19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0062afb9-d411-4ef0-9616-c5bd7a948020"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff3e356e-ab41-4b29-b671-a9a03190c738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c6fb641-c59a-46de-8af9-9d59e1c48f7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5419a33b-05b6-4513-a4ec-75e8e7146b34",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf9d2731-c154-4be7-be44-a537ed963590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "889f2f69-273a-4563-b3d9-fb5731d8ef03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8402478d-d8d2-4a07-9abc-30917d7a6860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f27d216-d94e-49c0-9963-47cb07ced7f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08b8e89a-3fe1-46dc-8a98-e132d2a0f294",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "373c74ab-5873-494e-872e-c4749b264ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "277724e0-a468-47dc-8d01-2218a977a3ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e3afe61-b303-4b91-9fcd-7b0731d8aef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "995ab1d4-22ee-437d-8a4d-289ca35c6f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c95323d1-af23-4de6-a454-ac84afec9dfd",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "757446ab-9867-4d34-9263-c8a68d9a0d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "200e7e04-926c-4d4b-a64c-90b3774ab93b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff3472ae-35ee-44d3-835b-8fda92467051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "89201e07-b49d-4497-992e-2c092d543a7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef3654e3-abeb-4ed5-83d5-c322b687f128",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00d06300-c8dc-4f49-8e2f-200a1bf92021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19bc34d2-d718-48e5-8b0a-5a77e832c3b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1eb33e0-f16d-4be0-b64b-e76546082e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "54ba7266-6326-4402-be48-54e2daf9e428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc538a8e-212d-4b2d-a831-7ffaa0f6d20c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45ae029f-6172-4f92-ac9a-d8c3b041ec90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b0ed365d-f404-4ad7-8596-44cf97584b1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d95678-ba75-4cd6-a511-9cffbdbcd54d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac5f0ad3-cda3-4fa9-8ec8-a43d63eb07de"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "de42667a-6642-4c25-98f4-b17bcc7cdcdb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "55b52440-4cbf-4bd9-8fd1-6015998eb4ff",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe531a8a-0632-4771-89b2-614ed56bc5c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bda840bd-b793-4645-8aec-72cca20ae235"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea92ccca-8775-4a77-a45f-52e7b99329a2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3ec29d0-51a3-420f-8ea0-af8410e984ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6316db60-9f4a-468a-ba2f-f1958a2f9c3e",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50c9c562-6584-4b5b-8baf-070b9230446b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "466fc2d0-7112-4fa6-acdb-8761afa3a7e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d5982ef-1028-4466-966c-98ca85dd5b04",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f96cc1cb-d13e-41aa-9e50-48bb1b0d5795"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "da63fc71-30a9-49b0-90f6-c508c6134fe3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e9fcf238-cef4-4209-ae58-180d97279b8e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f33e565a-31a9-40da-9d4a-9fa2cfec464f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f900be97-63ca-482c-9e9a-62f1da17f692"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c97275b1-402d-4634-955d-f1711c26946b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bb5fe376-5de7-44ba-b5e2-01b7b4a2d848"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d8cb6756-64ed-485a-9441-717d08a82a16",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "842227a2-6284-4585-8572-e2929b97cd23"
                }
              }
            ]
          },
          {
            "id": "343c7fc7-9155-492e-8e3f-d93d4115cb8e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b8b0cf40-9d4c-4f41-80e7-bddafac5df06",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "46f772f7-f66f-48d3-bdce-169628909a54",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9de2f7de-2fae-40d8-bed7-33ad5326da00"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "18173a36-b8d5-4c98-80d1-ef695083e8a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "aa9b0f75-369f-4621-81f8-3c54834aee3b"
                    }
                  }
                ]
              },
              {
                "id": "d61ed753-0725-4871-94ac-73cb34ee1619",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1462634d-7648-46d7-ac94-efdf1c7527b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f87c9328-d231-492f-9885-84daf1d0be7c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f954626a-3f93-4647-952b-e9b774ab375e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "15db534f-47fa-4101-99b9-d8a91f77380f"
                    }
                  }
                ]
              },
              {
                "id": "c51e761e-21f4-4a07-b4e7-328ebe0eda1d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fc66cc1f-c17a-41fc-9cb2-e516d934837f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "560a74b9-0a38-4ab2-be88-4c8d263ff46f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6fef5824-a81b-484f-8cd7-a3ed832abbe1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "277296b4-5b63-4285-bcb7-ea7752da67a9"
                    }
                  }
                ]
              },
              {
                "id": "fa14c021-390b-4043-ab0e-21cc45addd0f",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f94b529-ede5-4d74-82fa-2ea990ec6ba9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8f47a6f6-82aa-4de5-aebb-c6e4eb5bf8b2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4dd4d3de-5be2-4295-815a-d8441805f9b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "6e1da4e6-d20c-4ec1-9e8f-18ac427a3cce"
                    }
                  }
                ]
              },
              {
                "id": "277a9e86-6122-4684-866f-d3f3884ca091",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "983e030a-bebc-46c2-be0a-cc4badcd51e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dbdcc45a-6fe1-4145-bcd0-006629359b20"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1441fc63-4f38-4732-8347-845236e085bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "1d617e87-6d02-42b8-bb7c-62aee4054da5"
                    }
                  }
                ]
              },
              {
                "id": "e44ae8e1-df07-4804-83d1-09553fc33f13",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "43f40844-403e-4f37-a65f-27ffd4f618b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5ab45f6d-d73b-4f9f-b72d-1a4e57e76c3c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ae39e7a4-46d0-4976-ae18-4002c3554312",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2dee767a-edf5-4115-9f76-06a8b7dd84a6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7ffdc665-0b21-42a9-9061-94ef272130bc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a0ba4721-986e-4e3b-a862-9fcf0f49a92d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9decaf64-3618-4fb7-86eb-a7fee6b00fcc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6f3f1f4c-7d95-4b58-ba7f-9bd001c8f11c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b5780306-8d62-4fbf-93cb-39f1a4db0026",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "60aa9747-36a7-4fb7-ad71-a33aa9d41997"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c91c912c-71f6-4adf-9f7f-dc64a05ac7a8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "53405e06-d261-457c-a129-1314a252b6c2"
            }
          }
        ]
      },
      {
        "id": "2e72d07a-efa1-41f7-a104-329cabea64a8",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "b6dc228d-bd93-4d14-96a6-70fc7568cc81",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8d9f5b91-25fd-4ea5-b84c-37b280f6424d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "46c86acc-b792-4f02-adb2-a0e316511490",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74ed82fa-5d47-4e02-ad12-6d78714b3970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8103798-4fd9-4f22-a519-9cd606518cb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3e054c0-338d-442a-93f2-f52b1e4792f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6263cb60-e549-4680-a4f5-16083df3ecb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e98327-7925-408d-aa80-2b7717c74f7e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d06454f7-8756-4cc9-9451-a745054c884f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b159f1b9-0996-46e0-bcc6-b9397add5600"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a74276e6-9053-4115-96ea-fe2528eb3e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8742b43-79f0-4191-b99b-73826513d183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "807777d6-7976-44e4-b7b3-f67d3d697ffd",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d8a2f94-fcdc-4bdb-b7e1-2844c1ed47e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83fd0132-f934-4568-a599-43b42c62919b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fefa575-36a5-497b-ac0c-fa98d37b09ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a4647a2-d071-4e35-b6bf-33e0229e1723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "943eba39-2851-4796-b1fc-6d6f7e73e12a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e087c94f-f0cb-4579-93ae-1e4a1bd97f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "047af4c4-b147-4edf-a28f-0023a7d06d22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d2522bc-8616-4027-aa5e-0a46ff92252e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa9050e8-f778-4513-a706-914bf14d8f92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "696621f7-0c11-4625-b8f0-d91f0e0dd0c2",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e977d644-9665-40f5-80e7-316a5bf1f8d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b5c806f-b9f7-4218-98ea-4415fec010b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acfad8eb-b400-4a9d-a3c9-6d9122eaaafa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a8ab5ca-44b4-4c42-8fc4-ecdbf1bab185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a43cf4e2-cd78-4d23-83e0-39e69d8df8cc",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13a99143-1e4b-4981-b520-8d46ad93e36e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "721cec9b-08df-439e-b2cc-67638ad2bc48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f87526e8-c2bf-4c13-870d-27b1ee81c374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "084fcb57-3caf-40fe-99e3-8da362e5f36d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6b9c2ac-c9ec-4ee1-ba18-b4a582c408dc",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7097916e-902e-4004-8ae1-759b3b4fba13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b50ad022-41f9-4ab7-be0b-54ed5ac5d7be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0564d2fe-56ab-4e00-8103-51a54bd4fd68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "188b2af1-ea2a-425b-9a09-3bb4a554a586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cd5b3bc-ce52-428d-8f81-d611145a2d9e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd5fecd2-1c1c-4c32-a21b-f0e6726e7268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16c76c85-8000-454d-8a40-610450186bf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7acecbd1-0232-460e-808b-28134c51fb0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b77a819f-6cc3-4aa5-b8b0-6f244601fdd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2756411a-afef-40b5-a84e-d69277266ec2",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "087365c7-dd74-4ba5-bba3-a4f9f707b97f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c69985a8-6f42-4c4a-b2d8-2b25ff3532d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0acb5111-1589-4cb8-bf63-565d82e803b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f06344aa-f157-45de-926d-92dbdb67f76f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66689fd1-b3b3-48a4-a51b-41ad7efa792c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c787080-7d04-4ae7-a3c3-ce00e611a376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43c66903-005d-49ce-9831-8986bf6eb330"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2b7ee29-0276-4cf1-b6e1-7fdcdf8ade0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "39bb5c45-9e34-4ce0-bfc3-558d0c921260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e383b2-a6ba-4bd1-8368-66ccd678a733",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "551f099b-24e1-42e7-8679-4b69608e446b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e63a2102-752a-4b64-b831-aa0d7227c560"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e850fa32-bbb5-4406-b13b-fafd556acfb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "1b909f4e-b447-43d6-ab05-8115548ded43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a62e20b-92f6-4aea-83ff-6d5f74ed33d2",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "999640a7-cac1-4887-aea8-899607517ffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be5788c0-d726-45c3-85e1-3cc01bfa3dff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97738fb8-a1b6-43f9-bbe9-abecf5c4969a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7f80977d-e97c-485b-aaf9-560aa76c38c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "183ae93d-e7e9-47a3-abdd-c1c002881a82",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a5ac39-06b6-4378-96ce-6440972f1a31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de9bc296-0593-4ed5-a157-f5c36e0403b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f062d03-d98f-43ad-94da-4e6ffae3337a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6aee1f2-bb38-498b-b184-84435f47314e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c7985ba-102e-449d-ac7f-d9e73cbc5331",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1228c46c-3cb6-4f7f-88a1-0b0f8dd01a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7cf66dd-b64e-4a14-b120-47e0c6e2cc4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3a6ddfd-8ef9-48e2-b044-92bd28a04556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "348987fb-4609-48bd-b2fb-19b02a24fbc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f150452b-1dad-46ee-b9ec-a4473633bede",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "018bd6ce-0b35-44be-8865-6132d1117c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d50175b-1942-4536-9d96-dc14cbb2470e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9514e3c8-f934-476f-98c8-63ca02430699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b028838f-b612-45b4-b5a7-df6b1adc41b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ff87037-8bc9-49fa-9f0a-a8f8b3263a71",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "383942e2-cf8e-42b6-bc58-8979e8d99e3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09871e57-b886-4527-adb3-ba6b0766407a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "646f56f2-6412-4090-869a-89d99102a24f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "26c45e75-f8a3-4892-a708-f8e33a5212d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26830632-cc48-4823-b6f0-5eb634285e87",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc6eaadb-8d39-4c8d-a193-821f6fdc189e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fc958e1-f6b9-4457-b7a4-5254d5c89065"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34adb370-c980-4b77-bbc1-e7921f260444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "13824bd9-e9e3-4d07-9b55-0543572efdde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecbbf46e-94e1-437a-b7d5-1b5b4a88bc4e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee1aed0-2f76-4b59-8563-b4a3ea7d9e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f5c7c23-e608-4aba-963e-d393a8c0da30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "824a875f-8620-45f8-9d17-acbc56b5df19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1e396b1-3828-41f0-8634-2625ad22df38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d3125f3-c5ca-4c54-9405-c681cc8f9e28",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61fd6334-8e21-4923-b4e6-f76cbefcc5b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "549aed80-9508-4e3b-a1ad-87484a345b9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d17f4564-ee9f-4035-a51a-fe2cd28a2efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "777e1c6f-d197-4ec1-a110-7114b0e85d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e577772-330f-4773-9356-02c030937450",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "389ca151-fe35-414c-8d2b-daac7c99350b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2168494f-0ffb-4429-b77e-743962d72c4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dad1a77-5b96-4b64-84ba-494c870460a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88852f95-480d-454a-84f2-e47082433a95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8a4a80b-a030-4268-9d15-dffcdafa7498",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d62bc06-8ba3-48c0-bd4f-04c8a8bd49b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97b977b6-a86b-4fa7-a7d6-e5a14313bd46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9a2c69b-ad80-4860-a199-ae4a4cfef9c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0edfc7aa-6e94-40df-b4b3-265326e27aaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bed67a6-f887-4a31-b14d-77d5c60750a9",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "518e894f-d39d-46ab-b16b-3c0bf1a84828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13859142-c993-46a9-9226-371f5d447fee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f79e7b05-efd1-4275-9742-fd21c780c799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf8a67f1-912f-438e-bf42-303f4cedf5be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab4f19b-be9c-475d-b5c4-34161503e662",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14dea32b-bca4-455c-bccf-5d9810e2ee08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2baa4b83-245e-472a-8f71-c6ea92f1d3b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a2e4ed-9258-4da2-9e5f-5a812c2e581d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "094d2a82-170a-444e-b4b1-3296828bf031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6e70815-f9b0-4d63-9044-e21d0add78bf",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbcf1085-1aba-45f2-a658-d9a82988c65e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "216322ee-6adb-4e59-a661-e815a463432a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc932a1b-65bf-4c73-b56d-245350a8949c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36f0f124-c95d-4188-9071-cf790c4e3287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a628649-aabd-4183-ae23-be79e4bdad85",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cbf88f5-7a82-4ace-8b16-d8861f3c3a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cc7e7a4-1de1-4d56-969a-7b19189d792e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79d82a36-8248-4fc6-af9d-9058615acaa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea0ba3e6-c861-4f26-9757-a024f0da3e8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13b91d14-01a7-4286-b34d-d88ca005a214",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a1b2572-8960-40da-b437-eb058a4e4225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51a1b3b7-1647-4216-92d6-b2c9719ae1aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7deb1867-d836-4016-8281-6f9223193dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bbf1ebf-bc9e-4cb1-b9a9-535f8d2855b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d67221de-e3da-4e2a-9769-e8b764779383",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "205834d8-0f34-4e7e-9491-8f2d1a5681da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6cbf0e5-e55c-4db5-bebf-507fe3509f50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db63f376-c56b-469d-b43e-caafff4ec7fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "92a9b7d6-1d07-4308-b92b-6ccf9f4ecab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af873163-3adc-4733-ac51-41f3a2690eaf",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3976fb4f-9c20-4c1e-a4f5-e52405124160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2bb3766-a15f-4476-a391-c3fd12ac24f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b298351f-4e00-455d-a397-c6784e7fc662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1725871a-eef8-4fc8-b87c-8b2902f49e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c29741cd-0629-4229-942e-4726893a2347",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae65cae0-8c8f-4091-a0e2-b80bc0af7187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf347c25-2823-4f24-a182-0cdd2504e632"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd98b9bd-b854-4422-8370-bcf882ca5dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4653e5f2-da10-4bee-9c5f-8510da483576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dcaa931-6198-4a2c-9381-497c9486bc64",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64a715ff-b7de-4643-9a88-4710612b7d70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1167eb29-4a7f-4b24-92e0-abf73e49be4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ae9693e-081b-42af-8f50-71c4cf23061d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21342859-2f0d-475d-8b0e-1287d4f5a7e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57193348-2314-486e-bb35-4b318719ab7d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff8d052f-0170-4247-85da-c82dbd06e0b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e14090e-020c-44f3-92a6-745fbfb407be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eeb0e72-121e-4a02-8f69-75be69f01f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "886003a6-d7b3-450a-8b43-31a3b12fa778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "635649fb-4697-4ac8-9247-200c90a4388f",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "521f4954-481a-4536-972e-c67efb42b670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffa4bd7c-2e63-465c-a153-10d72309ac4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a90973-dadd-4c70-b2e5-85c26c403c13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9dda3585-7c21-4e4e-ad4a-ee666473892a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9770839f-7500-4d6f-97c4-54545c4cc55e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c60e716a-4893-45d4-934c-95855be88780",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f16caf9d-2f2a-4f90-8c6a-e87f32dec926",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ecbd8408-2fd1-40c9-ad84-9f94e0f605f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e35a73-615c-4f2c-9991-4002758c1549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc88643d-a8a4-46c8-8a40-a7bfe18aeaea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f94a665-d8a2-4221-955b-8dc05f70b893",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87eba449-4e4a-4ae5-b78c-901b91b61c27",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "831a69e3-5a84-4053-b9ef-f3977f7d9228"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29c870df-05c1-4560-b98b-c17ce84809f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "867ce198-3b5b-4b8f-aa5f-11d33a55921c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b8c16503-74f8-4a63-a94f-9df207d6d561",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8b6edb34-0b7d-49f1-ab11-d3f06f496db8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "23651c97-8d98-45a8-a3ed-cbb1736efb28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5543b39f-c959-4bd2-b879-a8bf07584241"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "78ba7467-70d4-4e2c-b110-607bf3bcf315",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d005dbb1-4b43-409c-96b2-ecb1d1e3dd1c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f795e60b-95e5-4ddb-9c22-cc07dd260310",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fc30489d-30de-4c10-812e-8204c313e509"
            }
          }
        ]
      },
      {
        "id": "641c42c1-2f31-492d-a007-241e15a7986c",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f2725200-cf7d-4e94-b344-9b58e0360f06",
            "name": "Negative Testing",
            "item": [
              {
                "id": "44685ccf-9659-48d2-9574-d970aef4fcf4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "45506c41-6e5c-4504-8f06-cf265e231d00",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a68bb76e-e2e4-4b9a-b26f-2dc6f9d20673",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f01c9db5-ab08-41ef-be77-e363ef2f8d34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b139affb-21a3-4449-93b0-6c6ee50bf178",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f775d037-92b2-4615-9239-0d6842d73d17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5edd6d31-e03e-406b-a741-986850a83cd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fd27ab1-8113-48c5-a30e-ff9f0fd00777",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bcef9f2-9887-4ffb-a041-dabea4cc6e0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c293a519-cd2e-4a72-be8b-80f64a06b9f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "517bb1b8-e041-4812-be7a-167a312cb326",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c61fdbbf-6e5c-45c3-85a4-16b4af1d346a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc02e40d-92ec-4484-8b4f-5d4fd3007c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdd6a09c-5584-4fb6-b57a-719c955a87d6",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d414c652-6832-4145-8e2c-dac0a0baf19f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "419315db-eb4c-4653-a232-87d6d474d486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc68793a-f27e-45db-b2a0-08b1673fbb87",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbbb0933-2ef2-401e-ad86-69f15b71de9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "114144a0-2e22-4646-9038-4381b99694d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36d5f164-a017-4dd5-a634-f1af43429f19",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf88439e-048e-4afc-ab5e-6cc4095002a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b21246fe-806d-46dd-8127-3363bec70f4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b6bb993-e9df-461d-b985-177430c46096",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a695b61-ed76-43a1-9ad2-90af50b29aee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1d8e0c4-5b28-486b-8932-12a42cc37ae4",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef3c0cd-3cc7-4390-bc96-18aea2b79700",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f76b7cb2-d4f6-4c52-9195-2fd2ba311252"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fef8ca1-75d3-4bfe-ab8b-7926eec4a3a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a95b7557-4379-4003-b738-efd5a8c225d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33169da0-35ca-47ad-ad04-cd47eaf5287b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce77c82d-c6ef-4cdc-a578-b08bafc349c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0df5bf0b-7851-4454-91f9-0ab059d26661"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd1164b4-eba2-4db8-a357-cd674435279c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d2f13f5-f046-47be-a081-2d67c9c9270d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "063d251d-a9d8-494d-b1d9-0446e0e7db46",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aebc0de1-ef8a-4e17-87b8-0852bfc19479",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "312b7a32-90cb-47e3-86a5-bbfe6fc7b442"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd9b739d-aac2-405d-a5ab-7579244e9199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbb123e6-dbd9-4fe0-b728-108016e4bfb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da751f02-2e61-40c4-8363-645583f4b399",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da6cd90b-4c34-4b28-8bf4-09dc8adbc924",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53c1634b-7768-40dd-8c3d-cb442c093515"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7766dd16-fc0a-4eea-93c9-17754a0281b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16cbf589-0fc6-4860-9ba9-b01286f964b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30a709cf-8753-4e47-a685-8b47cc552d50",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9b62430-af21-4ebc-a612-05c6367ca713",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dda3819-2eae-4814-9555-278fba39a6b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c59c7d7-a932-4502-98d4-a1acd86f904f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6e1c3d7-2f31-462b-8136-a0c851c5e880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eebcf831-4be1-47fb-a2bc-388d96c05eef",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daa39c14-278d-445e-a8dd-209142ac3ac6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbd8c9dc-b743-4e1b-bc0a-5d239395e77e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69df5549-1bf5-4d9f-ba25-00fdc58e67ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "226f0eea-a141-4639-b98b-c4a84e3973c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9959414c-4cc8-4fba-84f9-1214594e9528",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2d03fd0-8cd2-4492-8cad-bf3de88f2729",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7baeba0-343a-427d-9a3c-025e6dcd86d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2495cd1-ba06-4ad6-91cf-240ac376493e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bd4c0b4-e5ff-4264-92d0-ce04ee9b166b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af4a2e08-70da-4d2a-8198-3ec1f414ca4c",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "783baa53-7d63-4d48-81dc-14688e7f4eb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c92ab2b-914b-407c-80eb-5facf087e404"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e8b1e91-6e3f-4780-a216-b602e4d40ea5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e50e2c06-c19e-42cf-97ca-55c787284011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d0599d-2847-4d65-b7c4-70dcd1f24ebf",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c2f14c-c7a5-420e-ad9c-e30371881b9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59fcfaa1-04f1-452a-8e59-ec76460ebc6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d311f4fe-9b96-4742-9ab6-314c3f443348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "602f2266-3dfa-4e69-844c-6c201940a81e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94dc023b-8d0e-4970-ab8b-a5d3f52d968d",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68d81171-6b6d-4eea-9bad-458379bc709e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de38e0df-221f-4fe4-a6ed-8bff80ee2bcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d97c1257-6412-4cb9-832d-f850ed9960b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55b3f6fa-0314-4927-8896-cc4c195faf98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef5d7d36-8a87-447d-b53d-949dd900507e",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e828156b-d152-4dc5-a8d0-102dd63f7145",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "580189b4-3d6d-49d0-8872-e8d203aa76e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a57124d9-1171-4eae-981f-0d004166af5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8180a54f-9df9-46ca-b631-c94ecac1b1de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0da3a0d-1ffe-4e23-ac2f-7e528fe3d62a",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "927143d1-48b0-43f2-973b-467de7625d01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a807d625-f021-431b-8137-86cb2db2e6a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96591107-891a-4312-99cc-5567ec4c38f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2375b0c2-0428-4ae8-bcb0-6f1cea13cd7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c159def1-b71b-4dd1-aec0-cda376bfdd08",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "240a6298-4f88-49c6-8192-e78a0a192d20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00770431-8544-4083-adef-a6afc3dd20fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e34d129-c353-4e67-b64b-889aac2adac6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "567ba830-b9ca-4284-952e-53e663a221cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "035a21f8-3afe-4dfb-829f-3124a9628a84",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d695010-ca58-4e0b-9ea3-6e2f6a2102fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c05a114-aa8c-4d3d-a54b-edc9d714518c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0a01981-e4ed-492c-adf5-ffdd5f61e12f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "112a2ca3-382b-4966-9835-da4594119b1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e2793c-5ea8-4eb0-a07f-debb8e415bcb",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26862e77-0ad4-4b8f-bc74-139804908432",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b2e1e6d-dda1-487f-bb0b-f84a9a63c909"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f153491b-fa9b-4f08-b313-4d8fd295fda8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2b4beda-721c-43df-bb32-c996228d4f35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca4fa8a-a6ad-4dba-84d1-24fc5f3f3582",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc5da9e-261d-4266-a328-11d125524740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aadfbc3-32ff-4560-a418-b314f707c951"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "841a6a59-801a-43cd-87c5-07a996805aa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9287659b-9b40-4106-891f-1ae73c0721ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "428bf25f-2ecf-4c33-bf2c-2bac2c589e0d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d33fba7b-fe2e-48f2-93aa-07a7ea9f15f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe98cc61-f4d2-477b-9622-9a4db1fe6db4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "881d162f-4eec-47d1-8da1-de22a00e3942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f63e334-424b-4c55-8888-a0eb9e5ac5a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d80da52d-343a-4e3f-a7c9-543587b68e3a",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e0d97f4-5e81-4f07-bc24-4ff485b1ce03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "874ba805-c867-408d-828b-f6eb048bce22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d027944-a4b3-407f-9767-8e448ef9f7db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fd927ed-48cf-41cd-9ff9-36dca5f8d290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d002773b-22fb-4e2c-b88a-027f5d506fd2",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "433308a7-705f-44f9-91e7-26c1a0f7629b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "979e3e8f-9b14-42c2-8f21-4d22073e84bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af6a7bb-b57c-4840-8944-88946a27d713",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd2c1cdd-cbfc-4bd2-8bcb-d38cc68cfec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9abdedde-18ba-4401-bf17-d1a92fd1e53a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca988915-a5bf-4f90-a89d-173a3e4c96b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f4fc9a2-da4e-40c8-934e-ceef888ceec7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e141410f-3553-44a5-b5ca-86919c9c248f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "617f12d3-d113-4bbb-8add-1423c376d6ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8e3b6b3-1fe3-44ac-8ef8-8548927c3ccc",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "989b819e-a1d4-4c03-941f-817288edc965",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f0ef16c-e4ad-4df6-a99d-dfdcfff627db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fd98c18-7835-4b8d-a0dd-4f48886e36bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "349b67ec-befe-4820-ba58-0a43b8641ccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12333256-1f68-4c74-acfa-2c62d11b44b2",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce48d27a-a6fc-4e6c-9217-f1ba7bb365bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98175cf9-069a-410b-aa4f-77c9ef164bfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b5f9bbf-9b88-46ba-9b72-8d58b2a69812",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afa96be3-170a-436d-918b-786b00dd0258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85ba99e8-3be1-4044-92d2-cb1099a1defa",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4114ae0-1ff7-4795-9e0b-5ddf0fa7d671",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a104a711-d96e-4231-ac5b-6f6c5fc6de59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "519faaaf-9560-4eea-89cd-9772461a3c6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7df6904-eb41-42fe-b18a-298ebb18181e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c89847f-e324-48aa-8e16-aa17777e6b70",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2b73f8e-df60-4126-bc86-e1a83928146c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8df0749-fd0a-49a4-a82d-af2a697bd1d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c02ec57f-cb2e-4af9-917c-4a33c58ffb05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59bc7d8c-f401-41aa-b61a-7aa40c00ad28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b7ac47e-012f-4bb9-8f89-d29921f1bfe8",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19033470-b217-4cc1-b554-b5ae868f1bb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a488dbdb-fe0b-482f-9241-591d5990e673"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de5be712-537d-4ab2-b066-11280da1ce86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c687ec3-61dd-4069-a38c-95a09ccd053b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8c5db8b-3962-4e51-be33-5b1305e097d2",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1216f518-5f9a-4db5-9929-cffe43d3758d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93c9c19c-2899-44e0-95ed-da1b1caafbdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38c6103b-dbc2-4242-89c8-5d500f08cd05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a77dadff-202b-4ca7-a013-7f8bb4031108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9cdeb9d-fa72-496a-808c-a8e90117d9f0",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee12a379-5b80-4774-a981-55163af5f2ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a91db9e7-40fc-4f7e-8578-5fd4bfdd392a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7db1877-cea9-4b2d-aeed-b39ccef0a3be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70cb1685-89f5-4a71-8894-a493aa1e6663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e385e16e-73d2-4dfb-89f6-4e8919f567de",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e754c48-fdc5-4412-b63a-9139adf38c55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51dbab59-3d9f-4ada-8aaf-774273083805"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95357a78-e7d1-49cd-823e-bb91128a3a36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5549637c-6ede-4c46-8352-53e1abebae4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "184322c1-33a2-408b-885d-cf4441a2ae7b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30624caa-a611-4596-89a0-752ccfdb77fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f224920-f1da-4ce8-ac5c-f96eef24b5bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c7b875d-ee11-4f71-b199-1037052a23a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7585522-053c-4462-8095-f611eb23da0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e756b2fe-8b0f-4b28-9ccb-c77403f54983",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90015544-5955-4a39-b1b6-4e938d54e4c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0dfb8fb-091e-49ee-877e-bab13bfc3bcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77832b55-4322-4eda-aa52-789cbdf486e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a149a625-0084-4d34-844f-1a474b8dcc53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cf79832-78ec-4271-8a3a-fc9f5588e1be",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a58cb6-6fcb-4e2f-b639-87fc7178bf00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9fb85d6-95ba-4700-ad37-9deb4b09b127"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "588bc39d-2a8d-40aa-86d2-24ff9da4c73a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cdd0d84-7ff8-4f9c-81db-3717a500fff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a91eaac8-649b-44d9-9214-7785498e2f7f",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8decffa2-5bb4-4edf-865a-0fb410f88c2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8566ad0b-3eec-4964-bd14-bb335b729631"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb72486-bf18-4c1a-a35b-a12ce55fe593",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "589683b2-871f-46ec-b14e-8e10e9872ce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "287606d1-f90f-45bd-8356-c167635e0469",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05c76a67-fc07-42d3-86b1-6af76f4f134c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd7f8168-0947-4359-b973-6c3a08892f7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f1fdc4-3d7e-4cf9-a557-cdf2190b7b53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "525b878d-871f-4760-8f63-eccd6963b151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d53b7055-d0bb-42b6-a799-3f6afc7210ac",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a817aaaf-4c44-438c-96bb-837fdb4b575a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43ab5ff1-d1a6-48ef-8e5b-81d0eb451b10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce98176-b994-48e5-96dd-61e8049463e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc423c24-1c90-4c05-b5e2-297ce963b6f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6e705c4-80b3-40c8-bb3c-f7cb3cbcf32a",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6359ba6-ba1f-43c0-8c9d-a778fab63e1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a62316a-b5e0-4d0e-842c-afec0ed2eb50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c3c30f-5c52-4afd-abd1-b6c7326ab207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad1efc3c-a612-4b4a-8a26-18a305fd75d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d5d807a-1ab9-4215-8e4b-9b0db85b5b72",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3701f35e-a503-4e49-a097-fe3396a2182a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46f25295-b79a-491f-a55c-a64e4be55b39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "369023d0-0236-4232-b8a6-f9874ef1eb28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec98431b-ceda-4901-8384-65b4c9ec522f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af15aafb-44f1-4507-9c1b-8d65b636ac02",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5a31e2f-f542-41c0-a252-40a44fa94399",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ef10331-1d43-46c4-b6ea-eb4162b6f746"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d65d563d-7daf-48f6-a129-c2fa614d2919",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "832c320e-3b57-4776-970d-1eb203e4a012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3e6b232-05c8-4a1a-8d89-3de74b4d7ac8",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbafbb8a-ac0a-4c3a-8399-b8e8a927953c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb0e53bf-379a-420b-8c55-2eec6fabd6d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4771cb92-92a0-4e42-bb76-ecf60ce211dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "127ba39e-14df-4872-bcd9-3e70d9bdae04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54f2ac6a-bcfa-4cb0-94c5-655bfbe8e750",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b5267a1-ffbb-4232-b179-6bf39411de1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09c8709b-d7f4-49fa-ad34-9368b7497305"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad921316-c253-4daf-b5be-880a51ea08a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04ad1e2a-c800-491e-b7ab-816b8728a396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13d7acaf-e776-4dc7-9f1b-b15dd8a2f10a",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "464d9687-7a38-495b-95b5-cb8dece37022",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07c808d1-69bd-4bb0-89fc-35d1d9eb4f46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b363a3ce-6917-4ea5-a257-177d8f8fa715",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9531566a-8efa-4494-9438-57d3c6ee2cf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55af9af9-1f9d-450a-9da5-54fee2c2dd0d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "090c37c1-7e49-401d-b496-aba954fb52d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f6313e1-8b30-4c2e-a784-46529c97ed01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac7e315-7b09-4656-b047-e79bef9b1a38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "054a74be-bb1d-48e6-b27c-170479af8b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b1c6f0-c8b7-4854-98f8-28d959295471",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a319853b-68c3-481e-b748-bc1f6eb08b5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "887dcbb6-4e60-444f-9102-dedcd9972e79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caee30a1-ea9b-4b93-b80a-7140051e5ac0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26e58ff9-1ee5-4496-b663-b1a4e5f20736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f27b040-44a3-419a-9cf9-67ac721e5a8a",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb54ccac-b2fe-418c-ac2a-9d76ce21b933",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f92d6566-fd55-4e89-ba0c-4dbec4c48207"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb2820df-6751-4550-8c67-20aac4b9a2aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "726d35d9-aef1-43d8-9af6-696b0c07001c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13a0ec3b-f4e6-453d-b3b1-aa343e624c8e",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaa64bed-9641-46fd-9617-61bf75d0d075",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4918b377-b240-45c5-9042-7a3eecfa6900"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebfe396b-2640-4136-890a-465b8e276b77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7821f14-e8d6-43e2-814a-3ab7fdde70b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c9b004-6055-43f1-b44a-2915a0b910b4",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "016f8965-4f1c-4167-8557-58e7b11fbbf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddd1a103-a31d-42fc-842a-d3fb72bb720d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87300b76-740e-4d14-9e4c-06a593e13876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab8501c5-cf98-4a31-8c64-4d904960945a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "854b4214-9f21-45f5-8f12-3caa495f211c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13504452-e25e-4948-81bd-5b270d6dd54a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab57ab2a-fdd8-41ab-87a3-5ec043bd2833"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a61ccbad-8c76-429f-b690-b6ccf85c2fa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d56c41f-45e9-4875-aa8a-9a6b70237efe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f02f295f-ef2b-4230-8eb3-89e542868d17",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4859c64d-6ebf-473f-9acb-84c3ddc41729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f277226-6488-45b4-863f-72dd96a2b52b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ede824f1-99c0-4de4-abbd-dcdba5b7fcab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1494d6bd-b22c-47c1-97ae-945db6a705f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca164e14-90c3-4eb7-8233-5a6a1bfd760a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d7ccf43-d094-45c2-8bee-b677539b79bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c18f2a65-44ad-43be-b818-0274add240a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e274728-8def-48a1-82d2-40b3b6f891ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aa8f626-3291-44eb-9230-34932ed5d2ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8864d64-7454-4a83-b08a-2af72680272d",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0022c176-c2a5-4c78-8366-2da5ff4140be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "842714cf-caf4-48c6-822c-aebda6078450"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6208eeec-69e5-4b44-adcf-7d586e7c16b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2a22cb0-4cef-450c-9ddc-53b22c7d4f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d7a863-8714-4c7a-b109-a91c80a269f5",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "267a4f85-589a-4c56-a094-5a88d5c6ffc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14530ba1-d5f6-44c3-af3c-f053810055c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b985d6-2284-43a6-bcff-4f7bff337c71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95ab349e-5103-4661-a479-41ea52c0f3ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a6bb0ac-fc2c-4dca-8b67-24549a2e018f",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e939398-ca0d-4843-9f2d-c40d4c4818be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9db2a182-8c9b-4d57-b309-ec763e1abfb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f711142-7326-4f51-a75d-b0f366344490",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "540f7b0b-77c7-4b5b-85a2-b57ad360d190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9148d6e8-c115-42e1-957d-17cdd601779c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80bc00b8-0cff-41ce-9a61-084a1516169f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71587933-6f20-4aaf-857e-26f2cfa270b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c6b9ed-38f0-4f42-af33-50e129ca57e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17ea5edb-a062-4826-8044-6b05e5d7eca0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00d0582d-3d8e-40bb-88f0-090fd5b6b0a0",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeeabc67-2661-4920-bc12-7fde6a52feb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "629fea8d-33f5-43be-bf1e-0359d3888edc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6885a72f-ab77-4dcc-86a3-f693512fae95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb093f69-400f-4196-a8dd-3ae7607f274a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "909dd7c8-c37d-4f4b-aea4-0e1b13e851f6",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46b729b5-452e-443d-a9f8-284e3ce54b0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b97a6b29-701f-4807-b1fc-d5e485b37c86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36b10b6c-891a-4b3b-8efa-5a9b7c942640",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d521b427-a233-4be4-a0b6-400ced733416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a2cf99-b601-4c64-867b-19d33636fa06",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8af248d-37cb-4e6c-acba-e161cc044ce1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71a33426-86e1-4ba6-b38f-ac9754c99eeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d0e522f-e054-42ab-9814-2944951f4d62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adfd1b0c-153a-4836-ae36-00a8c8e1395c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7a81397-82d0-4afe-90b5-d442e55f4175",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae39416d-03e7-419d-9c58-0c15d45ed01b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "444f5ed5-a899-4f8a-866e-2f2ff63e7249"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d761591b-0fc2-4fb2-9bd0-a56fc245a2b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47e35ac0-f109-4dc7-b5bf-6449a63a00e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f280f7c-2bc0-4215-8c2c-53c4cee1ce36",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30479114-904c-4747-9f78-c6b6eb085ad5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d164324d-2715-4ef5-a477-638b673855ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3c621c5-1d17-4df4-b433-6a7f9b5e1c10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae54192a-2a84-4fb7-a82f-39bd48f1a6de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a99c1e0-0449-4980-969c-e2d0ca8392f4",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7102a2f2-c4a6-4c14-b648-bf2eb8ce9aec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9c81062-2d7a-489a-a7ba-aed4e6802ed8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb52911d-538a-43f9-80b7-168629c77d5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb8d6170-46f0-4e96-a8eb-b3328df2f769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74f93e20-6409-4dbb-8100-058b13f85116",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efffd215-b06d-4607-8838-7348917e067f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afc030da-c39a-45cc-8228-2f331c7c70e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f83257ca-8e2e-4bb1-931b-8522effb8bb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "604f9247-d4a3-4eeb-9c2d-382cc91f3787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2068d0e-11de-4359-b27f-5116339c2874",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8060a4ef-8b4c-4bd2-8cf0-85e8d8511a53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba0ac3f1-4955-4cd7-90f7-4abc08ab7766"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71ce433c-50f9-4acb-9714-724d37287d51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ce2362c-0fb9-4916-9c44-59a82ed0c9cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f4d9b3-c0ba-4c21-a63b-4c99ca1ebde4",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e9b8cd4-f691-4a6d-a1b0-d4d3ab567d2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3349d3f5-09d0-40a1-ba0b-03718b0298f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "174f369f-b9d8-4ca5-882a-9f14446db47e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a8a3177-327d-4119-b70a-b2eb0060e35d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c564992-9451-4eb0-abbe-7c76a26c026a",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ace2fa0c-2929-43f1-8ecd-b6d6f084a6f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b1cfb3c-8f73-471a-b302-6bf5a77acc42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7871cdd-a705-457c-acfd-f91dd35cd3fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c30f211-bd9f-4b07-8d0f-cbb23ae1ac53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1afc288e-f25a-482e-8564-695c731d9f37",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecca0182-77a4-429d-ac02-28314cd3f95e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6525057-b066-4350-852b-8b32aa2d81d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7090fbeb-8df7-48c0-af0a-6b4bcd70fe80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6480f66b-0362-447a-9c94-076e0632b43c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e64da92-8514-4181-ae90-340234580f0b",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7353aaa-7630-461f-bee5-1c713dbc6356",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d60b9776-b6bd-41cf-a0c1-0afbb06ea436"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5bf4532-6134-44a6-955b-dcd94cd844d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52bbaea8-f758-485a-842d-f8341a6a3bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1f39cc-9daa-462f-a14d-cc96513478be",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ffee79-8546-4354-8041-10ec790a96f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02e05d70-51d4-42c5-af59-890cf011b5fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be278b4a-2a32-4802-936f-453f549918f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a24aa800-e914-409e-96f6-db2db1219fff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c5ba98a-c2d7-412c-9e8c-a6e18811f68e",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b81333d9-bbe6-46f3-abab-62684a9b68fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30a94558-fa24-4cfb-8752-5e422b28083e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b87e2b36-0b28-42e1-87b3-9fa33a35781e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba59ce29-5606-415a-8d68-9898da6c445b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a566325-5bcf-4e10-9bdf-27824ddeb6bb",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a2d8a2a-0593-4ed5-9d0f-37a11a541768",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e6fd526-4dca-4089-925f-9719b314b2ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba70643-55e6-46d9-a415-5c6946607009",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d8931ba-9a0a-498d-aae3-2c309df1be63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72db6074-2ede-4f34-815a-ecf375a8b549",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6284cc75-d001-4432-9ebc-a4cb4a69f1c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa2b13ba-64cf-4716-81c9-40197bce506d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a4a5445-2d12-4a16-b947-d8d290f7e509",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b964cbb9-a3be-40a6-9234-45d1fd91bf71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94aa6e22-eff7-4e1c-8987-462ac02634a7",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b92c6ec9-a87f-44ec-9b78-897a4839202a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb483bb6-6c24-47e6-b17f-7eed90e8a134"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b66f1ad-067f-4e4d-99bf-d550d45d2a43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cf737f9-8800-4d40-8438-755fbb46a3c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04cfc53d-80ba-4273-ace5-657fd33cc4e5",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb5a44bf-6827-4c32-8ca0-255febfeb261",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4faf2d52-a180-4769-a634-9cf2d43eb8f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a796d2e-001b-40a1-bc44-11b21acd7cc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eca0faf3-5558-41d8-8277-0803d5dc7ea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b840360-7e4a-4cfa-a408-eb963c3f6a4e",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c709af7e-cdb3-4a39-a662-434a34555161",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c80f4c9-d8a1-4201-87cd-858681397087"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f02ce3b-f339-4dcc-977c-b51ea16bf787",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "288d7ab7-121c-4e78-b5fc-be3817f680eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e18a9d40-3b09-4fb8-9e8f-c486c456ff6f",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ecc5bf4-bc93-476b-a6c9-760a138750aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd057d5c-4dab-41b6-9b17-2cf7f8d04504"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a83ee9-856c-441c-b710-5b2581a3c554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9a0f848-6e46-4f45-91ff-6c7553f82021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83cf89fc-c694-46aa-b41e-8b20dd06c189",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21acd1a6-6bf9-44ff-a4cc-99aa04057001",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e123ef11-d340-4091-9c3f-9d3da670ce51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "767aa6c1-0563-48ca-bb4c-7c45cb7b1e84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa1da0cf-5bed-4f85-a0a1-baae06d518d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d5760fd-1e91-410c-90a7-4fe6855820a8",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa639cd1-4690-4439-b0f9-bfcf3d20757a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9b47cc5-cab0-485b-a92f-dbcb4996010c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "718a7fac-b5f8-4637-956a-50ccae4727f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90b1aa6c-88bf-40ca-a5fe-c60560b301f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05214b1d-48c6-4e5e-9e53-09c9ead3e43a",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15f13063-98ec-499a-9040-fd620142c910",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "900935b7-4bc0-40f1-877f-bbd324a9eb02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a453d4a8-8b03-49a5-a102-e45312f89ce8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd396f67-4fe6-41fe-a707-f6dd34aed2f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e865d0b3-a787-45ef-a40f-81bf6b82b220",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53ad1d77-ae5b-4744-b687-85cf8578ef0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48f5e045-dc53-4c57-84ee-15b72206152a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe8bc860-42ea-409c-b327-98d71e57a314",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea75197b-552d-4c1d-a3fe-7c7142eac00e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7ce5e35-0b82-4de8-bcc2-b9d46653a2b1",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dca6e436-7a57-4fbe-a3f0-9dda09aca83b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2bf584e-ccfa-448e-bd82-aef97863b96f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ff1c915-33cb-44ed-afca-d30cab5a2445",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef7eff5a-2326-4755-afa0-d6df08b77feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e449dc-6ad9-4135-ad52-52cc02ef2f99",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b25fc06-2b4d-4695-99ab-1a962b71782f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cefc361-1c9f-463c-9242-74e171036983"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bad8cfc0-47b3-4e89-adbd-af410bbcc64e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c9b7798-f1a3-487d-9a89-75b0c496c29e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a33915f-f919-42bd-8701-5a341f092a5b",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55da38ec-5930-4119-a2bb-6587f921b69d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99133adb-9bc7-43b3-ac5f-e87756ee7095"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a7cb834-5bd4-4f68-9815-1fc33c3cf95f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b24f70cf-d712-44fc-bf83-bfe1cfe91ac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e712f4ca-d7ed-464b-accd-e7c518c9e920",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95ac265c-5940-421d-955a-63e3f6cbd8a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19aab42f-a4e2-44e0-b1b9-6b97b3538859"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56906ab2-9f0c-4bd1-9925-c3e176f0b5e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b07740f-f919-4184-a301-45aac681b996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd552f3-78e4-4fe7-b35b-19f9067276af",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "698c63e2-cbc3-4721-81f6-439af3e0eae9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8843be24-6c53-498d-9437-d4177ad8435b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19647ed9-104f-4cfd-b445-0f62fd61fe58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85abb2ad-dc2e-407d-81d8-477c23f0ae5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f916e0cc-ceca-4dac-b589-7475690ff742",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ff4357-53f5-473b-9910-af06efcafba8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "806a40e1-b147-43fe-b8e0-6508818da6e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12abd5c6-1d6c-4bf4-9f77-fefc3605e60a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d58e06cf-8808-4919-ad8b-67c6b5321389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a8eaa20-aa19-481b-8c92-86b254132e54",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a206b908-dcd3-4531-adf5-7434a82a58e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99ed26e2-b035-4e40-bdbf-f3103b9107f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b7c0f8f-c8b0-4d20-ab4d-7e8616e22a19",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcd29e09-4c14-4dbc-83ab-fc6c4a37c038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "254a961d-8ced-4339-b6b4-5e75269c7373",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c98d3ab3-11ea-4ba9-96e7-021c9dc5a07b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "949e687e-8c24-4a2b-b660-e1a4cde71e46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9481998-eef9-41c2-a1ad-aa4868b34165",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41e8010a-b82d-40e4-9f54-9c0e3df5b78d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df59d284-787c-47cf-b85b-f1d732b6d6ff",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "526ddc4e-22c8-456c-a929-8b85faafe740",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cb843ae-8e86-40f0-aef5-a9b027ca52b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d31e04f7-5181-4701-801e-a9afbce914cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30f0d8d2-7c69-4b6e-8ae0-01b9e101a205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "827974f9-1aa1-4a5f-8a3c-8b4764f1a8ed",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "595d08fc-75fe-4f59-acf1-a071251e317d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7031149f-64dc-4128-90f5-302ca3e94db5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b7ae31d-e583-452b-ab33-37986537dfd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df0d666b-153b-4397-a029-7c2fac993a29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79ebc607-2a9f-4b98-a6cc-88a67056976e",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6938b975-4c60-4ef9-afc2-983c36b4e2b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d54b049a-490c-4d7e-89e0-c8a5abafecc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eca12e5f-8005-464a-98ac-334efcf9a635",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cb2353f-6ba2-4ce3-9762-5f9598218464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56a7fb04-04bc-4ad8-a470-151cd8fcebba",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7199a2f7-1920-46aa-98d4-6954e6f05242",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cda048b-713b-4a86-a706-61512bac68cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "045076dd-fcca-4e2e-9704-e0515bfb42e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f13c7a64-99c3-46ab-8f2e-5abe61eaf4a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cae0b1e-cee6-43a4-b5f4-f78ae325b3bb",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c1789b1-2f8c-47b1-a1ec-0ea2affc40a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba3bc0ab-b9be-41db-9320-546fe9fb4d0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb5e970b-a60b-4120-9d38-a9ec07850c12",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5005b38b-0128-4fcb-ae33-57eea23d0081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4171b2f-0970-46de-a304-99469fa8f7c2",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7bbb3c1-f606-4f3a-be4e-9fb888e65a13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f5042f9-9857-47eb-9584-7bb4ecb6fbb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d0ebc18-7b93-4b15-a025-3381d8808710",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a866471-d146-4cc3-95a9-0312d184b6da"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9e20fa42-f3f3-4b84-b535-5e9623b2887c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5f8a4dc2-0e6a-4fbb-a3fc-ddd362776c12"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d8c3cb9-6b9a-4c8e-ac64-95c19f7ce36f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fdc436bf-2f18-4d1f-a1bb-bfb45bee2178"
                    }
                  }
                ]
              },
              {
                "id": "a5575212-7392-45dd-8633-0fb48e2e449b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e0c0e3bd-be39-4f4a-9d14-a52016443bbb",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7487ad69-1db4-42b7-b3da-909a7e68c964",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "571a8a07-31db-4452-b083-29de39dab2e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d5745e3-8c71-4949-bbf0-cebb1a47914e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "550494bb-c928-4d77-9584-168dcd8c5f64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "034ec05c-343e-4a3f-a594-e636f38393c6",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8014b36e-22e5-4ebd-a9fe-f69a7e2056e4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "841f72ec-30da-4b92-827d-1179a8f796cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8f1283f-dad0-4f25-a494-cc8f325a0508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9fc87962-d1c9-4c0d-bb20-ff4e8fdcb1c2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d8712492-2376-4b34-8707-fe57af79f75a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a773e5fb-de5d-4437-bb5b-4fa4016507f4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "39d0fca8-c557-4de3-a1b3-2d7e7521c485",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0555d34a-4f6d-4322-aa38-5fb5b7184994"
                    }
                  }
                ]
              },
              {
                "id": "75ecb619-98ce-4134-992d-f00d1990453e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "cb349d8b-f2f5-4c6d-830c-3d746173aa1f",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79f26508-106d-44be-9df3-ffdfe6fdd371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "08d2bb7f-41e2-4f49-922b-0bdeef88318c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94ac19e2-c9b9-4f1c-9e43-cfa50ee36de0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e45f88c-db31-40b0-81b9-48162533c10a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5cc01771-eeec-4443-94a6-08ffe5bd58ef",
            "name": "Positive Testing",
            "item": [
              {
                "id": "94522a03-6810-486d-969f-ba3f5c7b02bc",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e6447179-234f-44be-a9a8-00ea00bce032",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d971d073-2342-4d0f-9531-4fdc1c647b21"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4ea9647f-6852-4947-9cf5-b173c3a00e6a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "93f49adb-4fc0-4c1c-a1e4-210937763969"
                    }
                  }
                ]
              },
              {
                "id": "a0cc907d-bd81-438d-9b88-987113431739",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c94b778f-86a6-43f1-967d-b68a8c0aa22a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2181b843-ddb0-484a-ab47-fb0878adaf8f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8a30f18-736b-42a7-be25-e6229e4731e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bc4b3a99-0ce2-4ba7-808c-2d5092bfbd61"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cb321b49-1b2c-4086-86df-32f8338aa83c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c813451f-e5e2-4871-ac8b-b6f7e36fb0b3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "13c21595-f1e0-4ef7-93ac-9f5b7158cc26",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5cb40ccc-b641-4f1d-8700-7f0f88d3d44b"
            }
          }
        ]
      },
      {
        "id": "48681554-16b3-4883-a739-4bff573ec0ea",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f5a9d5ff-9739-4c58-82b6-2918c0452a62",
            "name": "Negative Testing",
            "item": [
              {
                "id": "92028556-7888-4a80-8768-8812da1bffa2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9fc2bf49-62a4-47a4-8dcc-ac3b941770ea",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abbb9717-4929-49cf-8653-0375be03f306",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ea588fc8-ff9c-4d95-b98d-95574b572e3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a05cefc0-0ec7-4f50-9091-23714a066a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f827c43-f305-4e2e-8291-88a4dfcc676f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e3d1cd7-64cc-4738-a454-2ab898c61e78",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72c7b6a2-5ced-47a5-8800-0eb7882eda42",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3678c00e-3d4b-4c36-bfe4-a1676e2e9e76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3d5c4e8-4b5a-406c-8900-10d135673fa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "20640a5c-9e4c-4e1f-bcff-08dfb499624c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef7dca87-5ce6-4188-aaae-8268cb5ee58c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc46ffea-470f-4f1b-b4a5-8bc80f238c6d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d59804da-f1c7-41e8-b4e9-d203bd6ada96",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec01d7c6-5563-465f-976a-efdd6688982f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "313c8c12-8027-41c9-9d10-8e19932223da",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "520dcbec-2a9a-4d99-b981-88d27b8bc787"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0d6fcbbd-c373-4c42-9a9e-e6f918d777d3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "36bb5982-93ac-476e-8bcb-68680a3134ce"
            }
          }
        ]
      },
      {
        "id": "38a81e58-b36d-4f8f-b272-0900a85744c6",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "f8620861-ead6-45ef-91c1-94a9714e1380",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a4473e7c-bc8c-4ec6-930d-2304a94b59ff",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cfaac77c-cc3d-4a02-a01b-4dec19500033",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ed42693-704b-403a-b7c2-bb4c2d2ff4cd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b279f6ca-c5f1-4f34-931e-5943afa4af3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e10e3a69-1f03-48e0-a3b9-a77992ad2ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a6d006f-4584-4b4f-b052-054cd8ff419d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9c203fd-0dc2-4fdb-9e3d-513731ce0af9",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2644675c-23ce-4ec7-87be-a8065412c8ad",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0d89d83a-1409-4df4-9f9e-3b65c14b164a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "514f968a-8621-4916-b028-60304c28d76e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c221897a-7c58-46d3-aabe-69e72e09bf41"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "67ee9503-6952-4aee-bbee-d1b88f256fb1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04b74a3a-6d5c-494d-b2a1-47e8f865daeb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d5a771e-f5cd-451c-b1f5-72c9707c1312",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6766b9ae-713b-401d-ada7-79d0c4c7f480"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "940586cd-5571-4fff-8468-a7af8a925531",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "77941e8f-2ca8-4209-9532-f58fded087b5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e3a9860f-7723-4a68-8309-f699f7e97aa4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "51ba33c0-c794-4604-a19a-7b39b98e1f49"
            }
          }
        ]
      },
      {
        "id": "952c78ee-e11f-45f6-b426-0b28247b2cc9",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "860770aa-d86a-4c25-9f62-b048bf625dac",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eea6f33c-6419-4feb-9f9e-20d611fa25ca",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e2210824-408b-4d47-952a-40ffe6ade50b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e9e5345-3d7a-48e5-a9d5-bba5d3a67b07",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b19a64f5-f848-40b4-a7e7-bd80735cb5c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "907b0480-9944-4588-8375-c8d77950913f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ac26e056-3a11-4b60-8219-f36d034cdd94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f7082db-c18c-40f5-b59a-2a31be9c046e",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3431c839-4e01-4df8-8cef-492f50e500ca",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "93fd2f89-43d1-4340-98c2-e6f23bba3edc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66362dd3-c4a7-450c-815d-0d1d5d92cf0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "82d380e0-dc41-4122-96d4-bf751d2c3492"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "41723b96-ba49-4eef-ad94-f9dfb5f46acf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d0f0a870-f11b-4e55-8ab0-53f5fa70aed3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5b17100-0a12-49dc-a13e-b8733db0c155",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2210b5c0-4f69-4363-8bba-942fcecd0cd1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a4f9e40a-cb57-4b1c-9ed6-826b9d98b169",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f9d0702d-7d49-4da3-ae25-bf03ddeecda6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "39c9b328-b1a7-4a4b-9d19-e6ac1d1aedec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "46a3fe7a-da4d-4703-b3a6-a37b77f7afe6"
            }
          }
        ]
      },
      {
        "id": "12383574-391b-46ac-a325-080a08e6ffe8",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "57398e7e-0f0f-4438-8d11-e15107b2316a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "70c39487-aa37-401c-9c61-5320a0d10d0b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "ea748247-f119-41c3-b5a6-ffc284e01958",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "92395921-745c-4fcd-b249-0c1635b14e8f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "45724552-e06f-4053-a14e-f184b22a1eeb",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 277.17692307692334,
      "responseMin": 21,
      "responseMax": 6951,
      "responseSd": 777.6093538273334,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1681000690648,
      "completed": 1681000774342
    },
    "executions": [
      {
        "id": "61ac8c56-f35b-4f22-9111-595c4766ffa0",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6d8b1a32-b444-45fe-8a1a-0d59c5c675ff",
          "httpRequestId": "525ae5c6-08b8-420f-b522-d1ac4ffd5f42"
        },
        "item": {
          "id": "61ac8c56-f35b-4f22-9111-595c4766ffa0",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "6b9ab137-1e53-440f-9fce-06516b5295dc",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 0
        }
      },
      {
        "id": "4eaa21b4-91c4-4254-9096-622a574ca466",
        "cursor": {
          "ref": "086d3885-7fba-4046-b835-8fa337c409e7",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f4e3e461-ab20-4dc4-b9a9-1addb3324a9d"
        },
        "item": {
          "id": "4eaa21b4-91c4-4254-9096-622a574ca466",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "80e1db69-4337-4d83-9e83-83cab6564fe8",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "c6e757ea-33a3-4cb2-bafd-8706dab8fca7",
        "cursor": {
          "ref": "0836cf40-1b34-4bf0-a720-0577bdd52091",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "44e2fbed-02d3-4cf7-86f1-51c326b351e4"
        },
        "item": {
          "id": "c6e757ea-33a3-4cb2-bafd-8706dab8fca7",
          "name": "did_json"
        },
        "response": {
          "id": "9746c0f4-47b5-431c-ad15-b729a4361f54",
          "status": "OK",
          "code": 200,
          "responseTime": 523,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d5e639c-a059-4251-a356-098a760efecb",
        "cursor": {
          "ref": "5321606a-ff7a-482c-a7de-7a029e875ea6",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "fce86b7c-70e0-47d7-9e78-65cc2dd1a977"
        },
        "item": {
          "id": "8d5e639c-a059-4251-a356-098a760efecb",
          "name": "did:invalid"
        },
        "response": {
          "id": "12e37605-dca7-46b1-bf71-f2c0f2b8c8cd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 875,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "8d5e639c-a059-4251-a356-098a760efecb",
        "cursor": {
          "ref": "5321606a-ff7a-482c-a7de-7a029e875ea6",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "fce86b7c-70e0-47d7-9e78-65cc2dd1a977"
        },
        "item": {
          "id": "8d5e639c-a059-4251-a356-098a760efecb",
          "name": "did:invalid"
        },
        "response": {
          "id": "12e37605-dca7-46b1-bf71-f2c0f2b8c8cd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 875,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "c010fc3d-850a-4961-a1dc-01fd1994586d",
        "cursor": {
          "ref": "1a39f0d2-618c-41d5-96a4-3f8c20bf8283",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "817dee49-3a8a-40a3-b3cc-15923db28c42"
        },
        "item": {
          "id": "c010fc3d-850a-4961-a1dc-01fd1994586d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "2ff29c1d-1150-4422-b1b1-23be6dfd62d5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 66,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6afa6ab1-8c3f-40d0-9802-cc63e90aff30",
        "cursor": {
          "ref": "e72ba01d-e43d-48f9-bdad-d8302c49420a",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ca5bebe3-3630-407a-9ea8-616d3f233e82"
        },
        "item": {
          "id": "6afa6ab1-8c3f-40d0-9802-cc63e90aff30",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "3c25b861-ba14-4084-b92d-6c9e6b769ef9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 146,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fc852df-eb8a-4fcf-ba28-2e7603d5f5da",
        "cursor": {
          "ref": "e0667492-3f28-4304-bab0-a1c4974a66e0",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c1ccc4f1-6100-4624-9aa0-168ea1cce116"
        },
        "item": {
          "id": "9fc852df-eb8a-4fcf-ba28-2e7603d5f5da",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "31fcf54d-3f6b-476c-aca9-9fd0c6ae4974",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "04de1f0c-9a95-41f1-be9e-128167ab5287",
        "cursor": {
          "ref": "ab488387-3bc6-48e1-ac42-0db2f7ebd356",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "756cff15-6dc0-4076-8baa-94d1d1caf440"
        },
        "item": {
          "id": "04de1f0c-9a95-41f1-be9e-128167ab5287",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "7c5a35e6-ca66-4d71-86d8-dfa20cd248e7",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "04de1f0c-9a95-41f1-be9e-128167ab5287",
        "cursor": {
          "ref": "ab488387-3bc6-48e1-ac42-0db2f7ebd356",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "756cff15-6dc0-4076-8baa-94d1d1caf440"
        },
        "item": {
          "id": "04de1f0c-9a95-41f1-be9e-128167ab5287",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "7c5a35e6-ca66-4d71-86d8-dfa20cd248e7",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "ccc6b6a1-4a9c-4031-8e01-c3a61167259f",
        "cursor": {
          "ref": "3d5fab92-5806-46bc-8545-00650887eb30",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4d6190c7-1611-41a9-a84a-89aef947f725"
        },
        "item": {
          "id": "ccc6b6a1-4a9c-4031-8e01-c3a61167259f",
          "name": "identifiers"
        },
        "response": {
          "id": "603caf51-08e6-4a20-bd15-d7d9137d059c",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7209925-39f0-4aab-9e07-4874897116e0",
        "cursor": {
          "ref": "46a939e1-026c-4033-90f2-d7af1ffd9d3e",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4b679ba8-40cc-48a5-bfe7-7b608cbbc4ba"
        },
        "item": {
          "id": "c7209925-39f0-4aab-9e07-4874897116e0",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "630db0f6-d69c-470e-9eeb-1ef18c62913e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7209925-39f0-4aab-9e07-4874897116e0",
        "cursor": {
          "ref": "46a939e1-026c-4033-90f2-d7af1ffd9d3e",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4b679ba8-40cc-48a5-bfe7-7b608cbbc4ba"
        },
        "item": {
          "id": "c7209925-39f0-4aab-9e07-4874897116e0",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "630db0f6-d69c-470e-9eeb-1ef18c62913e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "141495d5-bba7-4250-b14d-91da788189a8",
        "cursor": {
          "ref": "c25d783b-b6d5-4903-b53f-6e78dfd16c80",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "09f5562b-edd2-49f0-9280-306a51d24b2f"
        },
        "item": {
          "id": "141495d5-bba7-4250-b14d-91da788189a8",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "8d107850-7fca-4f9c-82c9-91e481bd894c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a77f1fd0-0da3-46cb-832d-8a44f1ad8b16",
        "cursor": {
          "ref": "afc581b9-05ac-4c52-b40f-dfbea67c3bd1",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "9c6d7b7f-14a9-43b3-855e-5169998d6eb3"
        },
        "item": {
          "id": "a77f1fd0-0da3-46cb-832d-8a44f1ad8b16",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "0770514f-ad12-46f5-8e30-aac4600bc34d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b6da0b0-7f07-4376-9ebd-9dc2516989de",
        "cursor": {
          "ref": "908b9471-4026-493e-8e08-3fa564e71114",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4c674688-4e60-46c8-8fc3-51da180ca071"
        },
        "item": {
          "id": "3b6da0b0-7f07-4376-9ebd-9dc2516989de",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "b1f369af-8dcb-46fa-bc9d-d5fba427d703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3528f00-0386-4fc7-a897-6f10798560b6",
        "cursor": {
          "ref": "aeac4f8b-5a03-44d5-b7a6-a4cfa511653d",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2543feff-f15b-44c3-8dd0-5e414f2ea075"
        },
        "item": {
          "id": "c3528f00-0386-4fc7-a897-6f10798560b6",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "dd40833e-1fe6-4ac1-b699-717a641ef83a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4cc783f-ff20-4559-a61d-a236b96a02bb",
        "cursor": {
          "ref": "0561e05b-b67b-45c6-ae01-477607f49603",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8ad90e7e-1eea-4df6-8755-c2719f7c78f2"
        },
        "item": {
          "id": "c4cc783f-ff20-4559-a61d-a236b96a02bb",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "5a6400a3-2373-4212-876e-2c804b8414ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3900d37d-7b4f-4d65-8556-084ecc561596",
        "cursor": {
          "ref": "966d68ea-9c14-4c1b-9df2-b6483fa41c29",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "be0576d6-be64-4403-a6ad-67401ba4a901"
        },
        "item": {
          "id": "3900d37d-7b4f-4d65-8556-084ecc561596",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "325718b6-ac82-4a37-a62b-28d75e4fdd33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0db6eb08-eed9-44b4-b4cd-f1aa3fc96848",
        "cursor": {
          "ref": "02457979-22d3-458d-aebd-969d1088fe2d",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "cfe8e5e1-93a1-4231-be5a-7a60dcdc57be"
        },
        "item": {
          "id": "0db6eb08-eed9-44b4-b4cd-f1aa3fc96848",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "0fb93bc7-d1ff-49fe-b905-479fb5a53602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba1b23d7-9b75-41e0-a58b-50c212131d6b",
        "cursor": {
          "ref": "72d7963b-c246-48cc-ba68-5a0fc5658a4c",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "aad6b305-909e-4146-ad71-67906983e744"
        },
        "item": {
          "id": "ba1b23d7-9b75-41e0-a58b-50c212131d6b",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "468a08d1-b9ca-46dd-8cae-fb371e81a6e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e40ae38-002d-4511-8873-5a03f062956f",
        "cursor": {
          "ref": "3ffe1848-26cc-43b4-ab26-2cd7b852e17c",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "440baed0-3ce6-41e8-b102-a3ea47d22cd5"
        },
        "item": {
          "id": "4e40ae38-002d-4511-8873-5a03f062956f",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "ddb346c2-4dc9-42d7-991b-81a05c202f20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01aae603-6616-4a8a-92a6-6a6fdba0bec4",
        "cursor": {
          "ref": "53fbd3a5-4656-4818-9031-c3892614d67d",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "46ddbeb4-876b-47da-837d-2de3e65807f8"
        },
        "item": {
          "id": "01aae603-6616-4a8a-92a6-6a6fdba0bec4",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "46625c3d-998e-41fd-a4ff-617a2b5ee1a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f47cd7e8-db5c-4db9-925b-d38c6a5de57b",
        "cursor": {
          "ref": "e5c8b515-f2a7-4999-8ba2-0c02519ff1a8",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "50597783-7061-45ba-aff0-19657d3b8a66"
        },
        "item": {
          "id": "f47cd7e8-db5c-4db9-925b-d38c6a5de57b",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "1e907912-222c-470e-a4f6-8f0e5b80a083",
          "status": "Created",
          "code": 201,
          "responseTime": 1616,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "41c521ff-0b6e-4e2d-9583-a2c8d94b5506",
        "cursor": {
          "ref": "ab9afd68-1749-444a-8a17-cdd214ae43a6",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c64560f1-b773-448c-847a-38b5b4b0fd30"
        },
        "item": {
          "id": "41c521ff-0b6e-4e2d-9583-a2c8d94b5506",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "c6df189e-c1e9-4444-a99f-f13fc8684cb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e100ff2-e193-4e05-a1b5-541c5912bebc",
        "cursor": {
          "ref": "e9b86eb2-2573-4b8d-a63d-fef788bf9c20",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "69d8d1c2-99ea-4f9a-95bf-23efd14242a5"
        },
        "item": {
          "id": "1e100ff2-e193-4e05-a1b5-541c5912bebc",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d9e92275-99ec-41b6-92c4-673254e34bcb",
          "status": "Created",
          "code": 201,
          "responseTime": 6951,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "bb22a28d-b1d3-4468-b312-6f03e92c8077",
        "cursor": {
          "ref": "7e78152a-3f88-428e-84d1-6024cc92fa7a",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "07ff2705-a065-4cfe-ba35-0fafb6123abb"
        },
        "item": {
          "id": "bb22a28d-b1d3-4468-b312-6f03e92c8077",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "5beebec6-ecd1-4b32-a022-acf9eac7bdaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2353bd3e-a501-4f31-93a8-10dbf74d278e",
        "cursor": {
          "ref": "62ece8b9-1f56-4488-90e6-8228e48b64a4",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "6dbd2a52-2b6a-4b1f-b384-5a73f846e06e"
        },
        "item": {
          "id": "2353bd3e-a501-4f31-93a8-10dbf74d278e",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "750885a6-da5f-46f5-af40-13376d7e40c8",
          "status": "Created",
          "code": 201,
          "responseTime": 6187,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "5f04d801-4540-4f32-8084-b15672ab88ea",
        "cursor": {
          "ref": "9cba1c82-b923-4dc2-8fc8-b12cdded0671",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e8b39eec-8af7-4b0f-b81d-61802aeb2d8c"
        },
        "item": {
          "id": "5f04d801-4540-4f32-8084-b15672ab88ea",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "40ae267c-3226-4385-a785-5bfb15a01e81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e537ab-b081-4973-82ea-5af47799d9ad",
        "cursor": {
          "ref": "4e24da6d-337f-4f58-9b00-6e86886650e3",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "eede7ab6-a8ef-4995-b732-189538345963"
        },
        "item": {
          "id": "91e537ab-b081-4973-82ea-5af47799d9ad",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "30b7d4ca-3278-4578-ba7e-04336f494258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84cc8d62-67a1-4e59-80a7-03b073f91d91",
        "cursor": {
          "ref": "153f5ffb-1528-439c-b151-93f230c0b950",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "1593f889-3614-426a-96cb-96447b7265b6"
        },
        "item": {
          "id": "84cc8d62-67a1-4e59-80a7-03b073f91d91",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "9d5bdb5e-6e8c-4594-b523-fa5eb185ad5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3b771e5-f66f-4f45-af9c-d82859904864",
        "cursor": {
          "ref": "07eca280-665b-4723-9431-f3911af4c243",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "bef3250f-08b1-4367-8f0b-393d57c695a9"
        },
        "item": {
          "id": "d3b771e5-f66f-4f45-af9c-d82859904864",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "dac3edcc-f341-4181-8baa-1ded8884a74c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f89f33c-b83f-45b2-8a65-f3dc2e4cc42e",
        "cursor": {
          "ref": "8ee3bcfa-55b0-4c04-a3d8-f3a55ea1181d",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d2fb1a32-dcfa-4d50-a2b2-bf8df4d9cdbb"
        },
        "item": {
          "id": "7f89f33c-b83f-45b2-8a65-f3dc2e4cc42e",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "90dfe209-b6c5-46ed-a623-2400e091cc71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1086cfa-dfcf-436a-b6e9-962d0d0d8834",
        "cursor": {
          "ref": "a21713be-1054-4de7-830b-38fcacbbb0d9",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "05b3b7ad-22ca-48c8-8466-20b9109cfca3"
        },
        "item": {
          "id": "d1086cfa-dfcf-436a-b6e9-962d0d0d8834",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b2bc253a-a3db-45d9-8044-fa08e89aab56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8c7c349-132c-4985-b2a0-95e969ae3154",
        "cursor": {
          "ref": "220014aa-17c4-4d05-9f57-8931d9b0fc6f",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3cfa6327-48bd-4a60-8d5d-b7992b87e3c6"
        },
        "item": {
          "id": "d8c7c349-132c-4985-b2a0-95e969ae3154",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "4f4395c5-4982-4c1f-b35c-ae12bbb799c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89b03d48-018b-40bf-b89e-a5ab09fb6dd7",
        "cursor": {
          "ref": "f10d83aa-8327-486b-beef-e67da3e26a52",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "28a20d8d-7fb0-47a5-93fb-070282271f2b"
        },
        "item": {
          "id": "89b03d48-018b-40bf-b89e-a5ab09fb6dd7",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "01468e8b-6ddc-4bd4-a7e2-27559353f4e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed635658-0927-43b4-8c7f-776a81a3cc7d",
        "cursor": {
          "ref": "40efbca8-8f6d-4fb9-baf1-b080f6756e52",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "115a5595-b9e7-4764-82c6-3cefd7a120fb"
        },
        "item": {
          "id": "ed635658-0927-43b4-8c7f-776a81a3cc7d",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d2b95c3e-db8f-4373-a118-bfb8f2dc67c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77b30b8a-9452-49a3-9a71-68f172a50ec6",
        "cursor": {
          "ref": "152c91a0-d8bf-4d18-8efb-90a63ac03717",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "6992b5f0-d272-4e4d-8d79-8b9773a1dcfa"
        },
        "item": {
          "id": "77b30b8a-9452-49a3-9a71-68f172a50ec6",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e660f965-46f5-408e-833b-2ba6edc1066d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e898b705-a43d-4cb7-af5a-f1645b23d9be",
        "cursor": {
          "ref": "acc4f246-35f9-4f3c-ac52-4f450ef3c6a8",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "cb824941-285e-4119-9be5-b49603c02919"
        },
        "item": {
          "id": "e898b705-a43d-4cb7-af5a-f1645b23d9be",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "df6a849b-8bae-4773-b820-d36c978ed9ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "009b65e2-bdba-4945-8842-53b7739bb6a5",
        "cursor": {
          "ref": "8c7bb3e7-98a2-49a9-9fa2-1af19185c76d",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "6123ecd2-b116-429f-a810-bde24a44d0fc"
        },
        "item": {
          "id": "009b65e2-bdba-4945-8842-53b7739bb6a5",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "2298f35e-201f-434e-b801-712a36d70212",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff3ae3d1-f7f5-41c4-a7dc-7e17bc66d2a2",
        "cursor": {
          "ref": "6563e582-ce2d-4c21-ae1b-2c07f1b30510",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f11821b6-a3b2-4fc1-a982-d44f5db445b1"
        },
        "item": {
          "id": "ff3ae3d1-f7f5-41c4-a7dc-7e17bc66d2a2",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "13a0928f-5c0d-4a93-b9f2-3aa02530800b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07d7f7fc-bda6-48c9-af46-99200603a32d",
        "cursor": {
          "ref": "90c90710-96f2-4b5c-8a28-5a56a4cf9dcd",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6c7bbe11-ed41-4d29-b57b-2f877dce7ed7"
        },
        "item": {
          "id": "07d7f7fc-bda6-48c9-af46-99200603a32d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d138b45b-2b1a-43c8-b580-02fd1d37caa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e088853-2d53-4dd6-b3d7-fd2dbdebb49e",
        "cursor": {
          "ref": "816e4728-0a00-419b-9852-8e12cecfe7f1",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "14855e85-c7a5-4fc6-a83e-ddbc02bba7ee"
        },
        "item": {
          "id": "4e088853-2d53-4dd6-b3d7-fd2dbdebb49e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "1694a9d7-7cea-4b0d-8291-6a5508d2b69b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e4e3d9-ea45-417b-83c3-2866e000aff8",
        "cursor": {
          "ref": "33a11fe5-affd-49a6-a356-d8c2e27a8081",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "7d9e48d5-66cb-4cef-89cd-7373175b7a15"
        },
        "item": {
          "id": "30e4e3d9-ea45-417b-83c3-2866e000aff8",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "05b0ef6c-7ecb-4a68-96b5-709fc4175940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8a60f84-55a0-46d4-8dc5-a09fc93ddb32",
        "cursor": {
          "ref": "d8695c31-b548-4172-96e1-95a6fc27544c",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "3e078da5-bc22-4c44-a8cb-6d91a4b70679"
        },
        "item": {
          "id": "c8a60f84-55a0-46d4-8dc5-a09fc93ddb32",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "635aadc0-8889-446c-94e8-fbec3123d722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c5d1858-7984-484f-ba4a-74c6f5de95a9",
        "cursor": {
          "ref": "4aa3660a-88e1-40a3-937c-f604c633c65b",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ace6540e-28f2-48f2-9a81-399f9400085f"
        },
        "item": {
          "id": "7c5d1858-7984-484f-ba4a-74c6f5de95a9",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "4e2c30c9-423c-4443-b87b-37f497c63b4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "264db724-fd3b-4e0b-8b88-42a56b312f99",
        "cursor": {
          "ref": "2ce53849-9a8e-4e60-aae6-f1d3badd7780",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "46e71d94-ce70-4744-8c02-55934e807547"
        },
        "item": {
          "id": "264db724-fd3b-4e0b-8b88-42a56b312f99",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "f02a97c4-528e-451f-baae-20dc1543f322",
          "status": "Created",
          "code": 201,
          "responseTime": 2570,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "21cef797-8da4-4ccb-8f77-3844bdaa2941",
        "cursor": {
          "ref": "6aa4ac18-ad6b-4736-92df-fec3139e4661",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e4d37138-1360-4b2c-b4c3-5e22ddc46cef"
        },
        "item": {
          "id": "21cef797-8da4-4ccb-8f77-3844bdaa2941",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "9b53add2-ddc9-4495-93c4-c5c32b52c656",
          "status": "Created",
          "code": 201,
          "responseTime": 2575,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "b3fa197a-8904-461e-869a-c66e1c313941",
        "cursor": {
          "ref": "83728b58-8737-499a-beee-551a3f93e9c7",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "06f8196f-58b1-4090-9714-61d632236884"
        },
        "item": {
          "id": "b3fa197a-8904-461e-869a-c66e1c313941",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "85b2d20c-de6b-4839-9a49-b04f850c104b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74236265-6e12-44a8-a71d-adbe082548a6",
        "cursor": {
          "ref": "393000ad-b88d-472b-9069-7fe00466d6b8",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "9d7cf49a-9f55-4d54-ac96-4a916c65fd5f"
        },
        "item": {
          "id": "74236265-6e12-44a8-a71d-adbe082548a6",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "5dda792e-8201-41b6-b611-3597c53a0887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b83838b-d7ec-46c1-810e-79c85b4bcb9e",
        "cursor": {
          "ref": "ccf13072-4b6d-40b5-80b1-8d4ac591e1b4",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "deac4f5c-b32d-458f-8596-af6d19e5c670"
        },
        "item": {
          "id": "8b83838b-d7ec-46c1-810e-79c85b4bcb9e",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "38e0d9d8-7686-4c32-a4fc-7b63db8e08b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23ab066f-5d01-4ad4-a2aa-251f13954f95",
        "cursor": {
          "ref": "b87bd711-81dd-42d3-8413-bd9edc227967",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "cd70aebe-64d3-44ab-bd2b-da003680f11a"
        },
        "item": {
          "id": "23ab066f-5d01-4ad4-a2aa-251f13954f95",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "73f24509-fbd7-4756-8882-692601bf83c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9891f6bb-cfa3-4c4b-808e-da86b83db526",
        "cursor": {
          "ref": "fd0842e0-bbe4-41a2-b91a-ccafb6a7ca5a",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7d9a46ff-b1b6-4b20-a0b7-86fbcc901b6c"
        },
        "item": {
          "id": "9891f6bb-cfa3-4c4b-808e-da86b83db526",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "21ad7174-1454-4f72-abeb-281394ded344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13c63e2f-7758-48d2-a840-7f3445097ff0",
        "cursor": {
          "ref": "69dfc571-d61c-4cdd-a84c-4d0ba8a6bf7e",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b6be0ed5-ab48-4a5e-8f08-a476586d12e9"
        },
        "item": {
          "id": "13c63e2f-7758-48d2-a840-7f3445097ff0",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ba7b7a55-fc4b-4bbb-9428-8d918c652f50",
          "status": "Created",
          "code": 201,
          "responseTime": 1870,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "a8186ca7-0a36-48aa-bc20-67929b1a7c40",
        "cursor": {
          "ref": "9e58dd3b-336b-4ba8-a38f-8c04b98cc0f3",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "260d216d-04b6-4a9f-83cd-f0f3f269e38c"
        },
        "item": {
          "id": "a8186ca7-0a36-48aa-bc20-67929b1a7c40",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "d2043aa2-f9e6-4118-8111-8cb4ef4b42c0",
          "status": "Created",
          "code": 201,
          "responseTime": 2326,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "a65bd183-91a3-4978-98de-6871c914a049",
        "cursor": {
          "ref": "cfd96017-54f0-4dec-96d0-f635b38bc5f5",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "b2620bf5-1e06-44bf-afe8-e08563badd77"
        },
        "item": {
          "id": "a65bd183-91a3-4978-98de-6871c914a049",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "4c1c7c9c-35a7-4ffd-8299-bcc695e1e399",
          "status": "Created",
          "code": 201,
          "responseTime": 2137,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "b8d00aee-1960-4047-a661-78e0057124fa",
        "cursor": {
          "ref": "33bd9eb6-b23e-4d85-9a63-dd14d77fe70b",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "6a2ca457-5f76-46de-98b4-fffcc599b97e"
        },
        "item": {
          "id": "b8d00aee-1960-4047-a661-78e0057124fa",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "e8c3cb05-6d3e-418e-b8dd-42c8f8307a34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11032c1a-a6fd-47cd-b9e2-a0e601f948ee",
        "cursor": {
          "ref": "84fcec64-e734-452e-a5b3-ae067e6cf2a2",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a0ae59cf-04fb-43dc-b9df-39b4dda437f5"
        },
        "item": {
          "id": "11032c1a-a6fd-47cd-b9e2-a0e601f948ee",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "47d76bee-9d90-48d6-9700-a11a487d77b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db41705f-7e73-46ae-9355-c05fa0427c69",
        "cursor": {
          "ref": "8507b187-1cf3-4078-be1c-05ba5fb1b8d6",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "67554eea-664e-4f28-be8a-05ababeb1f6f"
        },
        "item": {
          "id": "db41705f-7e73-46ae-9355-c05fa0427c69",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "f18ceef0-bb4f-47ba-ae30-b7eeda104d66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b86bf56-3487-4d60-b0e2-4d21e7d67e69",
        "cursor": {
          "ref": "ecb4bbf8-c891-4904-87d9-929a8e00fefd",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1d255fee-eaf8-4402-8308-ac85e8512942"
        },
        "item": {
          "id": "8b86bf56-3487-4d60-b0e2-4d21e7d67e69",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "35771ec4-0b07-427d-8f9d-a865bae44b87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2c78de1-4f6a-4e94-8b8e-532e3ac3698f",
        "cursor": {
          "ref": "9313e268-4f8a-4072-8a2e-235ec8777fe0",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c3b4c2b7-bc21-40f9-a0e8-9f6d7c7de24d"
        },
        "item": {
          "id": "a2c78de1-4f6a-4e94-8b8e-532e3ac3698f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "421147f0-8675-4871-84c1-24ba4eead383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebdc3889-a3de-48e7-a6b5-23203788aa1b",
        "cursor": {
          "ref": "2dcc1937-aba0-480a-9542-6428c1aacf25",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "b47e7874-2d92-4860-890c-a2b078ff40d6"
        },
        "item": {
          "id": "ebdc3889-a3de-48e7-a6b5-23203788aa1b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e1809c82-bf41-46e7-8fb4-e396ba3ee9e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8628384-df7d-40a6-9c62-97a5571595f7",
        "cursor": {
          "ref": "2b5e22c9-1855-467f-8f2e-710a40d6073f",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "e57c9564-fe62-43a0-a9b7-35c0680317c2"
        },
        "item": {
          "id": "c8628384-df7d-40a6-9c62-97a5571595f7",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ae9f6405-b273-4705-82ab-ca6755e3463b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7ca8905-11ca-474b-9c36-2addd39b89f2",
        "cursor": {
          "ref": "7cc05449-3b67-45ff-92e0-88ccefb996bb",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "5950a544-9877-4c60-941e-c6dd72ddc2b4"
        },
        "item": {
          "id": "b7ca8905-11ca-474b-9c36-2addd39b89f2",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "b7363bea-7d3d-44b6-bf13-aa4d903a20fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cfea648-3b1a-41c0-9343-aab968c771bb",
        "cursor": {
          "ref": "b4385946-3e6f-434e-a906-c8275f177e2b",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c0bf0e8b-a72c-4109-b279-3db5b296c80f"
        },
        "item": {
          "id": "9cfea648-3b1a-41c0-9343-aab968c771bb",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "415ee208-fbf9-4720-a7d1-57316c8199b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d74aa98-1803-4bac-bc3c-415c05e8e907",
        "cursor": {
          "ref": "e83197d5-9754-4820-b169-ba6d20ec0c2b",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "338e41d2-c47f-499d-a89f-7dd742905965"
        },
        "item": {
          "id": "5d74aa98-1803-4bac-bc3c-415c05e8e907",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "511eaac4-30a4-4a92-a2ff-5e1914d75383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b3123ea-f93a-436d-b462-a9c5aa12294d",
        "cursor": {
          "ref": "e8ff490c-ee76-46ea-a71e-612a638e2c94",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "25997623-f6f8-465c-a986-a44ce5733510"
        },
        "item": {
          "id": "6b3123ea-f93a-436d-b462-a9c5aa12294d",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "f6b9a025-c446-42d1-aea0-408b1bdd8806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac90868-075f-4439-a90e-1af3dda7c40c",
        "cursor": {
          "ref": "b2576df6-8dce-4f84-88be-aff927f20d2f",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "251655ef-3d13-4f23-a583-3a3ddb931340"
        },
        "item": {
          "id": "cac90868-075f-4439-a90e-1af3dda7c40c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "730310c3-a1fb-4e38-a447-5d947c75d994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1a849ab-b8f0-4f39-a806-da2e0b923ad1",
        "cursor": {
          "ref": "074a2a45-e09c-4926-9d15-ffb034a0a568",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "9b8eb54f-66b7-4e35-a3bf-350e7fa34559"
        },
        "item": {
          "id": "f1a849ab-b8f0-4f39-a806-da2e0b923ad1",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "8cf4087d-300e-417c-873b-88c9fc15c249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "153503d8-ee10-4108-9c3b-29ad9118c0ed",
        "cursor": {
          "ref": "63c3c7ab-ac85-47fb-ac64-59a50858024c",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "8ce79345-7f0e-412f-85fb-93e5c5e39596"
        },
        "item": {
          "id": "153503d8-ee10-4108-9c3b-29ad9118c0ed",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "020fafb2-b4ee-4276-964d-8497bd81fd6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61c9ea03-1b48-42c0-a5c4-69450761f61f",
        "cursor": {
          "ref": "46bd6c3f-f73a-4386-a2dc-7a381588ced3",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "93fa3994-c521-4259-8a75-c1b1eef50989"
        },
        "item": {
          "id": "61c9ea03-1b48-42c0-a5c4-69450761f61f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "3eb8f738-9549-4334-a732-0cd66ed7e71d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fe0af03-bcf3-4ce5-869e-5395788d9903",
        "cursor": {
          "ref": "fc6a803d-7ebd-46b5-80e0-37c2fbaedcf5",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "c98b20f4-16ad-470c-9451-92b2f4c8fa55"
        },
        "item": {
          "id": "3fe0af03-bcf3-4ce5-869e-5395788d9903",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d6782d23-d145-4ad3-bdcf-fb13c7890037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76f75cde-8cb6-4d34-aaf5-aefdfb309e7e",
        "cursor": {
          "ref": "67d336cf-7abb-482d-8cce-3aa2c6e03b61",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "51dcddfa-4914-46f3-9ed5-f1218b20ad41"
        },
        "item": {
          "id": "76f75cde-8cb6-4d34-aaf5-aefdfb309e7e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "4ec12450-e5a9-4716-a813-060a2ac29522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f739248-3031-4051-b0ad-6b5996c5d7ed",
        "cursor": {
          "ref": "d3b330d1-cca3-4d34-bfbf-eaf11d5f27ba",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f3a3338f-f8ed-4d9b-9690-fec5f4d32f1f"
        },
        "item": {
          "id": "3f739248-3031-4051-b0ad-6b5996c5d7ed",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "809e57a9-8c28-4abc-a5e1-f6b07517c1a0",
          "status": "Created",
          "code": 201,
          "responseTime": 1975,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "75e4c983-afb9-428d-89a8-5168bf61e977",
        "cursor": {
          "ref": "a0b83528-1b04-4621-bbd1-1bdf516a36e1",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9050cabe-7965-49f0-8e5f-b2b1072b0937"
        },
        "item": {
          "id": "75e4c983-afb9-428d-89a8-5168bf61e977",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "13a99890-46fa-4915-92c1-912d49fd0f8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 140,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "703662f3-a1ab-4d05-a543-f1aff45d5ed1",
        "cursor": {
          "ref": "e17b0002-ac73-496e-8603-49dda9a2bcc5",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "4b6855f5-8f00-45da-89b9-af6c624976cf"
        },
        "item": {
          "id": "703662f3-a1ab-4d05-a543-f1aff45d5ed1",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "44eadb2c-b177-4672-a21e-19328de37e2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5913bfc1-661c-412e-8d29-5d9c89c8c98b",
        "cursor": {
          "ref": "64f8e954-a8a4-4154-b4e3-461a4a33f474",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "3b4e7c4b-1c4f-43c8-97f7-6ef79dc47304"
        },
        "item": {
          "id": "5913bfc1-661c-412e-8d29-5d9c89c8c98b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "4b52bf33-bb87-4fcc-bfed-49cd814b1c9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b0ce136-9367-4bc0-92bb-0b99f39a50f1",
        "cursor": {
          "ref": "c29b4ecf-0605-4301-ac05-ac4a29d049f1",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b8ee8595-8a59-4037-a7a5-b310e822cb79"
        },
        "item": {
          "id": "6b0ce136-9367-4bc0-92bb-0b99f39a50f1",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "b859e311-ff47-4771-b6e5-34fa7565bc4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "905a5f97-51f8-452c-abe6-582bdf372324",
        "cursor": {
          "ref": "cadf04aa-1d34-473e-9d27-d5303057b931",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "15a716f1-89c1-4b70-9d6d-c098e02e1557"
        },
        "item": {
          "id": "905a5f97-51f8-452c-abe6-582bdf372324",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "88a124a8-6759-40c7-a8fa-effdd9e3cee2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "486fb2cf-4575-4c82-8a93-9e6db3f1309c",
        "cursor": {
          "ref": "596e5e00-90ad-46be-863e-c0275401c387",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "28840c31-76b9-48f8-b4ca-07db54a747d6"
        },
        "item": {
          "id": "486fb2cf-4575-4c82-8a93-9e6db3f1309c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d3329025-e8e6-413b-895f-99d890f6e17f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c6d23b0-b96b-4c7b-b1e0-73942c5a20ce",
        "cursor": {
          "ref": "c508ce1f-ffc9-43c3-a915-a99605d1ffd1",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "fe8e1045-8c65-4cf4-afc8-dce48bd39c12"
        },
        "item": {
          "id": "5c6d23b0-b96b-4c7b-b1e0-73942c5a20ce",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "fc04bc65-3456-4828-916a-de4a0a9f46b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1db9a80d-7c7f-474d-84ef-19db2e3af549",
        "cursor": {
          "ref": "bccd6c1e-1a9c-48e4-b8d9-8f461373161c",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "9b19a2d0-e070-4553-9910-39da0dec954f"
        },
        "item": {
          "id": "1db9a80d-7c7f-474d-84ef-19db2e3af549",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "11af0b48-1204-4b09-be66-cb2aa10e6cdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c0d5992-64c1-445f-b300-9a1a396971db",
        "cursor": {
          "ref": "f20781f4-a156-4be9-814e-8d78acc7e018",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "9278bea3-3fac-4c3a-9e48-f2a04ad97136"
        },
        "item": {
          "id": "3c0d5992-64c1-445f-b300-9a1a396971db",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "a7efdc0c-d310-47ed-a80b-d5de224c2478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aee805a-41eb-429a-89d7-911f45944cd8",
        "cursor": {
          "ref": "1b48283f-c488-4cb3-8e09-1abf77e25673",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "24b609e1-8be1-45f4-85f3-54874f054eb4"
        },
        "item": {
          "id": "3aee805a-41eb-429a-89d7-911f45944cd8",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "e88317b8-5ce7-47b8-b3a0-45c4716c63b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab038f7e-c4b4-43a6-adae-14aaac402ca7",
        "cursor": {
          "ref": "7815eb30-eddc-4b6b-b0c2-06dfa75c4bcd",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "a908a6fb-e509-4854-84cd-6c8b5fda89f4"
        },
        "item": {
          "id": "ab038f7e-c4b4-43a6-adae-14aaac402ca7",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "7dcd0912-2f14-4fac-8661-72bfc1039131",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "422ab181-0113-47b5-83ab-d2b9c4277e4b",
        "cursor": {
          "ref": "bf2f782a-f885-47e8-8a37-0802f0c0ad2e",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "35ba77f9-12bf-454a-9f25-acc346faccf1"
        },
        "item": {
          "id": "422ab181-0113-47b5-83ab-d2b9c4277e4b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c4ab0132-cfda-402b-84ba-c9a9b61febe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87a1f235-52f8-4505-b797-a640356dee51",
        "cursor": {
          "ref": "1cd4be9a-8cfa-41b2-b4ed-dbf12bdc5cf9",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "9c910d06-eb39-4f33-b18b-53ec3f48c934"
        },
        "item": {
          "id": "87a1f235-52f8-4505-b797-a640356dee51",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "cbce007d-e6d5-4a94-8ba3-ca8e4cac57b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c2427ec-ea39-4bc3-94f6-d0a283af6d47",
        "cursor": {
          "ref": "9a1b4417-1481-484a-939a-dc51577d21f7",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9ce775b5-b118-4bca-9caa-0a05e614152a"
        },
        "item": {
          "id": "3c2427ec-ea39-4bc3-94f6-d0a283af6d47",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "91ce9bd5-900c-4641-8630-45596fe2be8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19b98ebb-100c-4b81-98d9-2302a000e524",
        "cursor": {
          "ref": "b19711d2-f99b-4cda-bae8-239ca35f6797",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "06e7317c-083a-453a-957d-79c745062f9d"
        },
        "item": {
          "id": "19b98ebb-100c-4b81-98d9-2302a000e524",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "57dd74a5-9320-48ca-8901-e226157a1072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddb36865-fa2b-48be-9260-c5ae3f5541a2",
        "cursor": {
          "ref": "97589451-b1dc-4270-aa5d-383739a6b847",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "00fcc678-a3f6-4162-9d15-ec9b6a49333c"
        },
        "item": {
          "id": "ddb36865-fa2b-48be-9260-c5ae3f5541a2",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "83be8b49-e3a5-4ed7-ae21-e0b6ed057df9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c22de7c-3694-436f-9a30-46e93eacabe6",
        "cursor": {
          "ref": "7fa48b66-000b-4832-a090-8619605d70b6",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "4c610c4e-22fe-475b-a9c0-f264c3bb29a8"
        },
        "item": {
          "id": "5c22de7c-3694-436f-9a30-46e93eacabe6",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d083d1c1-ac5e-4d33-aff3-b9e7c3280d35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "825341ab-32c3-4201-93ee-a2d0faa32041",
        "cursor": {
          "ref": "497a10f1-7946-4b06-a60c-6f7f8cb8e6c4",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "5adc2d56-dbff-44ad-a58f-79e2a18bccb5"
        },
        "item": {
          "id": "825341ab-32c3-4201-93ee-a2d0faa32041",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c3f5400b-da08-47a2-aeb9-2220db18613b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fbcf822-fc62-42db-abc8-69f31e9ee1a4",
        "cursor": {
          "ref": "7d32d179-e441-41f0-b53a-76c3e6945c08",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "64339572-45d2-4bd1-83ea-0c5d4f605357"
        },
        "item": {
          "id": "3fbcf822-fc62-42db-abc8-69f31e9ee1a4",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "94aa435d-0bef-486a-b01f-6005b414dae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a54ab2b-a37d-4105-ae85-c6d2b5cfc2d4",
        "cursor": {
          "ref": "896e4081-d61e-4bd5-85ad-9fe4d5375ce0",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "b16edcd4-d772-4242-8eb3-42338f08367c"
        },
        "item": {
          "id": "0a54ab2b-a37d-4105-ae85-c6d2b5cfc2d4",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "dbdd8453-17c9-4f54-acfa-c0466b61d4f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bd1bf7e-e177-4143-b88f-1dc810dead53",
        "cursor": {
          "ref": "cbf28f79-b984-4e53-bd89-6f8753373248",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "7ba5b38d-234e-45ec-be32-33f09a6798e1"
        },
        "item": {
          "id": "7bd1bf7e-e177-4143-b88f-1dc810dead53",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "70289331-1317-4634-b751-823b406050a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49e75ed1-075b-49fd-a759-aa35d9a6a85f",
        "cursor": {
          "ref": "f8494046-0027-4bc6-9ff9-d0f29ffafd51",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f64313b8-5034-4e83-9dc1-8fb9fc5031e1"
        },
        "item": {
          "id": "49e75ed1-075b-49fd-a759-aa35d9a6a85f",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "0c78793f-e87b-49be-8bad-c3eaadf4ec95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d39b5d6-d510-4d35-9f95-dddd366498fb",
        "cursor": {
          "ref": "0185947a-6d6e-4a08-a667-ad3512246a04",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4745dc62-7798-4149-9e96-b978fdceb828"
        },
        "item": {
          "id": "7d39b5d6-d510-4d35-9f95-dddd366498fb",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "65032531-278d-4280-8928-3cc7ad0f5739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a83f6e0-8e01-4043-a0f0-d375d103297a",
        "cursor": {
          "ref": "5bc51dae-aa39-45ad-b34a-19072bbeb1bb",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "00c6f8e5-c92c-4b73-b515-5ce0b43e4871"
        },
        "item": {
          "id": "2a83f6e0-8e01-4043-a0f0-d375d103297a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "26f2ea6c-0450-4e7c-92d5-a1bf1e73881f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20020498-390c-454b-addb-3a049f46fbbb",
        "cursor": {
          "ref": "3a04d2b5-8354-4f77-9c62-7a8af9a18d81",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "7b0bd570-fbac-4d61-ab3f-f446cbfcf17b"
        },
        "item": {
          "id": "20020498-390c-454b-addb-3a049f46fbbb",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "0adb10a9-a510-4472-846d-f9df2f8d7c45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5419a33b-05b6-4513-a4ec-75e8e7146b34",
        "cursor": {
          "ref": "641fec51-499b-44d0-89f8-f453d346c1da",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "6dd38ec7-ceff-475c-b79a-c12edac281a6"
        },
        "item": {
          "id": "5419a33b-05b6-4513-a4ec-75e8e7146b34",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "ee72d105-a2e0-43a9-bf6e-cfddd51fe722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08b8e89a-3fe1-46dc-8a98-e132d2a0f294",
        "cursor": {
          "ref": "bacd0ca3-fe3f-4d5b-9f8b-499af340f989",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a12bf2e1-f6a2-45c6-a008-4973e5875da5"
        },
        "item": {
          "id": "08b8e89a-3fe1-46dc-8a98-e132d2a0f294",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "e3f2a675-8d13-4396-9077-fca469867e38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c95323d1-af23-4de6-a454-ac84afec9dfd",
        "cursor": {
          "ref": "12888e24-861d-4716-842f-c8ed13972d1d",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "dfbdb100-f388-41de-af09-9629c596b15b"
        },
        "item": {
          "id": "c95323d1-af23-4de6-a454-ac84afec9dfd",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "57cf9bc6-104c-41dc-a371-060282cd7843",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef3654e3-abeb-4ed5-83d5-c322b687f128",
        "cursor": {
          "ref": "2594ea93-ed3a-4cde-b457-4d0a5b6a17fa",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "0abb7ac4-264a-4117-8f8d-c6dea4506577"
        },
        "item": {
          "id": "ef3654e3-abeb-4ed5-83d5-c322b687f128",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "6aaaaa81-a952-4168-9faf-50bf05a8784d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc538a8e-212d-4b2d-a831-7ffaa0f6d20c",
        "cursor": {
          "ref": "3a0a3736-f35d-4160-955c-ed6aaaead071",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "307fd394-7aac-4184-bcc3-092dbec6c678"
        },
        "item": {
          "id": "dc538a8e-212d-4b2d-a831-7ffaa0f6d20c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "a667714a-076e-4815-b584-e08e357c146a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b52440-4cbf-4bd9-8fd1-6015998eb4ff",
        "cursor": {
          "ref": "b50302ba-a0db-4238-9c29-9a380a0574ba",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "16a4493b-cf46-4472-b808-23f207763900"
        },
        "item": {
          "id": "55b52440-4cbf-4bd9-8fd1-6015998eb4ff",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d7a7229e-198b-4b52-ad95-49ab70e90523",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "6316db60-9f4a-468a-ba2f-f1958a2f9c3e",
        "cursor": {
          "ref": "6538356a-b1f6-4868-810b-5b5e1fc375dc",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "459bb7ff-310c-4827-8112-d3dcee0606f9"
        },
        "item": {
          "id": "6316db60-9f4a-468a-ba2f-f1958a2f9c3e",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "983eb795-3033-4be0-9acc-eff89d985373",
          "status": "Created",
          "code": 201,
          "responseTime": 1805,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "b8b0cf40-9d4c-4f41-80e7-bddafac5df06",
        "cursor": {
          "ref": "1565bb52-5425-42d6-b9de-f5c85f9c0859",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "e431e054-bcc8-4428-8477-ccc1ed8a795c"
        },
        "item": {
          "id": "b8b0cf40-9d4c-4f41-80e7-bddafac5df06",
          "name": "credentials_issue"
        },
        "response": {
          "id": "1b60860e-3554-4a94-9f2d-2d3748857580",
          "status": "Created",
          "code": 201,
          "responseTime": 2316,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d61ed753-0725-4871-94ac-73cb34ee1619",
        "cursor": {
          "ref": "647aa5a2-0fa6-41f3-953f-00bcc5973875",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "a151bcb8-01cd-4db8-86e9-6b2b79243c61"
        },
        "item": {
          "id": "d61ed753-0725-4871-94ac-73cb34ee1619",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "6a12511d-9855-4e7a-8c74-9d462f837ef2",
          "status": "Created",
          "code": 201,
          "responseTime": 2200,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c51e761e-21f4-4a07-b4e7-328ebe0eda1d",
        "cursor": {
          "ref": "4ddb8d63-6425-4512-8349-f9b5e6b91765",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "dd91f8a5-0296-4e6f-90e8-8ca5d516bbcf"
        },
        "item": {
          "id": "c51e761e-21f4-4a07-b4e7-328ebe0eda1d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "ebdf75d1-6f38-42bb-b887-cda1dae75370",
          "status": "Created",
          "code": 201,
          "responseTime": 2382,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa14c021-390b-4043-ab0e-21cc45addd0f",
        "cursor": {
          "ref": "ef29b16b-bc08-4b9a-b91f-d63747b59a7e",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "9fe2f0bf-70f7-4a11-ad2b-1b4ed98e1495"
        },
        "item": {
          "id": "fa14c021-390b-4043-ab0e-21cc45addd0f",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7a2716a9-c952-43cc-be06-577c4f55ccd9",
          "status": "Created",
          "code": 201,
          "responseTime": 2551,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "277a9e86-6122-4684-866f-d3f3884ca091",
        "cursor": {
          "ref": "6fdba1a8-b171-4f47-bba8-d01e24e62028",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "8a53a70c-f519-4115-abf4-cb2a6a6216c1"
        },
        "item": {
          "id": "277a9e86-6122-4684-866f-d3f3884ca091",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "542ee90a-b925-4d79-aa64-10be435154dd",
          "status": "Created",
          "code": 201,
          "responseTime": 2229,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-04-09T00:39:06Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-04-09T00:39:06Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "e44ae8e1-df07-4804-83d1-09553fc33f13",
        "cursor": {
          "ref": "9174c956-edb7-403c-8beb-77b7bf65c43f",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "79d7f15c-491d-4f87-8128-6acdf2cd99ec"
        },
        "item": {
          "id": "e44ae8e1-df07-4804-83d1-09553fc33f13",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a5621436-4adb-4da2-b446-ca8923d79045",
          "status": "Created",
          "code": 201,
          "responseTime": 3059,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46c86acc-b792-4f02-adb2-a0e316511490",
        "cursor": {
          "ref": "bdfa6d75-fed4-4896-9c11-1a763df6ac5c",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "170ba2ce-bde6-44f9-8d83-a25ba26099d8"
        },
        "item": {
          "id": "46c86acc-b792-4f02-adb2-a0e316511490",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "eb790a1b-0489-48c7-97df-ee630eeb26c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46c86acc-b792-4f02-adb2-a0e316511490",
        "cursor": {
          "ref": "bdfa6d75-fed4-4896-9c11-1a763df6ac5c",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "170ba2ce-bde6-44f9-8d83-a25ba26099d8"
        },
        "item": {
          "id": "46c86acc-b792-4f02-adb2-a0e316511490",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "eb790a1b-0489-48c7-97df-ee630eeb26c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56e98327-7925-408d-aa80-2b7717c74f7e",
        "cursor": {
          "ref": "41e179d3-334e-425e-bd7c-ba2bcf1e35b7",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "fb5f6e1b-5c8b-48f3-ac12-4dd0bdb6177b"
        },
        "item": {
          "id": "56e98327-7925-408d-aa80-2b7717c74f7e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b08f1bab-065a-48b4-8ab8-e1b16ad503d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "807777d6-7976-44e4-b7b3-f67d3d697ffd",
        "cursor": {
          "ref": "2a06c50f-9bf1-46f4-aaaf-af702a7edaec",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d8944173-b3f2-4f48-811b-a896f14101bb"
        },
        "item": {
          "id": "807777d6-7976-44e4-b7b3-f67d3d697ffd",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6075ad17-3088-48dc-9699-dc798340ee1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "943eba39-2851-4796-b1fc-6d6f7e73e12a",
        "cursor": {
          "ref": "43efbdff-96cf-49e4-8554-b7abbff0e0b5",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "37feddd2-aa81-496a-b4b9-5e7edc4c1eba"
        },
        "item": {
          "id": "943eba39-2851-4796-b1fc-6d6f7e73e12a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "83e36137-0b36-4cad-9483-325ad6dc5200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "696621f7-0c11-4625-b8f0-d91f0e0dd0c2",
        "cursor": {
          "ref": "5be259fe-47be-4c1c-ba13-cbf957e604b5",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "8cc83417-d946-4443-8f4d-03a62f61e06e"
        },
        "item": {
          "id": "696621f7-0c11-4625-b8f0-d91f0e0dd0c2",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f59cdc22-3284-4112-a04d-162f9638e654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a43cf4e2-cd78-4d23-83e0-39e69d8df8cc",
        "cursor": {
          "ref": "48fe3697-a8db-46bd-931c-b3ed2fb163eb",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "2bb8faea-6117-4de0-afdd-f59cf2604929"
        },
        "item": {
          "id": "a43cf4e2-cd78-4d23-83e0-39e69d8df8cc",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "5bba9a76-06d9-4e4e-8abf-b7007ab3b461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6b9c2ac-c9ec-4ee1-ba18-b4a582c408dc",
        "cursor": {
          "ref": "cf41ee53-e852-4cbb-a43a-2d2519605f14",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3d8660ec-ea24-4219-a113-493e8c5fefc5"
        },
        "item": {
          "id": "b6b9c2ac-c9ec-4ee1-ba18-b4a582c408dc",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "13486727-713e-4b94-84cf-3ab5f3d26eda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cd5b3bc-ce52-428d-8f81-d611145a2d9e",
        "cursor": {
          "ref": "e058356b-3aaf-41ee-a32c-fc0d503f366a",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b76bc183-d22a-4674-83a8-60bdbd62459a"
        },
        "item": {
          "id": "0cd5b3bc-ce52-428d-8f81-d611145a2d9e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "95e78669-e6eb-420e-a69c-6ab118fff22f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2756411a-afef-40b5-a84e-d69277266ec2",
        "cursor": {
          "ref": "3ddfaed6-d359-4719-8310-a233d5610704",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "b99fffdf-8969-456c-84e0-9f103f578868"
        },
        "item": {
          "id": "2756411a-afef-40b5-a84e-d69277266ec2",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c117361e-65a3-4df5-9fe7-645bf139d38d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66689fd1-b3b3-48a4-a51b-41ad7efa792c",
        "cursor": {
          "ref": "b3264bbf-6122-47f5-aabd-f58cce860f03",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "5a8278e6-ae3a-4615-a62c-327d630c8d57"
        },
        "item": {
          "id": "66689fd1-b3b3-48a4-a51b-41ad7efa792c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "08064e59-9a84-47df-b679-32532dde254e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e383b2-a6ba-4bd1-8368-66ccd678a733",
        "cursor": {
          "ref": "675b00af-2905-494b-8147-ec282bd049a3",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "c764f8cd-4abb-49f1-9826-e085391f9f39"
        },
        "item": {
          "id": "94e383b2-a6ba-4bd1-8368-66ccd678a733",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f8cb018a-382a-4484-8f1d-23490a243909",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a62e20b-92f6-4aea-83ff-6d5f74ed33d2",
        "cursor": {
          "ref": "e90fe0e4-3824-41f9-88f6-d93e3e10df6e",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f76800e1-9d98-4143-8180-7541c78c964d"
        },
        "item": {
          "id": "5a62e20b-92f6-4aea-83ff-6d5f74ed33d2",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "81945e4c-ffc8-4652-95e4-b42855a96e85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "183ae93d-e7e9-47a3-abdd-c1c002881a82",
        "cursor": {
          "ref": "ca753201-06b3-498c-ad15-e79e3fda8cb3",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e247bd4d-7e90-4204-8c3b-21ba389dcda2"
        },
        "item": {
          "id": "183ae93d-e7e9-47a3-abdd-c1c002881a82",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a42eb210-af41-4006-91b3-8b26defab9d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c7985ba-102e-449d-ac7f-d9e73cbc5331",
        "cursor": {
          "ref": "ee4b4614-3bc4-4771-a7f4-63dc3e5c505e",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "1494f21d-6a91-429f-8091-1e83e8d3e0d0"
        },
        "item": {
          "id": "1c7985ba-102e-449d-ac7f-d9e73cbc5331",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "3f508195-7f29-4767-99bb-ae215c4e56d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f150452b-1dad-46ee-b9ec-a4473633bede",
        "cursor": {
          "ref": "95fb7f78-8dc8-4bb3-a05b-1f184a0c9198",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "6c813d08-caba-48be-a3a3-86beb62b9464"
        },
        "item": {
          "id": "f150452b-1dad-46ee-b9ec-a4473633bede",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "5f4c6173-c0f9-4314-9b03-1b12cac9394c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ff87037-8bc9-49fa-9f0a-a8f8b3263a71",
        "cursor": {
          "ref": "718306e4-22a7-485d-9126-e3318286b43f",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "8c36749b-a927-4296-afa1-b97170e6d98b"
        },
        "item": {
          "id": "9ff87037-8bc9-49fa-9f0a-a8f8b3263a71",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0816fd5e-e1f4-4886-b1ff-73be68c02d4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26830632-cc48-4823-b6f0-5eb634285e87",
        "cursor": {
          "ref": "57eade00-6449-4b9b-936d-ae3a5d7efdf7",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "2c431134-81fd-4d0f-9b9c-085c55ebfe72"
        },
        "item": {
          "id": "26830632-cc48-4823-b6f0-5eb634285e87",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ef66db4a-a008-4566-b88d-9dd9b8e30dab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecbbf46e-94e1-437a-b7d5-1b5b4a88bc4e",
        "cursor": {
          "ref": "d3805e85-9c56-4b3c-b5c8-2020319cd350",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "5f43f5cd-f427-43d5-bf40-62a48e0468f7"
        },
        "item": {
          "id": "ecbbf46e-94e1-437a-b7d5-1b5b4a88bc4e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f79717ac-18ed-4d45-a69d-6326ced262c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d3125f3-c5ca-4c54-9405-c681cc8f9e28",
        "cursor": {
          "ref": "3d2b12cc-6188-4948-8c9f-220bbff5af88",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f7bf5e5c-8036-4688-bf17-90bebd0e61e8"
        },
        "item": {
          "id": "2d3125f3-c5ca-4c54-9405-c681cc8f9e28",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "758c3542-278c-4b4d-9978-c4b49edcb4c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e577772-330f-4773-9356-02c030937450",
        "cursor": {
          "ref": "3d11e0b4-9928-4b0b-8b72-b052023df484",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "5b87a7ef-b669-48f9-9000-479c97027185"
        },
        "item": {
          "id": "8e577772-330f-4773-9356-02c030937450",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "46eccc78-d616-431b-9ad6-2efed99f72bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8a4a80b-a030-4268-9d15-dffcdafa7498",
        "cursor": {
          "ref": "8105db66-61d1-4375-9547-283eee206154",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "7f29a95c-25bf-4b94-8aea-fab7e12a9531"
        },
        "item": {
          "id": "d8a4a80b-a030-4268-9d15-dffcdafa7498",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b1f2ed77-7316-4448-a93b-fabdd5d92896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bed67a6-f887-4a31-b14d-77d5c60750a9",
        "cursor": {
          "ref": "8fbb308d-8828-4346-b7b6-7f1cbbd1c5ac",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "d7dafe94-d6d3-4c8c-b7ce-1951af110c0f"
        },
        "item": {
          "id": "5bed67a6-f887-4a31-b14d-77d5c60750a9",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c50a32fc-ed34-46ae-ac74-ff1410e6a036",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ab4f19b-be9c-475d-b5c4-34161503e662",
        "cursor": {
          "ref": "e86797a3-6a90-43c1-9c20-6477ec5c41c3",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "7b3e523f-9f43-41b4-938c-69f298ddc9fb"
        },
        "item": {
          "id": "2ab4f19b-be9c-475d-b5c4-34161503e662",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "03d43a0b-a761-4d4a-b064-4918bab1fb81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6e70815-f9b0-4d63-9044-e21d0add78bf",
        "cursor": {
          "ref": "808c8c62-1976-43e0-8083-2894163bc7a0",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "7152313a-5189-4975-9182-a2506eeecd3e"
        },
        "item": {
          "id": "c6e70815-f9b0-4d63-9044-e21d0add78bf",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "7445b3d4-da94-4e7e-a44e-91e0cb86dd27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a628649-aabd-4183-ae23-be79e4bdad85",
        "cursor": {
          "ref": "5a489b34-1b32-44e0-bea0-1e0ff3d8a849",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0e0a511a-191a-40f8-a0c4-78effca5c987"
        },
        "item": {
          "id": "9a628649-aabd-4183-ae23-be79e4bdad85",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "302fa8ff-63a9-4bec-b499-b1c266c63c5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13b91d14-01a7-4286-b34d-d88ca005a214",
        "cursor": {
          "ref": "516c604d-aead-4185-a488-7c181b114df9",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "78c65c16-1f40-49fc-ae81-e4c39a0341ee"
        },
        "item": {
          "id": "13b91d14-01a7-4286-b34d-d88ca005a214",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "abe4a9ec-811d-4cec-be1f-81e6a8977ce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d67221de-e3da-4e2a-9769-e8b764779383",
        "cursor": {
          "ref": "d09b7752-c207-4a8b-a21b-838131b75d46",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "10b61754-2b30-429e-9e30-0757a4eb6da7"
        },
        "item": {
          "id": "d67221de-e3da-4e2a-9769-e8b764779383",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "277eccf8-a21c-4feb-a2f0-766479e3ba7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af873163-3adc-4733-ac51-41f3a2690eaf",
        "cursor": {
          "ref": "d4388b68-bfbc-45fb-8629-d8e2606ff301",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a87a3851-3d0b-4cde-bd4a-068f7efdeeb2"
        },
        "item": {
          "id": "af873163-3adc-4733-ac51-41f3a2690eaf",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ece4f23a-58e6-46b7-8d39-c0c758f53055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c29741cd-0629-4229-942e-4726893a2347",
        "cursor": {
          "ref": "1f0e6754-0014-484f-94f5-7bfdd671bd97",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "856855e2-62d0-4c5a-83d4-ac1a482e1f6b"
        },
        "item": {
          "id": "c29741cd-0629-4229-942e-4726893a2347",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f538673e-1e14-439f-9f2c-b2efe8404b34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dcaa931-6198-4a2c-9381-497c9486bc64",
        "cursor": {
          "ref": "f903b927-e7b6-4dd3-85cf-8055d4607723",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "9f9b1721-8423-438a-933a-5fca9f90e44b"
        },
        "item": {
          "id": "7dcaa931-6198-4a2c-9381-497c9486bc64",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f0b9799b-3cf0-4a81-9488-44ae4616d572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57193348-2314-486e-bb35-4b318719ab7d",
        "cursor": {
          "ref": "75918f3e-65d1-4928-ab5c-b12a64a7e3f6",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "dce3421b-37a1-4ffc-ae72-1d4a9f13c3e1"
        },
        "item": {
          "id": "57193348-2314-486e-bb35-4b318719ab7d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "00f9cecc-9c95-4403-8d25-3d8647912de2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "635649fb-4697-4ac8-9247-200c90a4388f",
        "cursor": {
          "ref": "d6284dde-ffef-49c7-92bc-fd97794d5195",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "91691b0c-a388-4710-95b5-b51504eb6522"
        },
        "item": {
          "id": "635649fb-4697-4ac8-9247-200c90a4388f",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "0d5f7ad1-cf7b-4473-8dd0-23c7bac6b462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c60e716a-4893-45d4-934c-95855be88780",
        "cursor": {
          "ref": "3ba871ea-7ee5-4f8b-bb12-64ba26100fc1",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "61bddd9e-f2be-4b5f-9815-b898e488c518"
        },
        "item": {
          "id": "c60e716a-4893-45d4-934c-95855be88780",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "bb92dece-60b4-462c-b276-64c2aa8d2930",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "0f94a665-d8a2-4221-955b-8dc05f70b893",
        "cursor": {
          "ref": "a01e7f94-7bff-49a6-93b1-368c5634751e",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a5df61b2-d7e3-4623-8feb-ebc9c4bc49a2"
        },
        "item": {
          "id": "0f94a665-d8a2-4221-955b-8dc05f70b893",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "536c44c6-74ce-44d6-8b6a-08687beb0548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "45506c41-6e5c-4504-8f06-cf265e231d00",
        "cursor": {
          "ref": "12147a46-5eae-4a82-aec0-f5b62cde74ec",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "02fb5824-7c99-4174-a6a4-7e7d41f450c6"
        },
        "item": {
          "id": "45506c41-6e5c-4504-8f06-cf265e231d00",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7296bfd1-cf07-4ca9-aa70-c674740fa3dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45506c41-6e5c-4504-8f06-cf265e231d00",
        "cursor": {
          "ref": "12147a46-5eae-4a82-aec0-f5b62cde74ec",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "02fb5824-7c99-4174-a6a4-7e7d41f450c6"
        },
        "item": {
          "id": "45506c41-6e5c-4504-8f06-cf265e231d00",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7296bfd1-cf07-4ca9-aa70-c674740fa3dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b139affb-21a3-4449-93b0-6c6ee50bf178",
        "cursor": {
          "ref": "3e229e5a-f6ad-4460-b657-d8b06367b6d0",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "653881e3-82fc-43cb-896a-5bdd11ea55a4"
        },
        "item": {
          "id": "b139affb-21a3-4449-93b0-6c6ee50bf178",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "88d0ce15-d390-4d67-8ff0-9aee98e45533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fd27ab1-8113-48c5-a30e-ff9f0fd00777",
        "cursor": {
          "ref": "9726b32a-0823-408b-a669-a9b107f727ff",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "3acd5a7c-8a6a-4573-9106-f187ea9e229c"
        },
        "item": {
          "id": "0fd27ab1-8113-48c5-a30e-ff9f0fd00777",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "490af570-3b06-4d84-adf2-b22b1ece8d92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "517bb1b8-e041-4812-be7a-167a312cb326",
        "cursor": {
          "ref": "f7459155-5a7d-4ffe-9db7-65a17cb4dc80",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "80d6768a-a831-469a-850d-4efaf6bdb208"
        },
        "item": {
          "id": "517bb1b8-e041-4812-be7a-167a312cb326",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "727c0ac1-837d-4656-8a06-b172c94d330c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdd6a09c-5584-4fb6-b57a-719c955a87d6",
        "cursor": {
          "ref": "67577f72-734d-4e3f-9d9a-dab9ef13b675",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "0c94e86e-ffdc-4e94-960e-a58be30a788f"
        },
        "item": {
          "id": "fdd6a09c-5584-4fb6-b57a-719c955a87d6",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "9729b52d-0be1-4801-943c-868c230a3597",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc68793a-f27e-45db-b2a0-08b1673fbb87",
        "cursor": {
          "ref": "5ab8c64f-b603-4391-8ca4-d14bfdd845f4",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c7e81d43-f714-4e42-8187-5624ca9b5ea7"
        },
        "item": {
          "id": "cc68793a-f27e-45db-b2a0-08b1673fbb87",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "a7225e91-5bb1-47a5-9684-fcd7e81a696d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36d5f164-a017-4dd5-a634-f1af43429f19",
        "cursor": {
          "ref": "7ff41d2d-400b-4ec6-81b1-5ab92412f9bd",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "1e52e839-6f4e-40ec-af7d-fb10911fe567"
        },
        "item": {
          "id": "36d5f164-a017-4dd5-a634-f1af43429f19",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "e48584aa-6f7b-4b5a-832f-81dc9b0a5499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1d8e0c4-5b28-486b-8932-12a42cc37ae4",
        "cursor": {
          "ref": "e70756eb-8871-4bd2-bf84-547ffb5d591f",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "0873c86c-55e2-4d3e-87db-7b0408a64032"
        },
        "item": {
          "id": "e1d8e0c4-5b28-486b-8932-12a42cc37ae4",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "6ed118c7-1e40-4dc7-ab3b-47ee3d91926b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33169da0-35ca-47ad-ad04-cd47eaf5287b",
        "cursor": {
          "ref": "bb4be6b2-097b-479f-b077-1db590328e33",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "f5d5eb1f-c55a-4980-94b5-c4cd71f22aac"
        },
        "item": {
          "id": "33169da0-35ca-47ad-ad04-cd47eaf5287b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "1f7687a5-1d3a-4af7-9580-65bfe3b89ac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "063d251d-a9d8-494d-b1d9-0446e0e7db46",
        "cursor": {
          "ref": "92472f40-6a3e-4250-92df-f9acce1f46c8",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "49982f1a-58b3-4ca5-b91a-acfb324226ae"
        },
        "item": {
          "id": "063d251d-a9d8-494d-b1d9-0446e0e7db46",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "46d4fb1f-4bf3-40f0-a39e-c9877ef55850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da751f02-2e61-40c4-8363-645583f4b399",
        "cursor": {
          "ref": "511702bb-e46b-43d2-86f8-f447e6eabd3e",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "51201ff6-9ca5-4631-a53e-d44f1d508700"
        },
        "item": {
          "id": "da751f02-2e61-40c4-8363-645583f4b399",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "7129a4c8-968e-44e2-860a-356930dd9ca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30a709cf-8753-4e47-a685-8b47cc552d50",
        "cursor": {
          "ref": "c8815180-3e05-40ed-a429-bc2459c531f2",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "125d23d4-9dab-4997-9929-4bd92d0e0c77"
        },
        "item": {
          "id": "30a709cf-8753-4e47-a685-8b47cc552d50",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c43f0ae3-0212-4000-969e-41184cf1e28a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eebcf831-4be1-47fb-a2bc-388d96c05eef",
        "cursor": {
          "ref": "8185add3-7650-42b5-9fa6-02bcee426ef1",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "82998223-d27b-4576-b3a7-6f1b753d682e"
        },
        "item": {
          "id": "eebcf831-4be1-47fb-a2bc-388d96c05eef",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "01f4d5c4-2a6d-4fc5-a9c4-f8f71713ec94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9959414c-4cc8-4fba-84f9-1214594e9528",
        "cursor": {
          "ref": "4379c6ba-2258-4eb5-bef3-586b3ebb5567",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "4c90f4a5-fbb8-4c90-9fa5-b60d6dbf02de"
        },
        "item": {
          "id": "9959414c-4cc8-4fba-84f9-1214594e9528",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "d5f86e27-3e48-4358-a1a4-bbee9f009def",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af4a2e08-70da-4d2a-8198-3ec1f414ca4c",
        "cursor": {
          "ref": "eb274ffa-76ab-4b36-b4ce-ff35aa508bc3",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b29fbfc1-13d6-41cb-a4d7-50bf63e48bf3"
        },
        "item": {
          "id": "af4a2e08-70da-4d2a-8198-3ec1f414ca4c",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "82189702-6963-408c-82c7-df0bd300b4f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63d0599d-2847-4d65-b7c4-70dcd1f24ebf",
        "cursor": {
          "ref": "11b8ad0d-752d-4747-be92-de5a9753ea83",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "86573ae1-a837-480d-b512-c636f846f13a"
        },
        "item": {
          "id": "63d0599d-2847-4d65-b7c4-70dcd1f24ebf",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "80f66e51-0a70-41a7-be46-aad355d66e49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94dc023b-8d0e-4970-ab8b-a5d3f52d968d",
        "cursor": {
          "ref": "64b1f605-e12d-4be3-b107-c213399d3d1d",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "89ec7360-9f24-4d3e-97a0-dee9d127153e"
        },
        "item": {
          "id": "94dc023b-8d0e-4970-ab8b-a5d3f52d968d",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "041be783-2281-4700-9285-cd24112960e7",
          "status": "OK",
          "code": 200,
          "responseTime": 469,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "ef5d7d36-8a87-447d-b53d-949dd900507e",
        "cursor": {
          "ref": "035e8a80-b488-4123-b899-7a0ec504d74c",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "30f5d73f-20e1-4da0-8a9e-a060542613ce"
        },
        "item": {
          "id": "ef5d7d36-8a87-447d-b53d-949dd900507e",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "dbdc6c0e-26ce-4b50-a903-7fead246f382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0da3a0d-1ffe-4e23-ac2f-7e528fe3d62a",
        "cursor": {
          "ref": "02a557c1-5bbe-4419-8ae9-40e821deca66",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "e74297cc-7047-47f1-ae04-947fc9ea639c"
        },
        "item": {
          "id": "f0da3a0d-1ffe-4e23-ac2f-7e528fe3d62a",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "58dbe898-23a6-49b0-8eae-7c4770ecae8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c159def1-b71b-4dd1-aec0-cda376bfdd08",
        "cursor": {
          "ref": "1f9dd4ee-2b10-46c2-88e4-ca5853dbcc87",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "68671f35-27f5-4450-8102-2be99c80d217"
        },
        "item": {
          "id": "c159def1-b71b-4dd1-aec0-cda376bfdd08",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "5ddb04f5-66c9-41fd-a1fc-9c4825ffbb51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "035a21f8-3afe-4dfb-829f-3124a9628a84",
        "cursor": {
          "ref": "9476c7c1-6aaf-4a6a-90cc-0233c284616c",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "49e5a470-0b63-48ed-b184-1c118d08e2d6"
        },
        "item": {
          "id": "035a21f8-3afe-4dfb-829f-3124a9628a84",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "cf1e8dd3-a166-4056-b756-5b3785c5fdc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e2793c-5ea8-4eb0-a07f-debb8e415bcb",
        "cursor": {
          "ref": "2d549688-1ee4-4c83-8111-68d42e838b7b",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "6f36ea8c-0d43-4c5d-be22-831846876386"
        },
        "item": {
          "id": "23e2793c-5ea8-4eb0-a07f-debb8e415bcb",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "205c0231-750c-467b-88bd-bce55d34575f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ca4fa8a-a6ad-4dba-84d1-24fc5f3f3582",
        "cursor": {
          "ref": "a9873639-3ec6-42a3-bb46-90e6f02d291c",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "82fb2133-20ec-498e-9e9a-2b0b1087d1ca"
        },
        "item": {
          "id": "9ca4fa8a-a6ad-4dba-84d1-24fc5f3f3582",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "48a42223-02e2-44bf-9436-0c14dfdb8c3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "428bf25f-2ecf-4c33-bf2c-2bac2c589e0d",
        "cursor": {
          "ref": "acaf65da-98f9-4f87-9d28-55cd5335833e",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "1d4c5ccb-915b-410f-854f-97d375f5b219"
        },
        "item": {
          "id": "428bf25f-2ecf-4c33-bf2c-2bac2c589e0d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "78d93f36-ba2d-4853-88e2-e3d2a4e81e3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d80da52d-343a-4e3f-a7c9-543587b68e3a",
        "cursor": {
          "ref": "acb435ea-1fb9-47d7-b498-c893d9df87ac",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a33cd8da-8bce-48fa-a65f-b08b79e49a0e"
        },
        "item": {
          "id": "d80da52d-343a-4e3f-a7c9-543587b68e3a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e4e457a9-7486-4ddf-be48-f587fa58d112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d002773b-22fb-4e2c-b88a-027f5d506fd2",
        "cursor": {
          "ref": "fc4f804e-0920-4941-924a-5dfaeca5b1e0",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a583dbcd-32b5-4174-9e54-5fd949f66332"
        },
        "item": {
          "id": "d002773b-22fb-4e2c-b88a-027f5d506fd2",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b5dfb3b9-6f4b-45f5-a31e-a8de4d5704bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9abdedde-18ba-4401-bf17-d1a92fd1e53a",
        "cursor": {
          "ref": "7a90e7e0-46ed-4aac-a4bd-38f44e24b48a",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "117ac48b-e79e-4502-9221-cce788c89134"
        },
        "item": {
          "id": "9abdedde-18ba-4401-bf17-d1a92fd1e53a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "5864dc85-2501-469a-a1ee-b85928888ba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8e3b6b3-1fe3-44ac-8ef8-8548927c3ccc",
        "cursor": {
          "ref": "8c6fa49c-ce51-445c-a63c-27b67b06b521",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "359fb238-6d69-41cc-bdf9-6a669310c6ee"
        },
        "item": {
          "id": "e8e3b6b3-1fe3-44ac-8ef8-8548927c3ccc",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1c7218d1-5ffe-4fbf-9fde-f37407e5adc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12333256-1f68-4c74-acfa-2c62d11b44b2",
        "cursor": {
          "ref": "590cd0ef-dcd3-40a3-9343-96ceae31c1f0",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "8a6a684c-2d33-4c52-8168-a63ec073758f"
        },
        "item": {
          "id": "12333256-1f68-4c74-acfa-2c62d11b44b2",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "632710d9-6a33-4b9c-b204-ffa449b6be82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85ba99e8-3be1-4044-92d2-cb1099a1defa",
        "cursor": {
          "ref": "e0e6dac1-c89b-4d8b-8c86-7e3e0f0cbcd9",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a6f64772-c33c-4689-b038-c453a8128090"
        },
        "item": {
          "id": "85ba99e8-3be1-4044-92d2-cb1099a1defa",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "8d69539c-9d0e-4224-8f51-e1d4fcad4234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c89847f-e324-48aa-8e16-aa17777e6b70",
        "cursor": {
          "ref": "bd538373-f745-4d95-9a2b-09caf9ff64fd",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "67ebf757-6251-4c90-bcd0-92af850b3fe3"
        },
        "item": {
          "id": "5c89847f-e324-48aa-8e16-aa17777e6b70",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "134dc530-e6f9-4701-90ea-b115184da28a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b7ac47e-012f-4bb9-8f89-d29921f1bfe8",
        "cursor": {
          "ref": "53dc3d78-5750-4761-be25-51835d9d1714",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "86964fe7-c2b4-4d42-8550-92198475fd5c"
        },
        "item": {
          "id": "1b7ac47e-012f-4bb9-8f89-d29921f1bfe8",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "8f19aa92-85c0-41b5-926b-9289a49edd42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8c5db8b-3962-4e51-be33-5b1305e097d2",
        "cursor": {
          "ref": "7408a6f3-e1fd-4c43-97d8-2f65844fcd3a",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "33eb6c22-99ee-414b-80d7-35864e494740"
        },
        "item": {
          "id": "b8c5db8b-3962-4e51-be33-5b1305e097d2",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "b347a7f7-4ee2-47da-8810-e5ddbcc92359",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9cdeb9d-fa72-496a-808c-a8e90117d9f0",
        "cursor": {
          "ref": "2f795f26-3849-48f7-ad99-4fc3710a46d9",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "a9eaa654-857a-42af-9d19-efe500b746dc"
        },
        "item": {
          "id": "e9cdeb9d-fa72-496a-808c-a8e90117d9f0",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "687a27cf-cca5-446a-aaf2-ee80fdf8add1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e385e16e-73d2-4dfb-89f6-4e8919f567de",
        "cursor": {
          "ref": "7839fcb7-ce64-4cef-8aae-bb9178a03dbf",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "78ddb1f5-d681-4635-8eee-0c69749848fe"
        },
        "item": {
          "id": "e385e16e-73d2-4dfb-89f6-4e8919f567de",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "69b10ce7-70c7-4a25-93a9-ca40fc4d4a22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "184322c1-33a2-408b-885d-cf4441a2ae7b",
        "cursor": {
          "ref": "cece13cc-e1f8-40f3-b573-3647a339fc52",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "c099b52f-a21f-4c5d-a2da-a084b1dcb0c7"
        },
        "item": {
          "id": "184322c1-33a2-408b-885d-cf4441a2ae7b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "041d693f-5384-466a-b784-7c29c3c177b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e756b2fe-8b0f-4b28-9ccb-c77403f54983",
        "cursor": {
          "ref": "c9f7a36b-9e51-44aa-ac14-fa1dd8f356e4",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "fc769557-c3b6-4e6b-813c-f5d9e032b269"
        },
        "item": {
          "id": "e756b2fe-8b0f-4b28-9ccb-c77403f54983",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "3ebb7854-ccde-45aa-b592-2bffe8272f0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cf79832-78ec-4271-8a3a-fc9f5588e1be",
        "cursor": {
          "ref": "c0417c27-bb8e-41ec-ad97-190bc394127a",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "8ae10552-a0fa-41b2-8534-ec9ff3b08684"
        },
        "item": {
          "id": "0cf79832-78ec-4271-8a3a-fc9f5588e1be",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5374e4dd-4ed2-4ed7-99df-9e1ead3db9f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a91eaac8-649b-44d9-9214-7785498e2f7f",
        "cursor": {
          "ref": "4a8cb02e-c945-468b-9186-d56c8b32380a",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "0cad745f-68e1-43bd-ab52-25e4e07b5b1c"
        },
        "item": {
          "id": "a91eaac8-649b-44d9-9214-7785498e2f7f",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "2ebe314c-c432-47e6-8035-5a969e5dbdf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "287606d1-f90f-45bd-8356-c167635e0469",
        "cursor": {
          "ref": "e6b8eca0-0d9e-4bc7-81b0-79e10cb9964e",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "4fff41d2-a1ab-4a46-9275-7c2acd0b7ae0"
        },
        "item": {
          "id": "287606d1-f90f-45bd-8356-c167635e0469",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "84e4b626-7c4a-46f3-90a5-2c9d81297055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d53b7055-d0bb-42b6-a799-3f6afc7210ac",
        "cursor": {
          "ref": "60bfa196-0aa3-411e-bb1f-3a8f50dcc8e6",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "e66019ea-3bdc-4e4d-bd19-68986ad02368"
        },
        "item": {
          "id": "d53b7055-d0bb-42b6-a799-3f6afc7210ac",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d719f0bb-14a4-4a83-b74d-ed680d0c56ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6e705c4-80b3-40c8-bb3c-f7cb3cbcf32a",
        "cursor": {
          "ref": "42c17e73-ffb1-493a-aa92-06899ca1a15a",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f5e5d709-b91c-415f-aabf-5f9eb72f0458"
        },
        "item": {
          "id": "c6e705c4-80b3-40c8-bb3c-f7cb3cbcf32a",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "2f1ce394-fa64-4748-93fe-3abd38133e4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 177,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d5d807a-1ab9-4215-8e4b-9b0db85b5b72",
        "cursor": {
          "ref": "48988a2a-5220-4944-8dcb-1a004ed0bb8a",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "fa20f3c3-2051-441b-86ee-c4db2146672c"
        },
        "item": {
          "id": "2d5d807a-1ab9-4215-8e4b-9b0db85b5b72",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "46e98c72-5601-41d6-afa5-c38b016f7887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af15aafb-44f1-4507-9c1b-8d65b636ac02",
        "cursor": {
          "ref": "efa868da-65fc-4834-8e75-c6974cfb8183",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "e4ab0f33-7129-4957-afd1-d2620655f77a"
        },
        "item": {
          "id": "af15aafb-44f1-4507-9c1b-8d65b636ac02",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "61d9153f-b150-4e33-aeb9-51059853eddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3e6b232-05c8-4a1a-8d89-3de74b4d7ac8",
        "cursor": {
          "ref": "9f5b8c68-6167-43c2-b3b5-677cdf356960",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "7513386d-3a6e-4106-a6da-6b0c1cdfad8f"
        },
        "item": {
          "id": "f3e6b232-05c8-4a1a-8d89-3de74b4d7ac8",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "fdbe0cfa-73c2-493d-9a62-785d17864a79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54f2ac6a-bcfa-4cb0-94c5-655bfbe8e750",
        "cursor": {
          "ref": "d26afb58-18ed-4a19-be60-00d07e70733c",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "10c0b29b-83a3-4b61-80bb-e2b21e6b8890"
        },
        "item": {
          "id": "54f2ac6a-bcfa-4cb0-94c5-655bfbe8e750",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "85e9309c-d48d-4380-b315-7c712a076607",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13d7acaf-e776-4dc7-9f1b-b15dd8a2f10a",
        "cursor": {
          "ref": "9d1016c9-8dd8-4c6a-a25b-e4f5704a1780",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "32bdc58c-5702-478d-b130-bc970e99e2b1"
        },
        "item": {
          "id": "13d7acaf-e776-4dc7-9f1b-b15dd8a2f10a",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "2a07719a-dba6-403b-b732-6525d50bb373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55af9af9-1f9d-450a-9da5-54fee2c2dd0d",
        "cursor": {
          "ref": "d33f5df8-2c56-4179-bc88-8ad921547899",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c7abf255-5cfa-4722-8a8f-feea01619816"
        },
        "item": {
          "id": "55af9af9-1f9d-450a-9da5-54fee2c2dd0d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "da78dd47-6de1-4bb8-8a24-f7c37b059dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b1c6f0-c8b7-4854-98f8-28d959295471",
        "cursor": {
          "ref": "a43a64f1-959d-43e2-8c70-a816278cb59d",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "4a28d3cf-926f-441d-9e75-69f27587f8a9"
        },
        "item": {
          "id": "78b1c6f0-c8b7-4854-98f8-28d959295471",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "0f963887-5567-4e0f-97a4-a705777fda85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f27b040-44a3-419a-9cf9-67ac721e5a8a",
        "cursor": {
          "ref": "ade92bb4-2d6a-437e-8f61-0c8982899983",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "1776c525-cdee-49f9-9741-bf0b42eab6c2"
        },
        "item": {
          "id": "7f27b040-44a3-419a-9cf9-67ac721e5a8a",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "687bf690-4285-4565-8e4c-4809f9bfe349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13a0ec3b-f4e6-453d-b3b1-aa343e624c8e",
        "cursor": {
          "ref": "858df1e4-6645-46ce-8394-3e8cd2d5f371",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "9c0b92de-e477-45df-8237-b999719c192f"
        },
        "item": {
          "id": "13a0ec3b-f4e6-453d-b3b1-aa343e624c8e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "876612c7-68ed-4340-bbca-152332557171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1c9b004-6055-43f1-b44a-2915a0b910b4",
        "cursor": {
          "ref": "13648e9c-9068-4206-9a8b-49f1324c4cdd",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "1d6ea8a8-9dc8-442f-8b5f-8615ee4c43be"
        },
        "item": {
          "id": "e1c9b004-6055-43f1-b44a-2915a0b910b4",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6a4a9317-19b5-42bd-9905-61c5d1d7ad8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "854b4214-9f21-45f5-8f12-3caa495f211c",
        "cursor": {
          "ref": "4da4b6e5-6d1c-44a1-8f26-85504fafced3",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "6355631d-74e2-40c4-9a60-675970f35da1"
        },
        "item": {
          "id": "854b4214-9f21-45f5-8f12-3caa495f211c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "45cd5034-5888-4131-9f74-7ecc41449cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f02f295f-ef2b-4230-8eb3-89e542868d17",
        "cursor": {
          "ref": "abf75780-42a6-4a7e-bd70-8eba169f8eba",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "02e583d0-41ea-48e6-b28d-ec2b87526098"
        },
        "item": {
          "id": "f02f295f-ef2b-4230-8eb3-89e542868d17",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1fbeb9fb-040d-42f8-bb2b-3017d39c4494",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca164e14-90c3-4eb7-8233-5a6a1bfd760a",
        "cursor": {
          "ref": "dff10b6e-9513-415d-be73-b6d72ec6a545",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "3392a287-3e28-48d0-9102-f12588549883"
        },
        "item": {
          "id": "ca164e14-90c3-4eb7-8233-5a6a1bfd760a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "9436c9f8-c365-4d49-a734-461cc6253d9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8864d64-7454-4a83-b08a-2af72680272d",
        "cursor": {
          "ref": "7fd2b4dc-2981-48d5-b6d9-29be836f5101",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "8687a6c8-a390-4689-9c0c-d8ae2959e81d"
        },
        "item": {
          "id": "d8864d64-7454-4a83-b08a-2af72680272d",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "02e5d2de-8640-4d7c-b3cf-cce6b565683e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d7a863-8714-4c7a-b109-a91c80a269f5",
        "cursor": {
          "ref": "9aa3e60c-e548-444f-8516-ae5f381be7e3",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "e3b056a1-b68a-4ddd-8383-8986bee25339"
        },
        "item": {
          "id": "32d7a863-8714-4c7a-b109-a91c80a269f5",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "1a1d945f-1252-41e8-8aa8-eba50f0377a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a6bb0ac-fc2c-4dca-8b67-24549a2e018f",
        "cursor": {
          "ref": "3a0d1392-4c97-4597-9a7d-08c117661b70",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e65f63c0-e0b3-4c5f-9c61-d4f50df0301e"
        },
        "item": {
          "id": "1a6bb0ac-fc2c-4dca-8b67-24549a2e018f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "94b23472-d3a7-4c5c-84cf-e11f153a57a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9148d6e8-c115-42e1-957d-17cdd601779c",
        "cursor": {
          "ref": "af843184-4714-440f-85db-2f74104b9eb2",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ccd58a32-08ca-4d59-a450-052d3d64a6de"
        },
        "item": {
          "id": "9148d6e8-c115-42e1-957d-17cdd601779c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "403f9fd3-c6b9-44fa-a072-ecaf0fcb3291",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00d0582d-3d8e-40bb-88f0-090fd5b6b0a0",
        "cursor": {
          "ref": "50581de5-9d5f-4e9e-a221-1cfd7aba8078",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "00ee8ffd-124a-4931-871c-39e6a529cd91"
        },
        "item": {
          "id": "00d0582d-3d8e-40bb-88f0-090fd5b6b0a0",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "682a2263-ee7d-483d-a853-6c56b3c5df5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 208,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "909dd7c8-c37d-4f4b-aea4-0e1b13e851f6",
        "cursor": {
          "ref": "56773e14-dbef-4b1f-bfc0-3ae457438388",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "bd5f15fb-784f-4af4-8517-7d05885c453e"
        },
        "item": {
          "id": "909dd7c8-c37d-4f4b-aea4-0e1b13e851f6",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "fe46151c-bafb-4b2b-8202-26daa53afc63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9a2cf99-b601-4c64-867b-19d33636fa06",
        "cursor": {
          "ref": "662b503e-9358-4090-9b5b-0fc22a24a304",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "cc765f30-401b-4acb-9ce5-6045628d3d5e"
        },
        "item": {
          "id": "d9a2cf99-b601-4c64-867b-19d33636fa06",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "c2de618c-689d-46b1-8a3b-ca40e6b0e152",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7a81397-82d0-4afe-90b5-d442e55f4175",
        "cursor": {
          "ref": "12d55745-9397-4a00-b478-46bb3283517e",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0415e0e8-216e-43cf-8d04-d2e0d453d6a6"
        },
        "item": {
          "id": "e7a81397-82d0-4afe-90b5-d442e55f4175",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "028d93af-3a13-4aa5-884c-bad5896662bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f280f7c-2bc0-4215-8c2c-53c4cee1ce36",
        "cursor": {
          "ref": "f9242e53-50a9-4dd9-994d-0ad0c69cc127",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "879213fd-a6a1-40f3-ac1b-8751a2f52298"
        },
        "item": {
          "id": "7f280f7c-2bc0-4215-8c2c-53c4cee1ce36",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "974023b1-1f11-4e4d-ac91-8af710904850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a99c1e0-0449-4980-969c-e2d0ca8392f4",
        "cursor": {
          "ref": "c479fa71-09f8-44ad-8ae2-0487e116e206",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "2bbb8d9a-4f19-42f6-99eb-6b740d4c8b58"
        },
        "item": {
          "id": "0a99c1e0-0449-4980-969c-e2d0ca8392f4",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "3ad4607f-6b60-4697-955e-52c106d28a5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74f93e20-6409-4dbb-8100-058b13f85116",
        "cursor": {
          "ref": "41883248-bce1-406c-8964-a3a6020aaa94",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ab397e00-acfb-4e04-9816-34e6f8e6c4c6"
        },
        "item": {
          "id": "74f93e20-6409-4dbb-8100-058b13f85116",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "7a9367f8-83ac-4a7b-b2c8-373ab6815dd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2068d0e-11de-4359-b27f-5116339c2874",
        "cursor": {
          "ref": "e8e06521-dc50-4f45-a273-786abf36ef47",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "3e844dfd-005c-4a38-aeab-08ce96baeb8b"
        },
        "item": {
          "id": "b2068d0e-11de-4359-b27f-5116339c2874",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "2eb870f6-00bd-4b11-ab80-9531dfc70e62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4f4d9b3-c0ba-4c21-a63b-4c99ca1ebde4",
        "cursor": {
          "ref": "ac62f81f-8fd7-46af-a53c-a86108452541",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "bebe02d7-bcdc-4a33-8e25-4f7e5c037904"
        },
        "item": {
          "id": "a4f4d9b3-c0ba-4c21-a63b-4c99ca1ebde4",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "f2d58dc5-5549-4f1d-be0e-06fb50f06cd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c564992-9451-4eb0-abbe-7c76a26c026a",
        "cursor": {
          "ref": "64e8c463-6f9a-43af-98e4-e4719205f08a",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "e414f088-a5f1-4307-a12b-84af929533ab"
        },
        "item": {
          "id": "7c564992-9451-4eb0-abbe-7c76a26c026a",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d475ef92-1e77-4bf4-9ebb-8acf5cbdfa96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1afc288e-f25a-482e-8564-695c731d9f37",
        "cursor": {
          "ref": "c373676e-526c-4b39-b42b-7fc775ccc563",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "f63aab79-b34c-481e-b475-f89afe988ad4"
        },
        "item": {
          "id": "1afc288e-f25a-482e-8564-695c731d9f37",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "01208cc5-0805-4ca4-b6ef-c8e5c651f265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e64da92-8514-4181-ae90-340234580f0b",
        "cursor": {
          "ref": "b6ac4373-84a4-461d-9f70-91c3e437814c",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "24da1a80-6f03-4075-a97a-a435481a5e40"
        },
        "item": {
          "id": "5e64da92-8514-4181-ae90-340234580f0b",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "b570dc74-e0ac-45fb-89d2-728cb6a7c2b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc1f39cc-9daa-462f-a14d-cc96513478be",
        "cursor": {
          "ref": "23fbc25a-afaa-4210-bcd3-978d9949a861",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "f2e16fdb-aeea-4828-9eb7-b01c6efdaa39"
        },
        "item": {
          "id": "fc1f39cc-9daa-462f-a14d-cc96513478be",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "d50f365c-c4e5-4c7e-aec0-261ef2149bc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c5ba98a-c2d7-412c-9e8c-a6e18811f68e",
        "cursor": {
          "ref": "38bf2204-9473-46d3-82f2-770ffb904ddd",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "fb57041e-d7fa-449b-a23c-2fce15a8f2c5"
        },
        "item": {
          "id": "6c5ba98a-c2d7-412c-9e8c-a6e18811f68e",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "f3f00d3a-721e-4c61-ab94-d2b93664e7d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a566325-5bcf-4e10-9bdf-27824ddeb6bb",
        "cursor": {
          "ref": "0915348e-1513-4e23-846d-444b8a9f5192",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "ce9eb1d8-892e-4a4f-be94-9345a61e6040"
        },
        "item": {
          "id": "0a566325-5bcf-4e10-9bdf-27824ddeb6bb",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "cdea7625-f244-45b2-bc6a-fbee4535446d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72db6074-2ede-4f34-815a-ecf375a8b549",
        "cursor": {
          "ref": "6e4dad98-d4ae-452a-bbb4-eccc5585dc35",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "233d4022-4f12-41a5-b33c-8ce99a8e2c86"
        },
        "item": {
          "id": "72db6074-2ede-4f34-815a-ecf375a8b549",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "cd5fbf43-fb3c-428f-8b55-0cc506f729c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94aa6e22-eff7-4e1c-8987-462ac02634a7",
        "cursor": {
          "ref": "46ee3629-cffb-4ba1-abdd-dd73e9a5dc35",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "25df6fdf-1219-46fb-88a0-a8dad5bfbcdb"
        },
        "item": {
          "id": "94aa6e22-eff7-4e1c-8987-462ac02634a7",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "244aed08-dbd9-404d-829e-7a53f3da0196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04cfc53d-80ba-4273-ace5-657fd33cc4e5",
        "cursor": {
          "ref": "5fcea081-7879-4e33-9fa0-f6297334ffd1",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "2c4e5d75-bda4-4d04-abf1-998e00e8d82e"
        },
        "item": {
          "id": "04cfc53d-80ba-4273-ace5-657fd33cc4e5",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "b29fd851-77c6-4be9-a749-f01c4bb695bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b840360-7e4a-4cfa-a408-eb963c3f6a4e",
        "cursor": {
          "ref": "1df62e4a-4f41-4445-a5f8-d5fdb40bc804",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "a929c621-719a-4d62-907d-10a7f896e572"
        },
        "item": {
          "id": "5b840360-7e4a-4cfa-a408-eb963c3f6a4e",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "84df3049-31a1-4697-9e39-02a2115c1313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e18a9d40-3b09-4fb8-9e8f-c486c456ff6f",
        "cursor": {
          "ref": "47c9325d-5d57-44da-ac46-9110e503b6e8",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6c6a7b14-fcdc-4263-8d99-512ac32c8ab6"
        },
        "item": {
          "id": "e18a9d40-3b09-4fb8-9e8f-c486c456ff6f",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "eb4b85c8-94eb-4f3f-88ad-0bec0d8704d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83cf89fc-c694-46aa-b41e-8b20dd06c189",
        "cursor": {
          "ref": "9fdd6d27-6cdb-400d-b82c-9090278f108f",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "66bde2e5-d980-4f18-aa21-d3725a550d92"
        },
        "item": {
          "id": "83cf89fc-c694-46aa-b41e-8b20dd06c189",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "80267c16-746c-4a6c-9456-230f3be67e22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d5760fd-1e91-410c-90a7-4fe6855820a8",
        "cursor": {
          "ref": "a7fb6410-79c4-42fc-bc08-dbe9b444c5f5",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "251f621f-e4d8-4810-bf24-da95b7108dd0"
        },
        "item": {
          "id": "6d5760fd-1e91-410c-90a7-4fe6855820a8",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c6e97750-d4e2-457c-81c2-714ea0ee0bc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05214b1d-48c6-4e5e-9e53-09c9ead3e43a",
        "cursor": {
          "ref": "a24d01f8-05bf-4620-8189-26f35080db6e",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "1cf72762-b4d2-4c61-83b5-43e94931fa76"
        },
        "item": {
          "id": "05214b1d-48c6-4e5e-9e53-09c9ead3e43a",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "dfd63c87-b9d4-42cf-a5c7-7f12dc16da4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e865d0b3-a787-45ef-a40f-81bf6b82b220",
        "cursor": {
          "ref": "cf7233c5-9a4e-4f19-bcb0-92e402410aa5",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "b0890e04-aac3-48cf-88cb-5889133f90d4"
        },
        "item": {
          "id": "e865d0b3-a787-45ef-a40f-81bf6b82b220",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "7708db88-adb6-4b04-9f1f-5d702768028b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7ce5e35-0b82-4de8-bcc2-b9d46653a2b1",
        "cursor": {
          "ref": "a9d6c699-8405-449f-bdae-a7fafd2cbee7",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a1f8510a-4dc0-4b08-9913-a8dfcc247f1d"
        },
        "item": {
          "id": "c7ce5e35-0b82-4de8-bcc2-b9d46653a2b1",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "83a9ab39-b31b-43d7-85ac-c943f285006a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3e449dc-6ad9-4135-ad52-52cc02ef2f99",
        "cursor": {
          "ref": "4a052fc6-287c-4b4d-a57d-dbe860af8645",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "70980f30-620a-4515-886d-d9d200565044"
        },
        "item": {
          "id": "d3e449dc-6ad9-4135-ad52-52cc02ef2f99",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "57ab1023-ccba-4c50-adde-c55ca1d0bc1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a33915f-f919-42bd-8701-5a341f092a5b",
        "cursor": {
          "ref": "9a4846c3-3170-424c-9f82-8836e2e494cd",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "2cd5f2ff-abee-4dea-82d8-de8aea395d9a"
        },
        "item": {
          "id": "4a33915f-f919-42bd-8701-5a341f092a5b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "1d0c18f5-39a9-4c51-b3ba-525284955c45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e712f4ca-d7ed-464b-accd-e7c518c9e920",
        "cursor": {
          "ref": "d72a2c09-1485-4d5f-9139-6bb1db177981",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "6300bdbe-28cc-409b-9238-01ecf71533c7"
        },
        "item": {
          "id": "e712f4ca-d7ed-464b-accd-e7c518c9e920",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f61d2b73-0201-48a5-8301-1e49f06086cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bd552f3-78e4-4fe7-b35b-19f9067276af",
        "cursor": {
          "ref": "542e5100-6612-4e9f-9aa9-1900d9d41660",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "18343693-d154-47fe-b074-f8621214094a"
        },
        "item": {
          "id": "9bd552f3-78e4-4fe7-b35b-19f9067276af",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "7b8d5417-4803-4bc0-9323-d0f73dd04232",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f916e0cc-ceca-4dac-b589-7475690ff742",
        "cursor": {
          "ref": "869674ab-c08f-4e1f-b9b2-8516de5dab36",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "278ab574-ea0d-43b7-aaac-c8c3dc469df5"
        },
        "item": {
          "id": "f916e0cc-ceca-4dac-b589-7475690ff742",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "2f78ed9f-bed5-4df5-85d9-d4ab51d7be21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a8eaa20-aa19-481b-8c92-86b254132e54",
        "cursor": {
          "ref": "890e447c-818c-4fbe-a7e7-f1fc71f76999",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "b20e5406-1f16-48f8-a236-35e59f49cbb6"
        },
        "item": {
          "id": "2a8eaa20-aa19-481b-8c92-86b254132e54",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "0407fba4-78fb-40ca-99f8-6b0a0d0d9c25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "254a961d-8ced-4339-b6b4-5e75269c7373",
        "cursor": {
          "ref": "448e198a-5edb-4ac0-8f78-5837521dad76",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "2264a920-5f6e-48a1-9d0e-905e05644941"
        },
        "item": {
          "id": "254a961d-8ced-4339-b6b4-5e75269c7373",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c49a970e-d2f9-4a1d-9eba-53303eb06002",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df59d284-787c-47cf-b85b-f1d732b6d6ff",
        "cursor": {
          "ref": "ece0333f-ee32-47b7-aa99-a2265599cb0c",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "a5129f0a-1b05-4560-b698-dd1d7c365a0e"
        },
        "item": {
          "id": "df59d284-787c-47cf-b85b-f1d732b6d6ff",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "5f651591-52a5-4485-9173-c12e28761152",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "827974f9-1aa1-4a5f-8a3c-8b4764f1a8ed",
        "cursor": {
          "ref": "8e09479b-db04-4090-96c3-96be133ab921",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "62402994-affc-40b0-87d8-a482ae143edc"
        },
        "item": {
          "id": "827974f9-1aa1-4a5f-8a3c-8b4764f1a8ed",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d9a4b151-14ae-454c-9a43-5812f8ff68c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79ebc607-2a9f-4b98-a6cc-88a67056976e",
        "cursor": {
          "ref": "111a6f54-1824-450c-a22f-4a0428151045",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "13b8a1cf-8961-48dc-8365-8b7db9573e49"
        },
        "item": {
          "id": "79ebc607-2a9f-4b98-a6cc-88a67056976e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3d52d998-9211-4c26-94f6-361ebc2a06c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56a7fb04-04bc-4ad8-a470-151cd8fcebba",
        "cursor": {
          "ref": "4ac24d4f-fcb8-4200-bdba-0ef38a27c32b",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c28f1fcc-2791-4ebb-a784-3d8eb6d09a33"
        },
        "item": {
          "id": "56a7fb04-04bc-4ad8-a470-151cd8fcebba",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8b2b7419-eee6-4e27-bcc1-100ddb26e0c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cae0b1e-cee6-43a4-b5f4-f78ae325b3bb",
        "cursor": {
          "ref": "245d0568-af82-4ea1-93d2-bcec5769a804",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "0de52969-e4a0-4753-8252-933e5afc46f9"
        },
        "item": {
          "id": "5cae0b1e-cee6-43a4-b5f4-f78ae325b3bb",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9ac27cad-df55-426d-abbb-7970b841818e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4171b2f-0970-46de-a304-99469fa8f7c2",
        "cursor": {
          "ref": "08de946c-878c-4133-b5ba-b918b679164b",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "e48650de-481c-4192-82c4-4a426e0c0f94"
        },
        "item": {
          "id": "d4171b2f-0970-46de-a304-99469fa8f7c2",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "fdefeb29-7325-406c-88bc-dddd110df4e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0c0e3bd-be39-4f4a-9d14-a52016443bbb",
        "cursor": {
          "ref": "c9706b50-e2bc-4c8f-b0f3-c423bb4ca2ee",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "1f4649ed-f19f-48c1-88d4-85009d7f837a"
        },
        "item": {
          "id": "e0c0e3bd-be39-4f4a-9d14-a52016443bbb",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "88daa1c9-b1b4-4a21-b368-b03324e8cb32",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "034ec05c-343e-4a3f-a594-e636f38393c6",
        "cursor": {
          "ref": "53a9120f-d8af-40fa-9cd9-89a58eac6bac",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "df4e6e50-bfd4-448a-852c-32b6721ccea7"
        },
        "item": {
          "id": "034ec05c-343e-4a3f-a594-e636f38393c6",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "40a700c0-a421-4afe-9c02-83c615c53f64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "cb349d8b-f2f5-4c6d-830c-3d746173aa1f",
        "cursor": {
          "ref": "08679c19-a92e-4f13-a31c-7afbb5e73357",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "f5790ea2-f3ac-45b8-a227-22798fb51d0f"
        },
        "item": {
          "id": "cb349d8b-f2f5-4c6d-830c-3d746173aa1f",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a2724b6d-5bf7-424d-aa7c-10bb32287f1e",
          "status": "OK",
          "code": 200,
          "responseTime": 164,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "94522a03-6810-486d-969f-ba3f5c7b02bc",
        "cursor": {
          "ref": "fd9bf358-c8f6-4c69-9484-76ed20adaa21",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "577141cb-ce7b-4677-afe7-ec48c9119647"
        },
        "item": {
          "id": "94522a03-6810-486d-969f-ba3f5c7b02bc",
          "name": "credentials_verify"
        },
        "response": {
          "id": "0a53d65b-38a9-4899-a887-19aa785c9792",
          "status": "OK",
          "code": 200,
          "responseTime": 2367,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0cc907d-bd81-438d-9b88-987113431739",
        "cursor": {
          "ref": "a694bb5f-208e-4f36-a164-f630fcc56878",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "1f07d87a-4007-4881-81d8-6cff32745ef6"
        },
        "item": {
          "id": "a0cc907d-bd81-438d-9b88-987113431739",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "5a5469a8-9ae9-409c-8a4f-e25f79462b36",
          "status": "OK",
          "code": 200,
          "responseTime": 2130,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fc2bf49-62a4-47a4-8dcc-ac3b941770ea",
        "cursor": {
          "ref": "4e6326f2-1881-4a3f-931f-40108cc3ff9b",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ac13d8bc-4eac-405f-a102-cab32e72004f"
        },
        "item": {
          "id": "9fc2bf49-62a4-47a4-8dcc-ac3b941770ea",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4ed72b06-4ed6-495c-808c-8b2b13eb6fc9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "9fc2bf49-62a4-47a4-8dcc-ac3b941770ea",
        "cursor": {
          "ref": "4e6326f2-1881-4a3f-931f-40108cc3ff9b",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ac13d8bc-4eac-405f-a102-cab32e72004f"
        },
        "item": {
          "id": "9fc2bf49-62a4-47a4-8dcc-ac3b941770ea",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4ed72b06-4ed6-495c-808c-8b2b13eb6fc9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "9fc2bf49-62a4-47a4-8dcc-ac3b941770ea",
        "cursor": {
          "ref": "4e6326f2-1881-4a3f-931f-40108cc3ff9b",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ac13d8bc-4eac-405f-a102-cab32e72004f"
        },
        "item": {
          "id": "9fc2bf49-62a4-47a4-8dcc-ac3b941770ea",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4ed72b06-4ed6-495c-808c-8b2b13eb6fc9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "7e3d1cd7-64cc-4738-a454-2ab898c61e78",
        "cursor": {
          "ref": "057125dd-d16e-4606-907d-8d420a606225",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "32aaa9f5-0134-48c1-a628-7b6804a033cc"
        },
        "item": {
          "id": "7e3d1cd7-64cc-4738-a454-2ab898c61e78",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "8e09bf9b-0425-458b-a8bc-2a387eb10e93",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "cfaac77c-cc3d-4a02-a01b-4dec19500033",
        "cursor": {
          "ref": "4bed99fd-31d2-4717-9c20-aa3f91934075",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6bdc2729-5bea-45b8-9d67-e8dd6e063702"
        },
        "item": {
          "id": "cfaac77c-cc3d-4a02-a01b-4dec19500033",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c295ca26-62b9-4f92-892e-34e00016707f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "cfaac77c-cc3d-4a02-a01b-4dec19500033",
        "cursor": {
          "ref": "4bed99fd-31d2-4717-9c20-aa3f91934075",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6bdc2729-5bea-45b8-9d67-e8dd6e063702"
        },
        "item": {
          "id": "cfaac77c-cc3d-4a02-a01b-4dec19500033",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c295ca26-62b9-4f92-892e-34e00016707f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "c9c203fd-0dc2-4fdb-9e3d-513731ce0af9",
        "cursor": {
          "ref": "35c550e2-49ca-4332-9f6a-d51a94ee3c44",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "2e5f688a-b301-4365-a1e2-4c0b56418c1a"
        },
        "item": {
          "id": "c9c203fd-0dc2-4fdb-9e3d-513731ce0af9",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "95509282-5b4c-42b6-b339-0a7a74efaead",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 342,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "e2210824-408b-4d47-952a-40ffe6ade50b",
        "cursor": {
          "ref": "e5835cf9-3c1c-4233-90e8-cb68235016c0",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5ab5c178-8cd2-447a-9f8f-512ebc597551"
        },
        "item": {
          "id": "e2210824-408b-4d47-952a-40ffe6ade50b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "5bb84b98-e4e1-4da5-897a-0abdc6369efd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "e2210824-408b-4d47-952a-40ffe6ade50b",
        "cursor": {
          "ref": "e5835cf9-3c1c-4233-90e8-cb68235016c0",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5ab5c178-8cd2-447a-9f8f-512ebc597551"
        },
        "item": {
          "id": "e2210824-408b-4d47-952a-40ffe6ade50b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "5bb84b98-e4e1-4da5-897a-0abdc6369efd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "9f7082db-c18c-40f5-b59a-2a31be9c046e",
        "cursor": {
          "ref": "c90b210f-28cb-4b76-a6cf-fd9300c09eb9",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "80f57908-6cb5-43a1-bc39-e9e375535d3a"
        },
        "item": {
          "id": "9f7082db-c18c-40f5-b59a-2a31be9c046e",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "afa1fc7f-33a5-4c3c-822f-5566673f1d46",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 136,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}