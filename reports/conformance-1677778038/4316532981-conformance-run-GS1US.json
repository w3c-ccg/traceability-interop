{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c336a116-ce56-4dc6-8c36-259febe52a79",
        "name": "Clear Cache",
        "item": [
          {
            "id": "72c51312-5846-4e03-86cc-7c1f89a92672",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "791bf32e-e016-4100-ab17-a0f5198ee575",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "557ea47e-b17d-4019-8deb-d9e33eec860d"
                }
              }
            ]
          },
          {
            "id": "0dcdcb9c-1b7f-442d-81c5-572caaf19c90",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "30d4af28-dea2-4164-8806-808f39173a07",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6e8e9b5f-b390-449e-9be8-884367d992a8"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ab79fea9-1ec6-4724-b35b-e01374dd67bd",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "aa3615b0-9f24-42b0-8bd7-f73539ece375",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ffcc6ca1-ab7a-4bda-8556-8794ff85da11",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "53559a01-1a5e-4d3b-a53a-9796bdaf6a80",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "26db535d-ece9-4ee6-980c-18c8e5bcce13"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9fa8889a-8a29-4fcd-b197-17ff6b02070a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0dcb6720-ed21-4918-991b-19e6d698b130"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0b50af7b-976d-4646-be25-560b609251e9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "80852cd3-f9fe-44f9-8097-7cf16be133dc"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9c6d357f-c67f-4925-9cf3-8f29cc6fca18",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "8a678f40-8c7c-43fa-ad81-7f778cc8a5c2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4c66e8b7-bc9b-4c18-a612-1fcfa8b3f80d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5277ada9-3e4e-4a99-b60b-0e947e77bfd9"
            }
          }
        ]
      },
      {
        "id": "b02f883d-ae37-4af0-832d-9cdba4f35522",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "390c231f-bf1a-444b-b103-9be405115f5b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "248d22c8-5292-4362-ad28-19f8abec8a45",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b75eac2b-e6fa-4b86-8313-5cc7056875da",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc57b8b2-2e60-4775-a5e5-245db1c095ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "28af5b95-41d1-4b1b-87be-4fe84ab6aab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9d88524-dd74-4b15-9371-e1bad54640a7",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "736103bc-2802-4325-a21b-96881a39a99e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a770171a-f7a1-4172-826b-2d6121c1ea83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "725d5312-2eee-40df-898d-2f9e66461051",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "792f9977-3a73-4084-a98c-3827928f081e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e1971a8-f0b1-4094-8205-a5a9190eceb6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b6c0ee0a-e87b-49a4-8161-862e23e9c524",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c65b8526-f051-44fb-b7e7-62de99e4e12d",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c36562d-1417-41b1-bd51-e5c78fae85cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d9c30756-beb1-4d1c-80f7-a32003c3da62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a73a520-6640-4243-b606-91d2c3b7c4c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92fb3c82-b1d8-4bd6-99aa-ebc32ec54531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "133dad85-c65d-4cb7-a8eb-81437a16fda7",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b10b5023-c2c4-4785-bd9b-34e6d1e457d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "646174dd-3544-4f45-8768-9f201102e5db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2444aae6-e621-442e-9a01-42aa1ac70bfb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "b26776b1-ffd5-4f6e-8804-3062fd0b2da0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8faff823-fa9d-49ba-be35-0e6276fc2334",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3768b42b-db2a-4a21-a12c-271a23927d3f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "08e97c10-e209-42a8-9941-de36380aee65",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "df8dffd5-74bd-493d-9aa1-b95f26f757d9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "405a5352-4650-415e-b6ed-4dcb7381a0c0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "b80de25a-1c8e-4a21-a6f1-c788dd65382b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "05ab0b77-d42e-416a-97d9-576f9e6b2ba2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "84c6703c-aa99-4721-9896-cb244f29cf55"
            }
          }
        ]
      },
      {
        "id": "b98339c3-6dd7-442e-a2c4-056b4be35959",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "45cc4a50-fd88-450c-8619-beab9a94c426",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c36e4383-329c-4b2e-bd9b-bf1d35da56ce",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "9fda7983-3e46-43f5-918c-3384640956d5",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5200ee9-6843-435a-8dd6-843e923174b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc0f4c37-6eeb-482a-8638-79c04a0bbf92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f16f59f0-951b-460d-a9f4-521ab63b6e6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f18ee3d-66b3-4f98-ac25-50f6a305b8e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "489cab59-d0a0-41b2-aac3-b4241d638491",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03cbb16f-1a7c-4d35-a686-6318de9deecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55ec6af0-97e4-476c-b5ef-1a9026ac180b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "403da2b2-d096-421c-9fd6-6e917332f2a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "626b9b02-3407-49ed-8004-5cb36d3904bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d57a61-8bba-4bbf-8cc7-9fd2f46e144a",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "564fb6a5-ad3a-4a1f-a632-e94497162b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa2b4338-3734-4466-afe9-dfdcc8e746d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adddef48-9822-428c-83ba-4cdfe20e65a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3092fa84-2485-4c40-89bd-1d170e5d27aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3442fe1e-39e6-463c-b61c-19435e15b15e",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d57e6f2e-3760-40b5-a6fa-b97bf8dbe28e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc18b53c-c184-4c4d-9132-d7b77990e2af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "414ac3c8-8993-47c8-8671-fb8b855fde05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12266fbf-36d8-4a0f-8009-ca039d0aeded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02f706cd-906e-4953-87c4-7d655e53d6b6",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e67ca42-5f4a-4c06-8e24-955708472400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1eeffdf-8e60-4f10-9594-96ffd234dee3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b792fa9-974d-4223-a11a-61b2acfbf698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2b2666a1-27bc-4fb5-aaee-66f86949ea97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e87f1e2b-4c50-4ae8-a521-845c9f22c293",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9ac4251-a7f6-4411-8211-c6f57fd2e623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10790ca4-45b1-4aed-817c-e3564be6b799"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66454d59-248a-42f2-906e-94ffc4b887e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4416ea8-c7bf-409e-b6b6-0053899c956b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "526bac09-b09f-487b-b8e4-20086cc0de87",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25861f11-0fa0-47bd-92cd-b6944eb0bfb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eca4a205-b0c2-447d-b5ba-b06395fb82ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b448279-e96b-4259-8c63-9cae9c8b5bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e113333d-b41e-4bf1-99d3-f3a347b39ea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feee8338-21dc-43ac-8d64-bc1f12bef2e1",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee8a18c4-70bd-40ed-b54e-e6c781d436e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa14a3c9-a1bf-4b8f-b475-5d11cb4e7bb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61402eac-f26a-4780-b43e-f458d1c567c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4a41600-8675-47f2-87e1-d8e5a891b4ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18690a71-807e-4e99-8d54-1282531bb4bb",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5e61306-07ba-4ff6-8301-f586489c31d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "780468de-5f4d-457e-b92c-f5ee1025c0fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc86c0da-761d-48d3-84d9-f71d68d945a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0307607-780e-4d7a-b733-43a0ecffee41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa2b4d56-2b83-41e2-9457-edb4f2610654",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ee6e3a-5cdc-482f-a36a-dc7735af2ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4365ca67-2dc8-41c0-8f8e-7ec10aa1818c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "720a846e-5283-4693-aadb-20a0099df1c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f00e8d9-10a3-4985-b966-954092d29f1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2fdb505-e2ad-4c14-8559-f52906a808bb",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3af2386-47aa-4aad-acac-43a93c16b009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ac878ee-8194-4597-ac71-57d8d8c61892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adced89e-bfdc-46ae-a5aa-029c2e27f7a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31168668-caee-4d81-a0ed-3b6d48c9ac25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2410040b-0ab6-4eab-b1e7-ca1aef65657c",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf4c9142-f090-461e-8c8e-14e6d7f55257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43ba862f-81dd-4f5d-acd9-868353b11a5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ffbad23-8d29-453e-b624-2a8410f0dde5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bcdd2e4a-1d7a-4023-a5ae-2dc444cad81b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "074ba9ef-2c3b-4c20-9d2b-ea4e765d2209",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "803e060a-ca18-4ffc-b657-2938b6181369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d869ad23-9e70-4e14-ae77-a21589266728"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c749e3f-0cd2-40a9-8f54-0b175554f8ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f82f7eb0-6be2-4a91-87f7-95b8f4e49f5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a68fe7e2-42db-47ad-937f-65d5b2cee45b",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1111b2fd-98db-4a42-ab72-3ba7df0d5435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d49883e-d667-4c60-8b80-00efd2c5dbf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4436d393-1a66-46e6-9e90-cfa3629b5998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e57c1aa4-c9b4-48cb-ac77-8738b650a5cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6e2c7e4-2f56-43ec-a0de-9ee9ad6d3f7e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc6f582-58e4-4e07-99df-7c1ed78d685c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c78770db-47d9-4b81-a516-f334b63c9cca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60a0b6d4-7a6a-48e8-b10a-2db1c7a158fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8949de75-07a5-4818-897d-64a0d138fd82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e269dff6-de01-46ee-98f1-cc52aae83b2e",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e17b35ae-6c1b-479b-a783-1b576a7f1852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee47de00-8265-49f2-96c0-8ddbf76b0a14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b218075d-da64-4673-81f8-50a40d008982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e6f69a4b-7e25-42f2-ab09-8c39daa1a310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d85be45-4cfb-4014-a58a-6ea0074ab386",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67a19a0d-afb5-4346-bc99-8a6103359e7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55648f51-c630-4b46-b2c3-d27b6495d6e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "599dd53f-cf8e-40e8-abd7-8fc949dc84b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9d66cb46-cc7a-4ad8-8130-0791ee6c0d14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab6b9795-8115-4b94-a54c-b6084111060a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0086aa6-7514-4335-8c5f-1675bfed18f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f427b1d5-bf32-4f16-ba58-ed490a583006"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd13c89-565e-4755-9408-3e0999a663c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "855c5fbd-1cff-4a60-81c5-05c94dc9d2c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74f88896-9e0f-4da1-becb-ba609e209796",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d88bdaf-0f55-45c5-ab20-3e60d81f5797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f532ba3b-0a98-4bee-93df-92efee998929"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3b86875-c7cf-4db7-8cd4-03ba690c1dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "554aca08-f5d4-49f3-bb1d-e93c2e2fd450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff8aa552-5156-4f4e-a59b-ff998120e1c8",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81e2a2a6-7195-4a17-8aa3-cc8f6e6a0409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7add0e67-3b1a-4798-8f41-047a23dfa2fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12392972-2842-45f6-bf22-20b5e8121797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef2bfef9-b2d9-4709-bc9c-f1e8fc863719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb67a5e-b6a2-415c-91f6-11d2761e12dd",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "831a4290-bda9-44aa-b87a-8c6979df1c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62731512-55d1-4c58-bcff-66b6018e7415"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccb313f3-71f9-4a6d-bcbf-c95306763264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1dc08429-a7aa-4376-ac45-b005abc092f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d920b9cd-972a-44da-ab9e-1117fbc5922e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e7f56e8-cb78-4fd7-a94b-b9d129a38804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49d6f182-0f80-46b4-adf1-8ddf37b0b271"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d5a5f2d-bdde-482b-bf57-7beec799a691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ced2cb7-6c36-401c-9835-1d63ed7132fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "232407eb-19c5-41b6-a984-5d6236f9bc04",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4be5a68-1496-4612-bc4d-5bf6d8776179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f6c5c7e-fd8b-4807-b383-70611d3f559d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3a7b391-6b28-489d-a4b8-5aafa163b42c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8d53e242-fb0e-4cc4-8bce-dd1cb0ec9f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84c5957e-eaae-4786-9565-df68c66fe0c5",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a281bd-d20a-4fc9-a820-4f68977a5371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00ac07c5-ea36-4999-827e-658d065d23e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02ce226b-9033-4283-bf8e-60b44c5ec599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "568898ae-6bc2-42bf-97f0-6db82a84929e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bf16a06-114c-4be6-ab87-07fdf3d13304",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aca8a2f-1a46-4cf9-9e05-defe42b52837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "525babb8-7d38-4755-948e-d228e8cc9ee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "129d9b93-0c38-49b9-ab9c-af488bfedd02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc59657d-6e36-4ea2-968d-8f60c2037d42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10f241f9-80e5-4354-9f83-a9e7c2d669b2",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a27aaa9b-636a-4bd3-be1e-7fb3cd7b0d1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61b0faed-3d7a-45f2-9314-24623c90d593"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "055eda9d-32f1-4a22-84f0-3c7436432560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1442b240-b24d-42c0-a4d8-bc6a27160258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b00fe593-97f6-47aa-9be4-ae9a8fe37857",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd54baed-81f7-425e-a6fd-ed7840740a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ade739a-4689-464e-9b5d-0145ef9636c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec80da9-06c0-4a98-ba04-14ac634193c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5edf512-ecc4-4eba-9d5c-9fc11e87b151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde89fa6-3c0f-4383-9b22-e15daba027cf",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fff44af-8718-452c-af1d-f591cac85e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "048e0750-632a-44e6-b0c7-92a5d523c403"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb775cd9-9e52-43de-848a-5705f76eacb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "17ef60ac-19a0-4125-9c9c-ba49563548eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68ebafd7-8774-4079-88ec-fc2e9baaad26",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94aba063-6b62-45b2-add9-e4b24ab42ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aa0d0b8-d927-4ca3-ac59-7d0e052f61c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c63bfd1-ffac-4643-b54d-294a28cf7a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8c7a0c5-f575-4e9a-ae8f-0d8d53103aba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa076291-c4db-4b7d-8c86-94549708bc8d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0699bbd8-db30-433c-af42-279006710658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b73e56b-a615-448e-a3b4-cf36500295d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb400383-bc27-4925-9229-003604aed94b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "80911ba8-f1aa-44ff-9e49-54e7be3adf87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "033a589c-bdae-4d39-907d-548e8d2a1957",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb8301c0-1361-46d3-a0ea-7422b9309f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fd0370f-ea96-44af-b6db-7b0d97a11011"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce176451-7828-4066-9d7c-059136755fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd3ea038-31cc-4737-97a0-ccd4e278bfe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3fef0f1-48c1-476f-a977-c245eac700e4",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "610c49c9-6924-4aa6-8ccf-55329d134b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "985ce679-6ea9-4bc8-b604-3f4f350313bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1f4ee01-86d8-4447-a34b-db3478ff2575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6eacd1ab-c691-49b2-a9c4-96e452435e7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d241758-835f-42e8-ab56-53db58d0fd57",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28f3831a-9de6-411a-baff-17573fefab1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ea1d646-f059-409b-9ed3-a5a66f83f0ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "768f988b-74ae-4e60-83dd-85e8be56ac9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "71fab80b-733b-4fab-afea-cb0eafcbf789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebff1032-8e42-474e-8dbe-783e86328a65",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b19c15dd-f06c-457a-b3a5-565e2d430d56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f607200-a5bf-4a12-8fa2-163dbbdb5498"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc87538e-e606-4dc9-9f55-b92738d48256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b5b6192-273e-4df8-a2c2-89d64bc4e2c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c5bf7f3-15dd-4fa0-b77f-3b132e267644",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95525cc3-25b6-4fc0-9bc5-2534cdc12139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d91cb46-7fee-4a2d-9155-e1af537c8dce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c31ef2aa-5917-4cff-8caa-265023b8fac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "6fe9eece-d217-4a66-b957-424ac71e63b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5a01d87-ec1b-40a6-a36a-fab6d0d1d3b9",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b295a04-485e-43f8-b6f2-c99069900e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89ab7b4c-e31e-43c4-bb0d-93909efafb3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc9312ea-d3a0-4d40-9658-7d67a204c624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "30ef547d-e51e-4045-8497-c6ff3e1f6268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "299b2591-f1b9-4b84-82a0-be9d110145cf",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49608db5-49f7-4498-9d4e-f08e30e9a928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1969542d-0b80-40bd-93e5-826c5a36e95c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de379a07-636a-42c7-8f4a-5f5b59f1c354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "76cbead6-5f91-4c45-92d5-1aad00e51637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ff1eba-7ebf-49a1-9a1d-774eacd3f708",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61434fa6-b326-48bc-a30a-3a18a60e3ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "394702d3-8ba4-4896-bc7a-7a4e3684ec23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21f630f9-2410-41e6-aa24-2eef4b408a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "08d06b56-b151-4121-8a1f-954719fbfe8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30cea915-2853-470b-8a1a-80ce27a3b4e7",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58c0bff4-57c8-480f-885f-d0d96814e09e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aea15a9f-915b-4415-ac5f-96f5d375a416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3d77710-4b79-4414-bce8-6751d9f1959f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3522d69d-f8e8-4496-975c-9cfff33852ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5767731d-f22f-46e1-a83c-c11b5db46b4a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dd6eadd-f236-4a30-913d-f1dacb4ff633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31e6d9fc-2e05-4e9a-9db3-0b7ad752b71c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35d7c15f-5b17-4122-ad3e-8e1217d4c418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "360d952f-26d8-4f13-97f9-9bc1cd556c79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e70b0345-745b-4cdd-885e-42bf5557bf57",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d769eb5-14a0-41e0-92a3-9834d5b73aba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d28c1e48-30db-41dd-824c-032bdca84bb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7d5e028-8c38-40e4-969f-a172a59e0f96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a08422e4-f3c3-402b-bde1-974c986325fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab617b2d-f075-4648-8966-6e4bf0f323fe",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3701019a-4bd7-4b4f-952f-6c382fde756e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4f0a55b-7e20-4ab9-847d-7a3531d58045"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a882ff5-75a9-4125-8858-b2158faec031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "2903aa17-0f47-403a-a0dc-7f170b7fc50c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ffa255f-082f-413d-93a9-140680960db8",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4960a26-0dd9-416e-aa0a-4be992820e55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2eda9fa-3746-4a6c-951d-4d46a63323b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c91ad5-6f2c-4230-ac87-3505d893b44a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "746089c5-3c30-489d-8f1e-ce241e68f686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2284a3b-47f6-4480-bb00-8ac648c293fc",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "342179fb-4ba6-469f-b835-3e8bf8f4b713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad0876a6-b64e-4464-96ab-807971482b7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f12fb0-e865-43c8-be13-c2ee27ef12bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4ef5694-945e-4ed4-911d-c7ec569b34fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00649b7e-f753-4c2f-a927-3d455a5ac80a",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f41330b8-27be-41a5-9460-bc6049eb1fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d41887af-1b8c-4e40-b482-3a8087743f35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "397577a8-35b1-4351-b23e-2a3976183320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bc103ef-947c-496b-9fa8-bd331de528aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54e3b923-582e-4573-937d-c6ca6e92d72f",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc2b61f-e6a6-45d3-8762-98b04751d275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8cf503e-503d-434c-8488-13988baa2a41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76fe8b9d-9841-4bdb-9067-90fd38fd7a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8be8e23-0676-4b2e-9564-0ffc2190aa39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "612ea310-d5eb-4550-88e0-2e90311172da",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c51616f2-d4f5-419f-9a2a-f2196be4fbff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c65a5c8-d7ae-4de6-9d64-d58d3519392f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1e1dad8-5c8e-43c5-b394-bdd7da8b9144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "503a0480-76a6-46ac-aaa4-5d8863eeba01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4265b763-f62f-42e7-a947-9155f99cf975",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a82cb94-5c87-4589-8867-36caabc0f858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d18d5d0-a7b9-4693-b1e1-fe888e6d1392"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71ae3460-3c0e-40d4-b926-9256574a8022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "50b9c689-d612-4e93-ad27-08f8950ae734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "452dae55-3f88-4957-bda6-db9dc808b07f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad447651-0ee5-4a8a-9e4c-b3d9b26562b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d2c6aec-1dc9-484d-a1f4-cfe07dabb721"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bae11b18-bcd3-4b52-be85-50ad3f85403e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "693b291f-87d3-4059-94f2-bfbc7dab32ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dc73539-38b1-4551-b82e-3b4acb313a06",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c1de087-796c-4abe-b20d-58356f898604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "271c9538-c2aa-4f53-a70f-4ace8995df57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75894a21-9b09-47f7-b0a4-a0feb5a98f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c39f52df-4c91-42bd-889d-b8278030e874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ff5f0ae-55a6-488e-be74-6a58a6c66772",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e6d9eaf-0511-4c03-b666-e1a9fc8fd11e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d89b28c4-3cfd-43ed-a8bf-89d6032813b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c15a01e9-e77e-4c8e-a748-55bd428df676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "0afbd8e3-df89-4bad-93af-91515dabc0a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a19fc6ae-2a06-438f-a321-884fce28ac19",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ed6308b-ce99-48e5-b2fb-c57454d5e7c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad7020f2-fdf0-4e84-a509-80c5da9d6203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "202aac0e-14a7-4b13-b498-72d0a3b4db43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d37fd5b1-9a61-49d8-83bb-a7d8ad3bb31e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd82295d-611a-41e1-9efc-e5798b0954a3",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1262c9db-ef6e-41e8-b689-b1bdc715efbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2be4a82a-f811-46f5-b615-934180518856"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4289422f-52b3-43f5-92d4-b057441bff7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "720334ce-6520-474a-9a61-7deb91b85f7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87881ad8-4e82-4d05-9824-5283408d67c5",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06315f34-7a83-41a4-b167-ff73ed573801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0171453b-a164-4f7b-b4ac-b002cc64130f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb29490a-2938-4ec2-9d9e-4f68dfab5600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "93b84ad3-70a0-4034-b987-c179aba73e71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95007f71-4b0d-4bf9-99aa-0fffdab5c8a7",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "932adb97-b3e2-4ac1-80d0-2e9678abe344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "318213fa-ead5-40fb-ac9e-f3614bbcda19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114185c4-0575-4b40-ab54-898c4dd9e9d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "31adcaf3-1697-412a-9ffb-056240adfb6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8685247c-8f7f-40af-ad96-33586b8e9ba8",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2726921f-da3d-4b7c-8c8c-07e5ec0ef9b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "def83241-23f1-49f3-b5f8-5d1dacd7beda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ebf65d-b50d-453a-978b-47c917007829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "39eefc40-cbc8-4be7-abec-eccbf73accad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa211889-dd63-4389-a0fa-b2eafeced4de",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c6ad619-0619-428c-9cc4-b6559f664300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e21df2e-4658-4c69-b5d9-3f302885e72d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "632a69ec-0c67-40b9-83f4-21533450207d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "69feb996-8f00-49e8-92c5-9649610b4fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd66b424-c79d-4898-a011-70dd222eed57",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c090625-0863-4746-8114-051ad128b396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3c34026-125d-48de-9f7e-a5ac931c990b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a665c4d5-ecd0-40e7-838c-541e8f859fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff9af98f-4cc9-4889-859a-49d6246d1a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d8437fc-f762-4d59-8524-80455004ce2e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2afd3fd5-33fe-45b1-bf58-50c4ec660605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3621dcb0-4ddb-4721-8185-d15787e73367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea6eb004-bd8e-46b5-8055-2c9438239a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "99cb3015-16d7-414e-b488-f1b86ef38a85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ae90e2-42a7-4ba7-a192-e39ba9904cd6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0204309-c517-4576-b783-5d9b97e7e0a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb03ce71-c305-4c86-83c6-3e2ae23a5076"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7173528d-569d-4041-840d-effd8e11d56f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a797cb8a-823f-4052-870b-dbd09ee5f634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0b37e11-3f53-4ae5-84b2-132398307b1c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0bbfc9f-d307-4677-9965-96e6ac0b6df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4541406-b61f-4fc1-ac81-8bafcb638b40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4593d080-0a60-4601-bf06-a19c8e11dc2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "769d90fe-785d-474f-a296-72d7afc0e0c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24007953-8bf8-439e-866b-271be55c81e9",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fd7da49-9894-4111-8e5b-90dc87e3ad24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a995fa70-9ec8-4761-bb57-ebc2318faf0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67cb0cd4-c6ce-454a-9c90-381944ff5a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "da1a10e9-2b44-4ae7-b9e0-068f771e639d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e58a1b47-d1a3-4060-8a66-546ec552ed78",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0962fe1-ddef-4dfd-abf7-f81838cb36ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d31806c-1514-4381-b6c4-38943258a127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b4a3d4-8758-4ff0-9825-60cad283a1e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "adf65aaa-dbe1-4de1-b214-a448ad4613cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52464038-bd0e-47a3-9fdf-a2e54cfd4076",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31fd65c0-2200-4767-9d46-1ce9c8b73fd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82a40855-f185-43ee-a6ea-f192f45fdf27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0872f7b3-28ad-4ba8-b8c3-86130093d07b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0b7c8a0-5cf9-4096-abe6-1ef54d7467e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0aae713-fc77-4d7a-b1e9-518f5f512463",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70777b24-3575-4253-b01d-fad426e18710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eddeaa32-4fbf-45ff-9f41-6723bafa8143"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c303bf3-710a-47ad-a718-81a1e6de5d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f63f0b3-f5de-4c34-af3d-d79c2e1d701d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d167ba90-db42-4aae-93e1-80c7577af54e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "180057e2-2fab-4168-a019-f8bae28942d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10978a6d-be2d-4e59-9f0a-58bca3d3b488"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c05ed7c2-c052-4f0a-895e-26409622aa1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a42fc068-ee2d-422a-bb16-b7fc4836a20a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0554d1e1-789e-48d1-a377-0db75c8cf50e",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "219ab6b7-6b6b-4565-8c24-3d8f222186b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1419ecd6-5e4f-48a2-8260-8730e5bcb3c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f09b42e-2c4d-455c-8105-762166ecfb4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "38f8c875-b153-4d68-aea9-1e3e5a2fd366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6136fccc-f05a-4261-9872-c233d334e35f",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29947099-fea2-48b3-85f7-675906bd7e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77f455d7-719f-4bce-b054-1496f94da1db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab69508c-b736-4436-931b-5dafe7b7379b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e920fc03-1f44-434e-9603-d9821841044f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38fab76c-4097-426d-b6dc-f62478dafa2a",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92e46c31-0549-4c5d-b7be-161e381b673b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fef9ddf2-7a5d-474b-8ae0-f068b3abcad6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31803b1d-1b9f-4fdb-b7ff-99225f3c58b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e01e1323-8d89-4aef-b31c-d14e589abfe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28dfdc65-c71c-41e9-b44a-ab41eaaab311",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb34f77d-6ebf-4fc1-9704-029dbec4ed63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eefac40-37ac-4c6e-a416-4dd1552cc4d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8175ca6c-cb62-428a-bc54-e39689a94220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5799289f-1835-459b-9ced-1db18235fabd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c354b5-85f5-4380-9e80-f21ae7a3e2f4",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddfb2ac3-14c4-4c6c-aef6-046016598b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dd2f82a-702f-45f3-a23a-5303aaf5feef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95e77a8d-2013-4aaa-8a85-025abfe75dd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5fabb04-8977-4fd3-a601-95a439d272fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4598ebf0-3dc1-4130-afd2-6d9d03537f78",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7800723b-95f0-44ce-b49e-44faee328476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9073a172-a83a-48bb-9b45-54a2b6e595ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80e42c49-47a9-4807-a9a2-1c708bceca8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "84312931-0d3e-486b-badb-39e7b1b3be14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "224fe2ea-ca23-4dad-825c-357c8924e877",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82777008-2143-4b39-b928-058a4e2a9bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d7ef016-7eb4-4145-8bfa-18e680443cae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc3c79a-462a-47f8-9a11-6c0cb9e5a450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "29bf4f33-e7ff-4668-aead-b9c32b4386db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5fd27e8-5f36-4de8-bed7-3b1acff468ec",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bf54837-f70d-4ae2-8ee1-8c4cec931399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c399dfc2-683e-4800-bdad-cef0c735d40b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d14478-e85e-4916-ac71-92a24144c5ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ed9d98a7-5ec6-4d2f-957e-46643f253af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0ba9e54-3000-4054-af94-49a26c0c1c81",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb81cf1a-b838-4e38-9ee6-db2d69524329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e4d6582-173f-4540-a7eb-5d92bf0f9702"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c058ab89-c7e1-4293-adc7-09a6ef8fde1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eae078ff-f682-4fd8-9bf1-e0266fd67f92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12b231c5-6714-423d-8e5b-5b44cb5ef246",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e032fb69-67bd-4f28-804f-287e9b8415e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "840d61cb-6864-4bab-b1b8-7e5914280ac3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82c59a25-2b12-447d-b20a-3c978f70ad91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f148d635-a622-4ca9-b43b-8b2458c1c63d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4eb8c91-797a-4b09-b82c-2f9a1f5dcedc",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da655762-f8ef-4e9b-8c89-6d8a3437e99e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "615f00ef-8127-45a8-8e5b-50276fb813b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5d682a2-0cbc-4628-b68f-74278777a960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "de5942f1-56c0-4082-b69c-5a76215df62b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68967685-3d28-44b8-b151-8de8ddd77873",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb26185d-1c4b-4b06-a0cd-5083e9e75bf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93ffe231-0e1c-4442-b7d4-1554a7f2e716"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17b52cd8-73f2-4005-b7d1-ee13aaecd12f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "811800f7-b16f-406f-bf18-b664adb83806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd54a114-0843-4539-a372-9c10b0adee09",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e47449-5892-40c0-b2f9-e2cbf54d0dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34abaa93-c5ac-42f5-b8a1-35a129beca6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc62efc-54f4-453d-a5f6-19eb3905335c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf420bda-0a56-428c-8a15-de5c73104833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20b9182c-f1ff-4332-8919-61a8e5f3d7ed",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f238aeb8-0dce-4c2f-95b9-b1196bb57bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abf1a83b-b905-4b77-ab92-815292d9b860"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b878b1a1-d7be-422b-95fb-0a70d7715454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6b019cac-68bc-4570-b4a0-ade9404e43a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73a39d5a-e187-491e-aa79-2e06e016875f",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6c6132d-afbc-45fd-af4b-75e1e855a837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec9f39e9-1d8e-48eb-ad39-b246de24f422"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcbdc7e9-0c2a-485a-8f61-509f19c86abd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4050887-b66f-4527-9a68-7f19959a5a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80566dc6-0453-4f3b-b8e1-7963b3f31bf5",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "964f6c04-7ccf-471a-aa3c-adfb9f6f6ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ba2f204-6ac4-4f07-8d36-0fa6078aa066"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5d86777-f61c-4bb7-99bf-0731f5f3b29a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b4954a2-1fcb-4e1d-b550-46b548db0f8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "561d6989-2dd3-48eb-ace4-65ae493037bc",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6c56d92-94e8-4297-809d-ffe4bb67921f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8382f68-d7df-4584-8983-ab86a065671f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17200fff-af51-42fb-a7fb-d9779111c618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "14e26920-8b3d-42b5-bff3-7a3c8eca0fc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b98a7c9c-800a-423e-b311-9eb2097e99d0",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a401f15-099d-4ae7-a054-1591d05f12ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0847c9f8-7664-4077-a2a0-2b2345ee85b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fe88d4b-fd3a-485a-aff8-1d71d7ca714b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "18499f29-a29e-4d64-a144-e773e237982d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6352ab86-8db2-4f33-8737-9152e4161343",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "416e89fb-7f89-44e8-9602-a91a5bbedaaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c55adcd-3c22-44df-98d1-91293c516f51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6f79010-2261-4fec-89fe-d08586a5db6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c051d8e1-e87c-451c-a1be-0d11aeeb8189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "370c68e3-c88e-43c4-b8b7-594c3c9979e0",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a92b6c-60fe-4628-a990-aac6b348d5bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "459a53e0-e2b4-4e9e-82d4-e68337c51a78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f295f82-49c9-4df6-992a-25bc9be1f327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e0e0718-33cb-4166-857e-0d268977e0d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "180f6035-1d03-4b35-8b0e-2dbf3765ffdd",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d70346af-cabc-441b-a561-1f3ca2a6647e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf2fe86b-4e47-4e45-8c02-ded9417271bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da93e76b-6c32-4b81-9fd4-e9735d872d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6df8406-6cec-47e2-875e-ff07e5c5422e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26b82805-3b51-4035-8533-693d5a60969e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0bb2bbb-bb93-4c6c-b613-5c12fd1c53b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b69b2573-5ed2-4003-a734-787aaac9bfbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebca55ea-3b83-4f92-a72c-b1b55ecd1a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "daba7f97-a80c-4dea-85e8-c734965ff0f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2784c11-897b-42e6-b12c-16793851d322",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a31600b-f9f0-4a0a-b1ab-c6c058e85353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f007410b-6021-4f90-a235-5290f96f16e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "817d648d-363f-4746-9462-8fb6feed97b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5cd78e24-5dcf-4e0d-99cb-ccc2af727925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aecf935-36c5-49b6-8797-1c3f9482e093",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7080a429-7fd1-4e08-9e93-05212f7b000c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5c6a97b-22c7-42c0-8bae-d49e6d0868d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3494a73f-fcd8-4025-b453-cf23830aef78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c7548ddb-8006-4b05-83f7-f508c3197427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d134b2fd-7319-4cc7-b84d-9b570b8e5843",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7f2d433-7fb5-4ce8-8765-be3984ae26a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f01d497-aa57-4cda-8dd8-495ce822b91b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37383a6d-7f02-42ab-9386-40d58c530539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "06a30c77-2622-4bf2-91cf-24f7c15cffc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d117630-62d4-4aef-aee9-2e4a0d61874c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01600c4f-f0f0-43f5-9b1b-c8e6cce5819e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6ce50138-4997-42f9-9fd7-25597430fca4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95658b59-4b1a-454d-8e39-8b17ac40733d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "aff4a563-9f8c-4907-947a-3dcd1ed2f534"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ebec65f1-e550-4c3d-9fcc-8fe5c7d62f80",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2705bd7a-fde6-4fe7-9f90-827d601f9e1c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46d1b244-b0b0-4f7f-bed3-161095236899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d1abe15a-3631-4c1c-bf7f-bb3a86fd5544"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa8d4b75-8b19-406c-9923-6d29cb336db7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c865452c-3e01-4dcb-ab9e-fcdd2c5f3f10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e52f6932-4b74-40b6-90da-26f3b3943d1e",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81d96d2b-9041-4ff0-8a12-552354985cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "017d2377-c93f-4ace-a945-af91a07f4ad2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ac5cfa-c9c2-49e3-ac36-f48cbd051221",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8e0f2394-8582-4799-8656-88f126894459"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19f972ed-bfa5-4f76-9b3b-c26880dfbef7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dc04e98e-930e-4d63-b8fc-182e2f5b3ba4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "294e8928-56ad-4cff-a9a4-c2c8fc98b93d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "001b68d5-aaed-4e88-bfe6-d42079354e73"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7d59cb93-8517-4c05-8a80-733a0afeb69c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "de2a06bc-2b63-4ab1-aeff-7d2ecf91d40f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "30bf5a85-53f1-409f-9acf-dcbae02bf6f2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dfec9dc6-f03a-4b56-8ac9-82a22661bac3"
                }
              }
            ]
          },
          {
            "id": "f3cb61dd-dfbc-4705-a3b2-6bbf0345e2ef",
            "name": "Positive Testing",
            "item": [
              {
                "id": "40980601-541e-4791-8884-c3cb360ed4c1",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "442d54a8-c301-492c-9301-412a6e600c66",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a07a7f2f-b023-4061-a3cf-1938b7e4f8e6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "80991722-3de2-4163-a1ac-f76b8bec94ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0c3b32c3-0330-446d-9abc-569a2d8b0e70"
                    }
                  }
                ]
              },
              {
                "id": "b5a1ad2d-640f-4b89-b7ea-977308b85e7b",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d6dcff3-d4f8-4084-847f-bb29e9b6fb7b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "16c2787f-03dd-4b61-beb9-e8ae23e9d64c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1be6c628-7867-40f7-8ae2-88b6ceb67448",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9bbfe38b-91a4-48a2-9265-e86321f51141"
                    }
                  }
                ]
              },
              {
                "id": "85cc26f9-5913-4012-8dac-35b07d8bc384",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e1eddd35-8516-4360-bbdc-ca2b3b00e941",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "666c8e20-6820-4b7f-a030-99a9fe4cea6a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8fa61c7a-5e15-48b8-a081-31a053f1160b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "af44589a-8e29-40af-9510-3418c80d7697"
                    }
                  }
                ]
              },
              {
                "id": "ef2c9765-bb62-434d-8104-ab2570da9ffc",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a33ada7-b570-4863-8868-74b235affbb7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a8c1e972-02ae-4f16-969f-a278dac9e553"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8dbc1bf6-af43-449c-9c0c-4c3603c4dc89",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "efc5d7d7-d63a-4d41-9697-8121bedc5e6e"
                    }
                  }
                ]
              },
              {
                "id": "dba4f48f-4276-473d-9adf-5d7b652ac018",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4ae4dd45-d0ea-49cc-be2b-576146ce02d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8ef35d04-697a-4f07-808b-5a4eff3619c6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9cc757df-a53d-40c0-976f-eccdc1bf6117",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "520db78d-05d8-4552-bc2a-09844b618de6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "214f0d50-d379-41e9-a824-ff55fafaedee",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "158b8837-9e02-42b8-a8af-a7dcf06e4fb6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "559051d1-1333-4402-bf46-13bbdfdfaef4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3604c763-ecc2-488a-9bc4-631e2ed23d1e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0fa068bb-056a-4676-8da5-7da0031b1244",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "769ec784-b95e-40e0-a02c-b31fe7e5f9d4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "93de3275-3cd2-4e98-9eed-453ee1f0429a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4a439fd5-4cdb-42e5-957c-7a313d8cff90"
            }
          }
        ]
      },
      {
        "id": "acc4b192-7a1c-41af-bb64-e966d98471ce",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "eaf0f909-e245-4adb-a7b2-bddfba0df83b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8e81b0d4-fe05-4187-9699-6fbe39aac90c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "43b7ff19-cdd4-46ed-8c9a-b0f4594d80fc",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49442b58-8d4e-4389-874a-63b3c4a6b0f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d61ba5e-aa72-471b-9352-cefbe7f80f24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d78e84a-b2ee-4bba-85a1-d013b197085d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c455e1a6-f33d-40b2-b881-354cd4684e67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d807f15-8497-4c57-b69f-8c09665ca903",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "317f7f8d-1959-4436-910a-ad4316789953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72008562-dc16-4a25-a929-96b69d0b8deb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12a2f8fc-c7a8-4794-9dcf-b3b49091f580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b08547f-d51f-4c5e-b4c1-f82356ae591f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a6feffe-9b71-49dc-9d62-03f557ba5cb9",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c0eff58-5776-4436-96a9-ae142a011980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76201f20-7087-4c22-b482-6caceedd3efd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1f621a4-a2d7-441b-bb73-8fe617a209eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "82344167-c75f-4dbc-bfba-70e3f9824fa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbd69932-1a0d-4b70-880c-5a979c2bdcb8",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c688ce5e-761f-4272-86cd-1be74287b033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bcb7719-c787-473f-82b1-d7eef6cb5746"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7faef390-7b18-429b-9863-83d54b46b831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cba00b88-0dc5-482c-9c5c-ef37be31e121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4b8277c-c8b2-49f0-9778-738646b6c64d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd0fc0d-db9c-4dd3-a167-e307ce2148a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acc3b800-13d9-4675-a41e-9fc9aadd5733"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c514b91-de8c-42b7-9e83-5d4f4f8d2607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4941df20-5754-4124-a22f-749912a4f5b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba0ca37c-39cf-4a5b-a399-801ecfd15ba3",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a61bbcb-8447-494e-80ef-293a894a700c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b05c724b-1cb7-43a9-ac23-da17d93be155"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f585b3d-ec58-405a-9be4-ea104cf5932f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3723a810-a656-48e1-88aa-0d11cdd32c89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef6a66e3-e6fe-47ca-86dd-582629f3eec5",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db301181-9bab-4f8a-a539-1a078330e39a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68b4edf4-4ca5-4905-a9a0-0b0fc0fef48b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25463764-3ee9-4e31-a004-eab28ec55b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f58cdb1-b8d6-48e4-8a41-0fd376ec3aa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c77f6cc9-f171-4752-937f-d2597db73d44",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c0be43d-ef22-4137-91a6-dff4092ad329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f47d42a-4cbc-428a-9a95-c6a045698454"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dc9f7bc-9fb7-4e25-a8ec-99b2a309c31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "04300075-caf4-4987-a0bc-46ed62e41318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ab9f657-c7ce-45e2-90e3-e670f874ac59",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc911cf-617b-4fa8-9fca-0ead6f251748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "335e182d-c085-4de1-bed5-c2cc27f77ac9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7fa2567-8946-4afc-8a19-397b25ab2b8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "49b885cc-412e-4a9b-a933-4c0ac5019869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "273ac60f-94a3-4eb6-804a-bee443f9b65b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4eb6125-5929-4a8a-a3e0-908b127ccfc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3b9cf7a-3e41-45bf-a011-573895640254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b38aa61-d69a-4f37-bfba-862a3b77778f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "33b11041-02e1-4460-99fa-1158b332f3c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8578ab5a-615b-478a-96e8-ecf780b175f1",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "156b80b0-5b0d-4941-86ce-299ca692be46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c94591c3-b880-4fca-b9a3-993b19ee38a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9deeb902-9b4f-4360-ae42-0d4d13aa9a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8da3ca35-33d6-4748-98ef-3355262b8691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd40bb03-76a2-47aa-87b1-8af939f2622e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b9f3ecb-9396-469b-a353-80e6e6a0c261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "384c7278-3b3f-4839-be35-09a1f7c79480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbc6b751-4257-4d05-bb96-8b963005be56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c32fba7a-dc82-45c2-b056-dc44c244a58a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a805b037-2258-4b72-b99a-944a18ab4c94",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d565c552-8b08-4783-b69e-e4d346a49419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a184c0f4-6c55-4ea3-a970-8deaab8f1420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68ba5065-a31e-4b46-982c-76fdcd0475bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "61db6880-bdbc-41fd-a87d-f63212033e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a93d115d-116d-47ea-9c4a-d70a2667dcca",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aedd73b-8ed1-425a-9a56-cf2997a9b7b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1ffff44-a51c-44c3-b5fa-262d03edd15f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceea480d-dc85-4125-89a7-44520d49e378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "e111bcb8-a283-4738-a40d-6818017d24d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9adf2386-97d6-49e9-9915-f52df5d087da",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "563d68e7-720e-48dc-ad1b-36c227e958bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6b1f842-60d1-4ef5-b3bf-b3aa328f8e62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6c35826-e7ac-4ea5-be8d-ed4c985011c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "155ffd01-f694-4f85-bfe2-0ee46b4ea79d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63a99c40-d8fe-4d34-8580-3e85b2ec0451",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ecc7a5-29c3-4afc-a7ad-293e29a9a014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2688a632-cf81-4783-9fc4-0f7361d368d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "776fd9a4-063f-4ef1-8df1-0603bce8badc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2838f73-9444-4a02-a4c6-568a0086d1d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e10a61f6-c0a3-471b-a74d-aa8db4338f34",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca322b20-2f98-46f5-bdf4-34310556bf14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37d2f458-49ef-46d1-b9d6-1f12ef4a8b08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e22e59b4-a804-41b6-82d2-07c535071be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "813c0b74-af4d-47b4-aaf9-72be30651aca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b83eb075-7620-4b1d-991f-dc5addfa1ef3",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2e641d-0726-4761-9881-ed538d91d664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74ffe939-39ad-4fe1-b02d-bc10c7a918a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18623c6a-32e3-4722-95fe-9a850356836b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3553666a-2a6a-4334-b3fa-402b04581816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19732436-631b-4fe3-b135-dda351d21b88",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38218c7d-1f23-4d9d-b2de-4c9b53f8f865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "429c38d2-5c17-4678-8f56-b89434e8f503"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf7d944-7d75-4823-8e2a-ba9c76932839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc48568f-b89f-4049-a96f-f0bd5992f08f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a432dc1d-e629-41f8-8139-0be744aa56a7",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff3e1c8-29da-4917-b9dc-264ced6941bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a1837f5-c7d6-4a79-baad-6462d3402222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a58033-c69b-48d6-8cbe-57a8680f4c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a250bfb8-6706-4a0b-8d78-08559061a6ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e674c6d-f422-41fd-a071-ffc3ebaa639f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d15d4b7-b36b-4016-ac45-a4e0e8aabc1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cc7122d-d7f5-4bce-8ef9-b14fd28be2d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a20661f-a1bb-46ff-89d1-232a1487f069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6376506-0208-4b67-b506-7c878914c6c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c735cfab-d07d-429a-9713-b4ac127b201e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adc38d26-04f3-452a-aed6-7503fbfca8e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aef872f1-c0f3-409d-96c0-03a2e1c2d40a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b47cb9e3-9a11-4379-a31b-2c26c6b8cf21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af5a7fd9-7ab2-4baf-a4e5-78a6271766f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3895997-63f4-45ad-ad13-801971c18d3b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f2f51b9-64a2-479b-8e5f-1caa1fdf1b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "780c2241-0629-4d4f-97be-113e8bb739c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89db172b-e51e-4cf3-9cba-2ad3e0be04c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa28b0f9-c9ab-4c9c-b32d-f70e49696313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02f28456-f97d-4cfc-9b55-70e360f063e1",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2abdf633-ac44-4983-9fd4-4afe3e128e4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "319e828c-2657-482d-91b1-7a313588d35f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a2f525c-cb30-4b84-adc7-c5f7524b1c18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06fc6210-9267-4886-80e6-eea0d7c23348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a586fab-5a66-42c9-9f3a-25ce02d7e8f4",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7c1fc3c-cc2e-4d78-b5d1-c1c4ac06c271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d4397bc-19f0-4f28-adc7-e8fc66b52781"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f9a9b42-e210-4b45-a7d3-db0d78bf43a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32bc298c-9b54-4a75-bbac-82122e9ded19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6862238c-8eb9-487a-9578-88efdd031b57",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99d84998-a025-4b64-8509-ee81b5eadaec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86931757-8d4d-4f6f-8326-ece05d3c6405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5288838c-27ea-4231-92ad-ce90b5f3e079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5eadb31e-fd30-4d1b-b908-c72388e9f556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c42c147-1827-4b15-8d73-099329e9e3ed",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c50181f-be04-4e2f-b685-49c0cd338f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b83352be-7709-41a7-ac42-fcc348dd9a73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea460be3-3465-47dc-878f-c4a1f4d89654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "81ca42e3-e581-4d4a-a31c-24e20ffe187c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14721f43-23f8-4139-959f-a328083dca93",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4011497c-a9cd-40e0-bae4-77a4925092f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c766b104-4a35-4bc6-9cde-91c8283cfd05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f2eb095-29dd-4258-b5a8-c49fd9adfca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74fac75e-2124-43c5-a828-201dc577eec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9220422f-b46c-435c-abb5-3a7b8d0e6e81",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c4ba23-c91b-45f7-9469-e080e7ee9070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "672774b0-1e54-478c-9b76-70244c88bf52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54ef20a5-d2f1-424e-86f7-9b2c9f3181aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a404724-5286-4c53-9f32-fc282a5d581f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "872fb314-5e38-40aa-b4c5-9637bea56eb0",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84a728ce-b29b-4e6c-993b-75195e03eff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e273bff8-7618-4eab-ab23-fb8f7d198885"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f764826-68a3-4bd0-81d4-b1e4e320e44e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "039ff704-9d44-4fe8-818e-eb8f232033ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cf02be2-745f-4137-b65e-eecaea913d00",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc544996-0ae8-4117-9026-dc8ac3abcfa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cc74af2-3e2e-4f4c-9dbc-4d33391b0d49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32369e42-ae69-4b5e-b221-1c05be4e1eef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc1da9e7-658c-4e43-a1d7-09b4558eb729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3046acd4-659c-4ab8-a48e-8e6e82aaeab1",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e29eec36-4975-4067-8c0d-8f660e1c32f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb9c1034-b568-4b94-8367-a63d0b75c027"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa2477cf-f1ee-47b2-8e76-c277d7e7cdf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97efd035-b538-4df7-9a47-07ace9b0ff0f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "74bb83e4-187e-443c-a957-c6bc6faf912b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7a3a623a-915f-4e87-84f3-20812ad31384",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcdaa805-160e-406a-a619-c47ee8fcdf14",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "019fba6b-6f2d-4f51-b20b-063bab7051b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f15cb7-85d5-4522-93f0-c3ffe9e31e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "beb4fd2c-f27d-47ab-817a-907f2b0bd2ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd98d672-5cd5-4a00-8f46-00c60cc8d455",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d292352a-c121-4034-92d3-06569ceb9a2b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5f359dd4-9475-4e58-bae1-e69ce7009cfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7381a899-ba33-4df9-b6ae-1f3db1f0f2ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a4fede24-7332-402b-8b12-be4db741c4b2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "186ec6de-71c3-425e-b5dc-f5730565a4ac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9b820b48-80df-4843-88d3-97a87cab0f24"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "22d353a1-3115-4c31-9456-bcc2e43552c1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "73bc29f8-10af-4754-875c-15ff21807af6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d0740cc9-e281-49b3-be63-0f045504d7be",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5d30c20d-e8df-4746-83fb-14dae0a6e995"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1a916c9b-7976-4d49-af7d-638376803059",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "505b9ee6-f4a4-4527-8547-25ad380494e7"
            }
          }
        ]
      },
      {
        "id": "bb0fdd7f-13f9-4374-982d-d1583d4a95f3",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "88eac2e7-cb1c-4ffc-ae3d-fc5e597ba97b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8f9d2ec1-dda3-4447-ab0a-44168ecebf7b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8ed8a897-04a1-4dd0-ab19-929cfb093e00",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef54e132-2c46-449c-9322-9891f4b04d26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e554274e-3cc8-4310-b834-19998dc73436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe08e9ee-e48a-4c91-a259-54de652d30e1",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d6efcf-1fac-4c8a-9e54-09bcc2b20f34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e74f1f80-db37-49aa-aaad-f6b354f9960f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1892bba-0081-4494-b736-eddd0f046aa8",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da54528f-1872-4a05-82da-50771b10b2b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54eed23a-a7d4-4753-a906-7e01197d358a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8614f279-1feb-4803-8e6f-edf855ac759f",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74195821-75ab-4f46-a148-a376d6ed70fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eeda6183-6a06-4048-8e0e-8e7d55794140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a906d5-3b60-468a-af45-382e4ac0a04a",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60098372-9c20-437b-b249-e0ab9a0ab1fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2a62810-9875-4550-bcbd-2814c06dff05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e5ddae6-f918-4f57-b536-a68b43609994",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f72f279-d3c4-4ce1-9271-4b63926f87ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d68cea21-81ad-45c1-9838-284359f25345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b80b7fd-2673-465d-9221-8dbdcd3e2700",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97f9b6de-c46d-4437-a662-ea2e43f64b91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0f0a430-2b35-46a5-a17f-3bedd3a42d72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b48e3f1-9248-47e0-a030-b534330d8b46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "623c2a94-5029-49a4-9895-33265552b4ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fca62a39-f444-43f2-9741-6174be0f5a26",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e342e7a9-30d3-466d-badd-d132afcd5bf3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46f81219-0238-4e3b-8c35-fcda5867a4b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f73f93c-de04-475a-813f-9ee3b160c298",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af11f7c8-62b1-4a84-927f-bb3a8a4a2d2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb6086bd-a787-48c0-9a96-9d5fd1a355f5",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61f918aa-eb76-42d3-a88b-c5538b49cb7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fabb0b85-4b52-4bdf-b3aa-c3438312809f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39667b82-9ebc-4bab-92e6-4c6761c57e7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f10f82f2-c6b3-45fd-a0c4-79cb697e5e13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "040b9888-4bcd-4e73-8378-e82c7cdab8e4",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bdb7cce-0cf7-46cf-8d0e-793e4052dd6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7215355-3120-41b6-a35e-d9d475696e69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec7467b5-ab06-4608-9a89-6c1c3d3482b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d872191-1b2d-4141-b202-f2e3ea5709fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bf0e988-483d-430e-958c-e9d1a4f4b92a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae551d23-4dfc-41fd-8409-f1fe1f470ca4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95a3bc95-a94b-4a09-981d-930b6cbae44e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "149ce61a-c6fe-4486-90ed-4a8b64ef31a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51aaa468-4ee5-4c16-8b23-d2147586fbd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5434d6ec-c174-4839-ac8c-cfdca05624ff",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ce30979-22ac-4d15-8e37-6d29fd2e9d3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cfa9ea5-c433-4449-8065-34d0f149dea5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d823a79c-3ee5-4955-b874-7abfbd86f14d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a346ce0-504d-4920-900b-3177bef7a9d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "071bbd35-3808-4e8c-b4f9-d5b492ac2a74",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "847c9d0e-67d0-4255-bd50-75e0460bd0c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed52e1f5-c2d8-4546-9327-0ecca62129fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5068108-6cdb-463d-96b9-2559a0b2c9b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e434f0af-2a15-4747-bc50-c83b725719eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d09f43b-b02c-49b6-935c-287521a851d7",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70a5eff1-d1c5-42fc-9e8f-7f1cb095318a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6ab6cdf-a137-46dd-a7ca-37331bcc2c17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eaa770c-8369-46b1-9b4d-40955ddf7fae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09092dd7-2d87-48b3-b9a4-03073cd0fa45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a787942a-265a-49c0-ad5f-222d81e9121f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3098dc69-7a20-423f-8165-ee934213e198",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f3d9e6a-57bc-455f-8a8e-90f32edbd5e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef5c74da-5041-4d39-a211-85ceb7b78584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f215b1a0-bc4c-4e6e-a12d-835bc2510b67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2b277cd-d97b-4cbc-bd7f-468ec8bac64e",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e6005e4-2c23-4da0-8ec6-157551ee6eae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fca59e40-85ec-41c3-9226-f1d4dffc4b98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "177ce6ed-c0c5-4599-9724-4f02cd94dc4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9dbc897-cb4e-46c4-8b3c-ba13174086f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02685f2d-5df3-42a9-a9df-d657aff6d813",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e8743c3-e2ed-4e6d-8f98-d981f02810b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed8b7991-3297-4117-bfd1-3c2e5048ddaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c50a990a-7a5c-4fa1-b233-4ee1a66a8b53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e68cfe6-1a3c-44a2-93d6-ca2578da12b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aef69c2-4454-4628-9105-d86c7a5aa58f",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0bd1b19-b09d-4196-83e8-37f7fb458ea6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3627bb3f-8796-45f2-a5f5-1c6f723887e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f17965d-46c5-43cd-99f2-d6658a9fe818",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b357a20b-dff4-40c1-a5b4-d4248092579d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c879ba7-c46f-43dd-9daf-52838e14a3ef",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed422b73-38f5-4dc1-b0f2-de3ef189681d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ebf2908-5635-4ca4-84d9-8cda8636420c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e40c953f-a0fe-43ac-b69e-6282934523b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fb4871e-e1ed-4ad6-b9cb-c25925cf4cd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56493f30-662b-4710-839e-d6102285dd0f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c73282ac-226a-47d0-825a-21ee322f3f5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7be27621-7050-4308-82b5-ad6c3c5b94a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34135de2-97f6-4ae1-9f85-0a9f2a09b088",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb1c2bc3-bd68-476e-84e0-c236ac466e8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d90931f0-3a0e-4685-b427-e6d418402c1a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9db8301-a7a2-4909-a0b5-3c473cc31fc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7822e09-e1a9-4bf6-b4a8-0d19e2cf5158"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c33ff65-ad74-448f-9e7f-1328d04e87fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "047927f5-e0d5-47ac-868d-44adb90e6399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d3bf6a3-1c4b-4c2e-87be-42fe6f77a3fd",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54752f83-b757-416d-b08c-398237c4f156",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5efd2c60-d210-4406-a7fb-97d247255967"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "796d5291-521c-42a5-ba44-0e47ef98d0dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb6824ac-c7fd-4e5c-a9db-ec354b579163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a1518f5-1191-4583-8991-5ebbaa80f676",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b559af3-9e06-44a9-9a3d-d41728023e7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e61f9edf-fb3e-4b2b-8728-c5426537ac61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c6855c3-62cb-4437-a218-03a43d28a74b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d18ed90e-5000-4ca1-b6b8-33049bde5af1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54092e0b-dc6a-4cac-939c-49d11d1e2e0a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa5dbcdc-0d9c-4247-86ef-85d0f654bae9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f7506d1-075e-4e5b-849c-b1b5f3b70671"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dae378c3-de4e-4efb-ba78-58ddfa86e422",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5368b17d-963d-4d97-85aa-c9de84299a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b0adb2c-e9b6-4233-8452-5ea0e3ef3a47",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a3fa10e-967f-4f27-9c39-efe46c132b44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9799d86-5e0e-41df-818c-5bceffef5093"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92a3ab42-59e2-430d-a009-531adefe8f29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c659ec6-7b7e-48ed-b15a-20279707cda0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "822189ac-194b-4f62-8aea-f5924d8cff7f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d44e36fb-eba5-4507-b8e6-e04ff7d0ea66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14c9c163-fae9-4234-b326-4b5548601bc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a51a5e6-fa08-4ef3-ab27-6a1277b66a46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab80f220-944f-4be9-8be4-8dbb2109c975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e37a959-ee70-440e-8f6c-da970cbfd95f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d00ab3ab-f33b-455b-80e3-4fe457e77f17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb365244-a18d-42bc-8aa3-b69034495911"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81f85f63-9a89-41f8-96d3-520949ffec64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a3e9617-33b9-4965-ba58-a0042365ed6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaf42204-7fa5-4f2e-a5b5-3ae2dc14ba73",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3dc8375-6ec5-4b36-8b41-2620ba5418be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ad4eb84-2679-4a1c-bfc0-9ed5955a787e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b7abcc-86ec-417d-ba9a-e7ea55e75960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45c01d88-b905-4196-a517-a06fd97a46e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fb63382-375b-49f0-9e26-8b547040e111",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85dea68c-b3c7-4e3d-8e2b-22696646bed8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f712c24b-faf7-41c0-9150-51c2626e4430"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a76c9edb-bb19-4ce9-bce6-047ebc0b952a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80238735-335b-4a9e-905f-1e2ce966a8a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a5022fb-e05d-45bd-95c9-34d8086d15dd",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02320221-f5d1-4c09-902a-f72fa0864002",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7084a96e-cb00-440b-b157-b2da6c11362d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19ad6c54-0fb0-442c-9b4e-2c39a6829d07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0793915-7658-49f8-843c-c064a79e33ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83116284-8ff6-49ef-a43d-b23969f5c8fd",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c80c45d1-eb8d-4ac8-b151-e8bb750a22c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "480875c9-dd38-401a-b0fe-77cdec65d993"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23c45e0c-ab87-413e-be26-72875749295e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d878cf50-aef6-4dd4-965b-ef6f2aab50bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3dea1fa-ab69-42b4-bd99-fadb2d5f170a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fc20c96-c455-4044-a48a-798dce75da23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff087929-904b-4d2f-8e71-23e3e7aa032d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa279e2-3671-42a6-9cde-e3091824984e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e7bc1bc-8b01-42dd-b153-8d59d27b25bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ab08dc1-745f-4a1b-925f-e16d1ae703c9",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1544097a-b214-4d2b-a170-27aae98101df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68d1f975-8067-4337-abc2-5959063870cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a476e653-b886-45ca-aed3-8651a1779c4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "082075c7-2038-40c0-bcc8-cb617ab280b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0757bd83-1797-4b95-a3a3-1f8130c8a8c1",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57e197d0-c04b-4718-9456-2e4f73121b49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f00ab911-ab0b-4c19-9ed4-0e69d61163f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ff97982-9842-473f-996f-a77dcc101f84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b60de0d0-dac6-41fb-8041-a7d27af470e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfd5705b-d893-43ce-a99c-48ec1467125b",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78e31609-49de-463e-89f9-de529df06889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b038ad9b-e4e8-40e2-955d-2e0b6163e17c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11b48939-5b9d-440b-81c7-eab966658d88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1024a2f9-566c-4162-9582-ce6ff6b17c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8b0bd38-b2f2-4a57-aff1-3c1b8367822b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8f90abc-d2d6-42f0-8eb2-95d35268dd17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "050e009f-569e-4506-996b-d44bfefc096c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d56f617-8345-4d6b-b95b-cbe7060c5c16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01365feb-5d36-4b68-a3bc-b9a8ef8dff92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4588911e-f127-4b8f-af6d-1a6ae8071823",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4e87914-67b2-485a-86d2-67058ef177e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "118cf7ad-a1d1-4f5e-abe1-453825e14e4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdd1c6c9-0237-49a0-ba39-2037d23e509c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70963fc7-e29f-416e-82fc-ead1d2f05527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeeba4de-3b64-48fe-97ac-d03cb186afc7",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6cc033a-1f73-46d9-a31b-0f52d7390fc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11179c3c-a4eb-4f10-97f5-e7c2c88dda04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97152347-f1e8-4cdc-ae2e-56ede23327b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a73de14b-8731-40a0-b32d-ef191ce0bdde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9d439c1-6911-42c2-9ba6-187ced9366c5",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaab2442-edde-4cb0-9a45-40f5e799ca34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "203008f1-a2ea-411a-bdc6-24824d7bb702"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5d7a427-312a-4bcc-a19d-9e1fa92c74aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd09fefb-b974-4879-b0e3-7f0c7d2e160d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08b985f8-aa21-4b08-96c6-280e11cb8562",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa2b66bb-3598-440e-90d9-5f16a7e98089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8374d8b5-0a0b-4e2d-a394-fdaa1272054b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb756296-970b-44bd-bc22-557ed32c9115",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73f631ae-9c3a-4e65-93ff-99f7979087eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d861f460-fc73-45a6-b5e6-37e86ff0fcb2",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c65e4fbc-ab32-40d5-99b8-c8711eb2448a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4acc57ad-fec0-4613-8b1e-4db5075a7701"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ccf286-7e94-4e8c-b8ba-50479369a4db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdd1d831-d8ab-4e36-9bef-18929c54585d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38749560-f3a9-40d9-902e-835fedc7b7d2",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2720e351-c90b-402b-848c-298614440958",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c42e7bdb-a864-404c-806c-a321b613103d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2acc9406-4c99-42dc-bdec-f41980a36bb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a587a787-9d9a-400e-a691-0eec45041351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64685b93-d99b-4ce6-8b6e-cc2420c147a5",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c1def6b-78c3-407d-b0df-b405b5c660b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4d6071c-cc1c-4fc2-b2a8-6a45ac90d4f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e568474-ec95-4d89-b642-5efec787822f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b19d109-612d-4fc3-99c1-ed9ffbd31242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1551a79b-c9cf-46aa-8d77-0e4008fc623b",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1828a4d0-376a-41a4-a392-6a92b8962a89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b594d1b-4da7-4f00-9fa0-d7920344d2fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f971418d-bd96-4166-8141-f37ad958c049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63cc51b1-99a1-4edc-98dc-5b0bd1c889f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c68c70a7-10b7-4fab-b86e-84f16e58d7bc",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "788c1822-627c-4e9f-b8f5-898d32f8893a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1a2db92-d50c-492f-a733-ea2d71ddb727"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a2f731-2384-4de7-9478-63ab8e3658b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ced73c4-ddf4-475c-bd27-6694fe364d0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82846e32-2677-4c41-9e4b-78aee6a19d66",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff446e36-9405-4bda-93a3-763fef536521",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deba4a6d-047e-4808-905e-59a2f83582d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33fd7399-55d6-4f66-9d44-12081cc970d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3f22025-d740-496d-84dc-86d686314d37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19d7eb9b-98a6-4003-ac97-6675edea9cc4",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0025d08a-e1ab-4690-992e-c0202abbff2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd9d2342-d8db-40db-ba96-a026421836f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b23dd302-b1f7-4f25-a51a-cbb3cee3f632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2264227d-81d2-4ed7-b093-af0d4ab59ca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20f777ec-ed20-4bdf-963a-d5925ea6d5ea",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd69d00a-6f0e-42bb-9b00-208e3b2dca6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0aee0bc3-5dda-4949-be8e-f1e32839816e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f9112ea-eb83-4cee-b4d4-7dd9825a5a6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99be3c9b-146e-4bc4-b639-54ba3736e8e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3453a81-1ddc-40b0-b73e-27c3e48dee52",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4958e41-ead8-40bd-94be-c550f93035de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78176191-b6a4-4f8e-83b2-6a686141ff87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3db8c59d-730b-41b4-8882-cb499d41530b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3350a54-df40-4d96-a4f0-b0cae9330e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb6b158-44f7-41ee-8f30-7d764aeef11d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ee9e6b8-25c6-4be2-bf9f-e152b43c70d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4515aea0-930f-461e-992a-4871fce8ac36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f36b5bb-e9a6-4474-b9de-b46dc6a66284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b34aa9c-afa3-4395-bca9-071c28918ec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5691a30a-80cc-4dc6-ad98-29c4c09675e9",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3163817c-06d0-4e58-afa0-13ea6330c749",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bb15596-9d4d-42bb-b85d-9e3b6b5caba9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "786b494e-c621-412f-8661-c25094c236bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48dcdd67-97bf-496e-a28d-79a2108aee14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "215b7ed0-5840-493c-a6f8-949fb0b58409",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fd8aead-d438-44c5-8fb5-ab8b40e201e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0380aadc-7639-478b-ac25-0b6b17212283"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ead3004-c1be-46a8-9a96-a28ec730ac7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9ac68ae-f43c-4a1e-9d4e-22d60e09f13e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d1d5fc0-f447-4279-9700-2d35219b3ff1",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e563a98-d375-4ee5-8f3b-7d858a2c7606",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "651ac390-8788-44d0-b3dc-9a42d93b781d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71a3a704-692f-4d93-b449-9cae56189577",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63a7d1a5-24b9-46e2-8f53-38a9ae322412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adbe6917-0339-4ac7-b125-2cd87afa452e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1557e645-f59a-411e-99b3-dd2eac8a8fb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff99eebf-3713-4fff-a092-4db7c168d41b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ba12fd-7c2f-47d9-ab4a-6009d6c81c4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9fe8a28-4446-4596-9f48-14bf69f760c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46c8e6da-194a-4b7a-b606-fbc67bec129e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f862ecc6-acdb-4277-ba1c-b14af843c63b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01101254-b427-4f5c-9e46-dee7643869eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de5ac540-4cb1-4bb2-afaf-43c14093dbce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba1b0c4b-ef2f-4a37-ad7a-e1866c121e6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f3c5b0b-45d1-4057-b9b6-7db218899c67",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ecb47ce-5af8-4f9d-8802-02c7860bea4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "784f411c-c490-4efd-b1f6-6418204c6dfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e36342c3-8542-4e8b-bc25-109f62719898",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9580e120-c07d-4b86-9463-10eb059a9baa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27042462-9bf4-4a9e-938d-07c94479753d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16b35eaa-ea88-4fd8-b10e-3b1238bed49d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97b7fa34-d68e-4f42-ada6-f8b984605abe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99d7cff2-4629-4046-83bf-80de38d8d998",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ef3f5ce-8742-496e-b55d-8ffd93a8532e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2efe8c8-34e4-449f-b20a-ece8a20500c6",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "addd5c51-cda8-43a6-abdb-4eec796b28a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "818cf658-2e13-4a36-9b81-166a33e03d5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d70ccc1c-1988-41d3-8ec5-aecd4467cb11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34d5e8f4-b4a4-47bf-9e46-6b6e7ed6bd47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e00b9867-571d-424c-a8a1-7d8c2a1df090",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95981d8b-20cc-4033-b66e-17646086c966",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fec60379-4397-4bca-bf63-0bbf7e06c0b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a28341b-aaeb-4cb6-85e4-16058c7c8f39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ff97e31-1b7c-4c34-8db4-b2a3a76866ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3fcb22e-3021-4ae9-ab8e-a6d10a797700",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "280c6014-3980-4c84-95ba-914372d4412a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91b99010-6532-46e4-9229-e48473636389"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62bbcc94-dbb0-4e08-9f83-b2dd6f761aa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f93b83b-0576-43cf-9110-91b998421775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a4f7de8-6489-4492-808d-9587e062f205",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cba62b99-9035-41fa-8738-6999167d86d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecb91f2a-96f4-46eb-affd-2c7bf2f86cfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "969111c3-abcc-40ae-b3be-24671a499d52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55a033b3-132e-4868-8b15-12db3b4df6e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a6b6043-b78f-4d86-b9dc-056d2800cc0b",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2faaf751-deef-4c5b-ae38-b308f13adedd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12b35b10-5b2f-4e48-8520-76e9b8f90c44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbaec2bf-7924-4b4c-9662-f033752d61e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "315430f1-de78-43ae-9e02-fd5909c22280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "033730b5-2325-4f66-89d2-7ae032416d3e",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a4b547-5fce-4345-99f8-e1c0b5a3795e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c51e4a3-4c63-4e54-8b5c-0875f92dcd7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83a7cd85-19d9-476f-8c5d-5a8dfeec0dd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7dac4e6-23d9-4f9c-a3a0-9d0dce86df83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8da6780a-e32f-46b5-9a10-6e8e872eb930",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "417e114b-846d-4781-91fa-afff3441a8f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2430a360-ca87-4109-b602-4fed03590a59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "781efb33-275a-43bc-a3a8-3bbe6288fbed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "789fee17-0029-42d5-b0af-1fce06c4168a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b516b251-a1ee-440f-a17d-d6363c232113",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bec1cf8-3147-4179-acd4-3af344cca851",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f534c699-42c9-4bab-8849-01debde4cfa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6a20063-01a7-44ad-9453-e756d3909576",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b64908d7-035a-49ba-8252-5161fe3e08ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a5e88da-2d97-46e9-a1b8-69050c74952f",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "062112a8-b9c2-4bf2-96f0-cfac299df27a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c7dafd0-f363-4e1d-95aa-d3bbc558352b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c69c4ce7-9edb-43ed-8bfb-d11afed8e78f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59ff86de-6682-440a-9a70-e106d6a526e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ceac47-dcc5-4065-b3d3-6d0ba5ccbe62",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae0d5724-ff7a-4fca-ba48-e2e45eb1f58c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f3387c1-810c-40e9-8d12-42240a00bfd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f7df4c7-6d6d-4726-a954-da2a3a437905",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ada0642a-6748-4ca3-8022-e0f69c7f51a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf8d23b-74bd-4ea1-8594-978285bcb6a7",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "490384df-3e3a-4c99-8cf2-224aa0ccf518",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ef0de70-5f1a-4ba1-8ec1-c78983147f0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d990a04-aacc-46ee-af2f-03930b0147fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7a4bf94-7bc1-482a-89fc-a5ee8403bcf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "910cd1ad-f208-4ad2-b428-7a53fc95fca9",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72135651-945e-40b2-9001-3e7234f9966d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a37e167b-1ae1-407b-b488-4d7f350c25f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf214d49-5ea3-46dc-9b48-efc15b8b6f08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46bb738d-36b3-46d7-ad8c-32310f734950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f753f24-391f-4e0f-946c-33b0c711a41b",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57b27e39-8494-42d1-bb01-5e0b41c363f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a9eb177-42e0-442b-9e72-ef9bbddeb9ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e205a4be-9cc8-4f97-a605-0756a98d347f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "791e560e-b7e3-4b91-9712-83121452b379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4ad2909-8c59-4586-aebd-8058ab24d8ac",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caad2326-e82d-482a-a8c9-5982594a8d2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b59301a6-181c-4087-b751-3a1f95ae3c2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a81b74-2c40-4cfe-a95d-9566696d0081",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21cafed5-bde3-426c-b417-374d5244e60a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "954a4440-8816-40e6-a21c-f30fe7ad61d1",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15d62a05-33bc-475d-86c1-5e9c6e5ae073",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "835f0ded-61ea-4c48-8913-f4268df6b316"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc9f951e-58aa-4016-a22b-5814ee5e32b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48c5a465-8aad-45b3-9581-4956465c50fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16bae569-e055-4134-9b88-fbf64ce8bbb0",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34070475-c3a0-4d43-adac-c04633eb2eba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74dfd81c-6aa9-482d-93e6-0803f7220be7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65b68f41-354f-4233-a2bc-e3a7f77a13ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72d87ae1-ea11-464b-9501-64b8cd0d48ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40aadcff-a266-4493-a1a2-fc21773589eb",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "866c4ecb-0bfb-4456-a471-0f63ae7a7b24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f15872b-7c26-4ec7-acf6-d5af5b468f4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a78eb15-f1d2-4bdc-a99b-a597979fafa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bf57ac2-f92b-4f83-89c1-9a4ba822c22f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9375d4c0-27c5-4dd6-87d5-f37855d0049b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "876e7496-750e-40cd-b8ac-557d0175bcd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "992bfe1e-e662-4275-9791-8fbeb3262d81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fb427eb-defa-408b-bd29-e9cbafa00368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80974ef6-741b-4346-a2f6-a4922f3a5575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "959b854a-a150-4046-9098-d9bbb03a0a1c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9e8252f-78d7-4da8-83b5-d4036443d38d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df71880c-7bbb-4984-97bc-0cea94bd8eb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "519264e6-3401-4afd-830b-c27735afb74f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e06c6b55-2cdb-457a-8338-12adf2cf442d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5992558-d629-4c38-a328-ca7bb8e09c63",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d86c1ba7-64a1-4c15-a14c-18d076d5feb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d91f2f0-5842-47dd-8c2d-6cc8bd2d7e81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc5cf4c9-dcc0-4cea-a0c3-ea258218eb4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19234f29-f443-4a25-9a44-e0e50e24287b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "882e9edc-930e-43c5-992e-9a8a4e5948c4",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb11d23f-2305-4c3f-91c7-94dd648f7cf1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e33e3340-3a03-4903-a0ad-fe538f2cdc62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aedec79e-febf-481d-8a32-4a05d4abe3e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c44d07fa-0db1-4a6c-b1da-2098ef923404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cec6d782-bd71-4680-a72c-a8fb82b07e3e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49f6e744-6ff9-489c-ae14-40a6b5d8de11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "958b19f3-f3f2-4522-99ed-9a0f9a5d2496"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "017b613e-2037-4c38-9f73-53a84e71c026",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8a7a470-5e85-4909-a6e8-1dd88ae1a056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "305ce24b-ce0c-4dca-ba67-9d89ad84f280",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "921732e1-2377-4b31-9f8b-b5cb73ec4b7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efb67b4a-487e-42bd-9ab6-cdc9fd57e6bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee5ab161-440b-4cdd-b081-cd432bddef1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1e10276-f096-4b0f-a376-287f2e065837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "509fc7bb-6374-4812-aeb9-9c3fb3a2564f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e09078-f880-4909-81a8-9b6e9964094d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b58b442-325d-4988-b4f8-edddeed48c75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdb7ef93-712a-4424-beb5-523ef155d60e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b2de2ce-9f6e-40df-a8e7-3c3c2862a49d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "916a5db7-243f-42dc-a17b-2c7448012e7c",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e7c90c5-1941-454e-8d75-f8766e3ff6ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d91896e-1f43-4c14-b18d-0da503081090"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17ec82af-df0e-41b5-8152-bdaa883de160",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aca8eaa9-273b-42e8-b72b-66866491a4ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be63904f-56d4-4260-bf5b-e86f9ac96a51",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba4ec859-02c0-4221-b7a4-65fff5b659c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e346b4a1-8436-43b7-9535-e9a8c845706f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a50228-e380-4080-8468-ca1721dea789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00643f5c-613d-4ae4-9638-b948bb322025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fcaded4-3d47-42e4-a751-745b16efb695",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f4ca048-be48-4f15-9e2c-f14afeceaadf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd8a0852-5cb3-45f8-bc83-11f4a94d4366"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0186bf1f-7e38-419a-80be-abe890971602",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "772bfcb8-2b8b-4c19-b222-8ca88dc1bf77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39a60d55-0b29-4683-8e9c-ca3b5c0af34f",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "306b7f64-9da8-4bbf-a474-fef4dfbc93b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f86f6488-ef4f-4c3b-b6b8-ff30d43473ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6bd7993-df08-4e00-a520-ccad398c2168",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e1f2167-a9b1-4e99-9d66-64dba1d5214d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "359d0794-43a3-4103-a59c-0f108fcb1cf4",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba5252d4-2106-4fa1-9d88-2c8d8ae42473",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4d3a69a-43a4-481e-8a92-dd49911a9729"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10bcf140-8565-4d88-be59-30757612c2cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25846926-1715-4493-82f0-18138ae46459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7768b1f-755d-4728-951d-6a17248c26c4",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7d390dc-cdca-4206-8667-8460320ef45f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05afd101-36af-4aef-aadf-95bc9cf8fa3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6b733c8-e917-44e6-b957-77955d26f498",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ca7a315-71ae-4055-9533-b1c6fd3998b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec3673f-57ef-4e0d-99b6-378e95388b9c",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9602c2cd-d966-46f8-8a2c-0c1b970b273c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "568905c4-6c82-4af3-9882-897be8738086"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "804d9db2-ed0d-42ed-a778-bfe3409ef4f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b67b28c4-4a00-4c82-a509-a0a449065eae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2efdbff-15c2-4ae3-8ff5-d295b0285c5a",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf00a087-9598-49e4-a8e3-6a8b69cf76d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6e82044-b450-4e55-ab9e-13966c7be35f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc926bc0-abd8-4248-8f8d-f004f0f6470e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9672289a-b772-4b70-8dbd-0f8cf4f5ce11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ae2f1a-96de-47cf-aad4-8e2efdc66311",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92efb0c9-1b20-435e-95c5-ee84b1b05eab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fab01ac-6df9-46ba-8ddd-6b9a20443b45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec8b73c1-9b71-44dd-ac6c-5d8a61521ea5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a6493ba-6623-4c0d-8778-43255ac4e315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e96a34e7-6075-420e-9847-5edd118bf463",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f207305-9aa9-4c54-be57-55127c3806d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c7d2f90-8a61-4276-89f9-b28b3a174bdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec617433-47f4-41c7-857c-61a84ce48cb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c66a9b3-7f17-4185-8dac-f63eaf0a8121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e474fa95-8588-4ac1-8333-33c7e82548a8",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3469e626-3027-4092-859c-b1b95d43a768",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf2fbf4a-34eb-4639-8f1b-e45061986241"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8233f81-82cf-4a63-bead-a456f41c601b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6bc1a02-090d-436a-b180-157136c86009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d47b3b03-f06b-4483-b55c-d7712fa298c6",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be1b1e3b-f4d4-4993-8f4b-2d7861edf334",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54312bb3-fae1-4444-93d4-7a44d14a06a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b452d9c-2344-4df4-abb0-ea00171bd2a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6993ec3-159b-406e-9677-6681ff04068e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d9fef5-48eb-463d-b29e-8c9c3beb38d5",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f62e3014-2d3f-4f39-bd39-b9c356e82f55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02dd087a-b84d-4dec-a53c-7584143b40f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83684ca7-71cf-452f-bfb2-8c6590fe7208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3b36122-8dbd-4f08-94b3-2a6760011f30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5854054a-7d39-4170-8e04-d0c3e3161a3c",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51dd43c2-b3b0-4e2b-8313-45b5ad9e79ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84954808-a012-407d-8cfd-b82042ff694a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a191e5-5559-4ec4-af7f-fd0acec06a37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baac8c87-3b77-4f26-af28-1d55721812cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8b24656-c08e-4f11-9b85-be56eff9c864",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed313108-4039-4ea6-9b30-ce1be1e42c65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f823126-7610-46d0-b246-88198875478b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16be3426-4c3a-4dd3-beef-6b7652f385ea",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2439a234-4ceb-4f97-b7e4-5f5d7836790c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe86ef60-4863-49f2-a5a1-ebc57e3af068",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ed8002f-50d7-42e8-a4b6-f02755b2f29a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56b4f6bc-35a7-492b-8dc4-c2ee816b3173"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb134ebc-75c3-4a28-8922-160524ae7991",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97c54ce9-eac9-4337-b6fc-7ee90e877e6c"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f2dbc063-b4ee-4445-89e2-2cfdade508c9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c34bcd6f-52e6-46e0-ab3d-0e7650eeeb08"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1ce3589f-4229-49b5-9bc1-6e68f81a0844",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "35b349f5-01d8-4575-b759-c8ea2e902652"
                    }
                  }
                ]
              },
              {
                "id": "268d282f-bcc5-46a6-bc1e-e74e96e82fed",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0b0bcf87-bd79-4008-a943-6536b28b9309",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b23b58ed-c13d-4b05-abeb-1191d9058486",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "54f6a573-171b-41c3-88bf-a994851267c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d9fcfc-b827-4700-8b44-4839f8cb1abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8841c456-8c81-48b9-841a-9098ba98d2ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c92a243-6307-4ead-869e-f03f5359953b",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8b59df5-6e29-4fc1-8a31-99b9621051e0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "be392fea-f46e-4a85-a894-879827897b48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e6ba05-27b0-479a-8200-7ede552a5daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "703d6989-b924-4a13-abd6-dbe8d3320c46"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "013d5588-c859-4f4e-9f58-6afe4a4488bd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "055fb6e7-9212-4be7-b1ac-f6542fc18d51"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "efa7bcf1-a536-45cc-b31a-bc6fceeac32d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f39100f0-eadd-4655-90ca-8d3018aa4e13"
                    }
                  }
                ]
              },
              {
                "id": "d852c26d-d3df-4cd1-b947-97dee84a544b",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "ca67cc06-a20e-4083-b422-29296fdd9ad4",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "947ade38-8539-4929-a1ca-92ff0edcea3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "81cef2ac-9899-405b-a89d-6eb7232241b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a73a121-6081-4ae8-a5e0-a4547b30d4fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d4a88d2-999e-4154-b11b-39d476b8cb2c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "436abdee-9f2f-475e-a0a4-6a30fbefe34a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0345c62c-ff7e-40ba-81d0-bc0b43b36799",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ab66ed7-92e5-415c-a422-693a484eef7d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "549c4af8-aa1a-44b5-b946-ab12b6457daa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c87a48b0-cc6a-49e7-b345-723f3e404560",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dd69b3a6-4770-4110-857a-9094bf689a63"
                    }
                  }
                ]
              },
              {
                "id": "44948827-459c-48b4-aff5-7c308890663d",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "98175add-9233-441b-949d-4a6488403548",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d095cd4c-5b92-48ff-9f52-b357938cb8e5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7f36847-ee8f-4772-97ab-f4df20611bd7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e6d31fb0-54e7-4c66-9db0-9de88550c976"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bf8f1081-12ef-49f4-8533-7bc5763b4a86",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "da4097c4-6e15-414c-bc5f-3086eec90461"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "37f77629-7906-405e-b3f6-4f1caae64201",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b0fa9f24-78a6-429c-af8d-7767eeb472fd"
            }
          }
        ]
      },
      {
        "id": "c20033ed-7e28-4487-bda4-812675bc1b3f",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "8f823652-77a6-4efe-9e30-843e299383b4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "85c3f655-3bfd-40d9-85cc-26f2aa203463",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "63370125-2193-4266-97b5-a0a6d6578f82",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40279c2a-520b-4449-93af-b6678cd4f31a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3d6fe2ba-707c-456a-8cf9-27cf28995bc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9df3218-e7c7-4925-9675-a5bf2d8b28f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f6fbb460-53fc-4914-8a50-0793d644087d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e951f2ae-3acb-4a36-8f60-2a143f61ef50",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f894f0a-8140-40b3-a6e7-bf975d987926",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "86a425f9-9c6c-4dc4-ab9a-2327ad838ca1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89530598-eb71-4d35-bef6-deca5f5ac335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "32ad3baf-6a9c-4db8-8dd4-bf52ee9acc81"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d0c80511-3c89-416b-9945-9e395655fb92",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ac5b8ccd-089b-4bb2-9821-9de65800399b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "81f296a0-55c4-49f9-b90a-6ae54b98cd54",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f99ab24c-1712-40cd-aa81-308b49985bf1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8bc90c94-ab78-465f-80c9-06aca7e31b07",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a997865d-5f45-481e-a027-0ea765d836ee"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6877811f-4664-4b69-8986-6482be6e78c5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e8b5b973-5184-4e8a-902f-76d76e104610"
            }
          }
        ]
      },
      {
        "id": "a3976c39-0f76-477d-bf7c-110e0944a957",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "60b98423-fe4a-4ded-8014-54d2dc528248",
            "name": "Negative Testing",
            "item": [
              {
                "id": "980b45b2-2a36-4d33-8d47-c1f0264280c1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5f3b07b0-18c3-4bea-8010-f2f448951e03",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd1c1f74-5006-4735-89d6-f1ad326a185a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b0ccc44a-fdd2-4514-9fa7-7f6fec2dc095"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e00d9732-4cfa-44f7-91cd-6ba41efbdbdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "69b31f18-4e95-4989-84b9-627b2a7dd7b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8596dad0-0008-4c54-ae6a-ba0fcefcd4b1",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "479ffb15-2ec0-49bb-b726-b7b40e99992d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6c40d50d-623d-418d-9af7-cd5824053a33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c053a008-0d77-4d9e-9927-fce2b2636198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c91e9daa-07d2-4c46-8ebb-b70bf9d57459"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8177e043-b41d-4f5c-9b7f-6d418ec0d76b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb90fd30-a136-4b81-a4ae-d05bad61603a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d906d28-782f-4e14-8ada-c339661fd6f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff2fb8c1-25d7-43fc-a26d-84a229d389a2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4708a258-9ae2-4a18-9554-2b8b99b69aa9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3f413596-f022-49cb-8e4f-411c71edcaaa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2e576ab3-c378-41e1-82bb-f47d08d1d779",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2d2bd29c-7808-4759-afe0-59dfa6378b4e"
            }
          }
        ]
      },
      {
        "id": "f762da52-7127-45d2-8ab0-bc9618049372",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "da8cfd80-2c33-479c-8623-a2042ee5ff53",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4e1ac6f8-a572-48ea-8cf8-56dc058ce162",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3faf8a76-d587-4cef-9b6f-cb393e4bca28",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "640db6f5-0ffe-4ed9-885a-f932d491fc12",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8027d7d0-af31-4c6e-91f0-21ff1c7659ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdc7ee42-05ba-4d92-a7bc-003602fc763e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7a3a3900-9293-49c5-b666-22d44a794aa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1058654e-91e5-425e-a15e-e2b23d100804",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38737d00-2485-4be6-b5e5-b77a757cb650",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "da07b2d2-5f43-42d4-b595-71d5aa83e068"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd218d46-d3bd-48e0-9f48-416a6d248d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3c2c236d-88e0-46a1-b04b-8308fef327b3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e16c1250-0ea2-4b43-b944-df66c759cd08",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6147bb68-72cf-4797-bc40-cede3c563c8c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a9ad6721-f309-4268-893b-db8bca53faa0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b88c3082-e59d-47c0-80df-9458fd518725"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f220cc06-615d-4fec-bbb6-9de5d70332b0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "17657b4b-4661-4606-a115-99e5a46ee097"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f8f486a1-c3ed-4ba0-9e68-0a547b290f49",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ca49c598-7dc4-49d7-ab40-e06215786cd0"
            }
          }
        ]
      },
      {
        "id": "a19ebf01-50c1-47f2-8642-b6adddbfbb52",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "acc52515-9460-4405-ba3f-dbc6ce5ff544",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "719f7f2f-420d-438c-a32e-e54937b6b4e7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c59882bc-98d5-4b02-804f-167f8b19d0f0",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ec6704f7-25d7-43f0-823f-2a146f81afe3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4c2ecfb0-3237-4733-bb5c-f4eb58ebd541",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 279.63706563706575,
      "responseMin": 21,
      "responseMax": 8330,
      "responseSd": 821.2221325917695,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1677777458147,
      "completed": 1677777541232
    },
    "executions": [
      {
        "id": "72c51312-5846-4e03-86cc-7c1f89a92672",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6ff3d289-ee23-46c5-a38b-8c33bbc22034",
          "httpRequestId": "7d6533d2-e03a-4bcd-ae2d-baf1df22d82e"
        },
        "item": {
          "id": "72c51312-5846-4e03-86cc-7c1f89a92672",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "931543aa-05d3-4bc4-acac-927f13fdc884",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 0
        }
      },
      {
        "id": "0dcdcb9c-1b7f-442d-81c5-572caaf19c90",
        "cursor": {
          "ref": "9698764e-9723-4f11-b7fb-024c32874150",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a6ab48e2-ef4e-40f2-a1f7-ead48bc32ff2"
        },
        "item": {
          "id": "0dcdcb9c-1b7f-442d-81c5-572caaf19c90",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "a6e347bf-eeca-403e-84f7-49df97a12c92",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "ffcc6ca1-ab7a-4bda-8556-8794ff85da11",
        "cursor": {
          "ref": "ed53bba7-c39f-4685-993f-072958b7d153",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8f938f79-5a94-4454-ad8b-2bde12f729a9"
        },
        "item": {
          "id": "ffcc6ca1-ab7a-4bda-8556-8794ff85da11",
          "name": "did_json"
        },
        "response": {
          "id": "dd03e164-b15e-4076-af06-d798b685f993",
          "status": "OK",
          "code": 200,
          "responseTime": 458,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b75eac2b-e6fa-4b86-8313-5cc7056875da",
        "cursor": {
          "ref": "84e39e96-89f9-4399-a354-7dbe47a2f94b",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4fbe8844-b74f-43ba-b4f9-a076376ed76e"
        },
        "item": {
          "id": "b75eac2b-e6fa-4b86-8313-5cc7056875da",
          "name": "did:invalid"
        },
        "response": {
          "id": "97e07a5f-ea65-46f7-980d-1520aca23861",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1635,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "b75eac2b-e6fa-4b86-8313-5cc7056875da",
        "cursor": {
          "ref": "84e39e96-89f9-4399-a354-7dbe47a2f94b",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4fbe8844-b74f-43ba-b4f9-a076376ed76e"
        },
        "item": {
          "id": "b75eac2b-e6fa-4b86-8313-5cc7056875da",
          "name": "did:invalid"
        },
        "response": {
          "id": "97e07a5f-ea65-46f7-980d-1520aca23861",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1635,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "f9d88524-dd74-4b15-9371-e1bad54640a7",
        "cursor": {
          "ref": "0263d7cf-3ef9-4323-84c7-7b4473d8bbfb",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "67d216a9-5722-46e8-811a-caa08051501f"
        },
        "item": {
          "id": "f9d88524-dd74-4b15-9371-e1bad54640a7",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "1772f81a-b651-4381-a63a-aefbe8f4777f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 62,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "725d5312-2eee-40df-898d-2f9e66461051",
        "cursor": {
          "ref": "1718d32a-cc18-405f-a14b-249b460556e2",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2deae56a-749b-443f-856a-0f35bc8513d2"
        },
        "item": {
          "id": "725d5312-2eee-40df-898d-2f9e66461051",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "2ddcf76d-d436-4a56-b044-0e0496e26c2a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 64,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c65b8526-f051-44fb-b7e7-62de99e4e12d",
        "cursor": {
          "ref": "243f7e5c-d8e7-4b38-bfca-261bc1a8ef6c",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "496eb03c-d14d-4731-a77f-b26f166f052c"
        },
        "item": {
          "id": "c65b8526-f051-44fb-b7e7-62de99e4e12d",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "a64c5981-3f23-4052-b384-b037515229f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "133dad85-c65d-4cb7-a8eb-81437a16fda7",
        "cursor": {
          "ref": "1bf4f380-8114-4836-8622-ddf23519022f",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "071f6663-beed-4bac-afc4-ee965e56c396"
        },
        "item": {
          "id": "133dad85-c65d-4cb7-a8eb-81437a16fda7",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "5f46de76-464c-420c-98c4-0df4b55c886b",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "133dad85-c65d-4cb7-a8eb-81437a16fda7",
        "cursor": {
          "ref": "1bf4f380-8114-4836-8622-ddf23519022f",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "071f6663-beed-4bac-afc4-ee965e56c396"
        },
        "item": {
          "id": "133dad85-c65d-4cb7-a8eb-81437a16fda7",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "5f46de76-464c-420c-98c4-0df4b55c886b",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "3768b42b-db2a-4a21-a12c-271a23927d3f",
        "cursor": {
          "ref": "602bf55d-1266-459e-8f33-cae8cefcc0db",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "7eae3eb1-4434-4a9b-bf32-a25591065c88"
        },
        "item": {
          "id": "3768b42b-db2a-4a21-a12c-271a23927d3f",
          "name": "identifiers"
        },
        "response": {
          "id": "9d44d174-2207-41a6-a0a5-35b347ff08ef",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fda7983-3e46-43f5-918c-3384640956d5",
        "cursor": {
          "ref": "5feee47c-2868-4bc0-a96d-e8ac9cf4ed57",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6f393dbb-ecb2-4bab-bc04-a5e4c4c026ea"
        },
        "item": {
          "id": "9fda7983-3e46-43f5-918c-3384640956d5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "fae5caf0-4c45-4b88-a09a-ef3b1fd5d5f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fda7983-3e46-43f5-918c-3384640956d5",
        "cursor": {
          "ref": "5feee47c-2868-4bc0-a96d-e8ac9cf4ed57",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6f393dbb-ecb2-4bab-bc04-a5e4c4c026ea"
        },
        "item": {
          "id": "9fda7983-3e46-43f5-918c-3384640956d5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "fae5caf0-4c45-4b88-a09a-ef3b1fd5d5f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "489cab59-d0a0-41b2-aac3-b4241d638491",
        "cursor": {
          "ref": "509f1bf2-a23b-40fd-b7f6-b374fe873d7b",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e96b19ca-5a9b-4366-b981-c9c40b38cee7"
        },
        "item": {
          "id": "489cab59-d0a0-41b2-aac3-b4241d638491",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d7f1b8c0-a362-4dc1-b5df-84ab5528c004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d57a61-8bba-4bbf-8cc7-9fd2f46e144a",
        "cursor": {
          "ref": "b8411097-5400-400c-8f90-716913786245",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0bed4766-9dee-4d3a-b985-48697c078bb1"
        },
        "item": {
          "id": "62d57a61-8bba-4bbf-8cc7-9fd2f46e144a",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "10d44f3d-bc15-408b-881e-1d5642a131ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3442fe1e-39e6-463c-b61c-19435e15b15e",
        "cursor": {
          "ref": "d6a46b4d-7730-41c4-90c3-811561a986be",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "1dfbc235-8c60-40b4-bef2-b38f0009d11c"
        },
        "item": {
          "id": "3442fe1e-39e6-463c-b61c-19435e15b15e",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "360d3bbf-f38a-4c35-86db-84a55cee34f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02f706cd-906e-4953-87c4-7d655e53d6b6",
        "cursor": {
          "ref": "3e4a0f13-bcae-4819-a95c-f73d550718eb",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e2f472ab-81c3-46bf-8af7-8bb72a93ccbb"
        },
        "item": {
          "id": "02f706cd-906e-4953-87c4-7d655e53d6b6",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d89a800f-eb90-4a5e-80f7-53fd0cb0d86d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e87f1e2b-4c50-4ae8-a521-845c9f22c293",
        "cursor": {
          "ref": "b14394d8-42ba-45f1-854f-73c436150f3b",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e1457a16-4837-4fd9-9d6e-266e2e4af185"
        },
        "item": {
          "id": "e87f1e2b-4c50-4ae8-a521-845c9f22c293",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "6fe2bf57-bf6d-41e2-8539-d7ede15f9374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "526bac09-b09f-487b-b8e4-20086cc0de87",
        "cursor": {
          "ref": "6fdeaf17-8f3f-47f9-83a8-f152789b0edd",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "f2b846b0-5797-4633-a22f-65cc146b856d"
        },
        "item": {
          "id": "526bac09-b09f-487b-b8e4-20086cc0de87",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "6acfcb0b-c719-4167-b63d-fe48eec705c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feee8338-21dc-43ac-8d64-bc1f12bef2e1",
        "cursor": {
          "ref": "0885d175-9107-4d43-bb04-af257d4b7aa3",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "effb1a73-f6a2-4afb-85bd-23bbd0a961e4"
        },
        "item": {
          "id": "feee8338-21dc-43ac-8d64-bc1f12bef2e1",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "5a4eb637-10b3-4c84-9cc4-fd22039e76f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18690a71-807e-4e99-8d54-1282531bb4bb",
        "cursor": {
          "ref": "cb9a2936-9fa5-4f0b-b4d2-834fb49cafa2",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "2483c6a3-c713-4379-ae1d-7cd2703fcbdf"
        },
        "item": {
          "id": "18690a71-807e-4e99-8d54-1282531bb4bb",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "533d4658-a302-49cf-bb78-a2abdfe96c28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa2b4d56-2b83-41e2-9457-edb4f2610654",
        "cursor": {
          "ref": "eb320ee1-ce97-446c-9b16-8f1e19547b4f",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "a7aec471-92e9-4ed9-a597-ef3fba7eadbf"
        },
        "item": {
          "id": "aa2b4d56-2b83-41e2-9457-edb4f2610654",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f2a71aff-062d-4bcc-8de9-c9ad4430a452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2fdb505-e2ad-4c14-8559-f52906a808bb",
        "cursor": {
          "ref": "600dda6b-4298-429b-940b-95c14640b071",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3a12926c-4412-48ca-a522-a43f60617fec"
        },
        "item": {
          "id": "d2fdb505-e2ad-4c14-8559-f52906a808bb",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "76989206-a74e-47a4-8740-3ec1fdf3f992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2410040b-0ab6-4eab-b1e7-ca1aef65657c",
        "cursor": {
          "ref": "efcbbc41-6a64-4476-a546-dc6c8fb9a6e4",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "7e648414-b316-4ac9-933b-4949ef59b91b"
        },
        "item": {
          "id": "2410040b-0ab6-4eab-b1e7-ca1aef65657c",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "9f68686b-d941-4ff6-9bd7-dbf059a1c7fe",
          "status": "Created",
          "code": 201,
          "responseTime": 604,
          "responseSize": 996
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "074ba9ef-2c3b-4c20-9d2b-ea4e765d2209",
        "cursor": {
          "ref": "73fb5679-071c-4860-bffa-ad5cd1376e24",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "4250873c-509a-4cc1-8b29-5fd8dc6487a7"
        },
        "item": {
          "id": "074ba9ef-2c3b-4c20-9d2b-ea4e765d2209",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "6a5e029b-a395-4119-999c-02773193111f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a68fe7e2-42db-47ad-937f-65d5b2cee45b",
        "cursor": {
          "ref": "e23d6467-d865-4155-84a4-4a1f8b837302",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5a5c86fc-5036-4717-ac78-3edd8c4dbaf0"
        },
        "item": {
          "id": "a68fe7e2-42db-47ad-937f-65d5b2cee45b",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "de07cfea-7db8-4431-af91-ca0ec387816d",
          "status": "Created",
          "code": 201,
          "responseTime": 4911,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "c6e2c7e4-2f56-43ec-a0de-9ee9ad6d3f7e",
        "cursor": {
          "ref": "55ed6268-f815-4596-af99-ec7e5bc28d0d",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "97bda249-0133-4dea-b8c0-7bc880997349"
        },
        "item": {
          "id": "c6e2c7e4-2f56-43ec-a0de-9ee9ad6d3f7e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e2dfed71-b739-48fe-9cd6-9b5854df98a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e269dff6-de01-46ee-98f1-cc52aae83b2e",
        "cursor": {
          "ref": "4a70574d-82e1-4bd2-aa2c-42ea1d8d36b1",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ca98d96c-19c4-417d-a13b-e8dbd1e391f9"
        },
        "item": {
          "id": "e269dff6-de01-46ee-98f1-cc52aae83b2e",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "feea9f72-049a-449d-81db-64b9ba2c2969",
          "status": "Created",
          "code": 201,
          "responseTime": 8330,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "4d85be45-4cfb-4014-a58a-6ea0074ab386",
        "cursor": {
          "ref": "1a4c8089-734c-4b11-adae-efaebe210d90",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7c4b9898-060b-40f5-a1bd-a1c28871fc12"
        },
        "item": {
          "id": "4d85be45-4cfb-4014-a58a-6ea0074ab386",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "bbb74be4-f3f1-4610-9c73-0fed310a86de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab6b9795-8115-4b94-a54c-b6084111060a",
        "cursor": {
          "ref": "784323b8-ad51-4c31-8107-907ff39fa4d4",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "cbc60653-f0f9-4405-9c9b-9e581e98d959"
        },
        "item": {
          "id": "ab6b9795-8115-4b94-a54c-b6084111060a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a1c7ed42-6647-4bf4-9dde-d2aadb04dac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 169,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74f88896-9e0f-4da1-becb-ba609e209796",
        "cursor": {
          "ref": "b8dc87c5-027e-4f6c-9ae5-4e4119f98c7f",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e0dd9360-4f78-4a18-85e5-7a67dccc8fd9"
        },
        "item": {
          "id": "74f88896-9e0f-4da1-becb-ba609e209796",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "d6d820c4-bb92-46f8-9d85-40f9cedc8ff9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff8aa552-5156-4f4e-a59b-ff998120e1c8",
        "cursor": {
          "ref": "f818075a-53cc-41ea-b701-a7ea67463bec",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "502e05bf-e867-45a2-8ce9-a286daf0577e"
        },
        "item": {
          "id": "ff8aa552-5156-4f4e-a59b-ff998120e1c8",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "199b5788-595c-4965-bf68-428c171459f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fb67a5e-b6a2-415c-91f6-11d2761e12dd",
        "cursor": {
          "ref": "657900d9-93d4-484b-b20c-a0524d60cffb",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e8c3f242-47aa-49bf-ab99-e217b091be43"
        },
        "item": {
          "id": "8fb67a5e-b6a2-415c-91f6-11d2761e12dd",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "640c7881-e3c4-4aae-94c4-a0c4d41bae89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d920b9cd-972a-44da-ab9e-1117fbc5922e",
        "cursor": {
          "ref": "151cf746-b06e-4f03-9322-273fe5998fd5",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "1b102c53-455e-44cf-84b1-96001e239053"
        },
        "item": {
          "id": "d920b9cd-972a-44da-ab9e-1117fbc5922e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "da70eee3-90f0-4485-98e3-32797fc3856f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "232407eb-19c5-41b6-a984-5d6236f9bc04",
        "cursor": {
          "ref": "a39d1b46-801b-4a33-870e-6dfe0a0a577f",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "53269760-051e-4af4-b8a3-6bf6334223f0"
        },
        "item": {
          "id": "232407eb-19c5-41b6-a984-5d6236f9bc04",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "87f36c73-458a-46b1-9430-c4d25bdd3b79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84c5957e-eaae-4786-9565-df68c66fe0c5",
        "cursor": {
          "ref": "3c796e0d-6b6f-480f-8255-85ec7cf2a66b",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1fb79b98-3007-4d39-a698-caf751b44325"
        },
        "item": {
          "id": "84c5957e-eaae-4786-9565-df68c66fe0c5",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "4860ae6a-b00e-412c-87ec-2c037523eb99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bf16a06-114c-4be6-ab87-07fdf3d13304",
        "cursor": {
          "ref": "e50d83ff-d64d-41e8-ac17-d3d27f7c4485",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c24397c9-62dd-428d-b6c3-9889e64ed478"
        },
        "item": {
          "id": "5bf16a06-114c-4be6-ab87-07fdf3d13304",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "70b06e40-d9c7-4189-8d50-611a79e6b01f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10f241f9-80e5-4354-9f83-a9e7c2d669b2",
        "cursor": {
          "ref": "4400406f-68f8-4fb9-a1c4-723449d5d0b9",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "55c97a6b-15d6-426a-b4a7-c33a34bf5433"
        },
        "item": {
          "id": "10f241f9-80e5-4354-9f83-a9e7c2d669b2",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "94b99339-a459-4648-b677-7e4a3921fc6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b00fe593-97f6-47aa-9be4-ae9a8fe37857",
        "cursor": {
          "ref": "ea0c69f9-29ec-468c-9102-38fc988133df",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "6d288463-292c-4126-86ba-6b066cc1bd29"
        },
        "item": {
          "id": "b00fe593-97f6-47aa-9be4-ae9a8fe37857",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "3b83590c-1d1d-4f8e-a5b7-d00487e5dc99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dde89fa6-3c0f-4383-9b22-e15daba027cf",
        "cursor": {
          "ref": "54f22d87-c5ae-4677-a38f-cf5e31d4f671",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ceec4fae-9c1c-493e-9dae-1e1dc6ad4181"
        },
        "item": {
          "id": "dde89fa6-3c0f-4383-9b22-e15daba027cf",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "99f44267-7932-4a5d-be62-7a0b6ce9ad42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68ebafd7-8774-4079-88ec-fc2e9baaad26",
        "cursor": {
          "ref": "faee6ee2-428d-4aeb-87d2-17ff38dba855",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "4a70b4db-dfba-44f4-b61f-9890ee2ffef7"
        },
        "item": {
          "id": "68ebafd7-8774-4079-88ec-fc2e9baaad26",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "d94074ea-19ae-46e1-9a29-a0ca0219af96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa076291-c4db-4b7d-8c86-94549708bc8d",
        "cursor": {
          "ref": "c6e7a475-3d94-4dd6-ace9-367ce61d4255",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "5f828b20-7496-4a52-ae30-4120d85f93ef"
        },
        "item": {
          "id": "fa076291-c4db-4b7d-8c86-94549708bc8d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ed085db4-340f-42c5-9bf7-2b87a87d6f7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "033a589c-bdae-4d39-907d-548e8d2a1957",
        "cursor": {
          "ref": "94de3f84-937a-4417-ae40-864034cc152b",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "2c310c3d-f770-4b26-9349-ce71bf7d042d"
        },
        "item": {
          "id": "033a589c-bdae-4d39-907d-548e8d2a1957",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "3b62027f-5ecb-4f67-bea9-8fd724aa70b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3fef0f1-48c1-476f-a977-c245eac700e4",
        "cursor": {
          "ref": "9c6d6a00-e935-4044-a5a3-84ccb37325f6",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "aa9bf0e9-e7cd-49ad-931f-791cea0c73fc"
        },
        "item": {
          "id": "b3fef0f1-48c1-476f-a977-c245eac700e4",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "66fdf3f7-8c83-41ba-9155-2fd0c00c7fe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d241758-835f-42e8-ab56-53db58d0fd57",
        "cursor": {
          "ref": "f4ad2fc0-8354-4b0e-8d05-50f16913709b",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5a153214-fc82-4dd4-a563-416b40039525"
        },
        "item": {
          "id": "8d241758-835f-42e8-ab56-53db58d0fd57",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "bea00662-55cc-4ebf-8f72-0f6e25f4619b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebff1032-8e42-474e-8dbe-783e86328a65",
        "cursor": {
          "ref": "72157a88-1e89-4610-82b6-0241d41279b4",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b9289297-a916-4a77-9a2e-562f64a932e1"
        },
        "item": {
          "id": "ebff1032-8e42-474e-8dbe-783e86328a65",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "54b73b11-4ba6-4423-b9be-9a0b47af4f3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c5bf7f3-15dd-4fa0-b77f-3b132e267644",
        "cursor": {
          "ref": "9423c963-6892-48af-9a69-30fb3aa1dba1",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0680aa8d-47eb-4204-8358-d50e705870f4"
        },
        "item": {
          "id": "3c5bf7f3-15dd-4fa0-b77f-3b132e267644",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "a15aa645-e8a1-4efc-93cc-12236ff264c4",
          "status": "Created",
          "code": 201,
          "responseTime": 2887,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "f5a01d87-ec1b-40a6-a36a-fab6d0d1d3b9",
        "cursor": {
          "ref": "a8c86fb0-2d14-4caa-b284-6e4685d57242",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f4f2c02e-03f4-41ac-acf5-929c11e5a8f4"
        },
        "item": {
          "id": "f5a01d87-ec1b-40a6-a36a-fab6d0d1d3b9",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "326a01c6-892a-4f20-a48e-3cb93020f791",
          "status": "Created",
          "code": 201,
          "responseTime": 2644,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "299b2591-f1b9-4b84-82a0-be9d110145cf",
        "cursor": {
          "ref": "ba984d0d-cbca-4ff3-b2dd-358f99b27a2f",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6adb700d-5264-460b-9b9f-b9cb5f569259"
        },
        "item": {
          "id": "299b2591-f1b9-4b84-82a0-be9d110145cf",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "cb4b4b19-ad72-43b7-aa54-9c84e9ac231f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 140,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67ff1eba-7ebf-49a1-9a1d-774eacd3f708",
        "cursor": {
          "ref": "897a1ed7-dac1-4d3c-ac07-a699996dc79d",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1976037f-cef6-4a81-8d48-b1081a1bbc9b"
        },
        "item": {
          "id": "67ff1eba-7ebf-49a1-9a1d-774eacd3f708",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "56d2d4df-af25-4f9d-b5f9-bd53328ad9a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30cea915-2853-470b-8a1a-80ce27a3b4e7",
        "cursor": {
          "ref": "143e06d9-c6a3-415d-9223-7c473b0f7a3e",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "dc9c9ae7-4687-4ea2-9f85-f1b5cebd0a86"
        },
        "item": {
          "id": "30cea915-2853-470b-8a1a-80ce27a3b4e7",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "cd1ad093-79e4-4e8f-bfbc-2d3654143029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5767731d-f22f-46e1-a83c-c11b5db46b4a",
        "cursor": {
          "ref": "dc7fa9b3-365f-4368-b514-e3231ee9fa1e",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "da922be1-ea65-4c97-86a2-a419b7910f71"
        },
        "item": {
          "id": "5767731d-f22f-46e1-a83c-c11b5db46b4a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "14a985ad-cd1b-4ff2-8446-890084872b08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e70b0345-745b-4cdd-885e-42bf5557bf57",
        "cursor": {
          "ref": "0530afa5-1e4d-475f-86d2-83259fd99c2c",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "d8bf1ace-283e-493f-943e-0fc68db1a137"
        },
        "item": {
          "id": "e70b0345-745b-4cdd-885e-42bf5557bf57",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e105f092-4208-409c-acc9-a378b62ad1ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab617b2d-f075-4648-8966-6e4bf0f323fe",
        "cursor": {
          "ref": "993e1659-a30e-4451-8339-a5816f73c61e",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "4e6c4706-0900-4ee1-841a-68d6fd42dfa7"
        },
        "item": {
          "id": "ab617b2d-f075-4648-8966-6e4bf0f323fe",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "306e2835-0089-4735-b399-c2948a1e3747",
          "status": "Created",
          "code": 201,
          "responseTime": 2731,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "9ffa255f-082f-413d-93a9-140680960db8",
        "cursor": {
          "ref": "50fa97e3-0742-40a5-adce-a8875a7f0233",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "8ec92e18-986a-47eb-8db5-ce9fe281475d"
        },
        "item": {
          "id": "9ffa255f-082f-413d-93a9-140680960db8",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "9d26cd86-f3d4-4101-a1dd-9e7667e29e15",
          "status": "Created",
          "code": 201,
          "responseTime": 2719,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "b2284a3b-47f6-4480-bb00-8ac648c293fc",
        "cursor": {
          "ref": "21913abc-c867-4b47-82f3-8289070b2ae6",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "9ff673b9-4346-49bb-af67-5f949c174ec5"
        },
        "item": {
          "id": "b2284a3b-47f6-4480-bb00-8ac648c293fc",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "755eed2f-ac63-476a-ac0b-b5e1f1aa283e",
          "status": "Created",
          "code": 201,
          "responseTime": 2687,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "00649b7e-f753-4c2f-a927-3d455a5ac80a",
        "cursor": {
          "ref": "6ed7c7f6-a7ce-4464-87b0-6172c32af9ff",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d8c811cf-8dc2-4b13-9be5-5a0caa0a6955"
        },
        "item": {
          "id": "00649b7e-f753-4c2f-a927-3d455a5ac80a",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "f22ebe02-d2d6-45b8-97cc-b4d6bbcf1b84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54e3b923-582e-4573-937d-c6ca6e92d72f",
        "cursor": {
          "ref": "7f39bf57-e663-4bf7-a700-f7b9e54d747f",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b3089013-bae3-41c0-881c-1b38d1f3a836"
        },
        "item": {
          "id": "54e3b923-582e-4573-937d-c6ca6e92d72f",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "78341fd5-36b9-415d-a470-54f90943f7a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "612ea310-d5eb-4550-88e0-2e90311172da",
        "cursor": {
          "ref": "d6ac2878-7576-4d58-b2e4-5df8262484b0",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "c7e4a1ae-78fe-4eaa-9dd1-3a32fcc58523"
        },
        "item": {
          "id": "612ea310-d5eb-4550-88e0-2e90311172da",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "76b09699-703f-4253-851a-9839f18a2fc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4265b763-f62f-42e7-a947-9155f99cf975",
        "cursor": {
          "ref": "743731dc-a85c-4fb0-84b8-e1e0fadf1660",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "dfec7113-4c05-4d8c-a11c-8058b58f2b2b"
        },
        "item": {
          "id": "4265b763-f62f-42e7-a947-9155f99cf975",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d554e852-a444-49d9-a002-d7cba492c16d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "452dae55-3f88-4957-bda6-db9dc808b07f",
        "cursor": {
          "ref": "a59cba52-7b8b-425b-bc97-e2679633887c",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "43bf6e7d-3181-441d-aef9-8e96e979ef21"
        },
        "item": {
          "id": "452dae55-3f88-4957-bda6-db9dc808b07f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "ca81c494-d17f-42a4-9d43-9d827a57c220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dc73539-38b1-4551-b82e-3b4acb313a06",
        "cursor": {
          "ref": "363b26d7-2410-4af3-bb97-11a6311c5d0b",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "30484f55-cefa-4e52-9123-ee729d72c140"
        },
        "item": {
          "id": "7dc73539-38b1-4551-b82e-3b4acb313a06",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "eb048068-963d-47ff-8291-d8610a3e2f07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ff5f0ae-55a6-488e-be74-6a58a6c66772",
        "cursor": {
          "ref": "98c7851f-c6c7-4579-b2f2-24ba80178ebd",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d357e504-ffd7-4cc0-bdc1-bcd6a4087788"
        },
        "item": {
          "id": "0ff5f0ae-55a6-488e-be74-6a58a6c66772",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "eb3a6813-726c-4dcc-8ec9-456f0871c3af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a19fc6ae-2a06-438f-a321-884fce28ac19",
        "cursor": {
          "ref": "ba1a4a48-b391-4d77-95ae-e4dd3abedc2d",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e02de063-3f2c-4814-9fca-eb787ea2f0f5"
        },
        "item": {
          "id": "a19fc6ae-2a06-438f-a321-884fce28ac19",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "02d2301e-ef67-4273-b5ff-3c0ce94389c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd82295d-611a-41e1-9efc-e5798b0954a3",
        "cursor": {
          "ref": "8f990deb-b3ab-4d7e-a8bb-f9ce2c8b126e",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "0c5afc6b-3045-42e7-9d87-f58951ee4075"
        },
        "item": {
          "id": "dd82295d-611a-41e1-9efc-e5798b0954a3",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "1caac78b-3bcc-45b2-b48e-ba25e42f5f88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 576,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87881ad8-4e82-4d05-9824-5283408d67c5",
        "cursor": {
          "ref": "9641dbd2-68bb-447a-8ebc-ab79638f7ac9",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "1abe554e-b420-4332-b744-9f02105c5dc6"
        },
        "item": {
          "id": "87881ad8-4e82-4d05-9824-5283408d67c5",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "f2d4b70f-fd57-4db0-ab58-eeab37797557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95007f71-4b0d-4bf9-99aa-0fffdab5c8a7",
        "cursor": {
          "ref": "0abe3a54-814d-4206-8c9a-5193e83ce257",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "82f24599-c3d2-4e35-a5bd-ec7877ad08a3"
        },
        "item": {
          "id": "95007f71-4b0d-4bf9-99aa-0fffdab5c8a7",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d68273e0-8f0f-4117-abae-08e9aa880382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8685247c-8f7f-40af-ad96-33586b8e9ba8",
        "cursor": {
          "ref": "e10a934d-95da-4500-87a6-d88322ab0acc",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e7070f3a-66ee-4c53-9a8e-fedb8ac30e79"
        },
        "item": {
          "id": "8685247c-8f7f-40af-ad96-33586b8e9ba8",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "bf56b52e-364c-4c4f-8f37-b0929d20ebe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa211889-dd63-4389-a0fa-b2eafeced4de",
        "cursor": {
          "ref": "2ac4c292-ea66-4b11-8513-71629b95c20e",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "987e8465-1ce2-4f6a-b579-80de6f02a9cb"
        },
        "item": {
          "id": "fa211889-dd63-4389-a0fa-b2eafeced4de",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "1ad1bcad-ceda-4932-a83a-d8a0a01c698e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd66b424-c79d-4898-a011-70dd222eed57",
        "cursor": {
          "ref": "1fa54164-c25d-46e0-86f2-1e5930bf2b21",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "7a177814-0fec-42a2-abaa-3bfe4d42b79a"
        },
        "item": {
          "id": "bd66b424-c79d-4898-a011-70dd222eed57",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "68fc098c-2403-4732-8252-c5a65d9e9319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d8437fc-f762-4d59-8524-80455004ce2e",
        "cursor": {
          "ref": "c866f624-d6c7-4643-9658-cc94fe2c36a0",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "3da46330-320e-40c1-b5b2-4e945694899b"
        },
        "item": {
          "id": "8d8437fc-f762-4d59-8524-80455004ce2e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "0b37ae36-cf34-4117-af66-bce9865549ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94ae90e2-42a7-4ba7-a192-e39ba9904cd6",
        "cursor": {
          "ref": "7e9e6f54-57d8-4090-8fb1-002f5e43b4b1",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "174ac1e8-df73-4ce4-8553-2ffef3183b7f"
        },
        "item": {
          "id": "94ae90e2-42a7-4ba7-a192-e39ba9904cd6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "0dc1a436-479b-463e-a8df-69521bfbbd26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0b37e11-3f53-4ae5-84b2-132398307b1c",
        "cursor": {
          "ref": "a4a90a44-dff4-4869-8391-b10c71c85d65",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a8de8ea2-b1e1-43c1-9772-7285518762bd"
        },
        "item": {
          "id": "b0b37e11-3f53-4ae5-84b2-132398307b1c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "6aa49729-1437-4a1b-900e-edcade2cb7da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24007953-8bf8-439e-866b-271be55c81e9",
        "cursor": {
          "ref": "79449175-f2ed-44e7-a7c5-c8893cf95e0a",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "a9f8339a-90d4-4e71-8a59-fd00ea4a8c9a"
        },
        "item": {
          "id": "24007953-8bf8-439e-866b-271be55c81e9",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "876d3111-69a8-41f8-9450-db5434140ef1",
          "status": "Created",
          "code": 201,
          "responseTime": 1926,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "e58a1b47-d1a3-4060-8a66-546ec552ed78",
        "cursor": {
          "ref": "47853a2d-0c27-40a1-8f68-961c5be97123",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "6c8edbe3-65d4-411a-b54b-a4e1d8f06005"
        },
        "item": {
          "id": "e58a1b47-d1a3-4060-8a66-546ec552ed78",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "32a8b71c-08e5-4292-bb99-a3fb291afd01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52464038-bd0e-47a3-9fdf-a2e54cfd4076",
        "cursor": {
          "ref": "9afefc58-f52d-4ec7-94c3-9051cee7760f",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "cbfd2471-146b-4ec6-9d0d-0714ecb015d7"
        },
        "item": {
          "id": "52464038-bd0e-47a3-9fdf-a2e54cfd4076",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "2ae2d2a1-51f4-4caa-88d6-ba589733545c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0aae713-fc77-4d7a-b1e9-518f5f512463",
        "cursor": {
          "ref": "53e76ec3-b323-4d18-8a15-3be124e9e29c",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "b08c0e1c-32dd-47d2-91d2-e70099df993d"
        },
        "item": {
          "id": "e0aae713-fc77-4d7a-b1e9-518f5f512463",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "a65f933e-be50-4864-9108-a042dbfe5789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d167ba90-db42-4aae-93e1-80c7577af54e",
        "cursor": {
          "ref": "5c852607-c0da-4874-84ea-703691b6991f",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "c64a5c78-4515-46a4-af96-c3f2b0e3bc4f"
        },
        "item": {
          "id": "d167ba90-db42-4aae-93e1-80c7577af54e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "e4ec2f43-2cb5-456a-9163-62aa0bacaea8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0554d1e1-789e-48d1-a377-0db75c8cf50e",
        "cursor": {
          "ref": "04a5f33b-161d-4646-be67-dc0442799a07",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "cadaa3b6-dad2-415b-8a27-e44527391e89"
        },
        "item": {
          "id": "0554d1e1-789e-48d1-a377-0db75c8cf50e",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "95d5f37e-230d-4f6b-bc14-e8915391eac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6136fccc-f05a-4261-9872-c233d334e35f",
        "cursor": {
          "ref": "d1d7c6c0-b860-48e1-930b-0067014e8715",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "999e9409-29a3-401b-a0e7-39b7e672f7f9"
        },
        "item": {
          "id": "6136fccc-f05a-4261-9872-c233d334e35f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "34639bda-5fda-4872-a32f-bbf2f44c26e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38fab76c-4097-426d-b6dc-f62478dafa2a",
        "cursor": {
          "ref": "67e4bec8-88ac-4ef0-bab4-9b9844df1c48",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "839079a2-12f7-4bb1-a9d9-07bbfeec0a65"
        },
        "item": {
          "id": "38fab76c-4097-426d-b6dc-f62478dafa2a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "64515790-b296-4048-8023-fb89aa3585b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28dfdc65-c71c-41e9-b44a-ab41eaaab311",
        "cursor": {
          "ref": "401a3167-6ac7-4211-8127-be8d1c35657e",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "0734cf13-2aca-49b9-b6c6-9c6f00c4d601"
        },
        "item": {
          "id": "28dfdc65-c71c-41e9-b44a-ab41eaaab311",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "ef1e80c1-b7df-4c70-9c2e-58af34a615bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36c354b5-85f5-4380-9e80-f21ae7a3e2f4",
        "cursor": {
          "ref": "a9dbf467-b216-4993-bb49-ef82fbb18339",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "f6b2068a-6506-43b5-a7aa-1dac51dbf963"
        },
        "item": {
          "id": "36c354b5-85f5-4380-9e80-f21ae7a3e2f4",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "23fdc464-42ef-4c1f-9bc0-67ce0b421574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4598ebf0-3dc1-4130-afd2-6d9d03537f78",
        "cursor": {
          "ref": "173a3ca5-c7d4-44b1-87f1-0b6c9d3e9517",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f308af11-0415-476f-b26a-c10f1afc7acb"
        },
        "item": {
          "id": "4598ebf0-3dc1-4130-afd2-6d9d03537f78",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "aeea8231-f03c-4601-b3e6-e384c3fe22b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "224fe2ea-ca23-4dad-825c-357c8924e877",
        "cursor": {
          "ref": "5dc2a079-af5b-46e2-aa5f-c8dd62f01f74",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "6a19d7f5-93e0-43eb-9aa5-d90ae35ce7dc"
        },
        "item": {
          "id": "224fe2ea-ca23-4dad-825c-357c8924e877",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "b728ba32-573b-47b8-8d29-3c2188d67ba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5fd27e8-5f36-4de8-bed7-3b1acff468ec",
        "cursor": {
          "ref": "fe390e19-c6f5-4a55-b928-f8b1f905f5fc",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a248fc39-5495-43c7-a17b-83ecfad063b6"
        },
        "item": {
          "id": "a5fd27e8-5f36-4de8-bed7-3b1acff468ec",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "bae0a152-ea13-4f6b-ab0d-197b988afb96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0ba9e54-3000-4054-af94-49a26c0c1c81",
        "cursor": {
          "ref": "2a877083-5914-4798-a8bf-d01f48bc634f",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "6d9d1fba-e362-4d1a-bfac-e64bd1d2625f"
        },
        "item": {
          "id": "b0ba9e54-3000-4054-af94-49a26c0c1c81",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f07efd2b-1fe7-4475-85be-383261f75cfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12b231c5-6714-423d-8e5b-5b44cb5ef246",
        "cursor": {
          "ref": "3bb4e773-444b-4500-af4a-7e51c8608054",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "089ee344-2aa7-4d8e-a278-7121b4c5f731"
        },
        "item": {
          "id": "12b231c5-6714-423d-8e5b-5b44cb5ef246",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "9fd44e81-6f4b-4db1-a61c-b74341dc1e38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4eb8c91-797a-4b09-b82c-2f9a1f5dcedc",
        "cursor": {
          "ref": "d7501c3a-8251-44ef-a4de-6d104e8ab834",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "966f82b9-50b8-4e48-beb4-ebfdf2440875"
        },
        "item": {
          "id": "e4eb8c91-797a-4b09-b82c-2f9a1f5dcedc",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "3c924490-f2c3-4d5c-98d0-53b5d805498b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68967685-3d28-44b8-b151-8de8ddd77873",
        "cursor": {
          "ref": "eb49b008-0a0b-40b9-8a3a-a0278a032241",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "68ad7bac-62ad-4b00-8152-85befcf81d01"
        },
        "item": {
          "id": "68967685-3d28-44b8-b151-8de8ddd77873",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "e86b7947-068d-4176-9918-51b62dfc7fd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd54a114-0843-4539-a372-9c10b0adee09",
        "cursor": {
          "ref": "db73cad9-7a7a-46ea-bbad-3f76880bb6a8",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "33dfccc3-5b7d-45ab-bfc5-29dd95129506"
        },
        "item": {
          "id": "bd54a114-0843-4539-a372-9c10b0adee09",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "917703fa-0357-401c-8911-8acfe1e766ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20b9182c-f1ff-4332-8919-61a8e5f3d7ed",
        "cursor": {
          "ref": "3fc779e7-d14f-4fe2-bea6-d9367f85ac49",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "d5fb48d2-45f0-4621-8b31-c4683062a48d"
        },
        "item": {
          "id": "20b9182c-f1ff-4332-8919-61a8e5f3d7ed",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c86f1a7c-24bb-4674-9aba-765fa108d9e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73a39d5a-e187-491e-aa79-2e06e016875f",
        "cursor": {
          "ref": "1987908d-f48a-4075-a6c0-5530a8e835e4",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "39dc3a6a-16c9-4c21-a29d-36871decef8a"
        },
        "item": {
          "id": "73a39d5a-e187-491e-aa79-2e06e016875f",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ba2f8b3c-a890-42f8-a227-12bef531fdad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80566dc6-0453-4f3b-b8e1-7963b3f31bf5",
        "cursor": {
          "ref": "3e1f16eb-96e1-48b2-bc7d-1b7fc971ecb3",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "539edd6d-4beb-4455-b1fb-55bf563030cd"
        },
        "item": {
          "id": "80566dc6-0453-4f3b-b8e1-7963b3f31bf5",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "f5924ee8-114b-48cf-8aab-26487fb090c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "561d6989-2dd3-48eb-ace4-65ae493037bc",
        "cursor": {
          "ref": "6b8ebaf5-0fda-4183-b051-307cbb284395",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "f6b2b3b9-6935-4d80-a315-10ad4ffaf254"
        },
        "item": {
          "id": "561d6989-2dd3-48eb-ace4-65ae493037bc",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "005de369-19df-4b55-97c0-43b0f051b198",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b98a7c9c-800a-423e-b311-9eb2097e99d0",
        "cursor": {
          "ref": "5192a468-1367-4cd9-9bd9-9b0dec4e1b67",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "b496b1a9-8875-41dd-b5ef-7eab8e08f76d"
        },
        "item": {
          "id": "b98a7c9c-800a-423e-b311-9eb2097e99d0",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "10ead401-57b2-4e20-af57-72de975704a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6352ab86-8db2-4f33-8737-9152e4161343",
        "cursor": {
          "ref": "fe65d5a5-fab2-4d98-aa90-aa249ec5ebf8",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "191587b6-35d1-4937-8e68-54a1b02e3087"
        },
        "item": {
          "id": "6352ab86-8db2-4f33-8737-9152e4161343",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "18eaf3f1-c8c0-42ff-9db8-42ba03186f1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "370c68e3-c88e-43c4-b8b7-594c3c9979e0",
        "cursor": {
          "ref": "67b03d21-3304-4354-97b5-01970e99a28c",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d597011f-a78b-470c-899b-00e78a3e6570"
        },
        "item": {
          "id": "370c68e3-c88e-43c4-b8b7-594c3c9979e0",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "c79f0119-e2cb-4ba8-af34-29f6b2ff60c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "180f6035-1d03-4b35-8b0e-2dbf3765ffdd",
        "cursor": {
          "ref": "521ad544-5068-40df-b102-6e62385ac69b",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "96d681cb-62e5-41ea-9df7-71ec5b27326b"
        },
        "item": {
          "id": "180f6035-1d03-4b35-8b0e-2dbf3765ffdd",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e1828ad0-546a-4bd2-9e3e-b768d910bb98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26b82805-3b51-4035-8533-693d5a60969e",
        "cursor": {
          "ref": "482ce04f-72c2-47cc-982c-23838f13b0c9",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3892da3b-ffcb-4759-b256-d5a50b6834af"
        },
        "item": {
          "id": "26b82805-3b51-4035-8533-693d5a60969e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "02bdb5cd-93b7-4b67-9f59-eb487ddbfd41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2784c11-897b-42e6-b12c-16793851d322",
        "cursor": {
          "ref": "d1d10e37-9742-4158-b210-c2b23dd8e5ae",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f9c9cc19-4cea-4961-8867-1057cc27abce"
        },
        "item": {
          "id": "f2784c11-897b-42e6-b12c-16793851d322",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "d3356283-053e-4cbb-8b78-5a07bceb0350",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aecf935-36c5-49b6-8797-1c3f9482e093",
        "cursor": {
          "ref": "05d59ff5-be0e-4d0b-bc70-bc0663e9cdca",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b65ba09e-de04-4cf6-bfcf-2548190a531a"
        },
        "item": {
          "id": "8aecf935-36c5-49b6-8797-1c3f9482e093",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "dd5b938c-759c-4987-8d5e-5784ddf0736e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d134b2fd-7319-4cc7-b84d-9b570b8e5843",
        "cursor": {
          "ref": "ff61be9e-8b44-479f-b64b-20e4cb64e03d",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "9703b7ef-0f75-47f8-9660-7d50d58e9856"
        },
        "item": {
          "id": "d134b2fd-7319-4cc7-b84d-9b570b8e5843",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a45f3076-1e1b-4032-bf01-800d7bd2bbbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d117630-62d4-4aef-aee9-2e4a0d61874c",
        "cursor": {
          "ref": "d331b14f-0e66-48ce-84a1-f04778a74770",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "71de84dc-3de4-4792-807b-85b96a85d46c"
        },
        "item": {
          "id": "9d117630-62d4-4aef-aee9-2e4a0d61874c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "29dc5f5a-c054-4ac4-92ea-d5c4f0e45759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2705bd7a-fde6-4fe7-9f90-827d601f9e1c",
        "cursor": {
          "ref": "38b322d7-ba81-42b0-8a1c-8ff438e33e46",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "2c39b562-e93e-498f-b757-4f829d20de5c"
        },
        "item": {
          "id": "2705bd7a-fde6-4fe7-9f90-827d601f9e1c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "8b88f95b-70fa-473c-bfa0-2615e5e7a9f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "e52f6932-4b74-40b6-90da-26f3b3943d1e",
        "cursor": {
          "ref": "e9bf8266-d3c8-4039-92e2-b22e07e78d58",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "0b90276e-c282-4cbe-9517-efbdc21f7689"
        },
        "item": {
          "id": "e52f6932-4b74-40b6-90da-26f3b3943d1e",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "cec2a4a0-4c9b-438b-b0c1-f43e2e9f87a8",
          "status": "Created",
          "code": 201,
          "responseTime": 1937,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "40980601-541e-4791-8884-c3cb360ed4c1",
        "cursor": {
          "ref": "89deb338-dcda-4c8e-ae48-214155ac0ef3",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "41d62a2e-9a36-4fc4-9879-15e4964d5524"
        },
        "item": {
          "id": "40980601-541e-4791-8884-c3cb360ed4c1",
          "name": "credentials_issue"
        },
        "response": {
          "id": "850c0d2c-44e5-4acd-a87b-6ef11eb28e48",
          "status": "Created",
          "code": 201,
          "responseTime": 2174,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5a1ad2d-640f-4b89-b7ea-977308b85e7b",
        "cursor": {
          "ref": "e7d72bc5-1579-49f9-8490-ee77820d6121",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "32c42f42-e110-448c-bc9c-e357642bb27d"
        },
        "item": {
          "id": "b5a1ad2d-640f-4b89-b7ea-977308b85e7b",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c9fe91ff-62d7-4b5b-a786-a2c2ffe5b0a2",
          "status": "Created",
          "code": 201,
          "responseTime": 2292,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "85cc26f9-5913-4012-8dac-35b07d8bc384",
        "cursor": {
          "ref": "9ce44b0a-46fc-4d91-a358-bf9f49128110",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f9938087-02ba-4c78-8c2e-c4ee08a677c1"
        },
        "item": {
          "id": "85cc26f9-5913-4012-8dac-35b07d8bc384",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d85da287-0738-4d6c-8772-90927cc3dd35",
          "status": "Created",
          "code": 201,
          "responseTime": 2272,
          "responseSize": 1007
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef2c9765-bb62-434d-8104-ab2570da9ffc",
        "cursor": {
          "ref": "464043ce-876d-4cbd-a22e-a836ac7f3344",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "fc61dbc6-a26a-4f45-821c-9263a4f7b814"
        },
        "item": {
          "id": "ef2c9765-bb62-434d-8104-ab2570da9ffc",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "e0a732c5-3299-4e7c-ba19-2704f7e20852",
          "status": "Created",
          "code": 201,
          "responseTime": 2405,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-03-02T17:18:33Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-03-02T17:18:33Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "dba4f48f-4276-473d-9adf-5d7b652ac018",
        "cursor": {
          "ref": "8871a62c-4709-4b7d-b81c-e74ccc93dd0d",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "94a6d2aa-92ee-4d92-b68b-223501f152a3"
        },
        "item": {
          "id": "dba4f48f-4276-473d-9adf-5d7b652ac018",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "0fbaf877-3745-4d68-b86e-c3792e9daeb3",
          "status": "Created",
          "code": 201,
          "responseTime": 2453,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "43b7ff19-cdd4-46ed-8c9a-b0f4594d80fc",
        "cursor": {
          "ref": "0809fa50-ca1d-4a18-be59-ba64ac4c6594",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "81986699-88e7-4116-8083-ca3fb926501a"
        },
        "item": {
          "id": "43b7ff19-cdd4-46ed-8c9a-b0f4594d80fc",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7bed939d-7504-48cf-8bd8-a08ca5bc786d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43b7ff19-cdd4-46ed-8c9a-b0f4594d80fc",
        "cursor": {
          "ref": "0809fa50-ca1d-4a18-be59-ba64ac4c6594",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "81986699-88e7-4116-8083-ca3fb926501a"
        },
        "item": {
          "id": "43b7ff19-cdd4-46ed-8c9a-b0f4594d80fc",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7bed939d-7504-48cf-8bd8-a08ca5bc786d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d807f15-8497-4c57-b69f-8c09665ca903",
        "cursor": {
          "ref": "b221e20e-acf1-4f55-9fb5-74c0d9995266",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7d898d82-8c8f-4b72-bb9c-61ceecda2e3d"
        },
        "item": {
          "id": "1d807f15-8497-4c57-b69f-8c09665ca903",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "9367ad39-4c2d-4174-8f0e-5d5ffe1a634d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a6feffe-9b71-49dc-9d62-03f557ba5cb9",
        "cursor": {
          "ref": "dadc62ac-c32e-4cf0-82df-9981e2ea1c02",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "c18e8739-c13b-4adc-b473-8dd99af477a6"
        },
        "item": {
          "id": "0a6feffe-9b71-49dc-9d62-03f557ba5cb9",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ed7fce41-6190-4779-aba0-f9d0201cce9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbd69932-1a0d-4b70-880c-5a979c2bdcb8",
        "cursor": {
          "ref": "e7d9ab32-42d4-433f-88be-ef8196241867",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "bebd7c66-e0b9-4fc1-bc71-8888881498b5"
        },
        "item": {
          "id": "dbd69932-1a0d-4b70-880c-5a979c2bdcb8",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "be712a20-bec2-4849-a81a-3f630ac4dd94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4b8277c-c8b2-49f0-9778-738646b6c64d",
        "cursor": {
          "ref": "a1d1c7eb-9045-4e85-91de-40bf0b11029b",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "915af81e-cc22-476a-86e3-75b7f7a3154e"
        },
        "item": {
          "id": "a4b8277c-c8b2-49f0-9778-738646b6c64d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8240de41-78d6-48b7-9f2d-5938d70a5fc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba0ca37c-39cf-4a5b-a399-801ecfd15ba3",
        "cursor": {
          "ref": "68ce9bc4-9d8b-4c5e-9dd7-35fb813fb29b",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "ce24e60a-a852-4350-b52b-461a5fd65da5"
        },
        "item": {
          "id": "ba0ca37c-39cf-4a5b-a399-801ecfd15ba3",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6ee1d1b7-fcd0-431e-ac43-b022eb4f2cb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef6a66e3-e6fe-47ca-86dd-582629f3eec5",
        "cursor": {
          "ref": "c99f84c8-7960-4173-8f5b-0d9cacabd947",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "63c47051-f600-4077-91f6-711efeb81145"
        },
        "item": {
          "id": "ef6a66e3-e6fe-47ca-86dd-582629f3eec5",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f64bda97-9625-445b-abc6-d99344849705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c77f6cc9-f171-4752-937f-d2597db73d44",
        "cursor": {
          "ref": "ba000661-55b8-430e-8e1a-c4f9fe112f7b",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d4dfb953-5a76-46d4-aabb-5178d115b21a"
        },
        "item": {
          "id": "c77f6cc9-f171-4752-937f-d2597db73d44",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "964e509c-82c9-4949-9f88-b1586a90a93f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ab9f657-c7ce-45e2-90e3-e670f874ac59",
        "cursor": {
          "ref": "5a415fcc-777d-4301-af8a-e8ead7e03895",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "539b7081-b1f7-4509-a98e-a5ee4512ed9a"
        },
        "item": {
          "id": "0ab9f657-c7ce-45e2-90e3-e670f874ac59",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "2d990744-e139-4e15-b015-7decfe24cfb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "273ac60f-94a3-4eb6-804a-bee443f9b65b",
        "cursor": {
          "ref": "332d1fa4-4d62-421c-8cc8-f730ad53672f",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "763aa97d-13ad-4c5d-8f11-1e22579a4c0d"
        },
        "item": {
          "id": "273ac60f-94a3-4eb6-804a-bee443f9b65b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "dfaa4a20-2daf-475a-8d18-59a9c0683b68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8578ab5a-615b-478a-96e8-ecf780b175f1",
        "cursor": {
          "ref": "c1823db7-9461-4659-bbea-7acbedd1b178",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ff37a32a-e51d-41f4-8859-bdda3f6f913e"
        },
        "item": {
          "id": "8578ab5a-615b-478a-96e8-ecf780b175f1",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4be812c9-8cd1-4f5b-a1d2-488e55cc6f9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd40bb03-76a2-47aa-87b1-8af939f2622e",
        "cursor": {
          "ref": "e79e8888-1786-4b53-a1d2-059d93281579",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d869da93-c2ef-4145-8c73-8cf203a72423"
        },
        "item": {
          "id": "bd40bb03-76a2-47aa-87b1-8af939f2622e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8476f6f5-8d7b-425b-8e98-6c1a0420f77b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a805b037-2258-4b72-b99a-944a18ab4c94",
        "cursor": {
          "ref": "422d7077-0284-43b1-a7f8-9630b1fec895",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "843bc92b-b6fb-428b-b196-f4fabbf0039e"
        },
        "item": {
          "id": "a805b037-2258-4b72-b99a-944a18ab4c94",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "09f9a6ba-8e6d-45b5-88d9-621438840ab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a93d115d-116d-47ea-9c4a-d70a2667dcca",
        "cursor": {
          "ref": "2de85b84-7622-4352-aba8-dcff61708f01",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "8f4d503c-8346-4b64-9524-758094745772"
        },
        "item": {
          "id": "a93d115d-116d-47ea-9c4a-d70a2667dcca",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f9b496d4-c004-4c98-a0bd-8f64fb2bab60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9adf2386-97d6-49e9-9915-f52df5d087da",
        "cursor": {
          "ref": "c439e210-2169-4b7f-ba22-23c49b540be4",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "6b96c062-434e-4e38-a1b7-4b0509b5d853"
        },
        "item": {
          "id": "9adf2386-97d6-49e9-9915-f52df5d087da",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f250ed17-e3b7-418a-b2ec-c08baaa27041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63a99c40-d8fe-4d34-8580-3e85b2ec0451",
        "cursor": {
          "ref": "ab55fda5-5df2-451e-94a1-5c98c7398e90",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "359819b4-127c-4fda-bd2e-6e367aa21dd8"
        },
        "item": {
          "id": "63a99c40-d8fe-4d34-8580-3e85b2ec0451",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b8084bc8-6e7e-4316-b8d6-20e9c52b0fba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e10a61f6-c0a3-471b-a74d-aa8db4338f34",
        "cursor": {
          "ref": "7a674252-1b9e-40c1-b313-456596ca5769",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c9b5ce5d-0230-49ed-a44e-38a63a00a926"
        },
        "item": {
          "id": "e10a61f6-c0a3-471b-a74d-aa8db4338f34",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "132c27eb-d86e-4c61-a24d-7736c8cd99ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b83eb075-7620-4b1d-991f-dc5addfa1ef3",
        "cursor": {
          "ref": "00feb81d-3a68-4d9d-a4fd-dcad7baf8d7a",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "e48eaad9-2145-4ab4-b4c4-a5605738f85a"
        },
        "item": {
          "id": "b83eb075-7620-4b1d-991f-dc5addfa1ef3",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b661aebf-8b15-4266-b9d1-4de33b10cd47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19732436-631b-4fe3-b135-dda351d21b88",
        "cursor": {
          "ref": "854f24ee-d828-4273-951f-ce63d21b8cbc",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "99d4531e-10e1-4ce5-8483-b377332e1f4c"
        },
        "item": {
          "id": "19732436-631b-4fe3-b135-dda351d21b88",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2d18fbf0-c70e-44e3-a589-f357996e2b57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a432dc1d-e629-41f8-8139-0be744aa56a7",
        "cursor": {
          "ref": "976330e1-77d6-4c8f-b97e-efd4925a0f55",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "46c982d0-8935-492a-b807-af53473f93e2"
        },
        "item": {
          "id": "a432dc1d-e629-41f8-8139-0be744aa56a7",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "124bb659-a10b-41f5-a99b-09b7d28091ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e674c6d-f422-41fd-a071-ffc3ebaa639f",
        "cursor": {
          "ref": "11b8d6dc-a876-4932-9041-c72cf60cc493",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "b1c6d7aa-8ace-447c-8b4b-d025e4e8f4c0"
        },
        "item": {
          "id": "5e674c6d-f422-41fd-a071-ffc3ebaa639f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "0f7f2e95-465a-4a27-b67e-58bc02b2f5b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c735cfab-d07d-429a-9713-b4ac127b201e",
        "cursor": {
          "ref": "07781641-f85b-44ca-a3e1-3cb0db506399",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "d1b0dd5b-4c4a-40b5-9a81-72b9178d5468"
        },
        "item": {
          "id": "c735cfab-d07d-429a-9713-b4ac127b201e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d0906649-e40c-49ee-b3cb-ee0664f53a5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3895997-63f4-45ad-ad13-801971c18d3b",
        "cursor": {
          "ref": "e1a148ab-b9c0-4c89-adf5-c2774ba20ac0",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b2c74c80-07db-4878-952d-d203512516dd"
        },
        "item": {
          "id": "a3895997-63f4-45ad-ad13-801971c18d3b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3ee9491b-7dc6-4de7-bcb0-60ebcff21ddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02f28456-f97d-4cfc-9b55-70e360f063e1",
        "cursor": {
          "ref": "a86591ef-9d6b-4791-85a8-585d259b8ac0",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "79c256eb-9398-48f6-8a4e-db6c8a1a0e1e"
        },
        "item": {
          "id": "02f28456-f97d-4cfc-9b55-70e360f063e1",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a43fd368-6f68-4f7f-a009-c78b012d5fd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a586fab-5a66-42c9-9f3a-25ce02d7e8f4",
        "cursor": {
          "ref": "017cf962-8f99-44b2-984c-c40458eaaea6",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "1d6c3d17-3913-4ed4-abac-bb1c16a9b59f"
        },
        "item": {
          "id": "1a586fab-5a66-42c9-9f3a-25ce02d7e8f4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "60c78e37-84d1-489a-bf0b-103f5a1b6ce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6862238c-8eb9-487a-9578-88efdd031b57",
        "cursor": {
          "ref": "ddf70d74-0835-40a0-93b8-1c17bcc6cad5",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "ad29a82b-dd71-4864-ad1a-29a8ec2c5812"
        },
        "item": {
          "id": "6862238c-8eb9-487a-9578-88efdd031b57",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "500f541e-4fa3-4219-b72b-1d375d21bac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c42c147-1827-4b15-8d73-099329e9e3ed",
        "cursor": {
          "ref": "df3973ca-7202-4ef4-9dad-b3792d621d51",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "9e3f5959-4139-4b90-8363-2dfc2b747a9d"
        },
        "item": {
          "id": "3c42c147-1827-4b15-8d73-099329e9e3ed",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "19254627-32e0-4394-8de5-af0663eab743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14721f43-23f8-4139-959f-a328083dca93",
        "cursor": {
          "ref": "550c455c-f0d1-49f6-bf8e-a034e9e1b35f",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "156d0040-d259-4c93-8a92-3541f9c6d2f2"
        },
        "item": {
          "id": "14721f43-23f8-4139-959f-a328083dca93",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "045e171f-2df9-448e-8bf5-4ddb42b1d762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9220422f-b46c-435c-abb5-3a7b8d0e6e81",
        "cursor": {
          "ref": "45f948ed-81ba-4b0f-af91-99bd3d08fdaa",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c5d26070-5947-445e-99cd-9b14b0532b99"
        },
        "item": {
          "id": "9220422f-b46c-435c-abb5-3a7b8d0e6e81",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "81c28926-38bc-44d7-b10d-b1bfd503df8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "872fb314-5e38-40aa-b4c5-9637bea56eb0",
        "cursor": {
          "ref": "d22ec525-83a0-4c44-99ed-9e45ff4c935c",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "cb0842e9-3f50-41a1-be32-c3a8043d9204"
        },
        "item": {
          "id": "872fb314-5e38-40aa-b4c5-9637bea56eb0",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "bdaeefd1-55bf-48f2-aaa0-4825632f8cc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf02be2-745f-4137-b65e-eecaea913d00",
        "cursor": {
          "ref": "032bd279-715e-43d6-9e72-ff11837a3d0f",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "991ece9e-88a7-49be-a794-077844108d86"
        },
        "item": {
          "id": "3cf02be2-745f-4137-b65e-eecaea913d00",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9c7a32ca-0605-4c64-9de8-50e4fa6c9299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3046acd4-659c-4ab8-a48e-8e6e82aaeab1",
        "cursor": {
          "ref": "83fa3902-d3ce-44f5-af97-0c9ef5dbcb3e",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f7072220-7fd6-4f6b-a547-1b8485ae55c5"
        },
        "item": {
          "id": "3046acd4-659c-4ab8-a48e-8e6e82aaeab1",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "07c9e4d6-fc0d-4575-a53e-f43769f3b762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a3a623a-915f-4e87-84f3-20812ad31384",
        "cursor": {
          "ref": "85cd792e-2600-4ad0-ac65-0a3b2a6007b2",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "0b4839b7-a0ed-429f-8249-7ad20081438d"
        },
        "item": {
          "id": "7a3a623a-915f-4e87-84f3-20812ad31384",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d900077d-0e20-4d7c-b25f-eff98f622f7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "fd98d672-5cd5-4a00-8f46-00c60cc8d455",
        "cursor": {
          "ref": "e9a4092f-2583-410b-ac69-6ced863628ca",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "4bd42a5f-53e6-42e9-a63a-09422c286634"
        },
        "item": {
          "id": "fd98d672-5cd5-4a00-8f46-00c60cc8d455",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "8820c18e-e3a8-4012-b4e6-6dcd732b7cc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "8ed8a897-04a1-4dd0-ab19-929cfb093e00",
        "cursor": {
          "ref": "ce8327f9-c98b-4d31-bb78-cff8d0f5987c",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "766754e6-f564-47ff-b58d-4658e17ebd88"
        },
        "item": {
          "id": "8ed8a897-04a1-4dd0-ab19-929cfb093e00",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "3bae3b0d-4392-4756-8caa-22949efffa7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ed8a897-04a1-4dd0-ab19-929cfb093e00",
        "cursor": {
          "ref": "ce8327f9-c98b-4d31-bb78-cff8d0f5987c",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "766754e6-f564-47ff-b58d-4658e17ebd88"
        },
        "item": {
          "id": "8ed8a897-04a1-4dd0-ab19-929cfb093e00",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "3bae3b0d-4392-4756-8caa-22949efffa7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe08e9ee-e48a-4c91-a259-54de652d30e1",
        "cursor": {
          "ref": "f56dcdbf-173d-4273-bb56-c66bf8b2435e",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "6e9dade0-5537-4815-868b-ef5b839df75b"
        },
        "item": {
          "id": "fe08e9ee-e48a-4c91-a259-54de652d30e1",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "4c210374-08c4-488e-a4c7-74f15653d41b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1892bba-0081-4494-b736-eddd0f046aa8",
        "cursor": {
          "ref": "21801a2d-86c3-49ff-add2-1a85eb151b93",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ba78f698-8909-4a61-963e-77e91a9f4b7a"
        },
        "item": {
          "id": "e1892bba-0081-4494-b736-eddd0f046aa8",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "d6536c3e-06e1-4603-9ca1-9698c54757aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8614f279-1feb-4803-8e6f-edf855ac759f",
        "cursor": {
          "ref": "cb8c0348-ea9d-4a54-8845-beae4a16f48d",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "4061fa8a-a344-4357-b804-dd7904b9414d"
        },
        "item": {
          "id": "8614f279-1feb-4803-8e6f-edf855ac759f",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "7e40925c-1ba0-49aa-9b18-2bdbaa460155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41a906d5-3b60-468a-af45-382e4ac0a04a",
        "cursor": {
          "ref": "47323ea7-86a9-4ff8-8bc4-255383ecc986",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "9532a82a-f6c5-40a8-bde9-c8db1a937d5b"
        },
        "item": {
          "id": "41a906d5-3b60-468a-af45-382e4ac0a04a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "a4ee8c2b-fb02-41f1-8646-1d7e591de674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e5ddae6-f918-4f57-b536-a68b43609994",
        "cursor": {
          "ref": "1c633b4d-9f37-4005-9564-1d829dfbbffb",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "13a83323-96b7-4585-81c6-2d7c807d8260"
        },
        "item": {
          "id": "4e5ddae6-f918-4f57-b536-a68b43609994",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "5713c4b7-d67a-4c1b-be55-050ca830b48b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b80b7fd-2673-465d-9221-8dbdcd3e2700",
        "cursor": {
          "ref": "66f68a52-e3bc-4957-a5fa-5833f7b8ddd8",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "98ca3d84-75e0-4cf9-a45f-a3f630edb3ed"
        },
        "item": {
          "id": "8b80b7fd-2673-465d-9221-8dbdcd3e2700",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "3791d88c-9dae-4446-ad7b-6a64b0fae79d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fca62a39-f444-43f2-9741-6174be0f5a26",
        "cursor": {
          "ref": "dff6c255-f139-40bc-92fa-389ae93e857b",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "d92f6b99-50b1-4244-9b1b-0881d1392c2f"
        },
        "item": {
          "id": "fca62a39-f444-43f2-9741-6174be0f5a26",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "e526cbdc-aaa5-4756-91b5-cff0cf53abb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb6086bd-a787-48c0-9a96-9d5fd1a355f5",
        "cursor": {
          "ref": "9e2f3aa4-b891-4b49-b4c6-7347fcc50d24",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b0f03194-f144-4e8f-b25d-72827973584c"
        },
        "item": {
          "id": "cb6086bd-a787-48c0-9a96-9d5fd1a355f5",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "3b1997f4-9f12-4fb4-aa42-bda7208d9d2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "040b9888-4bcd-4e73-8378-e82c7cdab8e4",
        "cursor": {
          "ref": "b1ca2707-ae79-43bb-a711-f68520b32b4d",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d3061b18-a30f-4aa6-a067-a2e8f516c129"
        },
        "item": {
          "id": "040b9888-4bcd-4e73-8378-e82c7cdab8e4",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "5c370894-6045-4b7f-874c-3d58685f550a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bf0e988-483d-430e-958c-e9d1a4f4b92a",
        "cursor": {
          "ref": "eb9d8c9b-88ea-408f-a81f-6483cb140348",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "c2a62f26-1419-4ef1-be45-a0edaa4613ac"
        },
        "item": {
          "id": "8bf0e988-483d-430e-958c-e9d1a4f4b92a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "5edeef73-c4df-439c-832d-c96f2c6bca2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5434d6ec-c174-4839-ac8c-cfdca05624ff",
        "cursor": {
          "ref": "1a9ebd00-9cc4-43f1-991f-7b214f1ee304",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "4212de6f-ea04-4f6b-b0f2-b38f89661933"
        },
        "item": {
          "id": "5434d6ec-c174-4839-ac8c-cfdca05624ff",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "5f0336b0-d843-44f0-99b9-a93f433ab56a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "071bbd35-3808-4e8c-b4f9-d5b492ac2a74",
        "cursor": {
          "ref": "834a5f3c-1ab5-4a17-adc0-67affad55439",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "6c3cf9df-adb1-4041-8781-cf62319b4b97"
        },
        "item": {
          "id": "071bbd35-3808-4e8c-b4f9-d5b492ac2a74",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "b2005e8c-288e-40fb-baf8-ec143d515b65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d09f43b-b02c-49b6-935c-287521a851d7",
        "cursor": {
          "ref": "f4b2ef53-4af8-476b-88e6-aca6b0e25f4e",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "2d9f2636-f8da-4f65-af28-00a1916c09a4"
        },
        "item": {
          "id": "5d09f43b-b02c-49b6-935c-287521a851d7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "5377d60b-ed89-4ad1-b424-dfce28ec9f5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a787942a-265a-49c0-ad5f-222d81e9121f",
        "cursor": {
          "ref": "cc59c7a9-117a-473a-b66c-c2098cf2590a",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "5f8aba79-304c-47b0-baac-1faf1261853e"
        },
        "item": {
          "id": "a787942a-265a-49c0-ad5f-222d81e9121f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "59dbad27-65f7-4929-9707-8245b450a849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2b277cd-d97b-4cbc-bd7f-468ec8bac64e",
        "cursor": {
          "ref": "7622c344-4bb2-4e26-b95c-70b045bc29d9",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "18b82221-decc-4edc-a1fb-cb2247427712"
        },
        "item": {
          "id": "a2b277cd-d97b-4cbc-bd7f-468ec8bac64e",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "49e59f57-b1e2-4765-b4e2-9b093a560710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02685f2d-5df3-42a9-a9df-d657aff6d813",
        "cursor": {
          "ref": "6de5ab5a-014f-4d8e-be19-f6c7e1cc602c",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "dcebb6bb-f3fa-4b31-8d2d-742a460694fd"
        },
        "item": {
          "id": "02685f2d-5df3-42a9-a9df-d657aff6d813",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "2ed86e71-dde9-4680-a731-4366d24e0d46",
          "status": "OK",
          "code": 200,
          "responseTime": 241,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "2aef69c2-4454-4628-9105-d86c7a5aa58f",
        "cursor": {
          "ref": "255304f0-f17c-44cb-8b32-3bddebc392ba",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "e32df71f-56d8-4789-8463-97a85ae47c65"
        },
        "item": {
          "id": "2aef69c2-4454-4628-9105-d86c7a5aa58f",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "e9521245-d792-444a-91f7-b9012b31d5d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c879ba7-c46f-43dd-9daf-52838e14a3ef",
        "cursor": {
          "ref": "c00be6ae-2698-4f37-916e-b7617144ce7d",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a50494a9-e214-4ee7-832e-d501934b9f6d"
        },
        "item": {
          "id": "8c879ba7-c46f-43dd-9daf-52838e14a3ef",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "d46a4642-c78e-4976-80d3-122156b87747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56493f30-662b-4710-839e-d6102285dd0f",
        "cursor": {
          "ref": "405f76ab-1ecc-4c2a-bdbc-2c7e10828f46",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "4c8122f3-f9a1-4406-ad42-b601976f4bfb"
        },
        "item": {
          "id": "56493f30-662b-4710-839e-d6102285dd0f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "fb282f6a-5d79-40e6-8c10-84b4cc9cfe3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d90931f0-3a0e-4685-b427-e6d418402c1a",
        "cursor": {
          "ref": "dfbc348b-fa4b-4e69-80fb-dcdd6e292c1e",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "72b49a44-31c6-4041-a4fd-f4483f959bce"
        },
        "item": {
          "id": "d90931f0-3a0e-4685-b427-e6d418402c1a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "89ca049d-c415-4b4c-a2f8-6a28e8b50a4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d3bf6a3-1c4b-4c2e-87be-42fe6f77a3fd",
        "cursor": {
          "ref": "36c7b1c5-3951-4c51-9b7d-391f49dcafcb",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "11089d66-cf12-4523-a2e9-91881cc228d9"
        },
        "item": {
          "id": "3d3bf6a3-1c4b-4c2e-87be-42fe6f77a3fd",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "e8b1c518-1447-4949-bac7-1c3dee936578",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a1518f5-1191-4583-8991-5ebbaa80f676",
        "cursor": {
          "ref": "e3f839a6-625d-43ff-acfb-cd41d09f888f",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "14743ff9-4d57-4351-97e2-44c0521e65d9"
        },
        "item": {
          "id": "4a1518f5-1191-4583-8991-5ebbaa80f676",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "37f78b0b-3769-448e-b166-c1d04ea9de0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54092e0b-dc6a-4cac-939c-49d11d1e2e0a",
        "cursor": {
          "ref": "b5487c23-4b6d-4a0b-9a11-4f1784a7516b",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "a3ca4af5-47e0-45f9-b156-8e80016891c8"
        },
        "item": {
          "id": "54092e0b-dc6a-4cac-939c-49d11d1e2e0a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4f6902a6-131c-47e6-ba92-2f378c19987a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b0adb2c-e9b6-4233-8452-5ea0e3ef3a47",
        "cursor": {
          "ref": "abdccf68-a0f1-4377-85a6-e2381d37661f",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "6a2da3fb-0d98-423a-af58-aaa6c988334b"
        },
        "item": {
          "id": "5b0adb2c-e9b6-4233-8452-5ea0e3ef3a47",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "80dae900-95f2-411e-8e6a-11196662e33e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "822189ac-194b-4f62-8aea-f5924d8cff7f",
        "cursor": {
          "ref": "915a1b4a-07f5-4227-83c6-e86a9b4734b8",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "9043f7ac-14c4-4a9f-aaab-89dfceb1b70a"
        },
        "item": {
          "id": "822189ac-194b-4f62-8aea-f5924d8cff7f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f6f358ab-67f3-4252-aa99-b0044591c51b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e37a959-ee70-440e-8f6c-da970cbfd95f",
        "cursor": {
          "ref": "520a0c87-5d9e-4ff2-b106-25db4022fade",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f7cea7ad-b552-4e9b-b48f-45cb55ef5b24"
        },
        "item": {
          "id": "4e37a959-ee70-440e-8f6c-da970cbfd95f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "8186c309-3678-44b2-9ec5-8aeb7204b33b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaf42204-7fa5-4f2e-a5b5-3ae2dc14ba73",
        "cursor": {
          "ref": "7bd86238-3c1d-476c-8632-a255d6f1a75a",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "fa27bd78-121c-417c-9b0f-d55a805f1fb0"
        },
        "item": {
          "id": "aaf42204-7fa5-4f2e-a5b5-3ae2dc14ba73",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "81c7994c-02ad-4f08-b8a4-716988fe7d04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fb63382-375b-49f0-9e26-8b547040e111",
        "cursor": {
          "ref": "3703b7ab-d3dc-4a02-8166-398af605b7eb",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "db6074ad-b98a-428a-8b53-5d46c9a7b86e"
        },
        "item": {
          "id": "9fb63382-375b-49f0-9e26-8b547040e111",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "fa4f11be-2c64-4f30-8b47-6954b1de9fc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a5022fb-e05d-45bd-95c9-34d8086d15dd",
        "cursor": {
          "ref": "c6577b1f-1f0b-4f1c-b5f4-6b9c3aee0646",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "49433ba3-6291-4972-b65b-41bb0ccc303c"
        },
        "item": {
          "id": "2a5022fb-e05d-45bd-95c9-34d8086d15dd",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "af403417-051f-4c5e-8b93-35668185c734",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83116284-8ff6-49ef-a43d-b23969f5c8fd",
        "cursor": {
          "ref": "045c3580-d6c7-436d-95c1-cd85c5a8e8b0",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "35e1d8a1-9af5-4a85-8416-b7ff3f0cf841"
        },
        "item": {
          "id": "83116284-8ff6-49ef-a43d-b23969f5c8fd",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b2f815f5-661e-4d5b-8bac-225097197b8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3dea1fa-ab69-42b4-bd99-fadb2d5f170a",
        "cursor": {
          "ref": "552d00fa-b8d5-46fe-b34b-9a958a08ed16",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "4c90e0a0-c8f7-4de5-84bd-dbb50edb063a"
        },
        "item": {
          "id": "f3dea1fa-ab69-42b4-bd99-fadb2d5f170a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "32de9e03-91ce-4191-8cf7-a33a3b4df5c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ab08dc1-745f-4a1b-925f-e16d1ae703c9",
        "cursor": {
          "ref": "654a55b0-019d-420a-83f8-f1695211a0ce",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "52129a3f-55aa-4e31-a67f-e221ac47acec"
        },
        "item": {
          "id": "9ab08dc1-745f-4a1b-925f-e16d1ae703c9",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "c77aae36-6ed2-4ccf-b8da-2c45fee8f9bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0757bd83-1797-4b95-a3a3-1f8130c8a8c1",
        "cursor": {
          "ref": "4f7c0a7c-fedb-4e61-afe1-d8eee047ed07",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "646e691f-115e-446d-953b-07f0734f8a50"
        },
        "item": {
          "id": "0757bd83-1797-4b95-a3a3-1f8130c8a8c1",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "fb341181-929d-44ca-9590-646243f23cda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfd5705b-d893-43ce-a99c-48ec1467125b",
        "cursor": {
          "ref": "05301187-205d-4c5c-8851-4ccf8890bed0",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c5037b1d-5d52-43ff-83a9-903e6b80dacf"
        },
        "item": {
          "id": "cfd5705b-d893-43ce-a99c-48ec1467125b",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "98102f44-7cb1-4c9c-87d2-d79bd5b4fedb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b0bd38-b2f2-4a57-aff1-3c1b8367822b",
        "cursor": {
          "ref": "4a95b206-099c-4803-bc37-2f8318509a48",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "97446127-f4c2-495b-aea9-cec06114d5b2"
        },
        "item": {
          "id": "e8b0bd38-b2f2-4a57-aff1-3c1b8367822b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "1a24ee90-b9b5-44ed-92c3-660b839f17a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4588911e-f127-4b8f-af6d-1a6ae8071823",
        "cursor": {
          "ref": "43406a92-1ee5-4116-a033-80ac0fefd13c",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "6755892c-a513-440b-a264-1fe90f3990dc"
        },
        "item": {
          "id": "4588911e-f127-4b8f-af6d-1a6ae8071823",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "50f49a5b-0036-4503-b966-7a1a1151cf8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeeba4de-3b64-48fe-97ac-d03cb186afc7",
        "cursor": {
          "ref": "bd5bca8c-afb0-40d5-886e-430b0f95da68",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ad0df5c9-76c5-4bea-9c55-61ba9bbcf0ae"
        },
        "item": {
          "id": "aeeba4de-3b64-48fe-97ac-d03cb186afc7",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5e8e0751-241b-4065-a821-97cfde7f0d23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9d439c1-6911-42c2-9ba6-187ced9366c5",
        "cursor": {
          "ref": "06174384-7cab-41de-9c23-a51ad1c7112c",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "94dbdfaa-5724-43c5-9758-d932ac56d4c9"
        },
        "item": {
          "id": "d9d439c1-6911-42c2-9ba6-187ced9366c5",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "6b2e0889-51cf-4258-aa14-434cede0968b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08b985f8-aa21-4b08-96c6-280e11cb8562",
        "cursor": {
          "ref": "e9839204-dc9c-4465-97df-cbc1ae002917",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "dbe51042-b524-4582-bbff-9dc7799904ae"
        },
        "item": {
          "id": "08b985f8-aa21-4b08-96c6-280e11cb8562",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "83f8c88a-175a-45e1-8819-7901947eedd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d861f460-fc73-45a6-b5e6-37e86ff0fcb2",
        "cursor": {
          "ref": "d1a7a2a4-af37-40e6-833d-26e4769214b3",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b0711a73-d5bd-4c81-ba43-4ae8385f3db6"
        },
        "item": {
          "id": "d861f460-fc73-45a6-b5e6-37e86ff0fcb2",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "41ef7e3e-f5b5-430b-b33c-99ed1c548af2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38749560-f3a9-40d9-902e-835fedc7b7d2",
        "cursor": {
          "ref": "b517141e-c301-4d6c-bf86-bf182d187d8b",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "29c16468-e537-4261-9a64-3259c53565fd"
        },
        "item": {
          "id": "38749560-f3a9-40d9-902e-835fedc7b7d2",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "24c41d15-42f1-4d1d-8151-296a97917222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64685b93-d99b-4ce6-8b6e-cc2420c147a5",
        "cursor": {
          "ref": "ad1a4fab-2fd4-4542-970a-9d696d86bafe",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "8f00fe42-a8d7-44f1-a5b2-704509365b59"
        },
        "item": {
          "id": "64685b93-d99b-4ce6-8b6e-cc2420c147a5",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "59b2bb96-d811-498f-a52b-b003f17fe40d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1551a79b-c9cf-46aa-8d77-0e4008fc623b",
        "cursor": {
          "ref": "032d6f3a-90db-4dc9-ac84-0cefa393966c",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "c2916326-8b7c-436b-82e4-3101db514747"
        },
        "item": {
          "id": "1551a79b-c9cf-46aa-8d77-0e4008fc623b",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a4f565fc-c257-43c9-80ad-18afc276b7d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c68c70a7-10b7-4fab-b86e-84f16e58d7bc",
        "cursor": {
          "ref": "1501129e-bfd7-4ac5-87c7-b74d4b7e3d9a",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a7b8abf3-343b-4baa-afc1-8fec36df32e3"
        },
        "item": {
          "id": "c68c70a7-10b7-4fab-b86e-84f16e58d7bc",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "08076a06-15c3-4951-b13e-ec56edf0aa15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82846e32-2677-4c41-9e4b-78aee6a19d66",
        "cursor": {
          "ref": "e2cbf44e-eb3f-44b1-9e49-dfec4a8f4c38",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "89bbe6d9-3470-45de-9925-4d2f78723edb"
        },
        "item": {
          "id": "82846e32-2677-4c41-9e4b-78aee6a19d66",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "9f818f79-a5cc-42db-acd9-0af1c08cdc38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19d7eb9b-98a6-4003-ac97-6675edea9cc4",
        "cursor": {
          "ref": "4779e98c-4df7-440c-9945-ef117dd5b3a2",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "b667cb62-3438-4cd1-b4cb-c085e7e90d3b"
        },
        "item": {
          "id": "19d7eb9b-98a6-4003-ac97-6675edea9cc4",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "2cb8a15e-25a8-40c2-8da5-6b6fe3834b7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20f777ec-ed20-4bdf-963a-d5925ea6d5ea",
        "cursor": {
          "ref": "b8403fe5-8734-4274-842d-4a380c1ed470",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "7171e61c-560b-4995-bf25-778f092b1be8"
        },
        "item": {
          "id": "20f777ec-ed20-4bdf-963a-d5925ea6d5ea",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "529e68b7-98bc-44ca-bf15-e0d33fced1d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3453a81-1ddc-40b0-b73e-27c3e48dee52",
        "cursor": {
          "ref": "91ddff84-c7dc-4b81-a6cf-31a29e47b2a1",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "ebf83e6f-ec52-4a04-9a4d-c7cf753d6f30"
        },
        "item": {
          "id": "f3453a81-1ddc-40b0-b73e-27c3e48dee52",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f60e4ad8-0aba-40d6-b8d0-beb7b3adff90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fb6b158-44f7-41ee-8f30-7d764aeef11d",
        "cursor": {
          "ref": "77a194b2-9832-4d21-811b-1f6eeefb4ef9",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f7201bce-76ac-4565-b704-b98658fd6616"
        },
        "item": {
          "id": "8fb6b158-44f7-41ee-8f30-7d764aeef11d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "6a79db60-ba77-42cf-a745-0736fb516cec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5691a30a-80cc-4dc6-ad98-29c4c09675e9",
        "cursor": {
          "ref": "4d37ab2c-b280-4486-a246-af38bc8e5c10",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "1a1e7e9e-d915-40ec-ab0b-0bfcb5cb1788"
        },
        "item": {
          "id": "5691a30a-80cc-4dc6-ad98-29c4c09675e9",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "3cdc75e5-e507-48ac-bcf9-f532b51abd2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "215b7ed0-5840-493c-a6f8-949fb0b58409",
        "cursor": {
          "ref": "398d214c-6aa1-4f92-8109-a295003f5f9b",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "2329a300-9f16-42ab-aae4-0d5f369803bf"
        },
        "item": {
          "id": "215b7ed0-5840-493c-a6f8-949fb0b58409",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "95bbe2c6-1de2-460b-8d27-43feace9dd16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d1d5fc0-f447-4279-9700-2d35219b3ff1",
        "cursor": {
          "ref": "ff8a145e-bdc7-48ac-b0cc-8e8d2aee9ea0",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "7c87a52f-252c-46a1-bc7d-dd6d8c78fd8d"
        },
        "item": {
          "id": "0d1d5fc0-f447-4279-9700-2d35219b3ff1",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a4455acc-2b35-4375-b032-1e0c0e0e4768",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adbe6917-0339-4ac7-b125-2cd87afa452e",
        "cursor": {
          "ref": "8fbd4d41-3c81-40c4-bcc8-c608b4bff795",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "35e243c4-13a2-4745-9c8d-acf3ba0f55c0"
        },
        "item": {
          "id": "adbe6917-0339-4ac7-b125-2cd87afa452e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "e9bc3ef2-d7e7-458e-94b0-1a347e716231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46c8e6da-194a-4b7a-b606-fbc67bec129e",
        "cursor": {
          "ref": "51b60fc1-c315-45b7-8a16-d56d419257bb",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "607df9e7-bf2b-44a4-bbb0-c290e0dff8bc"
        },
        "item": {
          "id": "46c8e6da-194a-4b7a-b606-fbc67bec129e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "b9b7be24-4863-4a61-8ba1-96e8caab4c8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f3c5b0b-45d1-4057-b9b6-7db218899c67",
        "cursor": {
          "ref": "1fe354de-6005-4c5c-a886-0617bd7504e6",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "8a29f209-6bd2-4e80-a370-050a2c048068"
        },
        "item": {
          "id": "9f3c5b0b-45d1-4057-b9b6-7db218899c67",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "5edfd2b5-eec4-493d-93c7-e42573e82765",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27042462-9bf4-4a9e-938d-07c94479753d",
        "cursor": {
          "ref": "fe1967d7-b951-40f2-bb05-c0cae3154815",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "968e593f-57f0-4499-b816-fcd81be99450"
        },
        "item": {
          "id": "27042462-9bf4-4a9e-938d-07c94479753d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "5bf13f6a-8839-4ac8-a5a7-3910fd187d40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2efe8c8-34e4-449f-b20a-ece8a20500c6",
        "cursor": {
          "ref": "1f5d4e2f-ae2e-477c-a87c-bdbeca402ef0",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "354e9ce4-31da-4847-a40c-7617cf86a960"
        },
        "item": {
          "id": "d2efe8c8-34e4-449f-b20a-ece8a20500c6",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "8669560e-ece1-49ae-9f4c-3516c958dbd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e00b9867-571d-424c-a8a1-7d8c2a1df090",
        "cursor": {
          "ref": "e79240f3-5e1a-4591-a68f-e3e0d96b7343",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c2824d2d-b60e-4f8b-9ca8-ecd9eec0bc48"
        },
        "item": {
          "id": "e00b9867-571d-424c-a8a1-7d8c2a1df090",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f2c50977-256a-4b27-a440-e3e9d20ef3db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3fcb22e-3021-4ae9-ab8e-a6d10a797700",
        "cursor": {
          "ref": "9d42fe6f-c8fe-44bf-b60e-ee29ba1badd4",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "0b71c5da-0309-44dd-bafe-aa6b3c47d25b"
        },
        "item": {
          "id": "a3fcb22e-3021-4ae9-ab8e-a6d10a797700",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "25409bb5-a9c6-4aec-bf63-a2d059b25e96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a4f7de8-6489-4492-808d-9587e062f205",
        "cursor": {
          "ref": "8e83ca30-635f-425c-8ac0-9003d000736b",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "8cf3154c-b6ed-4192-a125-46ba49061c54"
        },
        "item": {
          "id": "8a4f7de8-6489-4492-808d-9587e062f205",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "706813e6-1f1c-4d40-96a7-fe1ddb575ab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a6b6043-b78f-4d86-b9dc-056d2800cc0b",
        "cursor": {
          "ref": "0f7b1122-f96a-4438-b7ae-cb5c9a9ae3dc",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "f44ac017-fa96-4669-a48c-d241f9630080"
        },
        "item": {
          "id": "3a6b6043-b78f-4d86-b9dc-056d2800cc0b",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "acfa1a5a-49ed-4364-9f9d-ad45ea29f95d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "033730b5-2325-4f66-89d2-7ae032416d3e",
        "cursor": {
          "ref": "e75620d4-0984-41a8-8f2d-8b961acf3b0b",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "59f6e48a-3517-421c-b29d-a12490e7f913"
        },
        "item": {
          "id": "033730b5-2325-4f66-89d2-7ae032416d3e",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3c933b26-aab7-48f2-8b1f-470aaea5df8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8da6780a-e32f-46b5-9a10-6e8e872eb930",
        "cursor": {
          "ref": "ca92aab1-4921-46d4-a9fd-ff9a8b353abf",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c0cd9086-ad61-4745-8251-ba0c39ed34c4"
        },
        "item": {
          "id": "8da6780a-e32f-46b5-9a10-6e8e872eb930",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "51b8cd9b-7acc-4939-af00-2a6a5f79dede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b516b251-a1ee-440f-a17d-d6363c232113",
        "cursor": {
          "ref": "07925135-93f1-4448-8d52-59f029a4eab5",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6f25a90d-2da0-49ee-8858-2cb7cbff091c"
        },
        "item": {
          "id": "b516b251-a1ee-440f-a17d-d6363c232113",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0e4a0764-e2ea-45b1-aa8b-843dc8a8c974",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a5e88da-2d97-46e9-a1b8-69050c74952f",
        "cursor": {
          "ref": "54c364f1-255b-423a-bc74-e003f7aaf321",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c4b82bdf-2757-40f5-b062-eab9db4b6a9a"
        },
        "item": {
          "id": "4a5e88da-2d97-46e9-a1b8-69050c74952f",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "c79b0e3a-005f-4466-bb4b-dc7da10e997a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67ceac47-dcc5-4065-b3d3-6d0ba5ccbe62",
        "cursor": {
          "ref": "dfdad0e3-a965-422b-b0fe-ace92148905e",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "6a3a2da7-4b95-4fd8-a30b-f0df6e50be5e"
        },
        "item": {
          "id": "67ceac47-dcc5-4065-b3d3-6d0ba5ccbe62",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "9b37abf0-189a-4038-a414-ec8e44676446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abf8d23b-74bd-4ea1-8594-978285bcb6a7",
        "cursor": {
          "ref": "178841a8-3923-4128-b3b2-adb65dcc55d3",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "16f4ce00-e92f-4bda-a911-e8372aa5875f"
        },
        "item": {
          "id": "abf8d23b-74bd-4ea1-8594-978285bcb6a7",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "141a5aed-b739-45cd-956b-0b93d4c0b04e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "910cd1ad-f208-4ad2-b428-7a53fc95fca9",
        "cursor": {
          "ref": "f129ce0e-9acf-4f95-9268-43f92b92bddc",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "373b56ed-682c-4ca4-a41f-b80181c2b45a"
        },
        "item": {
          "id": "910cd1ad-f208-4ad2-b428-7a53fc95fca9",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "461e3123-17e2-43a1-bd41-64938e4bf869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f753f24-391f-4e0f-946c-33b0c711a41b",
        "cursor": {
          "ref": "9dcbf24d-2849-479c-a13f-cb303da42ebe",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "16ea02a3-2a02-4b7e-84f9-a1719016311e"
        },
        "item": {
          "id": "6f753f24-391f-4e0f-946c-33b0c711a41b",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "95d7c4e7-133a-4380-9695-839e29838bc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4ad2909-8c59-4586-aebd-8058ab24d8ac",
        "cursor": {
          "ref": "40cfee7a-af1b-462a-8bf0-5c94694c2518",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "dcfc0ff3-e9ad-4d65-941d-1ab22d569505"
        },
        "item": {
          "id": "f4ad2909-8c59-4586-aebd-8058ab24d8ac",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "890bdc46-f3ff-4b2a-b3c7-72708b154a7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "954a4440-8816-40e6-a21c-f30fe7ad61d1",
        "cursor": {
          "ref": "6babb96e-ab3f-436e-afce-db8b421acb21",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "dd674a70-f5f2-4fb0-9f7a-fe7a9d142f76"
        },
        "item": {
          "id": "954a4440-8816-40e6-a21c-f30fe7ad61d1",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "1c699b1e-ec7f-458e-a7eb-6c5e5c03ce65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16bae569-e055-4134-9b88-fbf64ce8bbb0",
        "cursor": {
          "ref": "86a279be-8eb5-4160-8821-f763d31efaf1",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "ae37a125-a7b4-43a9-b34f-168a66bda86e"
        },
        "item": {
          "id": "16bae569-e055-4134-9b88-fbf64ce8bbb0",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "0039d44e-76b4-4a15-a564-e40d556002ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40aadcff-a266-4493-a1a2-fc21773589eb",
        "cursor": {
          "ref": "06779b8d-9111-4f91-ac33-6218429c7bb8",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a5b3b954-4040-41aa-8e58-7676ebdbcf89"
        },
        "item": {
          "id": "40aadcff-a266-4493-a1a2-fc21773589eb",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c6f0b140-b10c-4dd5-80b0-986e4a41a6bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9375d4c0-27c5-4dd6-87d5-f37855d0049b",
        "cursor": {
          "ref": "b8e6a354-01d3-4692-89cb-fd4eb7accd00",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "120b0bbf-83bf-4cb0-a447-2eb2893bfff3"
        },
        "item": {
          "id": "9375d4c0-27c5-4dd6-87d5-f37855d0049b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "4b5b2cf2-d417-40cc-8d5c-7f6b46dae40f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "959b854a-a150-4046-9098-d9bbb03a0a1c",
        "cursor": {
          "ref": "b7522f75-688d-458f-a6a7-0e346ab371f5",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "3936d102-30d6-4d66-b87c-fbecbb49f44a"
        },
        "item": {
          "id": "959b854a-a150-4046-9098-d9bbb03a0a1c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "1e6f1084-6ba0-43bf-9a79-e3228ba813e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5992558-d629-4c38-a328-ca7bb8e09c63",
        "cursor": {
          "ref": "d1bbfe2a-976f-458a-88e4-8fee62d44578",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "5af7540b-e4e3-4952-8d1c-dc1cb79fbe55"
        },
        "item": {
          "id": "e5992558-d629-4c38-a328-ca7bb8e09c63",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "55a18ff5-4f34-4274-95e7-69a64c8ed7e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "882e9edc-930e-43c5-992e-9a8a4e5948c4",
        "cursor": {
          "ref": "8769f65c-c5bf-4ced-9c5c-7586512900db",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "648007bc-0f4a-4cb4-8aa3-13c8be529431"
        },
        "item": {
          "id": "882e9edc-930e-43c5-992e-9a8a4e5948c4",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "6de424c4-e0da-4fde-9942-67d4eef1947a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cec6d782-bd71-4680-a72c-a8fb82b07e3e",
        "cursor": {
          "ref": "ef51facf-a7cb-4942-8b68-2c34d0d8e333",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "95576306-8801-4ef3-944b-e79ece808925"
        },
        "item": {
          "id": "cec6d782-bd71-4680-a72c-a8fb82b07e3e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "0e2737d9-e03e-4043-b449-2076b2a96a4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "305ce24b-ce0c-4dca-ba67-9d89ad84f280",
        "cursor": {
          "ref": "700cae3c-1104-4ab7-a2df-b7b5f0029ce0",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "7a3e1a67-d50f-4d03-86b1-a6dbdb42300c"
        },
        "item": {
          "id": "305ce24b-ce0c-4dca-ba67-9d89ad84f280",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "f50b968d-2a87-4081-a7ea-ed28beecdf47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "509fc7bb-6374-4812-aeb9-9c3fb3a2564f",
        "cursor": {
          "ref": "4ad2a5db-9fa6-4264-8ee9-767d0feea96d",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "12fe8175-90e9-4597-8da2-90384bbeee58"
        },
        "item": {
          "id": "509fc7bb-6374-4812-aeb9-9c3fb3a2564f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d84242f7-55d7-4a46-b5a8-780bb6261244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "916a5db7-243f-42dc-a17b-2c7448012e7c",
        "cursor": {
          "ref": "7915bbae-39fd-4e45-8364-3fb513bcad40",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "13b69dde-8f0b-4b41-bb41-ed3d6f7655ca"
        },
        "item": {
          "id": "916a5db7-243f-42dc-a17b-2c7448012e7c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "9533e631-d5b9-4184-939f-9614edcc5339",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be63904f-56d4-4260-bf5b-e86f9ac96a51",
        "cursor": {
          "ref": "4b09219d-3b6e-426e-87cc-ea38474fa2fe",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "12a8a1cb-0498-494e-a295-28f809633578"
        },
        "item": {
          "id": "be63904f-56d4-4260-bf5b-e86f9ac96a51",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "698ed78f-6f32-4d6a-b838-5900c842d3de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fcaded4-3d47-42e4-a751-745b16efb695",
        "cursor": {
          "ref": "bb009aca-4184-449d-8f7a-38fed6b6627f",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "598f1af8-862f-49ff-a90b-8b526b416580"
        },
        "item": {
          "id": "4fcaded4-3d47-42e4-a751-745b16efb695",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ba3e742b-09cc-46c3-9a65-2c41070d2ae0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39a60d55-0b29-4683-8e9c-ca3b5c0af34f",
        "cursor": {
          "ref": "9f7e3a41-6f1b-4efb-8ad8-d22fec0fcee5",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "700fc5b3-e2c3-4375-9fe1-972bb3069d46"
        },
        "item": {
          "id": "39a60d55-0b29-4683-8e9c-ca3b5c0af34f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "3dfe615b-3f26-49e4-83bf-07f8c977cd46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "359d0794-43a3-4103-a59c-0f108fcb1cf4",
        "cursor": {
          "ref": "7de90e6c-953e-4584-9a12-bb085e187ecb",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "5671b5ae-368a-4b95-a598-4355ba808111"
        },
        "item": {
          "id": "359d0794-43a3-4103-a59c-0f108fcb1cf4",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "bbb628ed-129a-4c74-8b9d-cbc5662e7c0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7768b1f-755d-4728-951d-6a17248c26c4",
        "cursor": {
          "ref": "723c3e96-8582-4e6b-b8e2-42e3c141c48a",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "13f83034-3d68-486b-81cf-9b2c76d4845e"
        },
        "item": {
          "id": "a7768b1f-755d-4728-951d-6a17248c26c4",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "7af9fec0-b1d6-4ae6-a678-afdaa4f85f43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ec3673f-57ef-4e0d-99b6-378e95388b9c",
        "cursor": {
          "ref": "f6d7b0df-b879-4639-abbb-ef8513cb1d7c",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "f249c9c8-4a63-4a92-b5de-4095f5b13d0c"
        },
        "item": {
          "id": "5ec3673f-57ef-4e0d-99b6-378e95388b9c",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b2b1475b-1cf6-4f5e-8bd0-23a1ba132dbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2efdbff-15c2-4ae3-8ff5-d295b0285c5a",
        "cursor": {
          "ref": "1e41497c-14eb-46e9-b05a-146f04ee3a21",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "59e4075c-0df1-4197-a141-a61ab25ca9e1"
        },
        "item": {
          "id": "b2efdbff-15c2-4ae3-8ff5-d295b0285c5a",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6dace921-2727-4f80-9366-1f50f76ac47d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10ae2f1a-96de-47cf-aad4-8e2efdc66311",
        "cursor": {
          "ref": "035af5f1-91b5-4d39-a299-90f60e471b9b",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "d7c96f08-30b3-4aab-b031-ec1ece2fb747"
        },
        "item": {
          "id": "10ae2f1a-96de-47cf-aad4-8e2efdc66311",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d1261644-0b0c-48b5-978b-46c0ef28b62c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e96a34e7-6075-420e-9847-5edd118bf463",
        "cursor": {
          "ref": "2c71bef1-98f5-4f57-b7ef-2c4fe7673660",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "738f805d-4d30-4394-b6c4-62bc4d3a1cbf"
        },
        "item": {
          "id": "e96a34e7-6075-420e-9847-5edd118bf463",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "2de6405a-00c7-4e73-a732-9e08d8e8727a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e474fa95-8588-4ac1-8333-33c7e82548a8",
        "cursor": {
          "ref": "65d49bba-caaf-48bc-abb3-e3e99e58f3bd",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "1e3c8942-35d0-4bec-b646-f4f66437f5f9"
        },
        "item": {
          "id": "e474fa95-8588-4ac1-8333-33c7e82548a8",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "da93e36c-1330-47fa-891b-b46167c2ad9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d47b3b03-f06b-4483-b55c-d7712fa298c6",
        "cursor": {
          "ref": "ce41ebaf-0eca-4f7c-b3d2-ecab1f7ca619",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "339f9ca9-a585-4c06-aa57-9cdf0d05e0b3"
        },
        "item": {
          "id": "d47b3b03-f06b-4483-b55c-d7712fa298c6",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "8765d793-e900-431e-bde1-312d3fadf537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8d9fef5-48eb-463d-b29e-8c9c3beb38d5",
        "cursor": {
          "ref": "361016fd-766d-4a0f-8dcb-1897ce0cb0d1",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "2add9010-4d26-48f8-a7b6-431515fc3882"
        },
        "item": {
          "id": "f8d9fef5-48eb-463d-b29e-8c9c3beb38d5",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "f3bb2451-76d9-4730-9613-ce3575938aa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5854054a-7d39-4170-8e04-d0c3e3161a3c",
        "cursor": {
          "ref": "a5040895-3a6a-48f9-9fb5-f1ddecbd0024",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "8be713de-5a30-4ec4-8607-a153a1e16a29"
        },
        "item": {
          "id": "5854054a-7d39-4170-8e04-d0c3e3161a3c",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "658c5c25-4e96-4e44-a293-c16e5b52ebfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8b24656-c08e-4f11-9b85-be56eff9c864",
        "cursor": {
          "ref": "0bffadf9-72e1-4620-b195-d08eb8ceb5e1",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "75f6fd49-58ac-4d1a-a365-a2dd0cf61526"
        },
        "item": {
          "id": "c8b24656-c08e-4f11-9b85-be56eff9c864",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "a216a04f-c5dd-40be-b5b2-6db8a9f2ab06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe86ef60-4863-49f2-a5a1-ebc57e3af068",
        "cursor": {
          "ref": "b7d95d20-52ce-41d7-b2a0-9926721bd86d",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "105dfcf7-7a28-43e4-8ecd-92c30a455aed"
        },
        "item": {
          "id": "fe86ef60-4863-49f2-a5a1-ebc57e3af068",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "4d34bdf2-c2d8-41ef-b3ca-a88b0d4b5155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b0bcf87-bd79-4008-a943-6536b28b9309",
        "cursor": {
          "ref": "018c4279-1ad5-49d2-ae8b-df5de7e39af8",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "ce7ea347-8ed7-40e6-9a0a-d3f833957e59"
        },
        "item": {
          "id": "0b0bcf87-bd79-4008-a943-6536b28b9309",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f232a4e9-1b91-4de9-b49a-f821c1f309f8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "5c92a243-6307-4ead-869e-f03f5359953b",
        "cursor": {
          "ref": "6b2d280f-86c7-4b9e-957d-b5265b21b036",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "7bb5548a-4435-4eea-9e77-8aff873d368c"
        },
        "item": {
          "id": "5c92a243-6307-4ead-869e-f03f5359953b",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "61944ef5-d03c-42ff-b5b4-fe838642a7c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "ca67cc06-a20e-4083-b422-29296fdd9ad4",
        "cursor": {
          "ref": "9aebc7e8-e2bd-452e-af85-ee3d6430bfa9",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8043af68-3430-4259-b670-b52c0c787953"
        },
        "item": {
          "id": "ca67cc06-a20e-4083-b422-29296fdd9ad4",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "878a9ac4-6805-4c0a-9863-d07745f20f69",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "0345c62c-ff7e-40ba-81d0-bc0b43b36799",
        "cursor": {
          "ref": "9e5bd985-35d7-4ecf-bb65-76a0b582ad2b",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a7df30cf-87f3-4555-9ec4-ae8be4cd6091"
        },
        "item": {
          "id": "0345c62c-ff7e-40ba-81d0-bc0b43b36799",
          "name": "credentials_verify"
        },
        "response": {
          "id": "157295f0-c8a9-4674-b733-ef7f7d980aa1",
          "status": "OK",
          "code": 200,
          "responseTime": 3768,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "44948827-459c-48b4-aff5-7c308890663d",
        "cursor": {
          "ref": "c0629807-0218-40ff-985a-9e8e52a03e04",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "938565b7-ed65-45d2-9df6-16795eb506eb"
        },
        "item": {
          "id": "44948827-459c-48b4-aff5-7c308890663d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "bf50463a-eced-46dd-a996-e8a0c3303f08",
          "status": "OK",
          "code": 200,
          "responseTime": 2318,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "63370125-2193-4266-97b5-a0a6d6578f82",
        "cursor": {
          "ref": "26a00694-128c-405a-9fc0-4fc2b7b4dd24",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b9156c41-9d81-43ac-9997-6af643e5dbbe"
        },
        "item": {
          "id": "63370125-2193-4266-97b5-a0a6d6578f82",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3e8b18f5-a4ee-4394-9086-d03721ad1c5b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "63370125-2193-4266-97b5-a0a6d6578f82",
        "cursor": {
          "ref": "26a00694-128c-405a-9fc0-4fc2b7b4dd24",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b9156c41-9d81-43ac-9997-6af643e5dbbe"
        },
        "item": {
          "id": "63370125-2193-4266-97b5-a0a6d6578f82",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3e8b18f5-a4ee-4394-9086-d03721ad1c5b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "63370125-2193-4266-97b5-a0a6d6578f82",
        "cursor": {
          "ref": "26a00694-128c-405a-9fc0-4fc2b7b4dd24",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b9156c41-9d81-43ac-9997-6af643e5dbbe"
        },
        "item": {
          "id": "63370125-2193-4266-97b5-a0a6d6578f82",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3e8b18f5-a4ee-4394-9086-d03721ad1c5b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "e951f2ae-3acb-4a36-8f60-2a143f61ef50",
        "cursor": {
          "ref": "0518d57c-ac18-4526-a398-e86c4d3d4754",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d1d281d3-4ade-487e-b908-70e1616e0128"
        },
        "item": {
          "id": "e951f2ae-3acb-4a36-8f60-2a143f61ef50",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "d116f0b6-04e4-46d7-a0c2-a5e8674d7990",
          "status": "OK",
          "code": 200,
          "responseTime": 157,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "5f3b07b0-18c3-4bea-8010-f2f448951e03",
        "cursor": {
          "ref": "a030db33-db52-4830-a9c0-7ced78a8542d",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "baf435ee-9b72-46ad-9aed-c1bd5e723e93"
        },
        "item": {
          "id": "5f3b07b0-18c3-4bea-8010-f2f448951e03",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "700be4bf-418d-474d-85c1-4cccbccb0328",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "5f3b07b0-18c3-4bea-8010-f2f448951e03",
        "cursor": {
          "ref": "a030db33-db52-4830-a9c0-7ced78a8542d",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "baf435ee-9b72-46ad-9aed-c1bd5e723e93"
        },
        "item": {
          "id": "5f3b07b0-18c3-4bea-8010-f2f448951e03",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "700be4bf-418d-474d-85c1-4cccbccb0328",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "8596dad0-0008-4c54-ae6a-ba0fcefcd4b1",
        "cursor": {
          "ref": "b0c95c1b-ee38-42fc-866a-de9e6d6e8e02",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2663d4e7-35ab-4e8f-9b50-6dac8f2c14c0"
        },
        "item": {
          "id": "8596dad0-0008-4c54-ae6a-ba0fcefcd4b1",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "4c1d1af7-0792-49a1-a6db-efc996c56114",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 150,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "3faf8a76-d587-4cef-9b6f-cb393e4bca28",
        "cursor": {
          "ref": "d0d403e9-dab5-4f74-8beb-7494619feca1",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f6fb37ea-fbb1-46de-a0a3-7babd5012253"
        },
        "item": {
          "id": "3faf8a76-d587-4cef-9b6f-cb393e4bca28",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4cef1194-ea07-450a-963c-0790d3787107",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "3faf8a76-d587-4cef-9b6f-cb393e4bca28",
        "cursor": {
          "ref": "d0d403e9-dab5-4f74-8beb-7494619feca1",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f6fb37ea-fbb1-46de-a0a3-7babd5012253"
        },
        "item": {
          "id": "3faf8a76-d587-4cef-9b6f-cb393e4bca28",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4cef1194-ea07-450a-963c-0790d3787107",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "1058654e-91e5-425e-a15e-e2b23d100804",
        "cursor": {
          "ref": "76daebc4-da4c-4268-a729-8eaa1c47d00e",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "23b01ac9-8050-48b7-bb9c-e13308ca772b"
        },
        "item": {
          "id": "1058654e-91e5-425e-a15e-e2b23d100804",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "5027db60-5aeb-4e22-a8e8-2a3f68b56ac9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}