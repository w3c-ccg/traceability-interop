{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "11dea37c-1699-4fd1-8568-1b886f17cba4",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b929fac5-fe80-400c-b557-48ff0ca310b2",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6edb3927-dc9f-48ae-a29f-55d1634f70e0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7ccc7652-ef79-482d-b238-4715182cc866"
                }
              }
            ]
          },
          {
            "id": "5e2618f9-c0ff-460c-8f89-0c3011efa2af",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "32f604f6-934a-4ffd-8612-5a0de1e6fb62",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "93311dc4-c317-45ad-94e4-87a8cb44a183"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8199450a-d9cf-46bc-b2b0-97979b867f63",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e5da93fa-8e44-4864-b8eb-d7ce80d89c17",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a06a0aa8-3a0c-4f58-bc14-91fd2a3f8725",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a05682cd-993e-4c61-ab56-0c314961eca3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6771a80f-8c55-4fc2-bd6d-2d3b7f9cfe08"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "18ebd3d7-f4b0-4cc5-8b01-94439c33529b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ab39953b-40d0-4850-b3f5-f8a8e8fb6ada"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bb7755a7-688c-4d10-a9e0-5cd89d439241",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f04a793b-feb8-4748-9c53-92f2f09c0b7a"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "97ff0cec-fb93-4f71-8135-e0da2eb223f5",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f594ce12-ac81-43cd-a2b6-5b9ff8ad33c2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dda9fbf1-06ed-4fde-9f4e-684f447e77ce",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f1599ecb-96f1-4f98-b0b6-0520e695ef48"
            }
          }
        ]
      },
      {
        "id": "1b143437-3162-4da4-bb2b-7ea9d86e4a5c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "db7c87bf-408a-4b16-a74c-3bea2165ec76",
            "name": "Negative Testing",
            "item": [
              {
                "id": "34c8f7a8-5861-4bbf-bac9-da98f555952e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e0cb6a57-5983-4cfe-8fab-ffbea92f622a",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37e938a8-af90-4b21-9424-f2705fb5af22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d1a2710f-8b03-4af1-83d1-198f14fda9fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ba1f93-eee0-4274-80c4-a56c05179129",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b97a915-1db1-431b-a80f-d9f026052309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2b65849-320b-4f3f-8c84-c18f4b463661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9e72129-ce0f-4380-b34c-058c56d04b51",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7caa5227-cfdc-4b07-b512-1dffe618e6fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bf7d849c-c123-43a0-a356-96e017266eca"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9f454211-e06c-4623-ae2b-697154158742",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "91e0c64a-d580-4407-a2d2-e96fd1b82a59",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b0f05d7-376d-49da-bb8c-e4f578fcf026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8ce9b32b-8790-4cc4-9155-1f380314a757"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebdf3bb8-293a-4e26-b6e0-238c63de6393",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2166787d-f5ec-4539-a0f7-1af347df2075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19b59035-28b7-4a95-aa6d-e3686a617207",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c70b2ab-8a87-461b-b06a-5b014f577f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c98791cd-763b-452c-bd13-750873a0ddca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e5accad-72d2-4f38-824f-2a530ce48600",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "79c77ab3-59f3-435d-81fa-3d7fbb01f38f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0d467a1e-9e09-4ddf-b5fd-96941537e4d8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e66e3e07-cf9c-4a5d-9415-ed2e7db98d3c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4433f1d8-9cd6-4bdd-a257-88aecd4d9666",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "77131268-0088-4c29-a5db-2565496b2011"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b1b346c-3006-43af-b58a-0e5bc5e3927c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "ea4ceb12-6ba6-41be-8d50-032f8f06e047"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "61dba15e-8a70-45ad-be72-59e5e1bef659",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c52da74e-2571-47cb-a4cd-2eaecf5b47b6"
            }
          }
        ]
      },
      {
        "id": "68c48b30-c1a4-4d9a-bf5b-9699d147dbb6",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "7153aa58-a1a6-4ae3-bb55-5cf073e419df",
            "name": "Negative Testing",
            "item": [
              {
                "id": "99aa4743-a8e8-4f90-be57-ce619953ff75",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "99ec8492-54f4-4f7c-8724-5a86e5ca0147",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d4f3bea-21f7-46fe-8c96-ef7a94d66006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b159449e-abb1-4135-ab66-a843d380125a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67641b8d-f323-41a7-9d23-f0a67233ae28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e7c8fae2-870d-4c44-a98b-53174640f521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25148846-96bf-4431-a3fa-7bb3d8f5c810",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f0bc07-0f69-4c78-823e-463d94f61954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5df318c-ee55-4be4-92d3-5c431272d5b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd2e6bf2-6148-45ea-9a1b-63e53614103f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cebcce6a-baba-4e46-93c2-02e6ff0ca63f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efc2b1d8-2772-442c-b976-8173a95c7df4",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1fa5a46-ae7f-41f1-a1db-b80177252ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01557b75-a8c2-4ad5-ad67-28b36dde5b8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b4baaca-95f1-46ca-9b5a-a280d34f3b82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f1edefcc-3999-490b-bd0f-b3e0c4c8ef83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d4526d5-8088-41df-b50a-980ba66f106b",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "816d4a97-d2b8-4357-bd65-7daf26122bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0893848c-1ea4-4856-9add-466e84fb57b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8445e0f-ad23-4943-9302-dbadd57d8631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eae1bcb7-43cb-4b23-978a-998e89ebd05c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "086d7e23-7102-4654-bf47-b8b952a04c39",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "989b0b7f-388f-446b-8c54-60a433f31e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "385ecbaa-0a9c-4382-925c-b85ed4caa41f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b386ea-7ecb-4404-9a99-a1cf199da78b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "085d80ef-703a-4963-b0e4-d113b0682ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aaee0a0-f6bb-41d9-ba1a-f4232a0af1a9",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b281003d-6580-485d-b1f7-6745a3a91d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f22fc4b-1f69-467e-8124-e910c820835c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f838728f-8fb7-48f7-961d-194a4453f73a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c14a91b-7431-42dc-a262-564d3c3a8972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60504bff-9b0d-42f0-be00-1f2dc1de8cd4",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91bb186d-70b9-4e5b-870d-626906f523a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2273b2d8-c6ff-419c-abcf-247810709223"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c338228c-ef24-459e-9e0f-55f1caf70601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "183538eb-18a4-4eab-b690-117e7ea84a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "032e4677-3220-4411-b79d-5d7e096ab57e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "252e7276-7701-4112-8d5e-eceef4b3e83a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d92afe7-2588-4b53-9a1e-3e933c61f034"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac2db57f-4845-4cc7-b6c6-417d0c151976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c0da8ae-d6ce-48fa-b73e-c99fc4edf465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75631b49-9674-493d-95cc-020c3d8bebd3",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f98198-2fa6-40eb-807c-315621f1204a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b828b193-008b-484f-a66e-33964d1cca4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55100c48-c430-4c15-9acb-e3a7ec9b25a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "977a9942-7b2b-43f3-9667-61bf0d31eeaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a406af01-75ab-4c22-9ba9-3b082277afb0",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bf16357-93cb-4a19-83a7-8fc2bc1a1bd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d17cd908-4db5-4381-a590-9ee8d4d964f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc140f5-7a56-444c-84bc-7d0331351569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fcfd5cca-c3e3-4f70-a5d5-6bb17da719ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d01812f4-714d-4742-ab48-10b16998cdf4",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b706d8-1e7f-4d4c-b556-a4fa06c00f59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a4f1136-2c68-4e02-b309-0acfaf5c3720"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b65013-60be-4c70-9342-dfd5bbd63a09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8eac66c8-bd95-4e1e-98b7-5d3dd1073f29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ddb8332-712a-4f75-a674-ddb2c13f448a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9046cd2-3042-48f0-a214-280a4e67b483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb5472a4-581e-42c4-8601-28831eeb33a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6792a493-3f40-4016-bd3e-f0f80d5f4117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7c5a71c-2618-4376-9697-a35cc6504ac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f767ca8-fb23-41ac-874e-9414a80bd530",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ca17ffe-cb33-4ce9-b0cd-5ce878db8b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "923b6f1f-84f9-4692-9606-ef958fda64f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d63ee5e-2cc9-4189-af3e-f938967560ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a6e56cf-348f-4c89-ba4e-beeab31ee368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54829eee-c64e-4dc6-8b0c-11e81d9f45f2",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba126d9d-fa67-40cb-901a-b88fc3f0ce63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95f867cb-e1c4-410a-b84f-61c20f1286c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62c186bf-03df-4301-96fa-faf6ad76e76c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2aeaf97f-9b54-450d-b995-0704e442af6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45619b6d-6d67-438c-880a-4f44a03650a3",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9078e249-bad0-4b3c-a6f7-696d0aade6e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3965642-d141-44a8-a066-e31ae3d451de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bbd5252-293c-445b-a248-354bd627160d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75a45b63-56c8-4d33-ab83-76cc080249f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f630dcdf-d8fa-494c-ad7b-370c5b8c9ec4",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c4628bf-2501-40a2-aa17-e05137747127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fef4ef95-7395-40af-aa06-018ca1ec359c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f96e91-68d8-4845-bf95-f7f064a792ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4a26f7b6-772d-44d3-bd8d-d5dd209cf13d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17c16a3f-5165-4701-bc1b-d85932eec4c7",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c64fc264-5c08-4663-9227-cf59193f7650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c558a486-294f-4b0c-8503-1f558f95d5f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f4bcf00-cce9-4c04-b887-896574871389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09d057a0-c480-48e0-b993-66bcfb72aa70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e0212b7-13a6-4f5a-818b-a330fd7cbf4a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae5f1989-884a-4cbb-9d19-2fba7cbc2dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c07ea473-34cf-4a14-93c6-89f1568481fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "592856b7-6371-4d09-a453-44fea5214987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8445264c-f652-4df0-aa6a-ccae6b4e00a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42efca21-4867-499f-b8e4-968e63b025c4",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e203cef-2a72-4152-9434-2337cba89e27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "660635a4-1d8c-4e9d-ace3-7fcb4eaa3b35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1212b6f7-aaca-4164-8166-ade9ed5a79c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "36cbc7f4-6a8b-4975-a024-03e613cebc42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ea9528c-953c-40fd-bc6b-3240701e1f22",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ec06024-29f6-462a-9f4e-9bf29bf73529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcf3dd7b-2f6d-4f35-abf0-360bd6c4e9b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea3fc183-abf7-44eb-8210-62f6f249f95e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4beb38ce-7a6d-4b19-a546-e6cf25e7ac63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0010455-ce67-4067-8e9c-c1f099df6215",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d87d1e66-642c-4977-8d1d-23ef2d5a1740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb0cfe0f-a184-4f24-a7aa-f7c143526967"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7958f218-b594-4ba8-95ee-58d2cef936be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "241e1749-6d96-42bb-9eed-4ed99b205e7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bcd71a0-b43a-44a1-a60a-5fbd7135f95f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01908e8d-dfb0-441a-a970-ef4218cefbc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa0589b4-6a7d-432a-a76e-f4abfae2134a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cfbc22b-0eb9-48c1-b1e1-dc576ef46f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "14b64288-b1dc-4829-aa78-d617f056f5fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a396d437-a08f-469e-9f5c-680dac67dadc",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9add7d3f-801b-4e76-9443-f0f3ae11a083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd930031-f1f4-4045-ab54-460284212a15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05885b11-f61f-42ca-b068-75dfb754e5c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8e9fb7a3-b717-45d6-9e84-09ccb5201167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb3a406-7e1a-4237-8705-7ee4dd4c0d18",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb4fa97a-189b-4011-b0bb-db151849adee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f501cb1-d670-441d-8d88-dd4a2baacfa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c8f1eef-7e85-4640-8823-48127ed5d39a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6998a734-8a57-4a7b-9392-8a6736bef1ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6753d307-f169-48cd-a26a-a74bab4c746f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76d67524-56a3-4291-945e-73d5893d3397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0a16352-92b8-4ad2-b30e-40cb5eeea08b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23907e82-be4b-42f5-8494-4e239b4cbd8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ca3afc2-b934-46d2-a860-2cb845831240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c94645c5-b71d-44d0-9d6a-6b98ba16d11b",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1718d13a-c9d7-45f7-a89e-1e98d61bcc1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bce0f968-aacf-424c-abf7-69af1e63659b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e318b3a1-378e-4c8c-a656-b61fc870ad48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ef9db7f-ee7b-4a60-9e85-32a7c20240ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0b0308d-07ab-4d7c-bdca-a9d85ff0f0ec",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf12c9d-018c-44d2-a106-95bf14f366ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8fe35c0-4023-4052-a28e-5995d342e95d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "497f9877-fae9-4726-9b12-3d9cee1cf938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce303d00-bf8c-424c-b8ef-c1829de01a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1659f8ca-550f-499e-8aff-ab79246e092a",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38b7d11a-4b2e-46ac-a67f-9c96dfea56e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee25ccd7-5c02-4a91-aeda-1b20d90faf7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1e9050e-1578-40cb-9942-11c5f6dce777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "06637591-dc12-43ee-9014-c479ca065b09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17a7b01-d328-432e-ac0a-3818d54e5e0f",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cdd35d1-2b12-43ca-9fa4-78db2a86cb23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed48d2e4-adca-48fd-9849-b99e52597848"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a91ea800-ca34-412d-be4f-01d424353484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d781f13f-7907-4ec2-9550-159e8f5e95ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "530447e0-4dc4-4554-af27-d57fa7f2499c",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8ba6d2-cb06-4a4a-9287-cbd6add1bd13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86a88546-881b-4250-8b61-914dbf1c0ee0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6f2dd48-b73e-44b1-b4b7-65004e5a967e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a8f32c8-917d-4295-b1ec-998f0fcfd32a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0526dd0b-cc32-4b69-8aee-decf8257b091",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c773aa77-c29c-4860-8ad9-7815f5ee2711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c123285-abb9-494b-8f7b-10bb49de822a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeea3b27-987d-4aa9-b1a3-689b171ec3c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb5c2517-d13b-4e3b-acf6-78a6aa89b4f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fade0a5-3761-4a7f-a966-b1131d54116c",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "686a0777-52ed-4bf2-9d0f-caced770313b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0f677a5-f117-4ecf-9fa1-0cd14197ab46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff84763e-46d4-4771-9655-a63d2f75e07d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d41b6984-e24a-4151-a550-3a31ba759cb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5361d570-842b-43be-a2e4-0421355b927c",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7de1cf2-ae6f-447a-91a8-3886fc1c63de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc945a57-26d5-4394-a768-1cd365931211"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5486e2a-6e34-4498-ab6d-25b508aa3241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "be7543d2-86be-40b2-bb31-18eafcb37511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1ce0955-e130-4c11-86aa-84d206e35843",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4167a10-57de-46e8-8055-f9e727e133ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f288c82-8f1a-4f12-a495-e3c9aadb7a63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae4956f-bb47-478e-83fb-1389307ee4ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6eaa9dde-906f-4098-895f-b0fb92569534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a6b52e-de04-4b7f-91a2-29c90ae76460",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d3c9345-91f5-448b-b7a9-79b11ae310c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb854b67-d8e2-4d18-b1ca-86f12a630317"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "500181fe-1283-449b-9e50-1639f3cf06e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "b3c90a5e-b0ee-4fc0-8d66-410d3c32f8ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a27f82b1-dfdc-4956-a01a-97ce295bbf98",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "146fd310-6920-4112-8afd-3fbe73a98f24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2ec45a28-92fa-45bb-b002-da94c9026647"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b774a4-7b5e-4718-af69-06bcea73496e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "471755a3-4e10-4ca0-8a77-582e38500d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "948f37b9-9814-4422-8b81-83006179b1bb",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b67aedba-0f18-4d83-bdb2-9ac325f461d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d2443f9-4512-4fd7-8505-0f369271efaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed9a8ac3-67d2-49aa-98df-9cd70cc82370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "35e66665-8b4d-4c71-b0ed-b308dec20f6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b16b1ffa-909d-42f4-8de7-4aa4f6ba5a5f",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1ebfc9a-ac5d-4717-bf16-cc92e15473d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa032ab5-300b-40e7-9781-6cd014562044"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3448c96-fc14-458f-b40c-9042e2da2012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a014caf6-4d3c-4885-b71c-373934eb0325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "886759fc-1bd1-49a4-90ab-c3447544b52d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5051edc2-5fcd-4461-a790-cf39220db7ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdceaae9-402c-426c-a549-97eda7adcc13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d4ef029-4538-4ed7-91e3-f5d3e4fb0907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1cafbbbf-a05b-4500-8a99-ddfcb50702c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60758ec1-e1b9-406a-a805-dc07d54f4d27",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "951b0228-f6a9-47f5-8e57-8ebeb566b8a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18441442-90cb-4926-b484-0b09bee67589"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ce57b73-605d-4695-96d3-ef3aa5b10d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "93bfd598-fd20-41da-a348-86d385c09559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a2a2bd-c840-43e6-b14e-bbb4aedeb627",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1503e0ee-621b-4898-ae32-a0f31ffe5934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc14d7c5-6b03-45b1-8103-739edd1b495e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bc526f1-c071-41ae-b36c-b8ebfff962c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "67e1d2d3-62c9-4431-a869-91c52888edce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d70e37af-8a0a-44f4-bdad-069c249cddc2",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a4c5a52-c535-48fc-9cae-c7bf9ba3519e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75c5fdbd-5847-4371-9643-52d52e19e537"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e68d87f-ddea-4c23-ba58-51a11154b7d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "16e55211-bbec-485e-9032-094315ad2924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a749b138-26ce-4ddd-889c-7dd1544c2a5e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a45c05-1029-4781-895f-a715ac6b9413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0d7b522-49f1-4e1e-839f-3d69c9724b60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f363678e-149f-49e3-b51e-ddc9daf0a231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "17ce3b7d-9bae-4c29-967a-e860362e41f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64cb9acb-2003-4864-bc9c-21e9c9ccf403",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03218495-6f51-43db-813c-94dbd94a30f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4011f824-a681-4586-9de0-906d227a40f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "459023db-cc3d-4b58-aa7c-27fa275383ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "c67148bf-4bdb-47a3-bfb5-b184d836dea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62c21f52-3ca0-4433-a90b-b46120c96e5d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "450280cf-8ce9-480d-bec0-994fcfac2917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbae8ed5-4472-433f-97ce-b2876a0c6b4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9838d74a-b839-495f-8495-52f5c7fa2940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5230babf-866f-4b25-8c2d-bd189111935a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6414adf6-5523-43ef-a828-50b3f4e84743",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6fe515e-7db0-4aa9-8cfc-8c3df4c58d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9740c2ce-91db-4634-94d2-1de8925fac87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f4901b5-0d5a-4039-a8f1-1530d3667b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b38bc19-41d4-46aa-b09d-d5fa90a715b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "748d8b8b-3880-457a-9f88-9aa2dc29a9d6",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b767fd99-a6d2-4b94-9c0c-b4be3ff3f0c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb2280ed-0d37-4fc3-aaf2-2078488b8c69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66e54e5f-29e7-4a99-9639-6d9ae8b38663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5621374b-7ca1-4db9-a510-e3be593c7738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c93aa0a-8c7f-49fb-aa0f-938c2a329edd",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6a676e-b8fe-4e89-8a62-63a41fa9d0ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1a22570-fc07-4712-a24e-541beb25901e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f37dcd0f-caeb-4689-8dc1-75fa73ac0ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab0fbc6a-fc07-45e6-9af7-2d60414d4ca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49d7af23-092b-456e-abdc-190774815476",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41cba710-fa13-42bb-9643-f1ec4613be1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9320c349-01c2-4c4e-bdd7-08228ff187c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "548697c2-fcdd-44d4-8fac-15888c817cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bdd7ddcb-1a60-4693-b679-66e8a836e10c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c974f4c7-bcb3-4337-9aab-4dfe4413cfd2",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ace06c0-fc4c-4264-b5e4-4ec335776c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c9e90eb-101b-4501-944f-eb482903066e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5df6b0cc-6552-4ec4-8b84-14622f417550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "db45d80b-cdbf-48bb-a83d-8772148b976d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f574bfe5-7dc7-4bd2-a718-8f2ab4ce1049",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6b40dd6-5818-43d4-a69b-506e93f03ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06a92cdf-034d-45b4-b669-a46cb05b79c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "112cf580-4eb6-4442-965e-1931ef052e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa8fb7b4-6059-49b0-80d5-4a92f71214b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd103d60-3d64-4fb8-a15f-7dea9e0e2851",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c7baba-59f9-4ee3-a529-585960500f51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c76a31d2-1502-4e22-940b-06f0cabc2f51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b73342f-c82b-4bcb-93fa-eaf05a6d661a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a86b1278-5e0f-4985-a62a-92a0b273f17e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d34437a-3074-4cd3-9bdc-ddf24175f36a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd9bd30f-d32c-4bbc-8d74-1b63f21f6b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2abea659-8da1-4ccf-ba77-0c07da407834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70619792-e89f-47ee-a389-7622d0ee9d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bed4efe0-6234-4135-8788-ceadc35065ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c684eeb0-fcbc-4946-8f09-166494b2d617",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c2c63ac-ac81-4673-a8dc-7bbd50dca07b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92748663-5046-4da3-b783-6c352d5c9fbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f6b6bcb-8c0d-4452-aadd-6fb2087b7204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ec0e1ea-1f99-4e19-ac42-93ff2ee3247e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1502c446-eaef-4578-bccd-19d2e10a8e42",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "113480ca-12d9-4898-acfc-be6b35425df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f4471fe-9c6d-4092-a0ad-cce3b4c2fbf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e220315-bd4b-4235-a455-8795fbe812a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8611dd85-0275-461d-bd04-cc61cf370064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38f7a13e-903f-4a01-8653-d36cb9caeeab",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6494c2-535f-4281-9f16-216e8cfd41f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdf62228-2cb2-4ae3-b2b6-11ac78aea124"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a8ee13-c5d3-4687-a8cd-33c0d334f8bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "965a7b40-8c14-457b-9b6f-099986ce9144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a70eef9-bdd0-46fb-a71f-eeb447e689c2",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed32e479-e6b1-4a3c-8ed2-790d95583d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c529f57-9d8a-43b5-911e-6d6bd80072e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a33aa97-519e-40aa-a621-4448c329f908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "25f34fb1-f114-4065-87c2-e3e26e8590cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13857be1-2574-4776-a9d0-b078293c4b28",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0635ead7-e0ad-45de-a9c4-d8a89f299f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cede609b-01f0-466b-aa1c-572934aa334c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2063816f-3517-42f4-a024-1e788fe8cf43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6cd1895c-cefd-4e16-b2d2-49227067e0fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a22959a-f371-4ff4-a06a-c752a88bd59a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94fb2a8f-cc60-418a-a64b-53a02746e787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c0f2b0e-e156-45e2-9e03-412f91454a59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7960e7f4-6e9b-4648-96bb-f5cbf13cdf88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "88454499-02b8-4854-9976-24c6acc46a58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d06b2175-dea7-4a40-a9e1-362390d66541",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c56a1ff7-afc5-41a8-a93a-e44c1f03546d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4c88371-e4f5-4403-a86d-29bd830a8d45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f78c381-9be2-41d4-a503-2b78a1f79ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "72a17c7c-3637-444f-90b0-92585a75382d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad047f39-1a61-4aea-a343-8f77b7a40a22",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7f284f3-3e48-4eae-bfcf-cc5070553eb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6d2af2a-2379-44ff-9906-2c8d324a688c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "224c1d18-1979-4c47-95bf-ca9d84bcdf24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "dad86ce5-3b51-4cf5-b1cb-8c7412c44225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e2cd686-e27f-42dd-a914-6ef0bc5de379",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a42e39f-447d-4c72-baf8-bcdf8c929380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5ba7348-45c4-4c3d-95ee-829bafebb13f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "244bddbd-164f-44e9-a293-9a830289f197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "1212eb2c-2e2e-4aff-a63d-6cc87150bc6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "946ecda4-659d-40e4-b803-752f04b80122",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e779131f-71ae-491d-955f-290956614628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "901589eb-c812-4ad4-a953-0d57c31456fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb9c61ce-7092-408f-ad08-e3ff779f4790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "06107ff5-6708-4e06-b9f2-f975c1354ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee5e23ae-b683-4bcf-87db-bdf8d4a73447",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d0bdd4a-96a3-4096-851c-61f3580e8ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69bdd28f-92b7-4746-8b0f-843728a7d898"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1455e9eb-a3e6-4800-9278-dcfaff7eb29b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "42fc4515-ca43-4a39-b182-da9f9ea87ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47940b99-2ec5-4ede-8304-6892a27509d0",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a179a7aa-2ddd-47d6-bfc5-31573094c72f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f210f33f-b6ac-4ed7-9412-e56de4883461"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32cb3010-e724-46ab-9c7c-7b9c13148ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c57a2c0-b137-45ee-88be-ffcdf3d8274b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09acb5c1-42ac-4e8d-bc69-db8c3f0ed065",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c859a3a9-3a2e-4d33-8800-222f93ca8107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30f64ad0-9bc1-4c84-be73-fbfbc6b7379f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e757721d-0c52-494a-8733-ab1b5b9802d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8312ed57-ba22-44c7-996e-779eef043f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b98e0b-1b41-4694-a512-bf389166a552",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b892f82-dabd-4093-ad02-661a355246f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf2c263e-2bb9-4966-b528-cea4d30e8369"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5f12f4b-70ac-4eaf-95c4-030594f2639c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4908ad42-b6b2-4bfe-baeb-8752f05f276d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99048447-f8b5-44b5-a356-32fe5fc3c26e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c31a0dc3-69d2-4f4e-8329-74e44b06cb8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb8f3ba1-614b-4668-909b-27c9da82f2bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "166784a9-4b9b-43b7-8ec7-2472622fffe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b000dea-c909-430b-a28d-3fc722c49b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b18066b-9350-4c1c-90b5-4fe2cdbd0f29",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "974e44b7-d38e-4a51-9de0-028bf817e55d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30d4ec9a-6266-4bb9-be42-b89a841869f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecd79458-0e9c-48c5-8e87-4b64d1a2fa97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "100a0f90-2aa2-4d92-b680-15f7fc5c4469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8107a446-8323-4b87-b809-c12dab103b0f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "588a7d7d-90d3-491e-8e39-1dc94ad46258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00aa98dc-6ced-4a94-941e-d71f7a5d3072"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84897ab2-f233-4c74-8e02-2a265fe8958d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "304924ea-c1b8-410f-9678-c2abda098baa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb77a9aa-321e-45b9-8e90-4f45fb3a9dfe",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e40ba9a-bb69-4883-b332-9f13bb8e9883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cb316f5-fefc-4bf3-abd3-f9d15c3752e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "348df520-5a1d-4fdb-8911-262eec923a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a718c11-fe17-407b-bdcd-a2f3a8a1e6eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "835bbd45-429b-4660-a9c4-c12867b80804",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fd5cf76-b6ec-4d0b-bffe-e924650295c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63db7787-824b-4825-aeab-102c2b088ed3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dacb74a9-a1c0-428b-8e67-6ceba9b2e5c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7bd11d6-f8b3-47ba-b471-647789c3e12d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c50104d5-b004-4c58-9f57-3ab48e64f7e2",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad7bf74-b914-4eec-8836-48a826eb512f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "016c6a6e-ee97-46db-8cb7-525bec3c711a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7151487-546d-40f4-86a2-3f9e2a2ff787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "456854ca-71ac-4a1a-8628-3eb4d4e1edf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e2d664b-be1c-467a-82f9-12a3877e047b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f26720ed-81ae-4bc9-82a3-a18da9f20210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c5840f2-e62f-4556-9f05-8fa1545b4cea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f926d343-3e1a-40ff-89d6-72639cdd4a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1d36d03c-fc4c-4614-b386-057ed4451e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a15992e2-4497-4bba-894e-2c38ce448cb7",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c000dcbc-0ccd-4e66-8bbf-164d6764c4ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b22871e5-e238-4ab4-b9cd-4d6a909f9cc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "459fc484-75f0-4cc1-a1a4-3d6df5e99c37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab14dd4c-3e7c-4447-86a9-7cff11719671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ace4e4e-dc31-4a03-b32e-0a52c4407c7f",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d56c69b-6db2-4779-9377-9feb47b857a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12151f3e-0905-40eb-b3e7-ace16a59a15b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45b4e06e-0615-4d97-97cd-dff4098d8c29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b65bf28-36a4-4ed1-926c-0d599b2d0815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fa423af-8433-4d7d-8706-04a183a43d0a",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19462b65-5a48-4a84-a850-0179ed0a1375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa350937-9dc0-4fae-9b5c-84e932c65019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61335e11-fa11-4aa7-9f28-3ea7d459a49e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "831670c4-511d-48e9-bcc3-06d68b5958b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8efed428-aa16-4874-9db7-2806d7a78b3c",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6901cbc-bbbd-4a9b-94b2-015754a32d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09d09a2c-802c-49c1-bb69-b2c5ed9d2ddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad47fd6a-20ce-4d44-bf47-6101128074a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "78faaff7-cd2e-4136-baeb-2d1ce0b893f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c077aa7b-d951-47de-b288-c0d9f9fe8dcb",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c6e5f9c-65dd-4443-bb9d-1a186359a5f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1dd2f3e-d6a2-4081-aefe-d2f88d776490"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12953abb-98fb-43f0-93b5-d6a93bb71ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "81eda149-55e7-4362-94bb-96c57c4ec7cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb8c061f-beb1-4845-83b3-581ad774d70a",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf332bd8-ed35-450e-b8df-d04a4866cce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a7660d5-1851-4f62-b6dc-959c34bfd172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f0a27db-b31e-495d-8012-f05ff2e60f8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "41272fd4-bec2-4024-b73b-e6d569c24e1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fccf73e2-5c88-46c7-9f41-75cd6f08375e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33f6baba-7a10-4787-a2de-541088379f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9539e30b-922a-4ca8-8b5e-a1816dfd729a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89f076a5-4f62-40bc-a79a-59d9380f8b0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9706ad8e-5537-4819-9d47-e36624ff3636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e2407a-5476-45ed-a410-1218106be733",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c403937e-4e9f-4a25-8b3b-43deb8385f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44235a71-d8db-4536-a5fd-9d015fce6ea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7731946f-7dd5-4830-95e4-0bd31cffdbc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a39310da-fdaa-480e-b53d-77b4d2afc3e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "101cfb75-b804-4be8-aeb8-82ac619689be",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61399f97-9ef5-467c-963b-7cee9d71fb7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cec5303b-b070-4a00-9c62-25ede99cf7a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d6c25f-0dda-4cd8-80b9-c905e411241e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e864506e-f481-4964-917b-3fa2419e992c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deab447e-5b32-4388-ad7e-25943074ae39",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "069cdc23-2075-41b0-a26d-19e729c0994c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b975a8c5-4603-4172-9717-3fcad33d363b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ab8e383-1e44-4c8a-be13-d044adb92a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca77f912-c57c-4ebe-8286-8ccffb314655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "812784fe-af58-4460-9981-ca2e0f63d370",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0041b77-5fb2-4524-acc0-349e1238dbe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51aadbeb-a16f-47ad-99fe-e0a183202458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7551d230-8321-4a32-b473-4086530ef08f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4c1b9895-cefd-45b0-8992-65a1dbdbd7aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c67c66e-17a3-439e-bae8-0170ee533f9a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c179f36-458c-4194-a8c0-7a918847fb0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45f41a02-8e23-431d-9e7e-bb91c6a4a0b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "183e2b83-f738-4c4d-ab7c-a01548d4dd90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca63f6a9-2ef1-45f5-b033-9a5d7ccd0c31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c163335d-9557-4148-892b-b321fe5e178d",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b9c859-a95c-48e8-9efd-fc33b9739205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "524610d1-a288-4dc0-a522-ee48009fd248"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5821e3f8-d5cd-408e-b6f4-bf4f631bd360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "69b0b2e1-31ce-439b-9026-bb9a12f1b1e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98a27aaa-2202-4d2a-b983-51ec335c1ca1",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "028558d7-74a1-454c-a173-1a84f7d042a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd039e45-41a0-4b09-bfec-fb36b7a86af5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f60fe0a9-0651-4f51-96b8-2800287b8218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "86405b85-19dc-473e-9a29-9dba7d8560a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e76c05bd-34d0-4e3a-8036-cc4b14105f24",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af2454ac-46ee-44ae-accd-467f2bbca216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f607fbb-d9fe-4dcb-9476-f4888f28d886"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f087a0f-b359-4245-8919-0f50c11c7d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "66f368a8-6b57-4915-bfe6-cfd31a5e1fe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaab023a-d6cc-4789-9f5b-a3cc1829bde2",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f37cf9b0-8562-466c-aecd-2669db8d1a80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ba31cac-f05f-4432-a363-2a13b7463231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2dd98cc-7543-480c-8b9d-c777de8a5251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9130cd51-64a2-4155-8610-b5b4facc62ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce2a7696-1930-4d3b-946f-ee97005c4808",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "483e1632-d831-4226-917b-135c80e9e09e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d24b306e-7027-4f37-b014-4a6630ae4a6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bedc1de-046a-4405-a897-50a6cb04b03c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "25cf6899-75c8-49e2-a259-44598974e1c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce508ce9-aa13-4a20-8682-730e7bfe3480",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a9b6b66-f752-48ce-8f63-a9c08dad5bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7b9f5e6e-779e-4d44-89b0-425489193af1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fccaf91-7005-44f4-9bae-ca05cf3c9a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "16cdb960-4f19-4334-bcab-ddceb49f6076"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "df56a866-c7fd-4bb0-be0d-de05b4f72380",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4d3a7b06-ce58-4da3-bf4e-74f8dceffb18",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b1732dc-249c-4c71-8003-eecf2192c9a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2674b4da-dc17-4b82-89a4-6179aab60162"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a195ff7f-a455-4798-8519-3c71fc1f7e3e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d71e43ad-ea9a-47d1-9096-28630ec704d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76cd6ef4-719f-466b-a917-7cb2649042e3",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2714fc24-6917-4926-9db3-3e09408c2ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f863073e-37ef-43f6-803b-2c40f5fb96e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77661de8-b53a-4870-aa07-f2acec450020",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "283b1c20-421f-4866-b6b4-65e93d3b0667"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb080e83-eaf0-41f1-8e98-422da01b7508",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2a0267b3-1fea-41d3-b88f-20d94deb1f63"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e49b7df5-4662-4b0f-9e32-084f24f6ca2e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4097c466-cf1e-4743-b61b-5be97bb9ac51"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fa5bbef4-cb35-4d3d-9140-b3f3bfb3c062",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eebd712c-4a43-4173-827d-9d3c83638c9b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "36cca705-3508-4d34-8e70-6cf315e0d234",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "852423a2-5c77-4b27-9a72-ce68c9a66091"
                }
              }
            ]
          },
          {
            "id": "ce869116-5e53-4827-8366-0ce85ff0a885",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4a038c11-6bb6-4bc2-a45d-710a798325ed",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bce0fb36-979f-4bed-a0db-e8a0f512b19e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9077799b-a304-43da-88e4-e62067875db9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "283e6f66-1e35-4ad7-b0d6-62935db5cff3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a7ae5b73-5800-4c05-87a5-fca0eb9dac20"
                    }
                  }
                ]
              },
              {
                "id": "4d3df2bc-4ce5-4632-82df-6f38b514d8a4",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "07b4509f-00f7-4025-9418-4c89160e9e0e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "64fb55a3-0dcb-42bd-b262-cc07f04ca938"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee30491d-dc19-46bf-9162-4a9564bfed88",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d92f7835-c58d-4ea1-a687-9a3e9c12237b"
                    }
                  }
                ]
              },
              {
                "id": "5b46ec46-770b-403f-aa56-3ccfa57b4232",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d66fa763-fdd6-4691-ad69-12f5fe1bae15",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "82c8feca-ca92-41ef-bd8a-7e5e251f0f1d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "98a23fe9-ac0e-4cb9-971b-c7073fa6f297",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a8b4e782-b1cc-41f2-b427-100b77744a5c"
                    }
                  }
                ]
              },
              {
                "id": "22f29dda-666d-4614-a0c0-8b76213a0238",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "09645672-ff42-445f-866a-612d1e668d07",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f84c7fa5-568e-4f34-ab97-557ea7aa9f1f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef490274-46bd-4b13-88af-4f00918202de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "8c0bda44-4faa-459d-b1ea-6fb2f6fe8ece"
                    }
                  }
                ]
              },
              {
                "id": "b4f6914f-2c6a-43cb-a35c-2e0bb0951a49",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bac9de2f-9304-422a-9cb4-6b487399e3df",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1b0f8ab9-c961-468d-b008-12a1a31e7f26"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e0d4d738-3afe-420d-9f00-c341ee97a694",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "69692cc2-bdd4-4bb2-b00c-ba499f85352a"
                    }
                  }
                ]
              },
              {
                "id": "ae2359bf-2ccc-4e1e-ab16-951236ba2ec6",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1138d82-e98d-44e7-ad0d-da5b7afed091",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "464ce81a-472b-4d34-8763-890d600c17f0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "41253667-b607-41f8-8fe0-62bf182992c4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "59c2d3a6-2822-44b4-893e-14893a0cac29"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0cde77e6-956b-4ce8-8b98-967a074d725e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "61f138c1-a942-4495-bcf4-60a014d7a14f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "30776d4a-f039-4aea-adc4-cc580a911bc0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "49e3b770-ee49-40b4-8f00-135290fca370"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b2398efa-e670-4ccc-a945-bc6439bcd3a0",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "0957164f-f6df-4558-9c8f-399d7d662b4b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4f2174ea-81ba-46d2-822c-239b1b7db4ae",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e14ec7e5-983b-4e57-85a0-946fa72a42cc"
            }
          }
        ]
      },
      {
        "id": "7f6709e7-bbbe-4d6c-ae95-3a77141cdbb6",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "bf303f83-d27a-4f0c-8f16-44b1dd147518",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3aa35e25-c597-416a-b274-1678fcb16b99",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7bb02770-b402-4178-ab00-6993ddf3652b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce22da73-75d5-4d81-a643-b7a3aab6a7bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "393307b0-a705-45eb-95da-dcee87bc0b5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c07daeb0-5247-43af-91c6-74e46555dc96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "55600b84-1d3c-455a-b5e9-297c21556816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1c8f39a-6da2-4f46-83bb-6633aa6bfa6f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e1e2912-2f57-402d-8d85-6d1222c40b07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f7efd03-c5c0-4304-b9da-d0649c1c27d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "604c30db-4082-4c93-812f-35251260c164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2d6dfcb-f980-4b09-99d2-22d8b3560d66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dabc55d-ab8d-478b-8cba-12334e51b7b7",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d273373-287b-4eb7-8163-25e6ea81abe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fbccc98-0b21-41e6-ba84-6e841f1160a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c67bb2e9-e7ad-4d25-8e3f-7b7ed83bb6cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba208ce4-2907-4dea-8261-83d6ae582574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b23b58e3-aebe-4ca7-9199-9c0599f5c6fe",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9af8b613-a233-4094-9f1d-dc16b9fc0dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a9ad73c-ad94-46f3-9015-a6c6c7e78a38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e42692f6-80b3-4c95-8d4e-332a60363788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5f24e29-6d88-4adc-abe0-b06f9f21e4b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ce4348d-6545-4168-9b17-33fdcfba1017",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07039f66-f3f9-4934-bf1f-c40f58b1b3e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b139a4e-2822-4de6-b791-7cc658cf594b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e119c366-ff27-4a62-bf17-bf909ae75db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e55f1c3-70de-40a6-9969-4e948b0bf51f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6baeb8e3-ad52-4018-89f8-b3a1f5882cdc",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b54c49bb-3a2a-465b-8226-f1acbac26bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5aa0e12-47ef-482f-b003-f8d49189c5a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58d1d47b-1284-4880-a08e-d9107b37ad58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "765ca6d2-18e0-4127-be48-d4c0ef8ef3fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae8a7620-acf8-464c-bdef-f5e6dab9c3fc",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "136d63c1-f7f7-4322-bb1f-73947440e854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d08bb951-c66a-4f27-900d-a63493aefa0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45ff0a6a-ed03-4ce3-a674-b1244504accf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "caaffd62-d7a3-473a-891f-f19188e3c62d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bc98fc9-262e-4226-b298-60ced57bbd22",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c88474f-d2e3-4c02-8121-7e8bee1ab09c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b57a301-a1bd-429a-9f0c-0cb274c5a796"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c8aa8ac-735e-4ed4-b7a6-1e27efba87af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "67a8f985-4564-45b5-b676-81a3f5b8b866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d5390b0-6d3b-4560-aab1-f72a161e7c03",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7de00dd-81cf-45e4-8f29-28c9aa022a07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f483770d-48ad-475d-b3ef-6d03ba6c712d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19509424-2f16-4c36-be23-b85c8572f2ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdd7759c-956b-490c-8e63-e5b2a0724363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c310ed1d-bf1b-4118-9613-22be6372b35a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3697a2fb-215d-48a5-b5b9-b51918708a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eee40c7-e71c-4ff3-a725-8d303535fba8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17ba74d6-e2a1-4ab6-9d32-72b36698c4cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1db7f94d-7d4a-4664-885c-92319a742993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0205dcc9-7c03-4d58-86fa-db34262c2463",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10d0297a-6281-4d48-99ae-99cfb34c97ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "469e6782-040c-4137-9671-69a25c724fad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f7f801-8b36-4025-9050-3594d3af8d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5125fb90-46f8-4a58-8541-c4a3e9d4f256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b584b106-9005-46df-beb6-69f1c3dafd4c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f28f3341-12b8-444d-89e7-57d839eccce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "997f374e-26d8-43ce-ad65-853b22e6b427"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85bb956f-85ef-428f-8940-e4d1f2bdf10d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f6423076-5f1e-4f6f-9877-c2f0d11bc51a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d0876f7-f0de-49f1-a62f-a9228cc57194",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dbda9a8-860d-4d51-a2a0-4ff427336443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e02c8c60-992a-466a-ac38-80a10e326a13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49da051d-df0e-4525-bf1d-a49798bc75e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c31431c7-caf9-44b6-8359-bf4a895915eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "859bd525-0952-44cb-a62d-c9098736ee8c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b24b1865-def8-4093-9176-b809ae39a5e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "041bd464-4401-426a-bf20-02767b0ee030"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bddcdf3-112f-40f3-bf2c-d35b80f20092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a45ceef-49ba-46af-b937-906b31599578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "239b4f89-02b2-42e9-895e-eaf3ed91ba72",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc83adc4-c6a4-4cb2-8894-4466b99ddf2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "679414e9-c16c-4c34-893b-465d5463db2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa1b91d0-e464-46d7-8cc7-986a1061efdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ecfbd43-d03a-480a-bc33-7c4d582fa949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7779fbff-98ec-4ed2-ae73-edc6a079ee96",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6b775d7-1cf2-4e9e-990b-e3acf9671522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "762d1a92-cac3-4c59-bafc-a1a8410746d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efdd0a08-44cd-4ab0-a2cf-c4cbacb731ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab09cc3c-cadf-4d6f-bf17-e1c95ebde428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d59f7a01-1862-4cb7-8a5a-b87f1726735e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2ecab9a-f9c7-4a68-933d-05d327d1149d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62187ae5-904b-42e8-9b5d-27b868ef526e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a770b5e-77b3-4562-bbe4-928a6f97e173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "dcb81e93-746e-4697-8356-99a3dc90eced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18f87b10-01fe-4c96-b66f-844eef56095c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51480a3f-d801-4052-bea4-f319de83ef17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9909e5d2-003f-4bc7-9ce8-55c9323208fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1cbfdfa-bda2-4a82-b871-91a600644492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb408433-d8a7-458c-86b9-233864d1770f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "569a0217-1bf7-4120-877d-c5153ce24c77",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77684d32-fb28-4a87-a059-82cf88e4cd4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f3d1a02-ad51-441b-9053-9043206ca046"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddfee889-e82a-4021-9550-dabe2c2d4d1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "555cea7b-b943-4724-8f6c-0e4cb629d423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4611eac7-e37a-429f-b7f1-0ad2438c8acd",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdad340c-1a13-459a-b5c4-d8de40df7c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fa01e17-7e2d-49b5-af53-66d6f3038102"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73325ccd-e085-4698-91e2-70529471b9aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de6757ed-7da7-492e-8e1d-870e37f004ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21e67697-8985-42ab-913c-bbd7b81dba88",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de56997-261f-4ad2-a5f0-81742892fd5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e78e64ff-0e2c-4e95-91c1-9c76b99eed49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99a1588c-1858-44f5-aa53-6daa89130606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "767f8527-0649-433d-b0c7-d9dfe8cff47f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27425f84-d0b2-4e7f-981b-3c451d682bd8",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c746a282-d3b3-4478-9cf2-bc5e72036983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eaf1782-ea0e-4a18-9306-f3c6c69d1d78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3f873ac-c045-455c-a9f5-f43bcafb21a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36412bf5-c01a-4ccd-bf90-6523b38f04ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c410bdd-13a5-484f-8c4a-df93632cc293",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba70b2c8-3a82-47aa-b2cf-d1bd0867aac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "947af5c6-5f39-4d30-b9d7-5c238ba26db8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58260230-9df0-4def-974d-4d3780212827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d15f05d-5379-488c-8797-e13cba13f8bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc4dc48-9917-4c73-9382-55df1bdff2cf",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c6e7666-a45b-40cf-bc7e-28cd5d0a55e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4060ad74-547b-46ee-b5fa-71b2f9629e69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bbc9494-0411-4f7c-ad7e-b56a7dc7b8ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9ccef78-9ecd-4ef8-ab87-4e922f57687c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "458884da-c336-4a87-ba96-7c435560dda1",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9dff806-1a6c-4c1b-8f1b-a49a5fa7d0c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1607526-661b-4a08-930d-d5d7ed6bd741"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f65ca61-37bf-4bf1-9726-d1125e4b5e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "beba57a6-faf1-445f-b2e5-7d3828fbae82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4930aba-717d-43fe-bf75-b4b61614f445",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5cc6feb-8982-40f1-a5ed-592cff64b79a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a9a3be2-f12c-4659-a656-354fcdd4047a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df0c6151-15a8-45a4-bd8e-b6c503dbe5c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "86f50aa8-89f1-425c-8f72-676a5cf63f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d09c756-ba2b-4227-866a-e274de5c7c87",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46a8daea-3834-4031-a9d2-c647ac7c6be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9da599e8-da09-4870-a07b-940fc731a891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c56d1e6-d565-46de-b9cf-a9ad19176d4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9be6ee06-07fa-4051-a17a-12c83fa131dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7df84b2-c5b2-43be-ad05-b9cba25fafac",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8f63e3b-311e-46a9-80b6-f49119040d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24fd41eb-e498-49b6-bc59-3f6e497fcf1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9e741df-4f3f-4c68-8dab-d8655ffa4d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a11aaf73-35d1-4717-8a0b-52a3b647c2d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a0c1f11-d6df-4c86-ab56-f694a3790602",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecddca0d-7dcf-4472-b412-c7efeb138664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70048d2f-371e-49dc-a784-cb568f31532c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0da54810-8b0a-491c-bbe4-32a5fb3daa3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b76e4274-69c4-438b-b6e1-5befcd0d75a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0914e75c-2e49-47bf-a5f4-a656680418a2",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ed27a22-f41f-439f-b806-91217c19b676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "625a0a24-925a-40cc-b854-11d3a80da84f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dfa4985-48ea-4adc-bc46-9b2f13b3af42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d1c8eef-2154-4893-b961-30858a467f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21834325-a58e-4506-a80c-d11413e03487",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4fc226b-1ad5-4825-bc4a-9525106e7482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ff4aebe-78a2-471d-a30d-bc8743fbab6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "598d390a-68d0-492b-b7f9-f2f7b6680f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ad476bc-fccf-44e6-a145-ea2d3336714d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede786e0-491f-490e-a7d2-8721682e2bdd",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d4efc35-df61-4538-ac58-5b6e6b9f5bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4c57395-9825-4a5d-b440-f8aba5ee81fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e3a103d-abc8-41f7-9871-05e57d24bb76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "109d5647-b4c3-40c9-a7b0-065494ef1fb7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c02862f1-dda8-41d8-8f37-a8403f7da6d6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7d587a75-7111-4572-91a7-cb6450699470",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bba2a703-3c8a-482d-b5af-4aff3d9c1eb2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "610ca5af-04f6-420a-ba64-7c73ab5f728e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02195241-dca4-4ae3-947d-513fe802af83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ec2361c-42f6-4f23-b7b0-2e782b8cb2d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3af917c-f297-4123-baf1-d04a72544a6a",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a65b9e61-6df5-429a-94a7-9a3b1a934b50",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8c9eea1f-664f-4b81-baad-62fcd4bb879f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09e0aeb8-7949-48e4-81fb-9d185fa38a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ccd50da9-31bf-4d5a-af60-22a7aeeba262"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "59f6d494-9520-4c7a-969c-e430945a7915",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff8ae39e-bfae-4805-bea5-6252a614f9dd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5fa42734-4a71-4854-b1af-73386e75973b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2a212a46-7b48-4b84-8e9f-612d010c0681"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a2a35357-ba54-4b6a-8f68-556fb2d9949a",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "90b0db07-9bc9-487e-aa7e-ddcaf8db401d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e5f3449c-9efd-4d3a-9bcb-3659828f8e77",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ec7ce8eb-b641-4b4e-8209-f809103a1a25"
            }
          }
        ]
      },
      {
        "id": "7072d7fd-8ad5-40b3-b2b3-9aeddd380810",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "a8f486de-2c12-45c2-951d-3afcddb45b80",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6d281ada-6601-4259-be13-c7ff4753a52b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "51695000-37d8-4932-a1ce-c09228ab15cd",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03b46d6a-4ecf-4bae-adea-ca9f8fbd926a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af0714ab-883c-4952-bed3-46679fb2d34b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "700ccbe9-2e91-4034-b8b2-ce441d1031a2",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a384a7e8-761d-4304-8914-006edad1f7ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "882d4968-540d-43b0-9544-fe737c2d9e52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac6495e-a1c9-4773-b77f-3697c17631db",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67599fc5-970d-4fe0-9361-ade61754e50b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60b2000f-f04c-4aae-8ef7-f338451b0d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22a53570-6e10-4bf1-b83f-72e1d557853a",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "621889c4-8e63-4b95-bc75-8c4f8d61f7c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6610b83c-b4a1-4fc4-9823-90787af08d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d59cfd21-2b18-4391-9ced-b8efd891a43d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98766877-97e9-4bd4-8650-031ddd466ac0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b3907a1-4cec-4abb-a071-82cd1d32fe81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7317cc5d-9085-4418-a45b-7b7f8a89320d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c516ccb9-a05f-41c1-a41e-acd3cf778dc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83ea70cf-9c97-4fd9-98f7-0cd7700356cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d92e336-12d0-4409-8dba-4eeadc3f6b28",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "100de08d-dca3-4d8a-9550-b818416ff99f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ed887e5-465d-4952-b69a-6c54c8b1acb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eb871ba-96ee-4ff1-9643-c65fa0fdcb21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dae730db-6b36-4152-b292-de5e3c322c43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15b3264e-65f1-4ee0-9893-aec16c1989b5",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c3ca34-2cc3-4f1d-a79e-746bb05ecff2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74cedd6c-3b0f-41b3-958a-5814625ae726"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18bc0e62-1e05-4abe-909d-d72f012974fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bdcae9a-0ef8-413e-80f7-ad58c17bbe01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c0096fc-6e44-4eed-8c53-3a4d537c54fe",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e74871e-b665-425f-97a9-0c68789c5cc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e8dffa2-7565-432a-a424-1ff0f57b7e15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cffee5e1-7d76-43c7-9918-fcc39a6a65d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaca45be-bdf3-45ac-b0df-1fcaedc3935a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d70f654-038d-49ed-a2c5-e527e0d62113",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0783f4a0-70f0-47b7-9bc8-6a5a4d605c01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a626b371-bf63-4904-8904-66f7989ed1b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4a8c976-4be8-4bf8-a47d-4e03f03a9237",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01a5ba00-4504-4d36-8829-647659434a4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "821b6989-7a33-4631-b730-d93d0c541d4f",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb51cd18-9a14-41e5-90e8-17a5d8b4c33c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b941df9-fe40-4d17-849f-e88123bf5037"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e67a7970-3c8d-48c8-a143-1e91061784ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1bff7c4-8beb-4485-86f6-00098218a2df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19c913a9-08f5-4bfa-84f5-9426b6513902",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd1fa385-5fae-482d-9222-6aef432cfa92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c952eeed-c3d1-4497-a5e3-39cc081f9b55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "391251bb-6a5e-49be-a9a0-7d32dd208e39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41eec474-f420-49ea-a5f6-cedc7c6802d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd2ceacf-9e99-46c2-bb00-8fc6b28bedd9",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "749b3d50-d177-4717-9cf6-e28afdc90c24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbf06110-1b5e-4197-8c97-ffa97112af44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7612ec6b-f6b5-4490-91cf-0abb44c48e7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af8b0650-f48c-4948-a09a-5284eb87e722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9f5d489-290f-4356-9018-8b62b117a516",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7618e37-c965-438c-ac9c-99a36989caf7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c97bf1d-cef7-4a3a-849c-4fa622091c51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c360d739-377a-403d-9aa7-80d6c8af78e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d12b768e-dfb3-4922-b97f-1a069f072efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70c1d4c5-a7d3-4621-b730-04b54f5468c0",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b4c339d-cf8e-47fa-99c2-e2854e6988f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "643022aa-bf28-46bd-8260-1649d2aa7a5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34538a1f-f850-44c5-be89-d2c7f51a3278",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2bf1dc7-fd3a-47c4-bbe5-aed942cc1c20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83fc1679-a765-4f3f-a641-7a132b22ff56",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4498c8b9-04b4-435a-9a25-75702e6967a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77443595-d37a-4e1a-a6ec-41fd881334b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a41cdfd-3b8a-4d35-9e8d-f52fbeaf809a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ee3e5d9-65bb-43d1-8cf5-8889c478242c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b13ede96-d45a-498f-b60a-b337a4bc28b8",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f178f423-25d1-470e-8165-4333880758a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "931db97c-1312-404b-8734-27f34613d4ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35c0b94a-99c2-499f-b91b-00be894b43db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e80a43b1-14bd-43ca-8253-1e5d8bc0461d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b8360a-04e8-43d0-b006-14f776e518d5",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64581fa0-9f12-4c07-a976-65342f3cfe31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbf18a8b-a509-46c9-836d-aee4bf90cf03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8f3e68a-d184-4507-8d51-6f6b396c78c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36d9d578-dc9c-4e06-a10c-058e5a7e472a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48dcdb75-23a6-41ab-939c-65d16e695007",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd660747-616c-43de-8974-721f1f0476de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5986394-270b-40e2-97cf-40454954c938"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd75100-ae9e-4b96-8b7c-4421dcca5f44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd202c4a-c74d-414d-a9a9-1cdedfff1f80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9152cb5e-cec4-4dbc-a5be-07aa94ab0165",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c3caa5e-990c-4e58-ae09-c68759598667",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "236edf0e-854d-4351-bfdd-7a2de3f864e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5005fcac-f6cf-441e-8867-ca822d9635e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc2863c2-0e22-4591-b0b5-e30bad097b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "533c1700-bf75-415b-b63c-aa3603ece191",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b6de738-e030-4bd4-bbe1-9024bf4e57c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00e70404-fb51-444a-afee-56807e7433f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d03d2f-d597-44de-8197-fb42fa2a0a0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fbabc8e-8f7c-4eb9-a49a-9cb57399773f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e4efa3e-becb-43d6-adb6-606232b0aae1",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd91484-0cf2-4354-a9b7-c8ee93d9bc14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10eadfdf-3823-4ee2-ae78-ee6dac5cb51a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "611bf966-7c07-4e32-a7e1-9c6bbc01001e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81f0c889-5531-4df9-a5be-a8583f98e2cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f71c283b-237c-43ad-a681-59555cd9e9ed",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "020ceecc-f9fb-4269-a002-5633cd78461b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3f53453-a4ca-4da1-9637-be8f10a430ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc0b208e-00e1-489a-82c8-bde5d310cafa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aca5821-7301-4466-ab57-add714a607b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6026bad6-68c2-47b9-829d-c7df30d58110",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d30e6d5-a295-4e76-83aa-0ce499e7773e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0450d16b-2cc3-4484-b79c-d4725536dd9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ff92e2-06b0-4abf-a94e-4e201a84aa52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99d16067-f793-4478-9671-7da1909b725e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95244b51-5946-474d-b485-71c9a51e38d8",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11388016-d3ed-4a92-b286-7d2997eade33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2628f45b-0463-41e7-a3ba-f79189ceeae3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5119df1e-54af-423f-ae53-bd50fedb17af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96f7a81d-dcf0-4afe-bb6f-8888987d4dfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c20d6f92-7190-4619-b9ac-575a08e523d5",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "576f3e1a-f3b4-4f82-9ce3-2358639ecce1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8113b581-dac2-4c39-8634-9cb394db2be0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbbc46b5-8bff-46e1-90c4-056316682dff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d5d134c-a8f5-4c10-b172-1e2a33b87834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5ed30af-2cb0-439c-a557-a0b70a4a9b78",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "793282a7-c557-4c1d-81d5-a046da355a26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27eebe2e-fc84-4a92-86b0-2b1029ce0ea3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82de47dd-8bc0-4ee1-9210-3c9d37a6f5d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "882c799f-85a7-4d3e-989a-ddbf260a3e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25e63a90-c866-4e4f-ab0c-608c6b4b153f",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66953cb9-2e24-4144-8494-0533d9552bd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2138894-0a2c-49e4-a397-51070514f926"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa548d4d-ac57-406c-ab3a-1f063ec4207e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1118b4b-5f5f-4d47-bfbb-66213de3f013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "939f59a3-578d-4c93-9aba-dbfba99a77aa",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf15b3e-0e44-4e6a-acb6-17b09bd85fae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a48f600f-7b1b-40a8-b0db-3e3168a1ceb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "698dde76-1e03-4250-b9ae-83247712e7e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c19c03e-3646-4264-be97-7076bd05bf82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5057398-fe33-4e9e-8a97-dcdb85d72bb8",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "657329fc-133d-4b33-a28e-b4a4c1ea0cf5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70ce6f14-baaa-424d-82e4-fa483906a2da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e6dff87-7844-4fb3-87c8-9b7a74a12ab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ec38931-614c-4ffc-a711-0532ecaabe2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb6eea83-198d-4a3a-bd31-39d15ccd145c",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95cb0807-df69-4fa6-ba3b-f795ece06991",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3da1be1-5912-47df-bc10-609751a38dd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca33a7dc-ad09-4aca-a026-e9a6e11ae062",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48948ae6-b6e8-4a9e-8ea3-259f69c9be31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "963d4407-b470-4289-983c-075be0565d84",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c4fb04a-7aba-447d-9345-ecc670207945",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20c8cc8a-3b06-4ff0-9696-1a5569473bad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4c963dc-9226-4951-a829-cf99bb317a13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "328a5fc1-99c4-4ade-8ebd-5d4f4f1ede3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44892f05-7410-405f-98d0-8f29d3fde501",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b83d14a-95b3-4192-a354-92273d303242",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf767195-0591-4c66-b4a3-8d4da9e68f79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7151c76-4a6b-43f6-bbbf-7485f27efdcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e73a1625-491d-4a6f-ae76-15151161329c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be24cd62-7e90-4ed1-8da5-2be332b7b073",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d00566e-e139-4c76-b385-11139393e08d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ff7e47f-3d1c-4085-b239-1b97c15abb6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c6b23fe-c92f-440a-98a2-8d1c31e4af73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f26a4703-6ad6-4bcf-ab96-cbbdbe64f760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f3d6a25-f348-4967-9359-007c12a5e20a",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ce162a9-973c-4381-88b7-a7d62944cbbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "929dddd4-5976-4f70-9b2a-8710a9c6db00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7505313a-58ff-4adf-89f2-50394d3b4435",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec6d78bd-9a97-413a-90c4-782cb6b7e759"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26a53499-3a7f-4ef2-a47b-15db3b25d648",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c30f1c0f-ce46-4cb4-8a68-139b6c61f107",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7101684-e6e4-453d-b6ab-effb3bcc3d57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b64bca-72fe-45bf-b794-b09bb66e86d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1131f524-d8af-431c-9bee-57f03cc1545f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ebeb5e9-cefe-4957-99c1-16043908fb3b",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "299308ee-d8fe-4ae7-9f64-c3ccbb3816b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff80fa62-7a54-4a4c-90a1-99c95d53de9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80cc53c5-560f-42ca-916d-d9e16bde6263",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2c12b23-ebdd-40a3-aa1b-30acd9d04f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68c2af2a-74dc-4679-9d60-97df7015c121",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac171eb9-6aec-49c3-9f9f-0e3989e842ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5784849f-5b95-4fb9-9404-a4411b402dee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e72d444-90a8-4e89-9104-49155f3c4cdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0efe765-3d60-436f-81d0-4902ec95666b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88f1e1c4-9e65-4eba-929b-4327b2ce6bc9",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa23dfd9-823d-426a-9783-54f182e1de41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b4cfc4d-9594-4d22-b367-744059a03681"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49286dcf-6247-499b-b28a-3bd0393e4d01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edbc6a8b-0f27-4cf2-a366-9957342d3344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a97a9e2-f3d8-48ab-83e4-552743021ef3",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1f2650a-69be-4548-9b54-1a5dade7701d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f069662f-13dc-4de9-b94d-08f9878a2e82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d36da3-3d82-4a3e-a860-ca29f8b7141b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b77d4ae7-680d-4cc7-90bd-70ef130fecf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "695e735c-4e67-4c0e-88b8-60626925c54c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e75eb4-71be-4713-a1c6-9b550ffc9f77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8dcf910-b765-4314-be67-0098757b4223"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eff3a92-356e-432f-abe3-153212e432bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eb3268f-c5e4-455d-bef9-9b419bd62004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c4ff8a3-afba-4782-a787-4981ebdb4709",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eabbdc83-9c5b-49b1-9837-601009cdcf8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dac06c7b-10f4-47d9-9ea8-95acc649972a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ae6d702-dd8f-4164-92c8-b8ce398cb3cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e1ab5e2-6972-4bab-a936-f888b1c94d12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b87451fd-035a-4c29-b862-86189e5a139d",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95e031e4-c9b8-4d3d-a588-d44bd099128c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbf22337-f7d1-4db5-81fe-d6a7ea06bc55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55a9aadd-754c-41b8-bdde-37a0ea1b42a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46077d59-8134-4537-8a76-f88daf1381f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "559dacea-5977-4164-bdd1-e40616b9971a",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aefac29-764a-4574-ad8e-b3afbcc30d68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01be6061-34f7-43ba-abc8-65872c764a46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "688ce3de-331d-4373-97c2-ca4d2c23cb0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0225ac59-2560-4e70-99eb-691862d46239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a55d45d7-c027-43c2-8b1e-460d4d95b29e",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fcfec60-ea8a-4af8-8f19-53332b19b657",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc4a8557-a5de-4ceb-ba56-dcaceaaae755"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f3fc8f-fbb2-4ab9-b449-89edea5bddff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa229f8f-aa03-4208-87be-854a1f3117b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1be66afa-642d-4d33-a647-7c89fe56dae5",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63db83a2-2601-4aef-9d4e-54edcea5d311",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b83f0c36-b1b1-4394-92cf-0b8f5a62f78a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc4ca62-1193-4df2-a7f7-5205a455666a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b9c6cad-c761-40e3-9889-77e6b1e6a650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d14b7e-9ac9-43c8-9037-3464c0d1a29d",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "731126cc-1b9f-4cd1-b7bf-0a728b4d0a29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1dab4fd-b896-4ee5-b2c6-d22665f53eda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee4a234f-342f-472b-9c25-1ac621d683fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96109a62-644d-49c2-ba26-a79d59c45982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f251815e-eef3-46fc-984c-9825898da337",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e5ac8f6-4ce1-4246-a778-191f0548f27c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b8adf24-ae85-4b63-971d-eab71a5d247c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2374de07-5e51-436c-bb9f-65cda8431787",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a3004c7-a6b2-43ff-b22d-d8e6f5bf58bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edac5f6c-1579-47e7-92c2-eba74d2988dd",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe81c563-bbf3-43d3-a11e-f81711427828",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcc04cfb-4c8d-4fc9-9e25-47da43e4e5ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d2241d5-300c-4823-8646-58798c3c6198",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba875197-0e5b-4ba9-9311-3dbad48cba90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99132f66-3254-4eb6-bd83-9f131e8cbebd",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c44da95-51d8-43db-a0cb-4e08c962f5ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "493947fa-c7ab-4477-9fa7-6299ed84c46e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af6c23f8-3a5c-42ad-8475-51c823cd3a1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1a5909b-1114-4e32-a619-120952f57885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58ac8116-5805-43e7-b33e-bbb5053c39cc",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d429442-45cb-420e-889d-d47be42302be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0793d38-24a0-4025-b24b-7258b90b8c5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8959b997-a397-4604-a3b9-c6e9d40f8411",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb9158ec-09e7-4b21-a2c5-50bb326cf334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1a957cd-d90a-4ae4-916d-cc7720013931",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42c4b4c2-6642-434c-b12a-82ab4d0dd9b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27f6fa53-9652-44c9-ba60-2e9f4a06aa00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b37dc9-49b2-4224-a76b-bd014089a75a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf727f1c-3bf5-42b7-b1eb-f2cd4b8a2a25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52642de6-1549-4f31-a25d-295a7007b6e2",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad8f01a-ab56-4a5b-926f-02ac605dead6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8aaf1d6d-9497-43d6-b373-766146c18227"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba0def46-a149-43ca-868f-9c9e0c559e5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "affa38c2-b22d-4453-a8c3-c5789f8293e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7cc570d-02aa-410d-a873-16ce4df58241",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cbf97a9-0ee0-46d0-bc05-fb6af3f60dc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe735c46-f79e-46d1-be0c-67e5b0d68df8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e1e5983-8bb4-451e-8d6a-aecd478d04f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a69d1d77-73ac-4487-b59b-1caf7b210ee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3367b55-8a1e-4be6-a34a-34dee9ffdd9e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "149a1afa-d2d3-46f1-9345-9a1a6e970807",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32b7bc3d-dc3a-4bba-9155-805dc7da487f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a244a65e-a9a2-4214-b343-adbc1f35480e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efe94c2a-3a42-4ae6-9e3b-96c6276a72e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19711be6-8b41-4a4e-995a-b6aeab28a528",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec9da156-2374-41c7-b3e6-06048029e30a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b73d151-8234-4911-b204-253e5ef2a49f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96906ef1-f7ee-4c76-a92c-9d29010ccb74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e68322cc-a761-4bb0-a2e0-dbfaa3494fcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9820408-fd44-4311-92ee-d9458ce899bd",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d593a11-bebf-4aae-bde5-b2c195c98d64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "877e6f92-6626-4691-8107-87b8d25ee24c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5244c437-8ef7-46c2-934e-f168eef88ce9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8dd050e-f81a-4ebb-acd4-4660c62d9bd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee021fc3-3d6c-4699-84ad-385a16c635fe",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b8eaa3c-18d1-49b6-a630-e334e9627851",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53b281fb-c1a1-4bba-ba3b-78e6df6566cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e18214-8964-405f-a9d2-1802f4c5cca9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66a53798-8dbb-4519-af8f-198fba3f292a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9af2b4be-4f75-4765-a254-d81013736a84",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3a3531b-e84a-47f4-93e5-0d702a81de3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2ebb16c-5f81-4b21-aaf9-94c17b383577"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eca09425-bca8-42ce-aa8e-c38bfaebecbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b2b15bf-cf53-4123-b052-728dbe593a11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb79bab4-d392-4840-a45f-9f30573b6a39",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40bedb5d-a34c-4673-afa3-914395a2ad54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b3c940d-1903-4962-9c4f-ec67fba11203"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26cd6aed-8d3b-4912-8ed1-ede2d0253403",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d1ff3f4-0167-4369-adbd-b78c6b368bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67f8f59f-ea78-49a9-9627-deb301dba7e8",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "329f06b8-6406-406b-ab6d-f57f4c653f4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "818e64c2-0096-4028-a7c3-23ad8aef05a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27773b83-fd2c-4a37-8b07-e60eb24103d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49b6f5e9-263c-4fdd-bf67-35be0c3cb65d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2130d538-7309-4b30-a76d-d4d1067144cc",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "897a778d-27f2-4f85-898a-c5ec959cd181",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fade54b-6b37-4083-8d08-753f33afa09f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11635db8-ae58-4f8c-ba70-9e28ffd82535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9132dfd7-01c0-4767-985e-25f9b25551c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87c198d0-63ce-4d2e-a5ce-0196788b87b9",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43968c09-5de2-4abc-8c74-1e56ba153fc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "844dcdcf-3b22-4493-b20f-50fc40ea2b04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba458794-5369-428f-bdf2-41f6bcc6f0f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffb2bcc9-c38a-41c4-9ca5-b196539fb5ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3ffe9dd-9333-46ff-aac9-46f1f40daca2",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65f19079-3da1-4fdc-bc05-be84af37030a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4e4103e-7eb5-4214-aef9-a1fbf490d656"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f77b4dc-77af-45e0-99cf-6e81ac36e763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c989e13a-2157-4a4a-831a-34f571d1f867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d437364-7a25-42c7-b26b-98db6ef04e72",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d650367-bc40-4132-a2f0-d2f9d10269ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4748ef15-3215-400b-9869-86ab8151541f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5cf40d9-1a48-4684-ad92-7d7b07f9c270",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7465d5f-3f51-40d8-96ba-64792c3a9f3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "206ec5d6-26c7-48c6-bb17-09c7daa0aba2",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "244ef330-cde6-46f2-b1f3-13357123f82e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "797d3d46-ac46-44d6-9605-bd1edab9a8d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90515b22-2044-4db5-a7af-1b8e81b57483",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34910a8e-a0b4-4051-a48f-950ab8234cfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe500f27-c8c1-4a5d-8363-e0278f5b5696",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde2a971-824a-47f4-889b-ccdbb4d87ad7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b4bdbb1-091e-48ad-b45c-62e6b13f0cde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b049039-6e8c-44d9-badb-082a588a84f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d358ae4-0f9b-4d1b-87f9-b90cd27f3af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec07fb8c-d972-46f8-85d3-2c7077b5f19e",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3bb8574-b6b0-4137-addc-12de535acd58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87bd2e39-a172-4cd2-88f6-3ceedfc14394"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "809057aa-a41e-4a90-a00f-18b07f8f5547",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ed68b7d-2430-465e-9d66-384e0f5079ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12b2b2b1-9c59-40ef-acd0-8a39b20d8e2a",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dba015bc-2e0d-459d-b461-b813c73a9b5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7a08cc2-73d3-4af8-b88b-98cfb2851d1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e32bb548-b605-4f47-a438-f7dcb78194f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b50d2ae2-afca-479e-ac8d-5809221b1bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea3ea675-ac47-4b53-8456-2e97f0fc6f6f",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d7f6bc2-2c6e-4bf7-930d-bf76cae4cd11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0e4667c-ebcf-4ce3-af4b-d31ad87d7ca7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e69cfec4-e780-4323-a5ab-5b5f65d7c6a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d21e5be0-9d2c-4e12-bb01-fe4559932697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbdca2eb-0b42-4a31-9258-67b1d5157775",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18e67dd2-ab92-40f4-a2e6-b3f90991afea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9829335-6c60-4df9-837d-484f280455ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bed99f4b-0476-4bbe-af5d-f29b393e554b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ad68b5f-7ad8-462b-9318-9375563c200d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e71d786-132e-4652-8e88-70b182e024f1",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6134964-0d1f-400d-8f53-87d785648ff3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f43d5a91-2905-4441-9fbe-c9f999102619"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbaeeee6-eaf6-4c4c-acf6-afa0525600e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "275305f6-37bb-4a45-bb74-739d8c0624bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b76f4dc7-8d6b-41fd-b56f-96b435603f96",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9889027a-ba77-451e-8a9a-e72df6bf4eb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c820cf9-d251-4802-9988-100232cefd19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f862f0b-485e-4264-bcb4-2c42d67fe12c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57e217a5-e949-4132-8ece-dc8b121ffa09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9aa7bb8-8e80-4bb1-b0bc-4c6e4fd413e2",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67ae788a-5fde-4943-a808-67dcd09ba17e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "984b5137-7f3f-45a0-9c33-154b7fed0647"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbb09cc1-6d8f-46a7-b140-906788943f1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84177048-e1a2-460c-9696-3ef83fb1af92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63daaf9f-5c21-4ede-be65-504d19379137",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20507a13-033c-4123-ad3d-d8b727e7f8a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf1b5baf-c521-4417-ab5f-8d38675ecc34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04377aee-5138-452e-b23a-f790f12dd3db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4904944d-b64a-4c0e-aed5-9f2838274f12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b4267e4-3fb7-4870-a1f5-f632ff632c3b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ca90c3f-30a2-49bb-afa2-9768815b263c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bf07860-d4e0-452b-a994-989dceb0322e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "021a4760-ff6d-4f21-b799-ffbb0588e633",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cea78e5-236d-4f5a-931c-1215bac679c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad074a06-2dd6-419c-afff-9248513fd5fe",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7228a051-2b5d-4ba5-afe8-38fa0ad0194b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20205fc0-b3ae-47a3-a010-bf9740e5a1ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fed354f-a67b-4b45-bf75-8b05e7d4db4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ccbcaf4-0460-45c3-a3ae-98e8259a83b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ab6cb0-a938-4a54-a9d2-2f9394914e65",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b4e5512-e21f-44be-a79a-b651bb905171",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fa09d24-b8a0-4a81-943c-2dee7744a6c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55961a2f-b530-4034-9e81-397d80cdc9a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bae4f5d-d291-4fce-8e63-07beda8d8617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff2537d9-c72b-4f82-8d8f-1052ed342b57",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ca888e-04a3-4054-86ce-28e1981857a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfbfad2b-3036-43e5-a2de-ab66a5e1edc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce4d4ab4-5016-480d-89ca-3f3cdeda37bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0331019-3535-45f9-aeae-e6f0973ffbd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e8522ff-27cc-4481-87aa-c6230bb1d04f",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d0a649b-6a9b-43b4-89f9-c3825c0c5a3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcfeb595-2b79-4375-a84c-db1a787ecb7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c0ae2eb-f149-4257-800e-6a9332817ebd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f39a52f-ab0d-47dc-8791-dcbac80b8250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b2dd69e-3445-4f2b-8907-6cf325be2e9a",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "795d4b78-5480-419d-989f-90a9d3cfb26f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23992391-c0f3-4d19-b410-8b953e909180"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a59c003-31a9-424f-8e6a-3c55c103faab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bccd9249-5ace-4c18-8b24-5a24f29ea487"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c3a6705-0ef3-4c7f-9d64-77c73c974259",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e089ced-87c8-4aa2-84d7-34ae19d8c6ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a0c219e-c2c3-43e3-bf8a-5c26797d1c56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d09b9ec9-c957-458f-91c2-94494f664cb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6235a95e-6964-48db-8347-2aea3df24e73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fd01ca1-28d1-48e3-a1c7-d201e7c21880",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "147dc136-fa23-469e-b02b-a55a0b7100a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75912ff6-c33b-4437-99fb-60598a37229f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e321d130-fee6-4909-a61c-c3c21ac2f95a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d52aa4f-2226-4096-bd33-e1dff981116c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77d61d55-6508-4174-8735-8791e4caa7cd",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea1d5f5c-499c-49fe-9a03-67b1e28fbb35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d36527e-f82f-42d3-a94f-dc86009ff447"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b61789b4-8f99-440c-bd66-ddb245d5032f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9cf8f4f-a43d-4cea-9d62-bf3627418fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a89d3fe-68d5-4c53-9011-f7be614f714a",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "378be185-cf2b-4522-93db-0802cb857306",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19868320-540d-41d9-b3d9-1185962aaa6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67b15f93-c4df-4959-893b-f44038dcf92e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ff02a05-d0c3-487b-8d0a-926a537b40b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8a18941-11eb-4ba9-a062-cde0ecd36281",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9be1f94-81a9-4dc6-9860-1876f687713f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbe1a593-2342-4042-9838-fb77a14cab37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca28f513-a79a-4201-9348-62ac23b159c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "266d121e-7340-45d9-bd96-8adb5c6c0aaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a671d4e5-17b9-483c-a780-db15acb3f0ba",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d8fe0d-41a4-4d35-ab93-a34bc8f6c3b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b27adac7-5a09-4950-8d48-538afdfb2aff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39a0d345-f7e6-41dc-98c6-29b8c6784183",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9224d0a4-e109-4e7b-9633-eae23123d7b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "876225bc-1ced-4c8e-85c1-673c9fcbaa5c",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "361846d7-2b7a-4d98-a686-e07bc5bb3777",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52af6d74-e41b-47a9-a41d-7d6260f165d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "224f6139-03c1-402e-8d07-bda76ccf7143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8957406-bbf2-4ef0-ab2f-fc1a1a6aca54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0cd4fb3-10a5-4351-861e-46e392242da2",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ab25684-64bd-4079-beb4-9e22844d9be4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9161425-14c8-44d0-a4d7-31f0bbd5181a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c5a412f-ae28-4fb6-9088-f3b11e790cf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8537755a-fe70-44b2-94d1-5580780240c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae70d989-b6dd-4c48-81ae-72148cfafeed",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "973bb088-a6cd-430f-982e-e8c939ff93b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db66149d-f086-432f-aeb0-612e07aeb954"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b4ec05a-4af8-4808-b9f8-f1070ee6b993",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46ebf940-2ee3-463c-8706-2e2118839dd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d2e030-3bac-443a-bb35-c93c24b79e22",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4172fc6a-3696-4365-a30f-05951f912eaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b907db4-1dbb-4bd1-b7d6-f5e2a1b1eb11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd42eb55-9463-43ed-8c62-6ccc48e78413",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4cc4244-b8ca-4f0e-a07d-459aee290e08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ad9338e-e5cd-4c6b-90b0-2be8c1ad2456",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19b39584-f172-47db-9421-513b456a2438",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc58f15e-adaa-4034-b14c-400876afbb30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f067c9e8-d6a5-4063-ab75-ef32559ca35c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7912051f-ef75-49ac-9998-1bef7efc592c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b53a7e3-a941-484c-be11-190d78146380",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "334ef35f-98d9-4e45-9a8d-3384ceb4cf3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a41f6be-9eb2-4485-9aa4-fe068872a887"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8692510-e2c7-400f-af3d-a14c96bf4ddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f73e6d74-1f8e-4d79-909e-e8b0f36fb2f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3ba9045-142a-45b7-aee7-5206033f3a30",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af66ef1a-16af-469c-954a-18c1b57259de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56da03e8-0f80-45a6-bcdc-a649514792df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f1bad12-55a5-435b-a17f-3586afb2cef6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad52c0da-1fe9-4a06-bd45-837e56b6345d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8109b1e-eb05-4dbb-893e-5ff50252527e",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c066a39f-af3f-4701-b245-00afa07670c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "134dcdbb-744b-43cc-930b-5b1a51637eb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "634da1d4-f333-4240-ac3e-d68e66b3fbb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69bf1e72-1170-4206-abae-79756cc40fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c78c9c1-f4db-4f1f-917e-011530c9e61f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dadc40e-ea5f-4655-b8c2-770f59db3caf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c1dd43c-ca32-4615-8209-8c7d11acbcf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83dfa21f-ed84-4db8-be00-7182fc90cd47",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beef031c-54a9-4356-9559-12e5cdddaf8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b9f4978-0bb7-46fb-9f0e-46592fd71148",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b71b925c-0c06-4728-8ae2-0bfe8ee8faed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "044ed866-5f0f-430a-a2b9-2275dc2103e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b5e7289-4320-49d7-9b25-f2012b447180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db781038-f68d-4c10-ab6f-fa05cf2dcfb3"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0dc3be12-1e97-49f1-9b1e-1f3fdab10629",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "400d747d-f4a2-4396-8b4c-0c911c1ed548"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e1d1c011-35fe-4496-b227-7ee95a57471f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "be1326f9-ec69-4eb9-8952-5c9f615973d3"
                    }
                  }
                ]
              },
              {
                "id": "66badff2-9dd0-46eb-b4d7-6cecc14568b1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6585ea45-ea38-42d9-83fd-aac8aa2cc930",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1787dff-faa1-4e8d-8a23-8632d70d0e3b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b8ac1af6-1336-4738-b763-0f9d331c68d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86f23a14-1060-446b-9946-b8b83c8cf159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a9ac0faf-09b9-4f0e-9361-cd4a6bd1ec90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d294a94b-4730-4828-af6d-6e5df4519ab6",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9febc769-8a20-4121-8006-5025a84ec921",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "3f0407b5-e6da-487f-a319-087479fdb79a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c17c1d5-9cd4-4b53-a354-06fac1331570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "31b4ab57-6b0a-47b8-b74c-b2f6b2077992"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "34dccc90-5bf6-4aaa-aa7c-072617f1bd84",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9dcd2b4-9040-4989-baa5-165c9777663c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "109028b8-0864-4ad0-a630-cdcb3506611b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bef753a6-87be-4930-a3f6-981755ab3ab7"
                    }
                  }
                ]
              },
              {
                "id": "851a590e-121f-46b2-ae32-a02294683c2f",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "058330ac-03a2-4b20-a7a6-9ea63a9379ad",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c982c4-bbf7-4190-9756-9d5b4333c9e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "9dba9440-51c9-45de-80c9-44d3801faf03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c4f6755-3c23-4430-a7d7-b8b5a9083c6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04416576-f1ed-402f-9289-4bbdf4127b7e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "afb53cd7-ca08-405a-9d69-aadc415d4b61",
            "name": "Positive Testing",
            "item": [
              {
                "id": "892db3b7-6607-4134-a38e-0bfa757ff358",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e61f3ae-fd45-4d9a-987e-7198895f0cfd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0178b35a-d59f-4667-bebd-7dbc437f3da7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "726f5128-555f-4807-bf37-1bb120524900",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "99a56988-c403-4a52-b79c-35bd19c2b778"
                    }
                  }
                ]
              },
              {
                "id": "bfd5df54-feac-4843-aac8-29a9925d4620",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "387f0c9e-a69e-48f0-a361-e6758e6f8f2a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8f9931f3-b44d-4d29-ab51-ecf7ee87bd01"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bedd7cc7-f6ff-4419-a690-e851c8540b1e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "921b2d58-504f-4778-be9d-1ed40fbeb901"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d6b2d13f-c297-4fa7-8245-04d4270c96c8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "d95329e1-5a01-41b5-8c12-bd20667cd137"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "058c0ce8-4bb6-4cea-87de-10e2e8bd6b5d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "72de7141-1942-4f48-b1d4-5c7d70591569"
            }
          }
        ]
      },
      {
        "id": "1788e961-cfad-4c03-b795-f214319994a4",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c1564ac2-7372-4f54-a908-01684c7aaf36",
            "name": "Negative Testing",
            "item": [
              {
                "id": "91c694e2-1985-4f6f-b50c-2d3bd884733a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d81c3df7-d2fd-4ea1-9f60-80cd8132ec14",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc2e5078-d7e8-4ef0-b24e-e27ad477177b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "77450a49-c6bf-4557-bcd0-c3509ac4f52d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eed0a56-55c0-40cf-9f03-fbc02c12f06e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "be1e61b5-1194-444d-84f9-c19eb58036a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6480cbd-6fe3-4879-87e2-ffaf89d65846",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6838bc24-88d8-4997-b7c3-e625483aabd5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bb3b35d4-e6a5-4811-bb75-79a889b3b914"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "132549cc-067c-4589-94cd-98e4ab57dbfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4853cde4-0c29-4f01-90db-075b75741165"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "32320d4b-43ef-44f3-b4af-b15245609f4f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f60a78a9-89fb-4ecc-8c0d-720ca3aff7b6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b04b0f0d-7d9c-46b1-9862-5df64e474368",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60872afe-1119-4e95-bc6a-48e163ecd5f0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "558aaf4c-cfea-4f1f-beb7-1fd5a3d71b0f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "1628d2e2-6d62-45b9-b2ba-b1d9b5a62615"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "91466b01-6d2b-4d73-9f74-52a132817f8e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a18ab3bb-c049-4213-994f-8dcb284febeb"
            }
          }
        ]
      },
      {
        "id": "1f81bdca-ee9f-4240-ab22-640da924c606",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "2bdf7a85-73f1-44f7-bc4e-61dc371863ed",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5a2e1f6f-27fc-4204-b97e-25ed86dd8904",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "85ebdd28-fac2-4160-a6ac-62ea16c8b61c",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a600cf32-d6ee-4cb3-a94c-c2e1257eacc8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "935c2437-3ce2-40fc-a37d-d4479356aebb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12bfd4c5-b007-4a33-b9ff-14db70c261db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "02d83dc6-7888-40e0-a98d-283ed1f2f4b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1122ace9-790a-495c-9cbd-60445ca3388e",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8966b2aa-52cf-4f1c-b10b-df160a4de212",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "bdd3e5bd-ab37-41cc-b12e-8556f0823202"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b4b4796-342c-4fd8-8114-32abd45dfe56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "68207027-346e-4e1a-b515-b1dbc122e791"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "510c9924-7bf1-4f76-b069-d8e35e44aaa2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b3798e76-7538-4611-b53a-76169f40fa73"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "99c3665a-57db-4924-b560-c73bc927b16c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5459d196-6797-4d74-a016-1428de5e6d52"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3a375921-2730-43bd-bd1b-134b24d65497",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "230fd76a-9dc9-4fc0-b2c0-c1530870c23a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1cefe11f-11bd-45f8-9285-ea5b428a154a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "87bc41eb-db1e-4508-8aff-38cc91bc5065"
            }
          }
        ]
      },
      {
        "id": "5064b976-0e11-4c7b-9d30-502c122f73e4",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "97520f1b-1aad-4273-8bf2-65175cafd75c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "446d9a60-b08e-4215-b7ea-dd4e48593e5d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1ebf516c-6381-4e43-9952-b24323541341",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa67d746-cb19-4e01-ae71-006cc5da9c73",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a86fd6bd-da8d-40eb-8b1d-43016d7769fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd268f4-b12d-4667-991d-dd55d488862e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "592addb5-0f89-4eed-8738-b1223ad7519b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dbf9f6b-c605-45d1-81b0-1b9ac49f84c3",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1adc6445-ba58-4bac-b7c4-68e4ed139c2e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0293580e-10ee-49b0-ba64-9e5d7574b187"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4abaa184-0890-4b14-b3c5-9e8544e36281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f5ca7fb-fc61-4744-b2da-7a27dd76ad77"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "81a48489-126f-473c-90ee-4bbbfb3256c6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e974a03-8ec1-40f9-a301-56e6de0a0fec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5c6b931-4aab-4baf-b802-c32983bd9a23",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "16312362-b08a-4b05-9eb1-f1ff443eba79"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "11d4f418-c8f7-4ed0-81ed-85f450938e19",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a2a1ebf2-94ba-467b-b6d2-9e6856b5888f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2e402516-a5a6-4f6c-adb6-a08170e98eb5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f0bd004a-bb59-41c0-955f-1a7ee686706b"
            }
          }
        ]
      },
      {
        "id": "2b5c4924-152b-4f08-b272-b83e67f9945f",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "35ce740f-f11a-46de-8991-aae40729ffa5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "14ca75f8-85fc-49dc-ad1a-554b2cfb025c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "7b6b7d53-650d-4e0d-8161-c03fd1668c32",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5b73ce00-b4d7-46da-8a81-7f037f99dfc8",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cfa67cbd-aee3-4d5c-be2e-9bbbf8dc7349",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 250.05384615384583,
      "responseMin": 11,
      "responseMax": 10311,
      "responseSd": 867.0021631730486,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1681778145053,
      "completed": 1681778220807
    },
    "executions": [
      {
        "id": "b929fac5-fe80-400c-b557-48ff0ca310b2",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "7e316024-4c02-4c27-887d-9b0cd9e87977",
          "httpRequestId": "c050f059-98de-49a5-ba13-c916a47d206c"
        },
        "item": {
          "id": "b929fac5-fe80-400c-b557-48ff0ca310b2",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "d37dfc91-561a-4584-8737-d524aa94a210",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 0
        }
      },
      {
        "id": "5e2618f9-c0ff-460c-8f89-0c3011efa2af",
        "cursor": {
          "ref": "e02d6bc9-bb79-4d5a-ae7b-f604d929fb95",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c9f8f16b-11c6-494a-a762-f78a3f6265cc"
        },
        "item": {
          "id": "5e2618f9-c0ff-460c-8f89-0c3011efa2af",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "13511a0f-3e47-44a6-b749-0f6027098c4c",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 0
        }
      },
      {
        "id": "a06a0aa8-3a0c-4f58-bc14-91fd2a3f8725",
        "cursor": {
          "ref": "472706be-94e0-4de2-9c0c-ff81d2fc297e",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "05127359-3ff5-4169-a9cb-1fe13f3a8384"
        },
        "item": {
          "id": "a06a0aa8-3a0c-4f58-bc14-91fd2a3f8725",
          "name": "did_json"
        },
        "response": {
          "id": "2176111d-decf-477b-94b3-1bae54a645e1",
          "status": "OK",
          "code": 200,
          "responseTime": 333,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0cb6a57-5983-4cfe-8fab-ffbea92f622a",
        "cursor": {
          "ref": "c94e0726-8b01-4c27-b691-516c857f1e1f",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3a97ff27-d44d-436c-89e4-a53ff7a5f479"
        },
        "item": {
          "id": "e0cb6a57-5983-4cfe-8fab-ffbea92f622a",
          "name": "did:invalid"
        },
        "response": {
          "id": "dec9f9d8-6252-41bb-a657-f94e265bd09c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 829,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "e0cb6a57-5983-4cfe-8fab-ffbea92f622a",
        "cursor": {
          "ref": "c94e0726-8b01-4c27-b691-516c857f1e1f",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3a97ff27-d44d-436c-89e4-a53ff7a5f479"
        },
        "item": {
          "id": "e0cb6a57-5983-4cfe-8fab-ffbea92f622a",
          "name": "did:invalid"
        },
        "response": {
          "id": "dec9f9d8-6252-41bb-a657-f94e265bd09c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 829,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "10ba1f93-eee0-4274-80c4-a56c05179129",
        "cursor": {
          "ref": "12a244ea-b506-4203-920b-76c730e00dde",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "27543200-eaea-41ea-bd5f-efa89a06c34d"
        },
        "item": {
          "id": "10ba1f93-eee0-4274-80c4-a56c05179129",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "b3b58ba2-ec7d-4d5f-8538-9d18c0c11194",
          "status": "Not Found",
          "code": 404,
          "responseTime": 20,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9e72129-ce0f-4380-b34c-058c56d04b51",
        "cursor": {
          "ref": "837ed2d8-bcf8-427e-ab2e-4cd3ab3ae2c3",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "1b8d4cfe-43d8-4f57-82a9-aa0cda42fb72"
        },
        "item": {
          "id": "a9e72129-ce0f-4380-b34c-058c56d04b51",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "60f5e79f-d95f-4bcb-b784-f98c10c6568c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 21,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e0c64a-d580-4407-a2d2-e96fd1b82a59",
        "cursor": {
          "ref": "debd9edd-15b0-4bdf-b426-151bf13bc7f5",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "93be68fd-e5e6-4d35-83dc-5d9425f9459d"
        },
        "item": {
          "id": "91e0c64a-d580-4407-a2d2-e96fd1b82a59",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b5ce6517-0b4f-4ec3-9abf-189b8ae8981a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 14,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "19b59035-28b7-4a95-aa6d-e3686a617207",
        "cursor": {
          "ref": "51b8fcb0-d44f-4d79-8437-68507e2a697f",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "eab4419b-ea75-44aa-88ed-2ca4acb806bc"
        },
        "item": {
          "id": "19b59035-28b7-4a95-aa6d-e3686a617207",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f5a9b5df-516c-4bf3-97d7-87d7e4c0be29",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "19b59035-28b7-4a95-aa6d-e3686a617207",
        "cursor": {
          "ref": "51b8fcb0-d44f-4d79-8437-68507e2a697f",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "eab4419b-ea75-44aa-88ed-2ca4acb806bc"
        },
        "item": {
          "id": "19b59035-28b7-4a95-aa6d-e3686a617207",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f5a9b5df-516c-4bf3-97d7-87d7e4c0be29",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "e66e3e07-cf9c-4a5d-9415-ed2e7db98d3c",
        "cursor": {
          "ref": "46037f63-9821-4975-9a8e-b950c3c77ccb",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "42980e97-29b8-43c7-ba59-56e1c22eab32"
        },
        "item": {
          "id": "e66e3e07-cf9c-4a5d-9415-ed2e7db98d3c",
          "name": "identifiers"
        },
        "response": {
          "id": "9ab18e48-0b39-4c49-8329-55f8fe43389a",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99ec8492-54f4-4f7c-8724-5a86e5ca0147",
        "cursor": {
          "ref": "588177a0-bb21-498c-85d0-52a4cc171ede",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "9fbf9193-2982-4cf3-8730-fb25dfcfa416"
        },
        "item": {
          "id": "99ec8492-54f4-4f7c-8724-5a86e5ca0147",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "79c68e59-3fca-4a4a-88cb-1eacca3eb9a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99ec8492-54f4-4f7c-8724-5a86e5ca0147",
        "cursor": {
          "ref": "588177a0-bb21-498c-85d0-52a4cc171ede",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "9fbf9193-2982-4cf3-8730-fb25dfcfa416"
        },
        "item": {
          "id": "99ec8492-54f4-4f7c-8724-5a86e5ca0147",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "79c68e59-3fca-4a4a-88cb-1eacca3eb9a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25148846-96bf-4431-a3fa-7bb3d8f5c810",
        "cursor": {
          "ref": "2ae20e31-ac8e-4eb6-96a3-7b0f49103162",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "f5bf82e1-cb4d-49a8-a34a-1a27c693f1c3"
        },
        "item": {
          "id": "25148846-96bf-4431-a3fa-7bb3d8f5c810",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "6bc0145e-d046-447b-b291-e7331713a3a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 177,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efc2b1d8-2772-442c-b976-8173a95c7df4",
        "cursor": {
          "ref": "7060f8c3-19cc-4f4b-8575-4769a3f6d199",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "44f08461-57bf-4b85-8c93-70e35ab58c3d"
        },
        "item": {
          "id": "efc2b1d8-2772-442c-b976-8173a95c7df4",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c344c373-b802-46ff-a957-38dc93495466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d4526d5-8088-41df-b50a-980ba66f106b",
        "cursor": {
          "ref": "67f48b52-5be3-4ca5-acac-8b12b4699026",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4a52ca10-27f6-4bc2-812f-e4358b763797"
        },
        "item": {
          "id": "5d4526d5-8088-41df-b50a-980ba66f106b",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "2c248073-7032-4b9e-9292-bc345acd47ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "086d7e23-7102-4654-bf47-b8b952a04c39",
        "cursor": {
          "ref": "b7d46903-4619-4173-af19-138cc4f9cf0f",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8871f7ce-5817-4b02-8817-864dfa3e260b"
        },
        "item": {
          "id": "086d7e23-7102-4654-bf47-b8b952a04c39",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "b3fc6684-be90-4b24-8b8b-14dd92ecdba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aaee0a0-f6bb-41d9-ba1a-f4232a0af1a9",
        "cursor": {
          "ref": "396ae0fd-8137-402b-9f92-84d0eaf2b09a",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "30d01754-0c84-4d16-95e7-8b537aa3a48d"
        },
        "item": {
          "id": "1aaee0a0-f6bb-41d9-ba1a-f4232a0af1a9",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "38ff5a6b-8fb5-4947-88d1-9c409cfe6d37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60504bff-9b0d-42f0-be00-1f2dc1de8cd4",
        "cursor": {
          "ref": "1e8a3408-7721-47ef-ba9a-ac91094d03c5",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "fb15e6df-36ca-46cc-98ba-73a9910d1ce7"
        },
        "item": {
          "id": "60504bff-9b0d-42f0-be00-1f2dc1de8cd4",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "8eb7e9c8-ba84-47be-8b29-6c08d656560d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "032e4677-3220-4411-b79d-5d7e096ab57e",
        "cursor": {
          "ref": "1d14323d-7cca-4da8-8bd4-9e54b4394371",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "cae04794-107d-4307-9aa9-40c4a3f61b1b"
        },
        "item": {
          "id": "032e4677-3220-4411-b79d-5d7e096ab57e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "f7bc36bd-713b-425e-b055-e5f363969f93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75631b49-9674-493d-95cc-020c3d8bebd3",
        "cursor": {
          "ref": "0b46a153-1627-46c1-84a3-f935c5a323f7",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "7b93e90c-d7e9-41e7-b811-4e9c25d1df80"
        },
        "item": {
          "id": "75631b49-9674-493d-95cc-020c3d8bebd3",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "0bad0941-9a3a-4c2b-af22-b3c1e4136075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a406af01-75ab-4c22-9ba9-3b082277afb0",
        "cursor": {
          "ref": "9fb6880a-2a13-46c6-96bb-82e584ca4bd0",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8d2bba73-5b20-4b6e-bc79-b9d1463206ee"
        },
        "item": {
          "id": "a406af01-75ab-4c22-9ba9-3b082277afb0",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "08c6c26b-86f6-4c11-aa85-0de244f22775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d01812f4-714d-4742-ab48-10b16998cdf4",
        "cursor": {
          "ref": "ca2e0382-063f-4ebc-8aed-2c6f2d027932",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "2facfef2-429d-41f2-b048-63fcad2f6da6"
        },
        "item": {
          "id": "d01812f4-714d-4742-ab48-10b16998cdf4",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "02031295-4019-4e18-af95-118b0303b7f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ddb8332-712a-4f75-a674-ddb2c13f448a",
        "cursor": {
          "ref": "792a836f-d320-458c-802f-ff73722586e2",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "3cec8261-0476-45fa-a54f-9692aba8e5f7"
        },
        "item": {
          "id": "7ddb8332-712a-4f75-a674-ddb2c13f448a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "1bd7a7c4-aa88-4a4b-a6c4-852dffb9c661",
          "status": "Created",
          "code": 201,
          "responseTime": 1186,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "2f767ca8-fb23-41ac-874e-9414a80bd530",
        "cursor": {
          "ref": "2471ede6-a7a6-4882-84da-078823687d7b",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "5b1918d0-e901-4b22-861d-abcccf940fb3"
        },
        "item": {
          "id": "2f767ca8-fb23-41ac-874e-9414a80bd530",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "bde42be8-5c3e-4f8c-8999-4a9c389cbc0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54829eee-c64e-4dc6-8b0c-11e81d9f45f2",
        "cursor": {
          "ref": "0f2bfc8b-432e-4fee-9870-aff734680d57",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "6af52916-60c4-4fe9-8598-46d305cd4e7a"
        },
        "item": {
          "id": "54829eee-c64e-4dc6-8b0c-11e81d9f45f2",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "e7f6af80-594b-48c5-bebf-4fc4603ac097",
          "status": "Created",
          "code": 201,
          "responseTime": 4682,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "45619b6d-6d67-438c-880a-4f44a03650a3",
        "cursor": {
          "ref": "e9104a8c-0ba7-4da3-86d2-bb700b802968",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "5d0ac3b1-6636-45dc-b7cd-98fa85502b76"
        },
        "item": {
          "id": "45619b6d-6d67-438c-880a-4f44a03650a3",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "03c1bfc3-dc51-4746-bdaf-f807b983f222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f630dcdf-d8fa-494c-ad7b-370c5b8c9ec4",
        "cursor": {
          "ref": "8fa44804-80f9-4349-a381-9da6f14e24d0",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c0ccb291-151b-4e46-b3d3-9cde37387952"
        },
        "item": {
          "id": "f630dcdf-d8fa-494c-ad7b-370c5b8c9ec4",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ef234dee-557c-4c14-8bce-e9138c274192",
          "status": "Created",
          "code": 201,
          "responseTime": 10311,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "17c16a3f-5165-4701-bc1b-d85932eec4c7",
        "cursor": {
          "ref": "fb8c418c-cec9-4817-9f1f-d92dcd274ed9",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "13e1b18b-201b-49ae-bc70-5150cb868314"
        },
        "item": {
          "id": "17c16a3f-5165-4701-bc1b-d85932eec4c7",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e47450f1-c6bc-40be-a5c5-a4e31589e31e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e0212b7-13a6-4f5a-818b-a330fd7cbf4a",
        "cursor": {
          "ref": "eb060874-82e3-453f-8a65-c72f508b1496",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "845d0b2b-1919-47b9-8f30-a447faacb024"
        },
        "item": {
          "id": "4e0212b7-13a6-4f5a-818b-a330fd7cbf4a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "e83f05c7-6810-4645-bd18-28d82d848a07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42efca21-4867-499f-b8e4-968e63b025c4",
        "cursor": {
          "ref": "db4c7776-5250-47e3-83bd-436f8304d55b",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "137abbb0-efc1-4d39-b035-d1c3f062f99c"
        },
        "item": {
          "id": "42efca21-4867-499f-b8e4-968e63b025c4",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "2daf4cf5-b1dc-4a40-8b91-e01d34c2bc9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ea9528c-953c-40fd-bc6b-3240701e1f22",
        "cursor": {
          "ref": "87214721-84df-48f9-a582-120f0ba71299",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "49d7f4e5-f21d-4255-8642-0d6ae2013bac"
        },
        "item": {
          "id": "7ea9528c-953c-40fd-bc6b-3240701e1f22",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e76e5e31-71c3-4897-92b5-320c8aa8a41c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0010455-ce67-4067-8e9c-c1f099df6215",
        "cursor": {
          "ref": "a2776f82-776a-49aa-9e68-9e2bca7769ce",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "253865b4-3ee0-4d8d-998b-78c314f32ff3"
        },
        "item": {
          "id": "f0010455-ce67-4067-8e9c-c1f099df6215",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "d196739e-9296-4c5d-bf22-58e84ae19264",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bcd71a0-b43a-44a1-a60a-5fbd7135f95f",
        "cursor": {
          "ref": "6f7460c9-c808-4a29-9365-c1c4587f46b2",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c61072f5-afdd-4a43-ab80-2fd913fcf0ce"
        },
        "item": {
          "id": "1bcd71a0-b43a-44a1-a60a-5fbd7135f95f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "524997e4-0523-4fef-a458-f6ba19bdc71f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a396d437-a08f-469e-9f5c-680dac67dadc",
        "cursor": {
          "ref": "f03ecaa6-399e-4a83-a0c8-0722dff45270",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "0d9a6c9f-637b-4a05-8b24-e047a0458eb3"
        },
        "item": {
          "id": "a396d437-a08f-469e-9f5c-680dac67dadc",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "74e8d7f6-855f-488e-8bd3-d0f3f9db5198",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb3a406-7e1a-4237-8705-7ee4dd4c0d18",
        "cursor": {
          "ref": "d27c75f7-1ab5-4f34-959e-ff990e0131e1",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d94fe090-b9f2-4272-ae51-dacc8f2533fd"
        },
        "item": {
          "id": "ecb3a406-7e1a-4237-8705-7ee4dd4c0d18",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "6f58fd3b-0b15-4ca2-a8eb-82e4e2a2ff2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6753d307-f169-48cd-a26a-a74bab4c746f",
        "cursor": {
          "ref": "1b85aa79-75c3-42df-a3fd-6ced1d46760a",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "1196faed-4005-41ac-a5b3-cbb798e08ae4"
        },
        "item": {
          "id": "6753d307-f169-48cd-a26a-a74bab4c746f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "2632db28-b868-45ff-aa31-f7e6e2e3ad80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c94645c5-b71d-44d0-9d6a-6b98ba16d11b",
        "cursor": {
          "ref": "e3c93814-1f8c-4f3c-8bf4-ce724590a10c",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a310d87c-a59b-4367-8f4c-aaf8ce8a5e0f"
        },
        "item": {
          "id": "c94645c5-b71d-44d0-9d6a-6b98ba16d11b",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "f5c5205e-77d8-44ee-bcd6-c6afee8c5160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0b0308d-07ab-4d7c-bdca-a9d85ff0f0ec",
        "cursor": {
          "ref": "3ab04361-8429-4836-be62-a9b7038dcb5e",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "57622fc4-384d-404d-9ac8-fc80c2a045f7"
        },
        "item": {
          "id": "f0b0308d-07ab-4d7c-bdca-a9d85ff0f0ec",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d541c090-5b99-4c23-b1ad-0fbff1aab347",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1659f8ca-550f-499e-8aff-ab79246e092a",
        "cursor": {
          "ref": "a9704078-551c-4914-a62f-a7bb93694fcb",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "77fd256a-bb0c-4bc1-a3f1-356b6ac48704"
        },
        "item": {
          "id": "1659f8ca-550f-499e-8aff-ab79246e092a",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "276fda87-e38e-4f3a-b63b-735f72c7f88f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17a7b01-d328-432e-ac0a-3818d54e5e0f",
        "cursor": {
          "ref": "fb73b1f9-f113-4acc-a4eb-7f084047258b",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "baf5f734-132a-43d5-a9d9-3685153eed09"
        },
        "item": {
          "id": "a17a7b01-d328-432e-ac0a-3818d54e5e0f",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "0433f66b-935f-48a0-9322-d8f97a12f1ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 947,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "530447e0-4dc4-4554-af27-d57fa7f2499c",
        "cursor": {
          "ref": "8c69b37d-5edd-46a5-ba8f-4308aba555ce",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "506e57d5-f710-4cfc-b1e0-6540ab065506"
        },
        "item": {
          "id": "530447e0-4dc4-4554-af27-d57fa7f2499c",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "3249eee2-2fc4-460d-9af0-1a90290ab61a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0526dd0b-cc32-4b69-8aee-decf8257b091",
        "cursor": {
          "ref": "e62c2d02-b288-49ea-8fec-cb4fb7e60da4",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "3ce9d3a5-b341-44a3-88b0-551db8d061e8"
        },
        "item": {
          "id": "0526dd0b-cc32-4b69-8aee-decf8257b091",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "548a7fc2-47ea-4d2e-9373-a07ed7961233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fade0a5-3761-4a7f-a966-b1131d54116c",
        "cursor": {
          "ref": "c365da19-90ac-4e34-959a-3f7d9465af00",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2c2faf1f-06bc-48dd-8725-4363b572133e"
        },
        "item": {
          "id": "5fade0a5-3761-4a7f-a966-b1131d54116c",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "d672d7b7-10c6-40ff-ae64-8c9866c5eb52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5361d570-842b-43be-a2e4-0421355b927c",
        "cursor": {
          "ref": "6dd5ac34-75de-4b3c-95be-7f8542c5bc9a",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "743314aa-9009-4366-ac75-b4d9957cbddd"
        },
        "item": {
          "id": "5361d570-842b-43be-a2e4-0421355b927c",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "d3244900-6f4e-4221-bf8f-f17c7bf9f4e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1ce0955-e130-4c11-86aa-84d206e35843",
        "cursor": {
          "ref": "7462b19c-80c3-4798-b24a-e89ede2b6474",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "88fb7adf-0236-42da-895f-7d171497521e"
        },
        "item": {
          "id": "e1ce0955-e130-4c11-86aa-84d206e35843",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "462c85e7-1b88-465a-9276-3298d577689e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80a6b52e-de04-4b7f-91a2-29c90ae76460",
        "cursor": {
          "ref": "1b9b940d-d734-4958-b695-934119634a36",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "47210676-56da-422d-98e0-70bd659f7876"
        },
        "item": {
          "id": "80a6b52e-de04-4b7f-91a2-29c90ae76460",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "f8e163b1-cc35-4c6b-b65f-d3bf36815689",
          "status": "Created",
          "code": 201,
          "responseTime": 2458,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "a27f82b1-dfdc-4956-a01a-97ce295bbf98",
        "cursor": {
          "ref": "711aa4e4-adcd-46d7-b59c-59c6d26d3ee2",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c19c8e7f-e3c1-4c17-9742-208561a6ecb0"
        },
        "item": {
          "id": "a27f82b1-dfdc-4956-a01a-97ce295bbf98",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "99075c2b-1e64-4998-a6bd-78bcc6d89878",
          "status": "Created",
          "code": 201,
          "responseTime": 2413,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "948f37b9-9814-4422-8b81-83006179b1bb",
        "cursor": {
          "ref": "c967d645-c3d6-4b1a-91c9-3345287058e3",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3fad6c3d-d676-4dfc-a9bc-860cff260f5e"
        },
        "item": {
          "id": "948f37b9-9814-4422-8b81-83006179b1bb",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a6e262bd-8062-4b8c-a077-f0ece3427478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b16b1ffa-909d-42f4-8de7-4aa4f6ba5a5f",
        "cursor": {
          "ref": "ce83c470-17ad-4364-acee-bca14b521123",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "22c51bf0-fc2d-437e-8c76-6428b1c6476d"
        },
        "item": {
          "id": "b16b1ffa-909d-42f4-8de7-4aa4f6ba5a5f",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "15a57564-417d-46e8-9510-e25e2213c4e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "886759fc-1bd1-49a4-90ab-c3447544b52d",
        "cursor": {
          "ref": "35f9bfb5-4ebb-4a3d-9e54-2de3912272ca",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "cfda3cbf-4c5f-4ae8-8deb-a1b87b085c56"
        },
        "item": {
          "id": "886759fc-1bd1-49a4-90ab-c3447544b52d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f74a4e8d-3aed-4ee1-a034-12aa9e81238a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60758ec1-e1b9-406a-a805-dc07d54f4d27",
        "cursor": {
          "ref": "74b4b01e-c8b1-4288-9cf9-08606bad4ba1",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "828eaf15-eca8-41e9-9f75-a46faf5e9d0f"
        },
        "item": {
          "id": "60758ec1-e1b9-406a-a805-dc07d54f4d27",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "0fb11be6-16e1-4183-a1d6-4eae78e73559",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44a2a2bd-c840-43e6-b14e-bbb4aedeb627",
        "cursor": {
          "ref": "a3da5f10-4454-475a-89fe-5323f4825bf5",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f5a7bf9d-0a8c-4391-a5e9-607197136b49"
        },
        "item": {
          "id": "44a2a2bd-c840-43e6-b14e-bbb4aedeb627",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a2f6a0dd-02b9-4c9c-84a2-1e3eb8004d3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d70e37af-8a0a-44f4-bdad-069c249cddc2",
        "cursor": {
          "ref": "599a9f3e-f924-4f2d-b8b3-8d9ef0041e75",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "11028871-370a-43ea-a969-2ceea5ad7846"
        },
        "item": {
          "id": "d70e37af-8a0a-44f4-bdad-069c249cddc2",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a90635f8-7f05-48b1-b46f-edbd2ffbbad2",
          "status": "Created",
          "code": 201,
          "responseTime": 2529,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "a749b138-26ce-4ddd-889c-7dd1544c2a5e",
        "cursor": {
          "ref": "8022d6d7-eca5-4514-bb02-9b4d025e4c12",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "79cfafac-846f-4d6f-8f46-1d9e93fec27f"
        },
        "item": {
          "id": "a749b138-26ce-4ddd-889c-7dd1544c2a5e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "3eb7e6de-1fa8-4fa5-9363-e3b22f0e96bb",
          "status": "Created",
          "code": 201,
          "responseTime": 2008,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "64cb9acb-2003-4864-bc9c-21e9c9ccf403",
        "cursor": {
          "ref": "a6f0df0a-7ae5-4f4d-a0c6-babccf393940",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "6edfe3b2-d681-45e7-af7c-5bfa4e71f06f"
        },
        "item": {
          "id": "64cb9acb-2003-4864-bc9c-21e9c9ccf403",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "45a49c8e-6c7d-4769-b473-f728d532e3f4",
          "status": "Created",
          "code": 201,
          "responseTime": 2066,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "62c21f52-3ca0-4433-a90b-b46120c96e5d",
        "cursor": {
          "ref": "2ffc25f2-0354-4760-8df2-33ad7f98f946",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5dde6fdf-ea68-4f58-9ef5-9f8304249c70"
        },
        "item": {
          "id": "62c21f52-3ca0-4433-a90b-b46120c96e5d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "323f7c29-efa2-4c4c-84bf-5110ac33b0a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6414adf6-5523-43ef-a828-50b3f4e84743",
        "cursor": {
          "ref": "7b7e031a-ee93-4c26-b88e-bba94b5a4e61",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "f1ea5143-0274-41eb-9dac-c2cac8fcd8c3"
        },
        "item": {
          "id": "6414adf6-5523-43ef-a828-50b3f4e84743",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "bb4ccedf-0d71-4a58-b8a2-19c7370cb157",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "748d8b8b-3880-457a-9f88-9aa2dc29a9d6",
        "cursor": {
          "ref": "ee5bacc3-9484-4fd1-b92e-e52aa4ffa439",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "c3a01b7c-9f14-4df3-9896-856365f2f8bd"
        },
        "item": {
          "id": "748d8b8b-3880-457a-9f88-9aa2dc29a9d6",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "bd24bf9c-9d8b-4003-86b5-c43c9c45b453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c93aa0a-8c7f-49fb-aa0f-938c2a329edd",
        "cursor": {
          "ref": "735efdef-19c1-4255-9b9d-a34b222a64e6",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "4b9d8e04-2f18-4a77-85c4-c237fae374fb"
        },
        "item": {
          "id": "6c93aa0a-8c7f-49fb-aa0f-938c2a329edd",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "92f8b4b9-f0f9-42c3-a50e-57630ac95dd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49d7af23-092b-456e-abdc-190774815476",
        "cursor": {
          "ref": "ea073cad-6a58-4442-a3d5-a75cbfd25768",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "59334b0d-a13d-4009-9c49-b171b6a2e61f"
        },
        "item": {
          "id": "49d7af23-092b-456e-abdc-190774815476",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b458d0c9-ba33-4572-b8cf-21a9f907ce02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c974f4c7-bcb3-4337-9aab-4dfe4413cfd2",
        "cursor": {
          "ref": "d134e7bb-064a-42ba-a8ef-10691b6cae3e",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "52c79365-29a1-495e-b62c-80323d48508d"
        },
        "item": {
          "id": "c974f4c7-bcb3-4337-9aab-4dfe4413cfd2",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "82218d0f-1bd6-4567-949c-d3c4835726dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f574bfe5-7dc7-4bd2-a718-8f2ab4ce1049",
        "cursor": {
          "ref": "12d2a4ae-7548-476b-b23f-cad3ad8d7a62",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "5a75ba40-358c-40c1-b7f7-57ed82473b5b"
        },
        "item": {
          "id": "f574bfe5-7dc7-4bd2-a718-8f2ab4ce1049",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "8c1c2226-af78-4048-8968-7f41bf765836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd103d60-3d64-4fb8-a15f-7dea9e0e2851",
        "cursor": {
          "ref": "bee4459e-3d22-48cd-833d-92e7c2d855cf",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "cd27e085-e3e2-4ec9-8aab-d4b48b783421"
        },
        "item": {
          "id": "cd103d60-3d64-4fb8-a15f-7dea9e0e2851",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "4c1b42e3-47c1-4642-a6b4-580699b5a188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d34437a-3074-4cd3-9bdc-ddf24175f36a",
        "cursor": {
          "ref": "83b6e277-ebe0-41d6-9f06-ecd998bd7770",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "eb96f055-9610-49b8-a9f7-80054d998f5b"
        },
        "item": {
          "id": "6d34437a-3074-4cd3-9bdc-ddf24175f36a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "be102ff5-01d5-46b3-b4da-a5fb7805668d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c684eeb0-fcbc-4946-8f09-166494b2d617",
        "cursor": {
          "ref": "58abbaa7-5e84-48f8-ba06-f1145a7fdaac",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "80534859-8dbc-4666-9b4e-821ddb327cad"
        },
        "item": {
          "id": "c684eeb0-fcbc-4946-8f09-166494b2d617",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "f636ab1d-6f0c-47ed-b74c-5ff7e9ea49d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1502c446-eaef-4578-bccd-19d2e10a8e42",
        "cursor": {
          "ref": "bedf770e-c3f1-4c35-9422-71d89fd5a106",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "9fd312f8-7ccf-4566-97b6-6e7a628480b1"
        },
        "item": {
          "id": "1502c446-eaef-4578-bccd-19d2e10a8e42",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "5ff27fbc-4537-46d3-aa78-a1c541d7258b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38f7a13e-903f-4a01-8653-d36cb9caeeab",
        "cursor": {
          "ref": "920293d2-87fe-4230-9238-2f99ddc0341c",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "9d577034-a570-4277-9eeb-f82f3436bdf3"
        },
        "item": {
          "id": "38f7a13e-903f-4a01-8653-d36cb9caeeab",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "1e43b6b3-4f00-4fc9-8c9d-83786daf684e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a70eef9-bdd0-46fb-a71f-eeb447e689c2",
        "cursor": {
          "ref": "84dce633-f39f-42ee-adbb-e4f7d0f80723",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f9a22110-3f80-4e9a-b244-a254ea058ad6"
        },
        "item": {
          "id": "6a70eef9-bdd0-46fb-a71f-eeb447e689c2",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a3900770-7484-4fb8-bf77-d8ed913a57d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13857be1-2574-4776-a9d0-b078293c4b28",
        "cursor": {
          "ref": "e6431bb2-e47a-4f15-9549-64c55c3a5798",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "87e03470-41ae-4252-aa44-66e027a192db"
        },
        "item": {
          "id": "13857be1-2574-4776-a9d0-b078293c4b28",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "8cf957ff-f975-4bca-97b6-cc721a47db2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a22959a-f371-4ff4-a06a-c752a88bd59a",
        "cursor": {
          "ref": "6159b731-811b-4c59-859a-440e038de611",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "16485c6c-5bfd-4ddb-a85d-865d5fdd31e7"
        },
        "item": {
          "id": "0a22959a-f371-4ff4-a06a-c752a88bd59a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "4a4df859-f606-4d44-b901-df7399364cee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d06b2175-dea7-4a40-a9e1-362390d66541",
        "cursor": {
          "ref": "e7444941-3f71-401f-bd36-e90f3abea09a",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "acef265f-ed68-414b-8bc1-2757a5a2336c"
        },
        "item": {
          "id": "d06b2175-dea7-4a40-a9e1-362390d66541",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7bb9da20-e215-4aa3-914d-24a9ae81f973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 721,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad047f39-1a61-4aea-a343-8f77b7a40a22",
        "cursor": {
          "ref": "462dd24a-ec4d-4b0b-ab1d-61c590fdf879",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "9a5bfa0d-c25a-40da-9cfa-693e44268e16"
        },
        "item": {
          "id": "ad047f39-1a61-4aea-a343-8f77b7a40a22",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d69ab978-7661-4705-9e5d-829a539cc635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e2cd686-e27f-42dd-a914-6ef0bc5de379",
        "cursor": {
          "ref": "586c430d-fbd2-4bb7-bdb6-737185ee8016",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f8dbaee7-5388-48e9-b06d-f573ba2fc5ff"
        },
        "item": {
          "id": "6e2cd686-e27f-42dd-a914-6ef0bc5de379",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1c66539b-8e25-4231-afc5-714f1bf0ca22",
          "status": "Created",
          "code": 201,
          "responseTime": 2035,
          "responseSize": 976
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "946ecda4-659d-40e4-b803-752f04b80122",
        "cursor": {
          "ref": "e354684e-f4e9-4747-a1f4-c3967e80acf8",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a706f2a8-27c4-4b6b-bc6a-19c825aa3e76"
        },
        "item": {
          "id": "946ecda4-659d-40e4-b803-752f04b80122",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "4d4435c6-6fe3-48a7-a1d7-8bcaf8daf315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee5e23ae-b683-4bcf-87db-bdf8d4a73447",
        "cursor": {
          "ref": "26e379e6-4df2-4552-b7b5-62af5d379360",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "f975af1b-c30e-49e0-b74a-3633d3729c76"
        },
        "item": {
          "id": "ee5e23ae-b683-4bcf-87db-bdf8d4a73447",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "95eb32d6-08d7-424e-b6c8-c501bb0a6419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 363,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47940b99-2ec5-4ede-8304-6892a27509d0",
        "cursor": {
          "ref": "c6261c1d-a35f-492e-b687-d6ff24d89bd2",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a5daeb04-37f5-4347-bf04-3bcc03aa4f07"
        },
        "item": {
          "id": "47940b99-2ec5-4ede-8304-6892a27509d0",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "de088d07-68b1-4eee-a4ff-af69c3d34e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09acb5c1-42ac-4e8d-bc69-db8c3f0ed065",
        "cursor": {
          "ref": "c2c53e58-4fec-423d-a778-1f1fe8fec434",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "afed26aa-b318-43fb-8b41-2385d7fb91f0"
        },
        "item": {
          "id": "09acb5c1-42ac-4e8d-bc69-db8c3f0ed065",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "744777fb-8778-49ee-a4b8-b264c8773dc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5b98e0b-1b41-4694-a512-bf389166a552",
        "cursor": {
          "ref": "d80f5b65-d7a5-44cc-9f71-24a784643b66",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "6d04555b-be1e-467a-847a-0b99cd5c496f"
        },
        "item": {
          "id": "c5b98e0b-1b41-4694-a512-bf389166a552",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "57d64e95-5dea-41ad-bed1-94c14a03f434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99048447-f8b5-44b5-a356-32fe5fc3c26e",
        "cursor": {
          "ref": "f4ebe80c-4237-490a-87d4-68218e3a5d55",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "f6670747-d2b2-4300-a35c-93f54916048b"
        },
        "item": {
          "id": "99048447-f8b5-44b5-a356-32fe5fc3c26e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "915acf6a-6d67-4343-a331-867370ccb372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b18066b-9350-4c1c-90b5-4fe2cdbd0f29",
        "cursor": {
          "ref": "85d9dd1c-52b2-4745-8f08-3860c283453c",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "1458dfa5-84f3-4204-b158-d23530859ade"
        },
        "item": {
          "id": "7b18066b-9350-4c1c-90b5-4fe2cdbd0f29",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "976ace2f-9a38-4542-ac9d-d0d789254856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8107a446-8323-4b87-b809-c12dab103b0f",
        "cursor": {
          "ref": "e3ce7532-95ba-4aca-b9bd-015697662e26",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "516c3852-83f8-4e37-af77-9a449ffaaff6"
        },
        "item": {
          "id": "8107a446-8323-4b87-b809-c12dab103b0f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "8238f557-24d1-46aa-8d09-ec57a77ae876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb77a9aa-321e-45b9-8e90-4f45fb3a9dfe",
        "cursor": {
          "ref": "eef2f20a-3967-4a52-aa26-a8c0c0047ce2",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "859d3211-d807-4886-975c-89165ba99196"
        },
        "item": {
          "id": "bb77a9aa-321e-45b9-8e90-4f45fb3a9dfe",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "4a81a0a9-69c7-40de-8b21-f273d12106b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "835bbd45-429b-4660-a9c4-c12867b80804",
        "cursor": {
          "ref": "3107d16e-bb79-4092-aacf-d569106f79ea",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "1d115b84-a92c-427f-9456-b7a4d723b416"
        },
        "item": {
          "id": "835bbd45-429b-4660-a9c4-c12867b80804",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "0576dced-da92-4ee9-b0ef-12845ba59c8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c50104d5-b004-4c58-9f57-3ab48e64f7e2",
        "cursor": {
          "ref": "72517a8d-9ca9-47b5-9b3a-55c4d7efb654",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8ae304ee-ede3-4df3-b1a1-fb62ef3332e1"
        },
        "item": {
          "id": "c50104d5-b004-4c58-9f57-3ab48e64f7e2",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "bdbdb78e-a875-4f03-9534-a5648f984c08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e2d664b-be1c-467a-82f9-12a3877e047b",
        "cursor": {
          "ref": "198161db-4a08-48bf-9495-a66ee218998c",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a5372bdd-8320-449f-ba22-ec019f6a8f67"
        },
        "item": {
          "id": "2e2d664b-be1c-467a-82f9-12a3877e047b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "9439061c-7f00-4d60-9d0f-f8a919f4b10b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a15992e2-4497-4bba-894e-2c38ce448cb7",
        "cursor": {
          "ref": "22b6e45a-f525-4c07-94e0-ecacc74d1705",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "44c98278-489b-47c6-8508-9471b9da4604"
        },
        "item": {
          "id": "a15992e2-4497-4bba-894e-2c38ce448cb7",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "22077ea0-c38e-46d8-9e3c-3f66812e80ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ace4e4e-dc31-4a03-b32e-0a52c4407c7f",
        "cursor": {
          "ref": "fb725948-a100-47f9-9c0f-c6a8eec22ac5",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d0c25bcb-ecc8-4be3-952e-c333d61a1e9b"
        },
        "item": {
          "id": "5ace4e4e-dc31-4a03-b32e-0a52c4407c7f",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "32ba811c-e317-4e6f-817a-39bba35b0b7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fa423af-8433-4d7d-8706-04a183a43d0a",
        "cursor": {
          "ref": "97e7bb7a-1f89-488d-a91e-ad13cab97ac0",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2e021d67-bfc8-49dd-a1e4-3819b7c84030"
        },
        "item": {
          "id": "2fa423af-8433-4d7d-8706-04a183a43d0a",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "9895f6db-76c8-4598-9747-381cd1fc85e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8efed428-aa16-4874-9db7-2806d7a78b3c",
        "cursor": {
          "ref": "6dd1b920-c327-48ed-85e4-57dfd689669e",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "fe2a6fc5-9eb1-4f2f-b1c9-a08c07876092"
        },
        "item": {
          "id": "8efed428-aa16-4874-9db7-2806d7a78b3c",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "139678ed-45ab-4c20-89f0-5da43b1e4c35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c077aa7b-d951-47de-b288-c0d9f9fe8dcb",
        "cursor": {
          "ref": "0d993269-f879-4eb6-bcbd-eacb49c80b54",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "78143c80-7e1d-4df7-a216-32a0ad808524"
        },
        "item": {
          "id": "c077aa7b-d951-47de-b288-c0d9f9fe8dcb",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "11eac0f3-10b5-4f33-9102-76ce4f73a622",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb8c061f-beb1-4845-83b3-581ad774d70a",
        "cursor": {
          "ref": "64595671-3e57-4f50-a0b9-5d277205675b",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "586f466e-928f-43af-bfca-27e6c1afdb4a"
        },
        "item": {
          "id": "fb8c061f-beb1-4845-83b3-581ad774d70a",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "82b56ceb-6b3a-4e04-9a90-204a91726cd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fccf73e2-5c88-46c7-9f41-75cd6f08375e",
        "cursor": {
          "ref": "247c6513-3200-40b6-a8f9-575ff5540748",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "77e4f4e5-44d3-4b83-94db-b8db578a790c"
        },
        "item": {
          "id": "fccf73e2-5c88-46c7-9f41-75cd6f08375e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "cd5c07bd-9507-4ac5-9a4e-8802c52abbf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e2407a-5476-45ed-a410-1218106be733",
        "cursor": {
          "ref": "a5b383de-2f39-469b-9afa-271f5041bd82",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "04e1ca9d-ddab-4824-a22e-c9d6906338a9"
        },
        "item": {
          "id": "33e2407a-5476-45ed-a410-1218106be733",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "c03c5ccb-1aa2-4f6e-bb28-8b4e8ea1eda4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "101cfb75-b804-4be8-aeb8-82ac619689be",
        "cursor": {
          "ref": "54b816f6-9f32-467a-ab1d-26288362b3cc",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "31b98586-be05-4730-9391-d8d6bda422c3"
        },
        "item": {
          "id": "101cfb75-b804-4be8-aeb8-82ac619689be",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "32d1378e-31be-4471-be0e-2dee8b919454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deab447e-5b32-4388-ad7e-25943074ae39",
        "cursor": {
          "ref": "3a85c066-4641-4f9f-8afe-798626a38f72",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0622cc01-1f52-475c-bdc6-a0f41115a343"
        },
        "item": {
          "id": "deab447e-5b32-4388-ad7e-25943074ae39",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "253a7558-6547-4868-9fc6-fcd31f765d7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "812784fe-af58-4460-9981-ca2e0f63d370",
        "cursor": {
          "ref": "48fcf2c5-82fd-4941-b28f-ee4e4d83becc",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "46b52a49-55e2-4585-8f26-120d534b3bf4"
        },
        "item": {
          "id": "812784fe-af58-4460-9981-ca2e0f63d370",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3104ac64-f09a-4f4a-80f5-75e1bc1b7a60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c67c66e-17a3-439e-bae8-0170ee533f9a",
        "cursor": {
          "ref": "51aedf2d-f96a-4789-9805-7dca51660fbb",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "668d02af-740d-4780-9f1d-ff40c19308cf"
        },
        "item": {
          "id": "2c67c66e-17a3-439e-bae8-0170ee533f9a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "230864a3-84c6-48dc-a246-3d5368cd191b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c163335d-9557-4148-892b-b321fe5e178d",
        "cursor": {
          "ref": "6311441d-18ca-4908-88cb-785a722f8d98",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "f52ce5cc-b450-4d2d-879d-ecc02f2ceeac"
        },
        "item": {
          "id": "c163335d-9557-4148-892b-b321fe5e178d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "1583cefa-bd0b-40d8-acba-b59a7cb0e713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98a27aaa-2202-4d2a-b983-51ec335c1ca1",
        "cursor": {
          "ref": "402cc7de-6ba8-48ea-8756-ecbd519b79bc",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "384ae624-12fc-4834-bd77-67c7a704d32f"
        },
        "item": {
          "id": "98a27aaa-2202-4d2a-b983-51ec335c1ca1",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "37290514-bf3e-4cf8-83de-b6bf91a9edd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e76c05bd-34d0-4e3a-8036-cc4b14105f24",
        "cursor": {
          "ref": "e2611bc6-791c-4456-b7ac-75fbc140cf5b",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "77f55a08-eb8a-41f8-b2ea-189eecfde622"
        },
        "item": {
          "id": "e76c05bd-34d0-4e3a-8036-cc4b14105f24",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "d0f0794e-28eb-445f-ac91-0aa8132dc10d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaab023a-d6cc-4789-9f5b-a3cc1829bde2",
        "cursor": {
          "ref": "c757532f-7450-45e6-869c-3728ca8325fb",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "5c9a1e46-a8eb-45da-94f5-443a5898a969"
        },
        "item": {
          "id": "aaab023a-d6cc-4789-9f5b-a3cc1829bde2",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "4f21f00a-d747-4e65-882b-013c4b86dafc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce2a7696-1930-4d3b-946f-ee97005c4808",
        "cursor": {
          "ref": "e00b8955-ed61-4683-8352-c804709848e7",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "6ea16a6e-a3fc-43f4-b4d5-6f807a9646c1"
        },
        "item": {
          "id": "ce2a7696-1930-4d3b-946f-ee97005c4808",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "34e70682-42c9-42ca-8198-819090001488",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce508ce9-aa13-4a20-8682-730e7bfe3480",
        "cursor": {
          "ref": "eb0e74a7-6c45-4c9d-83bb-34f528234acc",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "e130524e-8146-475c-886c-9a438221485b"
        },
        "item": {
          "id": "ce508ce9-aa13-4a20-8682-730e7bfe3480",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "d023f277-72cf-4092-aa8f-4f73c4f2dc09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d3a7b06-ce58-4da3-bf4e-74f8dceffb18",
        "cursor": {
          "ref": "304dc06d-286f-4cd7-9692-dc7aeecb35e7",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "2035bf1c-4fe4-4260-9584-6350a1325224"
        },
        "item": {
          "id": "4d3a7b06-ce58-4da3-bf4e-74f8dceffb18",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "666b1287-c011-4e82-890e-035929f7459b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "76cd6ef4-719f-466b-a917-7cb2649042e3",
        "cursor": {
          "ref": "9b1b2bc9-adf5-4235-8edb-d44b0f4ffaee",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "16aad253-d6f5-4a9e-a222-b3d33d2321d2"
        },
        "item": {
          "id": "76cd6ef4-719f-466b-a917-7cb2649042e3",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "365082e4-aac3-4aa9-93a4-9166ab5c35b8",
          "status": "Created",
          "code": 201,
          "responseTime": 2207,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "4a038c11-6bb6-4bc2-a45d-710a798325ed",
        "cursor": {
          "ref": "784e66a7-06ec-43d9-9a50-290168d78a08",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "53279c0b-6582-49ea-a7f3-36728e166dfe"
        },
        "item": {
          "id": "4a038c11-6bb6-4bc2-a45d-710a798325ed",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4f829415-0e17-433d-9c96-10292d875659",
          "status": "Created",
          "code": 201,
          "responseTime": 2306,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d3df2bc-4ce5-4632-82df-6f38b514d8a4",
        "cursor": {
          "ref": "f77ce407-46b3-4471-8a7c-4576d0ec6433",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "a795cb03-9697-47a1-84ef-fd3698192d11"
        },
        "item": {
          "id": "4d3df2bc-4ce5-4632-82df-6f38b514d8a4",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "183dae45-1605-446c-acc6-875fab6b9bc2",
          "status": "Created",
          "code": 201,
          "responseTime": 2270,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b46ec46-770b-403f-aa56-3ccfa57b4232",
        "cursor": {
          "ref": "6911326e-f479-4eb9-9797-d77e7e6848ab",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "79045320-6548-4ead-9f7e-214d69789509"
        },
        "item": {
          "id": "5b46ec46-770b-403f-aa56-3ccfa57b4232",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "21fd36a9-5f35-44d7-857f-57891b6e1db9",
          "status": "Created",
          "code": 201,
          "responseTime": 2121,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "22f29dda-666d-4614-a0c0-8b76213a0238",
        "cursor": {
          "ref": "fbffce7f-bd62-4d47-9e34-e6ef9c013f06",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "cf8e9b09-1476-4046-9ab2-8f21c595aad1"
        },
        "item": {
          "id": "22f29dda-666d-4614-a0c0-8b76213a0238",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ec2dad28-d200-451f-b08e-6ab148f4a8df",
          "status": "Created",
          "code": 201,
          "responseTime": 2273,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4f6914f-2c6a-43cb-a35c-2e0bb0951a49",
        "cursor": {
          "ref": "d39c922d-ed94-484c-aa50-a571fc7f9c0a",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "676a3a17-9b35-4c91-b6d5-83efb306f20f"
        },
        "item": {
          "id": "b4f6914f-2c6a-43cb-a35c-2e0bb0951a49",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "091a3a49-eaf6-47c6-8366-c6547e91c8ae",
          "status": "Created",
          "code": 201,
          "responseTime": 2104,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-04-18T00:36:39Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-04-18T00:36:39Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "ae2359bf-2ccc-4e1e-ab16-951236ba2ec6",
        "cursor": {
          "ref": "db8b9168-dc70-4157-92cb-62d1f2c7cd3c",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "e07494c4-8bc4-4095-b766-b168836fdb23"
        },
        "item": {
          "id": "ae2359bf-2ccc-4e1e-ab16-951236ba2ec6",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1587d73c-5ea5-455d-8f55-0f8e79daddc4",
          "status": "Created",
          "code": 201,
          "responseTime": 2235,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bb02770-b402-4178-ab00-6993ddf3652b",
        "cursor": {
          "ref": "931f7887-3b10-40e2-90a2-5c699dab4806",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a2fc9150-7cee-4706-986c-223861da7264"
        },
        "item": {
          "id": "7bb02770-b402-4178-ab00-6993ddf3652b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8b822a42-37bb-41f5-8a0e-de5dbeeac329",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bb02770-b402-4178-ab00-6993ddf3652b",
        "cursor": {
          "ref": "931f7887-3b10-40e2-90a2-5c699dab4806",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a2fc9150-7cee-4706-986c-223861da7264"
        },
        "item": {
          "id": "7bb02770-b402-4178-ab00-6993ddf3652b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8b822a42-37bb-41f5-8a0e-de5dbeeac329",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1c8f39a-6da2-4f46-83bb-6633aa6bfa6f",
        "cursor": {
          "ref": "ca8eb767-c090-4cda-82d3-528bc1e73134",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "4426e177-3918-4fac-bc8b-5c6a981d42cc"
        },
        "item": {
          "id": "b1c8f39a-6da2-4f46-83bb-6633aa6bfa6f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "22a6a1d4-cd8b-40ae-a350-1d5cf5fb51ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dabc55d-ab8d-478b-8cba-12334e51b7b7",
        "cursor": {
          "ref": "45f771c3-2f51-4df6-a9e3-f6eec23ae685",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "063ca32c-488b-44c8-b442-232bae650fe7"
        },
        "item": {
          "id": "2dabc55d-ab8d-478b-8cba-12334e51b7b7",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b4d5d376-b8f1-499a-a5f4-523a57fa45de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b23b58e3-aebe-4ca7-9199-9c0599f5c6fe",
        "cursor": {
          "ref": "54ac5673-6e9f-43d2-92f0-6fee6b6ef844",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "0bb60d55-f4cd-4ea9-b084-675de0b948ab"
        },
        "item": {
          "id": "b23b58e3-aebe-4ca7-9199-9c0599f5c6fe",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a1dfcd02-6c9b-40f2-ae6b-94375bda93fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ce4348d-6545-4168-9b17-33fdcfba1017",
        "cursor": {
          "ref": "408a32d1-d34d-407d-b494-67faa7b6135c",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "7cbd481b-0035-4ad4-acc4-898d2dd5c457"
        },
        "item": {
          "id": "7ce4348d-6545-4168-9b17-33fdcfba1017",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "cb5038fd-cb75-4961-a44b-81d6e2f13973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6baeb8e3-ad52-4018-89f8-b3a1f5882cdc",
        "cursor": {
          "ref": "505bdb55-acd0-42b2-9a89-e66eabcd7740",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "75952cc6-5ade-4fc9-8ebe-e03e67a0203c"
        },
        "item": {
          "id": "6baeb8e3-ad52-4018-89f8-b3a1f5882cdc",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "76d275d1-f07c-4b63-9fd3-25eeb072d017",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae8a7620-acf8-464c-bdef-f5e6dab9c3fc",
        "cursor": {
          "ref": "c9610d2e-3b4a-4ecb-91e3-6f7cbfa64c43",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "e2ca9633-3c24-4f42-bc59-0873d206911f"
        },
        "item": {
          "id": "ae8a7620-acf8-464c-bdef-f5e6dab9c3fc",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7033dc5b-9b5e-4c64-9c5c-5b6e1c4edd9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bc98fc9-262e-4226-b298-60ced57bbd22",
        "cursor": {
          "ref": "117055be-e935-4757-8d2d-b4b81a4d5b01",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "0477d790-507f-4f41-be7b-e950232fadc6"
        },
        "item": {
          "id": "8bc98fc9-262e-4226-b298-60ced57bbd22",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "fc97ba4e-5b58-4b46-a87c-6c1cf2b39cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d5390b0-6d3b-4560-aab1-f72a161e7c03",
        "cursor": {
          "ref": "9dde6ede-7b9c-48ed-84c6-96bd95a55f41",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "216fdb8c-d295-4d1f-bb99-e60b8974677d"
        },
        "item": {
          "id": "6d5390b0-6d3b-4560-aab1-f72a161e7c03",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "870cb48c-068f-47f0-b80b-ae0406415fd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c310ed1d-bf1b-4118-9613-22be6372b35a",
        "cursor": {
          "ref": "c3b1b1de-08ca-43b3-98da-d9a25777b614",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a2791a86-e737-4497-bfd1-79ac816e51aa"
        },
        "item": {
          "id": "c310ed1d-bf1b-4118-9613-22be6372b35a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "fa394e99-ecbf-49e4-b4d1-5ad16ae28338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0205dcc9-7c03-4d58-86fa-db34262c2463",
        "cursor": {
          "ref": "cf1358ef-a9a9-4cb8-bf5c-ad42dfbc7b58",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "700431b4-21e8-443c-93a7-2be53cd3d576"
        },
        "item": {
          "id": "0205dcc9-7c03-4d58-86fa-db34262c2463",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "bb7a9001-b67e-4546-a24f-ae77284f359e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b584b106-9005-46df-beb6-69f1c3dafd4c",
        "cursor": {
          "ref": "34a3596c-c014-42b2-b1a4-b0711aa8212d",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "5c520a8b-de7d-4067-b00e-3156e3ccf986"
        },
        "item": {
          "id": "b584b106-9005-46df-beb6-69f1c3dafd4c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ab05776f-121d-4d07-91f1-14a148e8610e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d0876f7-f0de-49f1-a62f-a9228cc57194",
        "cursor": {
          "ref": "fb273cda-867c-48a5-8f4e-fca1b0995617",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "012c6b77-f535-4d05-8598-53290382f502"
        },
        "item": {
          "id": "7d0876f7-f0de-49f1-a62f-a9228cc57194",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "61b7ce8f-9c24-4490-9bca-d6faca10400e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "859bd525-0952-44cb-a62d-c9098736ee8c",
        "cursor": {
          "ref": "ddc81564-bd32-4881-922d-41cd422a18bb",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "631c460f-0425-40c3-920e-acd56688714b"
        },
        "item": {
          "id": "859bd525-0952-44cb-a62d-c9098736ee8c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d75f623a-5bed-4e60-8d38-32d562cb5966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "239b4f89-02b2-42e9-895e-eaf3ed91ba72",
        "cursor": {
          "ref": "633c78d4-95f0-4d1b-9ba9-380afa2311ac",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "c054ec33-0145-4436-b361-057338f7d5d6"
        },
        "item": {
          "id": "239b4f89-02b2-42e9-895e-eaf3ed91ba72",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "25555c6b-145b-45e8-87f0-95147807dfc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 850,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7779fbff-98ec-4ed2-ae73-edc6a079ee96",
        "cursor": {
          "ref": "b20fe409-7b06-4c74-b96a-e5768efa8fae",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "a23495b3-b9f2-47ed-a1f2-c7cab96ec198"
        },
        "item": {
          "id": "7779fbff-98ec-4ed2-ae73-edc6a079ee96",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "da86ec1d-028e-4c05-8ac8-ea50b68fb0ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d59f7a01-1862-4cb7-8a5a-b87f1726735e",
        "cursor": {
          "ref": "00d7eb6b-3643-4396-bb8c-e5abd1b3952c",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "bd0c5e3f-d761-48ed-a627-af4e72e608ee"
        },
        "item": {
          "id": "d59f7a01-1862-4cb7-8a5a-b87f1726735e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c7d9374e-bd31-4704-a1ac-37facd5d0ce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18f87b10-01fe-4c96-b66f-844eef56095c",
        "cursor": {
          "ref": "61a9f527-9793-4a5f-9aff-9376dde346ae",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "40dc9e51-b979-4197-83fa-d47fbd45d832"
        },
        "item": {
          "id": "18f87b10-01fe-4c96-b66f-844eef56095c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ca5300ad-f4e1-4770-aeca-e9cb2b5a924c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "569a0217-1bf7-4120-877d-c5153ce24c77",
        "cursor": {
          "ref": "2c27e8bf-7a39-476c-91c5-a78a71f4498c",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "abad472e-f5b5-4bf7-9cdf-10b7fcf3e878"
        },
        "item": {
          "id": "569a0217-1bf7-4120-877d-c5153ce24c77",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "39bfb492-436a-4d02-a066-18eacd98d9b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4611eac7-e37a-429f-b7f1-0ad2438c8acd",
        "cursor": {
          "ref": "2b5b52ce-7dc4-4400-a2f5-2b94bc168c61",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f2e9e875-f27c-4d97-ba08-9c22cd1df5dc"
        },
        "item": {
          "id": "4611eac7-e37a-429f-b7f1-0ad2438c8acd",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ee362457-f7f5-4041-bc96-2be706cb1803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21e67697-8985-42ab-913c-bbd7b81dba88",
        "cursor": {
          "ref": "ed6fe63b-c3aa-4945-80fc-435b9abef9db",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "40d522a5-0c2d-4ea8-adb5-6af7e4362d25"
        },
        "item": {
          "id": "21e67697-8985-42ab-913c-bbd7b81dba88",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f1c99c9b-2339-4d4c-abbe-e89293c28f06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27425f84-d0b2-4e7f-981b-3c451d682bd8",
        "cursor": {
          "ref": "12bc89a1-01e1-464f-87be-eba2185a40a2",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "d9d33dca-12d3-4f8f-9e96-e3747b905941"
        },
        "item": {
          "id": "27425f84-d0b2-4e7f-981b-3c451d682bd8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5e463700-5fe5-4d45-902c-b754512997a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c410bdd-13a5-484f-8c4a-df93632cc293",
        "cursor": {
          "ref": "8595902c-0b20-44f7-930e-ae13eccee5c8",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ffe4751e-35a6-4577-843f-989f3c1c6a97"
        },
        "item": {
          "id": "8c410bdd-13a5-484f-8c4a-df93632cc293",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e5b465e8-f3f4-4fd3-8770-38f76b7c2997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbc4dc48-9917-4c73-9382-55df1bdff2cf",
        "cursor": {
          "ref": "30808eea-960a-42b0-82cb-483c9652586e",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "b2ce7baf-663e-4621-af6f-85d5aeff7db1"
        },
        "item": {
          "id": "bbc4dc48-9917-4c73-9382-55df1bdff2cf",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "574e9996-700d-4d3f-aa46-944a7ea7ce92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "458884da-c336-4a87-ba96-7c435560dda1",
        "cursor": {
          "ref": "c3a49545-3c64-43ad-9841-bda209fbb679",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "c12682f5-6448-45c2-bdd6-67d5cb6f4ed3"
        },
        "item": {
          "id": "458884da-c336-4a87-ba96-7c435560dda1",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b83ae73c-5034-4f43-98f0-c0cf15175182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4930aba-717d-43fe-bf75-b4b61614f445",
        "cursor": {
          "ref": "9f8faa55-30d4-480c-8172-52e041a7d56c",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "252b0347-3a8b-4df3-a985-4b91a0511bda"
        },
        "item": {
          "id": "d4930aba-717d-43fe-bf75-b4b61614f445",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "eb92f47d-7b85-4965-bef8-4947477a12ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d09c756-ba2b-4227-866a-e274de5c7c87",
        "cursor": {
          "ref": "21a83a29-f7a3-4bcd-83cc-8ea03f90e710",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "e3a2eb0f-134c-4fcb-85ab-70a3230c6714"
        },
        "item": {
          "id": "6d09c756-ba2b-4227-866a-e274de5c7c87",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "28f1081d-5f48-47fa-901b-62b0bac60141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7df84b2-c5b2-43be-ad05-b9cba25fafac",
        "cursor": {
          "ref": "2ee5d469-7205-426b-824c-0b78426cfc6e",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "3865eefb-84a9-41bd-a353-c7074df304c8"
        },
        "item": {
          "id": "a7df84b2-c5b2-43be-ad05-b9cba25fafac",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f8ad545b-5d73-451f-841a-cd8ac19ed1b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a0c1f11-d6df-4c86-ab56-f694a3790602",
        "cursor": {
          "ref": "0aacb8a3-22ff-4103-ab99-00ad6b286295",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "dc4c1a39-5c85-47a7-83ce-ead8c557c2a8"
        },
        "item": {
          "id": "5a0c1f11-d6df-4c86-ab56-f694a3790602",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "41c3a32d-063d-47ef-9c79-ee7212ec6533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0914e75c-2e49-47bf-a5f4-a656680418a2",
        "cursor": {
          "ref": "3a0a9571-5303-490b-a2c0-bc196902e9bd",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ae275f37-4d2c-4add-a892-a537299be2dd"
        },
        "item": {
          "id": "0914e75c-2e49-47bf-a5f4-a656680418a2",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "dd94aa96-0ff2-4814-bfa6-422b444b6d31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21834325-a58e-4506-a80c-d11413e03487",
        "cursor": {
          "ref": "7e8fb493-06c0-410b-b11e-aa516765e0da",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "cd736299-ee4a-444a-8f2f-fc8b6a323ea8"
        },
        "item": {
          "id": "21834325-a58e-4506-a80c-d11413e03487",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9dcc38c9-f8b7-4afb-84f0-6fdb1ba1ddb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ede786e0-491f-490e-a7d2-8721682e2bdd",
        "cursor": {
          "ref": "afbc9c6a-2c87-4fa1-b10a-403b7e27cb39",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "aaa3c7ce-fdcc-46c4-b5a5-8656dec501d0"
        },
        "item": {
          "id": "ede786e0-491f-490e-a7d2-8721682e2bdd",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "e634aee2-3296-4545-9499-d70281bf9d98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d587a75-7111-4572-91a7-cb6450699470",
        "cursor": {
          "ref": "64412e14-767f-42c9-82b9-9850ccd749a2",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "3fe4007c-b1d2-4907-b21c-6e751caf7a12"
        },
        "item": {
          "id": "7d587a75-7111-4572-91a7-cb6450699470",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "6bf2c5eb-7c53-4c8b-bf78-49fcc3d604b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "d3af917c-f297-4123-baf1-d04a72544a6a",
        "cursor": {
          "ref": "cee85338-94c9-45f3-8bdf-50140a93997a",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "aec25594-5734-4794-a455-85d083a03b0f"
        },
        "item": {
          "id": "d3af917c-f297-4123-baf1-d04a72544a6a",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "8f703b2b-2a85-47aa-844c-e9e31a1f4653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "51695000-37d8-4932-a1ce-c09228ab15cd",
        "cursor": {
          "ref": "fe6561f7-0def-433c-8be1-3f097b4f43fc",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "844e4cce-2e8d-4f7a-9604-ecaa6d9b0059"
        },
        "item": {
          "id": "51695000-37d8-4932-a1ce-c09228ab15cd",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5a29c272-80db-4c48-8fa7-5704dacc67b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51695000-37d8-4932-a1ce-c09228ab15cd",
        "cursor": {
          "ref": "fe6561f7-0def-433c-8be1-3f097b4f43fc",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "844e4cce-2e8d-4f7a-9604-ecaa6d9b0059"
        },
        "item": {
          "id": "51695000-37d8-4932-a1ce-c09228ab15cd",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5a29c272-80db-4c48-8fa7-5704dacc67b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "700ccbe9-2e91-4034-b8b2-ce441d1031a2",
        "cursor": {
          "ref": "25871e97-cdab-411f-8789-39b1403bcf7c",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ed8e162d-24b9-4bdb-93f5-3395ac61ea5d"
        },
        "item": {
          "id": "700ccbe9-2e91-4034-b8b2-ce441d1031a2",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "d6417691-e045-4f20-9d22-e8aac4a4a4cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac6495e-a1c9-4773-b77f-3697c17631db",
        "cursor": {
          "ref": "8a597344-8609-47c1-b4c4-692ea23bc234",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "9af01571-acae-403b-ac79-f492d7f28cb9"
        },
        "item": {
          "id": "8ac6495e-a1c9-4773-b77f-3697c17631db",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b08d10d5-a76a-4468-a521-de7791228174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22a53570-6e10-4bf1-b83f-72e1d557853a",
        "cursor": {
          "ref": "5c0d66a6-0630-4d6d-8757-23b52094d12f",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "bcdf1ba8-0b5d-460f-83ab-59eb73f60084"
        },
        "item": {
          "id": "22a53570-6e10-4bf1-b83f-72e1d557853a",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "37f45c83-3252-4698-9977-8fe287e27f4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d59cfd21-2b18-4391-9ced-b8efd891a43d",
        "cursor": {
          "ref": "96fde2bd-3707-4a6c-9b59-7b54f2dd3124",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "0e41e1e1-473e-45d3-848d-5146c1bebc06"
        },
        "item": {
          "id": "d59cfd21-2b18-4391-9ced-b8efd891a43d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "3657aebe-088a-4be5-be72-ae9b2eb069fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7317cc5d-9085-4418-a45b-7b7f8a89320d",
        "cursor": {
          "ref": "4d00d3bb-a880-4cc0-984b-20a8b031ac53",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e61ea050-48e8-4edd-8188-42e7eaa07561"
        },
        "item": {
          "id": "7317cc5d-9085-4418-a45b-7b7f8a89320d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "bc151854-0faa-45fe-b31c-ea93ca292696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d92e336-12d0-4409-8dba-4eeadc3f6b28",
        "cursor": {
          "ref": "f0e39ae4-69b6-4d38-a0dc-774a2074428f",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "2a954d1a-b260-49aa-a8d3-c831cf4eb6b0"
        },
        "item": {
          "id": "8d92e336-12d0-4409-8dba-4eeadc3f6b28",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a643210a-c96f-4ec1-b28f-6db8fe5aec06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15b3264e-65f1-4ee0-9893-aec16c1989b5",
        "cursor": {
          "ref": "e9d0483e-040e-4f14-92b3-707bcfd02509",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "fe4f7821-3e65-44d0-963c-217b6e59e941"
        },
        "item": {
          "id": "15b3264e-65f1-4ee0-9893-aec16c1989b5",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "18041ab9-02f3-4de3-9a86-1f30afdecce1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c0096fc-6e44-4eed-8c53-3a4d537c54fe",
        "cursor": {
          "ref": "f078ebc7-dc18-4c0e-b1bc-f40335d846b1",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "78e7c4c2-30ef-40fd-b8d4-d8be3a285f48"
        },
        "item": {
          "id": "7c0096fc-6e44-4eed-8c53-3a4d537c54fe",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "a7e899cf-be17-4c2c-953f-f2f9629a4418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d70f654-038d-49ed-a2c5-e527e0d62113",
        "cursor": {
          "ref": "603843ef-9fe2-4929-9dbd-30bf55eabc3d",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "5b6ba502-efa5-43df-9524-aba2aa03af66"
        },
        "item": {
          "id": "2d70f654-038d-49ed-a2c5-e527e0d62113",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e5df0b2e-fe4c-4496-82f6-44d44af92188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "821b6989-7a33-4631-b730-d93d0c541d4f",
        "cursor": {
          "ref": "f7c913af-be5f-476b-9569-958dc5c620c4",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "1664682b-3ef0-4c13-9878-1dd3a531bf68"
        },
        "item": {
          "id": "821b6989-7a33-4631-b730-d93d0c541d4f",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "d671064c-d337-46bc-8736-4ac8a9f29b33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19c913a9-08f5-4bfa-84f5-9426b6513902",
        "cursor": {
          "ref": "79541015-a46d-4c2f-992d-c10d50a72a72",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "84c2d4bb-5c7d-4db4-b497-ff53e9333d46"
        },
        "item": {
          "id": "19c913a9-08f5-4bfa-84f5-9426b6513902",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "ea765962-9b64-4353-8886-3ec935790884",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd2ceacf-9e99-46c2-bb00-8fc6b28bedd9",
        "cursor": {
          "ref": "4b4396fb-b273-43e8-9925-15a8d4939693",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d5225b35-354a-4313-ad0f-ce5b48a438d5"
        },
        "item": {
          "id": "cd2ceacf-9e99-46c2-bb00-8fc6b28bedd9",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d18d044a-b671-4d8f-ab89-0a97f27ab2ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9f5d489-290f-4356-9018-8b62b117a516",
        "cursor": {
          "ref": "b3531abc-2a3e-460e-ab2f-4ca28f7f9683",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "a02d53f3-c526-481e-aef3-b0201df0d6b7"
        },
        "item": {
          "id": "c9f5d489-290f-4356-9018-8b62b117a516",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "620293b8-0325-4bc5-9e92-33a315c211f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70c1d4c5-a7d3-4621-b730-04b54f5468c0",
        "cursor": {
          "ref": "67159bf8-c43a-4a69-88e4-3cf310274bde",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "6c6ad905-501f-454f-944a-835c2e58ba78"
        },
        "item": {
          "id": "70c1d4c5-a7d3-4621-b730-04b54f5468c0",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "a1c3bc82-8919-4eca-a12d-2468e77f45e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83fc1679-a765-4f3f-a641-7a132b22ff56",
        "cursor": {
          "ref": "3d6efd0b-1d75-4671-83a7-a84f9165b4a1",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "93097373-d58c-44b9-adfa-301183fccfb1"
        },
        "item": {
          "id": "83fc1679-a765-4f3f-a641-7a132b22ff56",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "cc82cc93-5ac0-410e-bb96-af129b304b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b13ede96-d45a-498f-b60a-b337a4bc28b8",
        "cursor": {
          "ref": "313d9678-9354-46cb-87d8-57f53633ed10",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a0b60fa7-70e4-41d7-99f1-c2a06d173fba"
        },
        "item": {
          "id": "b13ede96-d45a-498f-b60a-b337a4bc28b8",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "b1864d87-212f-47f5-9ddc-975a29417a80",
          "status": "OK",
          "code": 200,
          "responseTime": 228,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "c5b8360a-04e8-43d0-b006-14f776e518d5",
        "cursor": {
          "ref": "6e24fba9-d339-487c-89ca-2d50c2ea1d42",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "edba4d05-3beb-4bce-b23d-38e0fd9baf39"
        },
        "item": {
          "id": "c5b8360a-04e8-43d0-b006-14f776e518d5",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "c7cab26c-d7d4-4207-a707-001d9686e9ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48dcdb75-23a6-41ab-939c-65d16e695007",
        "cursor": {
          "ref": "a4a58fc5-05ba-411f-ac7f-913c5d51e173",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "928d34f5-e37f-4747-8fee-826088b53b53"
        },
        "item": {
          "id": "48dcdb75-23a6-41ab-939c-65d16e695007",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6858b3a2-5297-487d-95d7-82f118daca62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9152cb5e-cec4-4dbc-a5be-07aa94ab0165",
        "cursor": {
          "ref": "4b31ec99-1518-41a8-8231-a77dff24ffa6",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "c93c3284-01bc-457f-be53-bad42eccff33"
        },
        "item": {
          "id": "9152cb5e-cec4-4dbc-a5be-07aa94ab0165",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "f3a51236-5341-4999-983d-dcc493636cc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "533c1700-bf75-415b-b63c-aa3603ece191",
        "cursor": {
          "ref": "e114ca87-4f04-4c4a-a2b1-84d16641ef49",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "6025ba0f-43b9-495d-a2a8-a2d84cecf897"
        },
        "item": {
          "id": "533c1700-bf75-415b-b63c-aa3603ece191",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "234487fe-89a4-4352-a75c-e196ebe72bf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e4efa3e-becb-43d6-adb6-606232b0aae1",
        "cursor": {
          "ref": "39b3a45e-536b-4a3d-bf20-c69c3acac64d",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "133cc8cc-244a-41f4-875f-cffb3dcd53f5"
        },
        "item": {
          "id": "5e4efa3e-becb-43d6-adb6-606232b0aae1",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "2c758b6d-af4e-467f-bb4d-b74914ba41fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f71c283b-237c-43ad-a681-59555cd9e9ed",
        "cursor": {
          "ref": "3bbaaffc-9e36-4f39-9825-47e765923de9",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "e84f2d54-0295-4e66-8d43-76020687a937"
        },
        "item": {
          "id": "f71c283b-237c-43ad-a681-59555cd9e9ed",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "707af834-ca3c-44bc-a77c-1083e213a57a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6026bad6-68c2-47b9-829d-c7df30d58110",
        "cursor": {
          "ref": "3306cfdd-8266-4369-ac3e-c7d2c7f0b1cf",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "c42290a0-23e8-4521-a3fe-6a379c6a9d1d"
        },
        "item": {
          "id": "6026bad6-68c2-47b9-829d-c7df30d58110",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "d09bf927-2bc0-48b3-801f-d12a838e6a7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95244b51-5946-474d-b485-71c9a51e38d8",
        "cursor": {
          "ref": "657403b5-7844-4ab7-9e6c-3c0415eb37a1",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "88e4fc5f-55de-44a6-a8ce-72b11fc2e8a7"
        },
        "item": {
          "id": "95244b51-5946-474d-b485-71c9a51e38d8",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e3260009-b4de-44a6-967c-d3d0708f8018",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c20d6f92-7190-4619-b9ac-575a08e523d5",
        "cursor": {
          "ref": "99bf2d70-3278-49e6-bf69-946cdd0d175b",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "7ada95c2-4b01-4363-9e4e-9a974a36ea48"
        },
        "item": {
          "id": "c20d6f92-7190-4619-b9ac-575a08e523d5",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "cb9b85ae-0859-47b9-abe5-b381fa163b9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5ed30af-2cb0-439c-a557-a0b70a4a9b78",
        "cursor": {
          "ref": "da475c06-c1f6-4781-8065-e438863dc77c",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "97690e56-4cfc-4961-a27f-54ffbb18f253"
        },
        "item": {
          "id": "d5ed30af-2cb0-439c-a557-a0b70a4a9b78",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "72c4893f-a209-4ae4-b6ba-5cccc1a6e1f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25e63a90-c866-4e4f-ab0c-608c6b4b153f",
        "cursor": {
          "ref": "2d15d918-e410-495f-9eee-94ed0f2fd31c",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "f3338858-9afc-4b36-acb0-7a3cd9786e9d"
        },
        "item": {
          "id": "25e63a90-c866-4e4f-ab0c-608c6b4b153f",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b1ed22b5-3a25-48c9-9fd6-c465970d295e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "939f59a3-578d-4c93-9aba-dbfba99a77aa",
        "cursor": {
          "ref": "2ac4b34c-803d-432c-bba9-3df52c3f465d",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c658072f-1ee5-46c6-b05a-eb32832f7cea"
        },
        "item": {
          "id": "939f59a3-578d-4c93-9aba-dbfba99a77aa",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "ad53f711-7fb8-4e9f-adc7-68a96ebe838d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5057398-fe33-4e9e-8a97-dcdb85d72bb8",
        "cursor": {
          "ref": "26e3d8d5-011d-452f-b801-b6d857df3296",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "0244f1ee-c0fd-485f-95e0-a47a16206ff0"
        },
        "item": {
          "id": "b5057398-fe33-4e9e-8a97-dcdb85d72bb8",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "5c3801fa-f76c-4c6f-9634-0190012d06c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb6eea83-198d-4a3a-bd31-39d15ccd145c",
        "cursor": {
          "ref": "1a240f2a-723a-47c4-afec-732d3bfb7d50",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "94563521-f765-424b-baba-1c2f5da5a702"
        },
        "item": {
          "id": "fb6eea83-198d-4a3a-bd31-39d15ccd145c",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "27aa2bfe-c69c-4676-94de-f51afa6ad385",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "963d4407-b470-4289-983c-075be0565d84",
        "cursor": {
          "ref": "15ba43af-e06c-42ac-9c54-9a2677c4a720",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "df2eda0e-bba6-4a93-b6df-2b8ac63dfe19"
        },
        "item": {
          "id": "963d4407-b470-4289-983c-075be0565d84",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "98c00f67-1996-4ed5-9ee9-7111aa6ce5ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44892f05-7410-405f-98d0-8f29d3fde501",
        "cursor": {
          "ref": "038bfab1-6b3b-4389-8755-3c6b3eccf635",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "cce25655-75be-4fb4-a8d0-de9fa618e3e6"
        },
        "item": {
          "id": "44892f05-7410-405f-98d0-8f29d3fde501",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "5b40f7ca-b83c-4dea-85a4-ce895fa95fa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be24cd62-7e90-4ed1-8da5-2be332b7b073",
        "cursor": {
          "ref": "74742b1a-272c-45a7-be71-3ed93292b802",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "a33d3760-4d98-4a6f-a348-57e5259405a6"
        },
        "item": {
          "id": "be24cd62-7e90-4ed1-8da5-2be332b7b073",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "61600026-00a3-455f-bb1d-a00a4c139f5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f3d6a25-f348-4967-9359-007c12a5e20a",
        "cursor": {
          "ref": "2e260891-e724-42d3-8a0e-58cbc73b5ef3",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "08950d74-e1f0-497b-86c4-576ce10b6fff"
        },
        "item": {
          "id": "4f3d6a25-f348-4967-9359-007c12a5e20a",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "2685ebaa-e42b-4fd4-87c2-b115a0c0eb6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26a53499-3a7f-4ef2-a47b-15db3b25d648",
        "cursor": {
          "ref": "29f54c09-ce37-4418-a24f-c1b0019bd03a",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f201ba82-e57f-4782-b039-e6d7e5c8e903"
        },
        "item": {
          "id": "26a53499-3a7f-4ef2-a47b-15db3b25d648",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "890a1130-7a12-4ddf-a5d7-a5344b34a40e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ebeb5e9-cefe-4957-99c1-16043908fb3b",
        "cursor": {
          "ref": "1d636567-9231-4f4b-af8e-638a56d1527d",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "786f9ed0-5d5d-4b24-9535-ab58fbe2303a"
        },
        "item": {
          "id": "3ebeb5e9-cefe-4957-99c1-16043908fb3b",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "1057e163-de0a-4e4b-a296-079a951f0e9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68c2af2a-74dc-4679-9d60-97df7015c121",
        "cursor": {
          "ref": "3beaab49-9937-4708-96a1-11aa995ccef1",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "22242f0f-f9ac-4805-8cd4-cd29fe5f2cf1"
        },
        "item": {
          "id": "68c2af2a-74dc-4679-9d60-97df7015c121",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "058af779-b3f8-44d7-8d76-08bf5f232dc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88f1e1c4-9e65-4eba-929b-4327b2ce6bc9",
        "cursor": {
          "ref": "755b07b3-cae0-4b5a-b4c2-1014aad2cb51",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "824a98b8-4546-42f6-bc0b-8cd731e6e7dd"
        },
        "item": {
          "id": "88f1e1c4-9e65-4eba-929b-4327b2ce6bc9",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "33891236-fec8-4eb9-bb1b-eebbf096a170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a97a9e2-f3d8-48ab-83e4-552743021ef3",
        "cursor": {
          "ref": "1e02c524-ee09-4c10-8659-8c52ddb618ab",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "fb0e2f71-d2c1-4ffb-ba5b-3c6e4decdd2b"
        },
        "item": {
          "id": "3a97a9e2-f3d8-48ab-83e4-552743021ef3",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "0ff10a49-e810-4a3f-9c2e-74d090052aa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "695e735c-4e67-4c0e-88b8-60626925c54c",
        "cursor": {
          "ref": "ca2f1ca3-b29a-452f-8ada-04f162cdc4eb",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "3949c1f9-6071-4980-a178-af69ba35315a"
        },
        "item": {
          "id": "695e735c-4e67-4c0e-88b8-60626925c54c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "73b74d65-1159-4395-a0ce-46d4d5910cd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c4ff8a3-afba-4782-a787-4981ebdb4709",
        "cursor": {
          "ref": "7f49d312-04cc-4291-b143-27ab37f3cc43",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "a0e529f5-7bd3-4ad3-993f-75cbd3b4baf8"
        },
        "item": {
          "id": "4c4ff8a3-afba-4782-a787-4981ebdb4709",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b1175d63-7486-48f4-8fc2-33377e74996a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b87451fd-035a-4c29-b862-86189e5a139d",
        "cursor": {
          "ref": "68b928a3-8d89-4f8f-9d4c-07d3bc44566d",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "0b52a7da-eb1c-4778-8f7b-4cb5d56ced92"
        },
        "item": {
          "id": "b87451fd-035a-4c29-b862-86189e5a139d",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d8ddcfcd-bb31-4bd0-a609-0a6467c345f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "559dacea-5977-4164-bdd1-e40616b9971a",
        "cursor": {
          "ref": "c05663eb-a7b0-45cf-9b01-fc77fa32b24b",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "910d152a-ddfe-4c2b-aa2e-3f700b068223"
        },
        "item": {
          "id": "559dacea-5977-4164-bdd1-e40616b9971a",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "9264518c-aa16-494a-9025-a166613affcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a55d45d7-c027-43c2-8b1e-460d4d95b29e",
        "cursor": {
          "ref": "fdd99a99-b2ec-4bca-a29e-e6e2709db414",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "cb17e2a5-3eea-470c-a666-c69cb8acadea"
        },
        "item": {
          "id": "a55d45d7-c027-43c2-8b1e-460d4d95b29e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "7c01e08b-f096-42f6-98db-558066b0bc92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1be66afa-642d-4d33-a647-7c89fe56dae5",
        "cursor": {
          "ref": "6cc91e82-5d14-4765-a30c-ee8b34cf6d57",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "bc52fceb-ce46-4a00-bb2c-876f22ebd635"
        },
        "item": {
          "id": "1be66afa-642d-4d33-a647-7c89fe56dae5",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "e6454252-e4cc-4293-9805-d8cd0e98494b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9d14b7e-9ac9-43c8-9037-3464c0d1a29d",
        "cursor": {
          "ref": "b11ca5db-19cb-4c4c-8fae-42fe387bd8ad",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "58e1974b-ab77-466f-bfe0-a4b861d9a277"
        },
        "item": {
          "id": "b9d14b7e-9ac9-43c8-9037-3464c0d1a29d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "dfae2f76-a530-4ef3-87c7-6a7a8af80ba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f251815e-eef3-46fc-984c-9825898da337",
        "cursor": {
          "ref": "6d71e160-b89e-445f-a209-22761902f904",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "4105595e-c760-44ca-a841-824690d1f875"
        },
        "item": {
          "id": "f251815e-eef3-46fc-984c-9825898da337",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "fc7066e2-0b43-403e-8a46-a97c11cefc9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edac5f6c-1579-47e7-92c2-eba74d2988dd",
        "cursor": {
          "ref": "88c5af58-41c3-45f2-a349-25149c149b21",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f5c95e5d-d6ab-430e-86ef-adafbc75ca64"
        },
        "item": {
          "id": "edac5f6c-1579-47e7-92c2-eba74d2988dd",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "cddf409a-add5-4ab2-a48b-2773cb36da77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99132f66-3254-4eb6-bd83-9f131e8cbebd",
        "cursor": {
          "ref": "79d6e2e5-f641-418f-9e88-46e54fff7896",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b1381afd-24f6-43db-b362-428333cb0a2a"
        },
        "item": {
          "id": "99132f66-3254-4eb6-bd83-9f131e8cbebd",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ca217685-a493-481d-b16f-dafecc1f10a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58ac8116-5805-43e7-b33e-bbb5053c39cc",
        "cursor": {
          "ref": "becf8e56-8891-4112-89f8-ffbe17ee325e",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "5a637ec1-6342-48e4-b335-986e1430c92e"
        },
        "item": {
          "id": "58ac8116-5805-43e7-b33e-bbb5053c39cc",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "b65289cc-47c7-4ae3-9414-3b528441c5aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1a957cd-d90a-4ae4-916d-cc7720013931",
        "cursor": {
          "ref": "001990f0-6d4a-45e6-bd15-ff09a76b3cac",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "8b08689c-39cb-4688-8267-2210d76f3c08"
        },
        "item": {
          "id": "b1a957cd-d90a-4ae4-916d-cc7720013931",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "e3c3c321-9750-4d3e-ab19-3a3e95e141d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52642de6-1549-4f31-a25d-295a7007b6e2",
        "cursor": {
          "ref": "2a613fd4-5bf6-4bf5-9734-1aee7f241c9c",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "03116a46-f73b-45dc-970c-8f66843046fb"
        },
        "item": {
          "id": "52642de6-1549-4f31-a25d-295a7007b6e2",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "aca03d74-3362-4da3-84cb-b7e6dc370f30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7cc570d-02aa-410d-a873-16ce4df58241",
        "cursor": {
          "ref": "100b8f78-4fe4-4dd4-8bc4-b48eff327cec",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "9d6ee811-33a5-4193-af9b-8da539ca547a"
        },
        "item": {
          "id": "f7cc570d-02aa-410d-a873-16ce4df58241",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "2650cab4-d403-4f76-9846-47a15e1f0c20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3367b55-8a1e-4be6-a34a-34dee9ffdd9e",
        "cursor": {
          "ref": "9bbc45b8-984e-4daf-a09b-8c9c17642d38",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "972fed30-81d2-41b5-a8c8-3d23bbd9d077"
        },
        "item": {
          "id": "d3367b55-8a1e-4be6-a34a-34dee9ffdd9e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ea4fc7bd-fe7b-460c-8ff1-1d7c4a4ded8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19711be6-8b41-4a4e-995a-b6aeab28a528",
        "cursor": {
          "ref": "1af30804-8426-4554-a1cd-f5291bd9c651",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "8f416de6-689f-4338-a0e5-da9a3682ef69"
        },
        "item": {
          "id": "19711be6-8b41-4a4e-995a-b6aeab28a528",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "a5c60cb4-94bc-4c24-ad4d-9807be73516c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9820408-fd44-4311-92ee-d9458ce899bd",
        "cursor": {
          "ref": "1407bd49-092d-4e0e-9a64-9b28a6d5a374",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "5e798353-82d3-47fc-8ef6-7585ebdef6a7"
        },
        "item": {
          "id": "a9820408-fd44-4311-92ee-d9458ce899bd",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "0c014ff4-1eb5-415d-a18b-fc70afea9f41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee021fc3-3d6c-4699-84ad-385a16c635fe",
        "cursor": {
          "ref": "f2370c15-d7f9-436c-964c-b16e9f15d576",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ed8fb9b2-8229-4ffc-b611-623f11d5bd40"
        },
        "item": {
          "id": "ee021fc3-3d6c-4699-84ad-385a16c635fe",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "01847079-390f-4099-823d-4a01016c8af2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9af2b4be-4f75-4765-a254-d81013736a84",
        "cursor": {
          "ref": "0242fb0e-8f4f-45e3-a857-204a582c3001",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ce775b11-d5f7-4f4f-80de-b6a14f509125"
        },
        "item": {
          "id": "9af2b4be-4f75-4765-a254-d81013736a84",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "5c406727-a274-4bf2-8f58-50ad4fa9294e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb79bab4-d392-4840-a45f-9f30573b6a39",
        "cursor": {
          "ref": "f6517c35-daf7-49d8-a270-b4c38aadcef7",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "8a963f9b-0880-4948-9fca-2022055f4429"
        },
        "item": {
          "id": "cb79bab4-d392-4840-a45f-9f30573b6a39",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "f2402d65-152c-4d9e-b7ea-46349b81e530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67f8f59f-ea78-49a9-9627-deb301dba7e8",
        "cursor": {
          "ref": "38d41e62-def0-4398-aba7-8c6ca5bc660d",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "3ad98169-e648-4676-b1cc-118f1106d013"
        },
        "item": {
          "id": "67f8f59f-ea78-49a9-9627-deb301dba7e8",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "6b5c9962-ba1c-4097-9719-637c173f214f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 834,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2130d538-7309-4b30-a76d-d4d1067144cc",
        "cursor": {
          "ref": "094e7642-711d-40b2-bfce-96f938a319d8",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "a01d4b6b-a706-40bc-a89b-b0bf30ffcc04"
        },
        "item": {
          "id": "2130d538-7309-4b30-a76d-d4d1067144cc",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "24d2b8c4-13fc-42c4-947c-436fee37d8a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87c198d0-63ce-4d2e-a5ce-0196788b87b9",
        "cursor": {
          "ref": "b565a2c8-46a4-4533-96dc-e9cca6ffd8e4",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "b03c278f-f2cb-4c5d-9d56-8fdfa2bd08a7"
        },
        "item": {
          "id": "87c198d0-63ce-4d2e-a5ce-0196788b87b9",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "8768050e-2fb5-42b0-8bc1-36218e70fb25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3ffe9dd-9333-46ff-aac9-46f1f40daca2",
        "cursor": {
          "ref": "adba41ac-db01-4263-927a-a26c8bf51bad",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a2c9daa3-e9ef-4b12-b0ea-d3174d92aead"
        },
        "item": {
          "id": "d3ffe9dd-9333-46ff-aac9-46f1f40daca2",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "829cb9b0-d487-4eb8-a9e0-521bd08598bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d437364-7a25-42c7-b26b-98db6ef04e72",
        "cursor": {
          "ref": "1260fdea-f8cf-4283-a328-322bbcacce10",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c4f558af-655e-426d-83b4-f63935509978"
        },
        "item": {
          "id": "6d437364-7a25-42c7-b26b-98db6ef04e72",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "1a0b8fc2-ebd2-4416-8223-f7fc92638f32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "206ec5d6-26c7-48c6-bb17-09c7daa0aba2",
        "cursor": {
          "ref": "1e94e2a0-2388-4945-982e-88c3f48fd692",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "17671895-782c-45d7-9915-075aaba37fb0"
        },
        "item": {
          "id": "206ec5d6-26c7-48c6-bb17-09c7daa0aba2",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "57ee4db6-dc81-42fa-9486-3d0d238c2564",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe500f27-c8c1-4a5d-8363-e0278f5b5696",
        "cursor": {
          "ref": "7eb68803-9cb7-4c5b-bee1-4d2b7f73ad05",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "34337ee7-6baf-4407-83c1-8d6af8e16a8f"
        },
        "item": {
          "id": "fe500f27-c8c1-4a5d-8363-e0278f5b5696",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "a6ca82af-ef5e-457e-9825-01e2e86770c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec07fb8c-d972-46f8-85d3-2c7077b5f19e",
        "cursor": {
          "ref": "ded5a29c-6f3b-4f42-b512-967d1f00af6f",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "85a8160f-7cd3-43f3-a04d-d2666fbb7c90"
        },
        "item": {
          "id": "ec07fb8c-d972-46f8-85d3-2c7077b5f19e",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "c97da058-11fa-4cf4-835a-45cc46252b97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12b2b2b1-9c59-40ef-acd0-8a39b20d8e2a",
        "cursor": {
          "ref": "18ae4b21-9275-40e3-b7e3-24e2ecaddacf",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "6c7567b7-cc7c-4018-89ee-fe71c07ad4e1"
        },
        "item": {
          "id": "12b2b2b1-9c59-40ef-acd0-8a39b20d8e2a",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "ebf95644-459e-4921-9b85-78accf915270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea3ea675-ac47-4b53-8456-2e97f0fc6f6f",
        "cursor": {
          "ref": "19c96196-c01b-4a7d-a1a3-41ba023eda5a",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "6d08a98f-4858-4012-8c96-71dac4a097a0"
        },
        "item": {
          "id": "ea3ea675-ac47-4b53-8456-2e97f0fc6f6f",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "cf25e03d-8a2a-4d9c-9689-f1a693d0676c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbdca2eb-0b42-4a31-9258-67b1d5157775",
        "cursor": {
          "ref": "307331af-2722-47f2-a634-b9ddd6d14b38",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "819484e7-d9cb-4618-bd25-1223c6d9a84d"
        },
        "item": {
          "id": "dbdca2eb-0b42-4a31-9258-67b1d5157775",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "990b11e2-7b87-48db-bf15-06a7544aac0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e71d786-132e-4652-8e88-70b182e024f1",
        "cursor": {
          "ref": "2c651084-6292-4ea8-a8c2-c2a7c28098cf",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "398207b1-3664-4fcc-af9b-3201164c3561"
        },
        "item": {
          "id": "5e71d786-132e-4652-8e88-70b182e024f1",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ef033de5-db89-45a5-b9fc-ad10a5b0f042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b76f4dc7-8d6b-41fd-b56f-96b435603f96",
        "cursor": {
          "ref": "3a214e0b-000e-4a7a-a845-b030ef721d18",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "169076e2-1775-4f98-91df-e4b6299c4a16"
        },
        "item": {
          "id": "b76f4dc7-8d6b-41fd-b56f-96b435603f96",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "9c6d8eb8-97cc-45a0-afce-9483bc5cc1cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9aa7bb8-8e80-4bb1-b0bc-4c6e4fd413e2",
        "cursor": {
          "ref": "243e823e-7595-4784-8644-aaaa3fb859b8",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "cc47eeb2-9630-4660-b0f9-85dbaf2f2e08"
        },
        "item": {
          "id": "b9aa7bb8-8e80-4bb1-b0bc-4c6e4fd413e2",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7c687197-7526-4a6f-bda7-a97d6852d811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63daaf9f-5c21-4ede-be65-504d19379137",
        "cursor": {
          "ref": "5e54963c-eb30-47a9-aae8-297be3ffb5a1",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ec876ea8-611d-43ab-ad6c-be119b395d69"
        },
        "item": {
          "id": "63daaf9f-5c21-4ede-be65-504d19379137",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "252ac31e-4e81-4a60-b6d4-4141d78566fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b4267e4-3fb7-4870-a1f5-f632ff632c3b",
        "cursor": {
          "ref": "d78396ba-1680-4f15-9be5-b8d1883ab4ea",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "ac721e44-ee20-4e43-a964-01df3410f918"
        },
        "item": {
          "id": "7b4267e4-3fb7-4870-a1f5-f632ff632c3b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "525ef43c-24ee-447d-b992-9e1f181ba51b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad074a06-2dd6-419c-afff-9248513fd5fe",
        "cursor": {
          "ref": "23a50d3d-526e-4360-bc0c-511873fb4d31",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "21ef8469-6d16-4b15-9db1-025879b100d2"
        },
        "item": {
          "id": "ad074a06-2dd6-419c-afff-9248513fd5fe",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "95c38365-4a5b-469d-a5e7-ef7551e369e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28ab6cb0-a938-4a54-a9d2-2f9394914e65",
        "cursor": {
          "ref": "905fd04c-5182-4b3c-a0b1-6886775448ff",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "00d1aae2-13c2-48df-90b6-f2808c08d745"
        },
        "item": {
          "id": "28ab6cb0-a938-4a54-a9d2-2f9394914e65",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "98110fb8-b8fa-4935-ae84-e259b4de9baa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff2537d9-c72b-4f82-8d8f-1052ed342b57",
        "cursor": {
          "ref": "76756e9a-170e-487d-ad79-dec3e0867b5b",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d4fba7eb-4897-451e-b468-3ddd663e9352"
        },
        "item": {
          "id": "ff2537d9-c72b-4f82-8d8f-1052ed342b57",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "8bbf2e72-375c-432a-9cec-b86cb7dff10e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e8522ff-27cc-4481-87aa-c6230bb1d04f",
        "cursor": {
          "ref": "9b96f052-7bc5-45d0-9545-794fbed4e58a",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "4a3facb3-d5bc-4043-a5ce-525563c110a1"
        },
        "item": {
          "id": "6e8522ff-27cc-4481-87aa-c6230bb1d04f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "a7554270-9128-4fd1-ad21-78c2d58a5289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b2dd69e-3445-4f2b-8907-6cf325be2e9a",
        "cursor": {
          "ref": "a839237a-1c54-4e7f-b37c-eadd257c678c",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "3943b9d4-7a4e-4511-bfe8-2ceba4701177"
        },
        "item": {
          "id": "8b2dd69e-3445-4f2b-8907-6cf325be2e9a",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "38c51da2-8183-49a5-a3d0-efa6e5fe7452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c3a6705-0ef3-4c7f-9d64-77c73c974259",
        "cursor": {
          "ref": "c973fd02-73b1-4352-99a3-298e73543d04",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a437f0b7-0b26-4000-b128-85909d4a6957"
        },
        "item": {
          "id": "1c3a6705-0ef3-4c7f-9d64-77c73c974259",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "98c4189a-51bb-44f5-9ceb-8e3f85856ebd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fd01ca1-28d1-48e3-a1c7-d201e7c21880",
        "cursor": {
          "ref": "e2ae41f5-3f77-4bb4-8dc3-0841b7f9ecf9",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4683913e-d919-48ec-a0cd-4387951ff723"
        },
        "item": {
          "id": "4fd01ca1-28d1-48e3-a1c7-d201e7c21880",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "2c9fb19c-712c-4595-86a5-cc5a371cadc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77d61d55-6508-4174-8735-8791e4caa7cd",
        "cursor": {
          "ref": "7dc2ee8b-7f64-44ed-b3dd-94029c235801",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "7f4629a9-1e97-4ff4-98c3-b2c601e0ef9b"
        },
        "item": {
          "id": "77d61d55-6508-4174-8735-8791e4caa7cd",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "1613f4fe-8e09-4627-937d-df5fe8eafb91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a89d3fe-68d5-4c53-9011-f7be614f714a",
        "cursor": {
          "ref": "24351434-8d10-4e40-9ea0-7d93e5f275c2",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "fb5cecf3-c51a-4668-8bfd-1d3230ef7824"
        },
        "item": {
          "id": "4a89d3fe-68d5-4c53-9011-f7be614f714a",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "682bbbb4-b480-4fd8-9ea6-c14e9e26cdb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8a18941-11eb-4ba9-a062-cde0ecd36281",
        "cursor": {
          "ref": "09df9a1e-0b1e-43d4-ad98-d49f0b8866b2",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "74bdbc02-ee2b-4e38-a719-70bb19ded5e2"
        },
        "item": {
          "id": "c8a18941-11eb-4ba9-a062-cde0ecd36281",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "2bbbb231-998f-4a77-99d2-96d85753cbc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a671d4e5-17b9-483c-a780-db15acb3f0ba",
        "cursor": {
          "ref": "dc72b41a-71cd-47c1-ac78-142b2719732d",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "14ca80fe-da6f-4aed-a206-c20a0d881996"
        },
        "item": {
          "id": "a671d4e5-17b9-483c-a780-db15acb3f0ba",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "0d1497d8-f340-4c04-abbe-c9bd82ff96b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "876225bc-1ced-4c8e-85c1-673c9fcbaa5c",
        "cursor": {
          "ref": "578675d8-c01e-451c-8a06-e7bc6e57469f",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "b43cd85a-3378-40ae-ba2b-f5b5ccebc29b"
        },
        "item": {
          "id": "876225bc-1ced-4c8e-85c1-673c9fcbaa5c",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "aeea6157-eb6b-4dbb-b005-ad75c806a6b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0cd4fb3-10a5-4351-861e-46e392242da2",
        "cursor": {
          "ref": "dc4e1702-ed47-498d-b841-55edd63bdc65",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7dc053f4-ffc1-46c9-8abe-466a80a32483"
        },
        "item": {
          "id": "a0cd4fb3-10a5-4351-861e-46e392242da2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "7934f73e-3e02-4488-855d-7b5cc867d259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae70d989-b6dd-4c48-81ae-72148cfafeed",
        "cursor": {
          "ref": "d5cf0be0-9379-4d8e-91e1-623de1b98bc8",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "1c8fda95-65f2-41bd-b78c-51e548b1ae93"
        },
        "item": {
          "id": "ae70d989-b6dd-4c48-81ae-72148cfafeed",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "7972737e-80c5-4425-831f-8bf16bd56250",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d2e030-3bac-443a-bb35-c93c24b79e22",
        "cursor": {
          "ref": "2fbfe9bf-064c-4a91-9677-4125e197c709",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c42b6475-3003-472b-af68-ec679d2b3fe0"
        },
        "item": {
          "id": "c7d2e030-3bac-443a-bb35-c93c24b79e22",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "bae3e4f6-906f-4340-82df-f0d403d1071b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ad9338e-e5cd-4c6b-90b0-2be8c1ad2456",
        "cursor": {
          "ref": "3c3a94b6-980d-46fb-8aa7-239e52663784",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "dd423a44-7773-4f1c-abb8-e0d2f5d1851d"
        },
        "item": {
          "id": "1ad9338e-e5cd-4c6b-90b0-2be8c1ad2456",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "3bde2e9d-00bf-4cc5-8912-f034fa640a4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b53a7e3-a941-484c-be11-190d78146380",
        "cursor": {
          "ref": "d2bb92cb-fae1-4686-b281-098d22f6c2d0",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a3bdb0b3-902c-4182-a9e6-1072a077f00f"
        },
        "item": {
          "id": "8b53a7e3-a941-484c-be11-190d78146380",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "f492d41d-8305-4ecd-8085-0769af44cffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3ba9045-142a-45b7-aee7-5206033f3a30",
        "cursor": {
          "ref": "d7c7f256-40b6-4470-9af6-32b16c41859f",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "2a9de258-b960-42c0-83f3-707ba5b89fea"
        },
        "item": {
          "id": "d3ba9045-142a-45b7-aee7-5206033f3a30",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "7f648ade-422b-441f-80e6-b1bd4e0eaca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8109b1e-eb05-4dbb-893e-5ff50252527e",
        "cursor": {
          "ref": "269e749c-e389-41db-8f6c-bee880c2af0a",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "862ae1fe-d84e-4e75-a3f4-b8759f9e16e1"
        },
        "item": {
          "id": "c8109b1e-eb05-4dbb-893e-5ff50252527e",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8052c7cd-36b1-41a4-88e5-647718b2d492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c78c9c1-f4db-4f1f-917e-011530c9e61f",
        "cursor": {
          "ref": "8e6303ad-7760-461e-b85e-fd826d5a3e71",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d7239c09-a23b-4f9a-b457-eedf2584f7fb"
        },
        "item": {
          "id": "1c78c9c1-f4db-4f1f-917e-011530c9e61f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e3113374-c96a-43a4-8727-e17126f32cf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b9f4978-0bb7-46fb-9f0e-46592fd71148",
        "cursor": {
          "ref": "2c7c9b33-0240-41b1-bdd7-65a91c8b4063",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "162b254c-f1b5-43bb-9937-266569481783"
        },
        "item": {
          "id": "0b9f4978-0bb7-46fb-9f0e-46592fd71148",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "3fe9216f-8809-4575-bf3a-d06973f2548a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6585ea45-ea38-42d9-83fd-aac8aa2cc930",
        "cursor": {
          "ref": "e992966e-7c42-4de7-914b-dc1789047c41",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "7dc0beb7-a79d-4040-824d-dcc150de1831"
        },
        "item": {
          "id": "6585ea45-ea38-42d9-83fd-aac8aa2cc930",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "203ba15c-9de1-43ea-b1c9-89553f2ed80a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "d294a94b-4730-4828-af6d-6e5df4519ab6",
        "cursor": {
          "ref": "4f90e214-9e29-4973-bf25-94db3cc8ee50",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "e1aa562c-9ca5-48dd-b2ad-4825d1448ae9"
        },
        "item": {
          "id": "d294a94b-4730-4828-af6d-6e5df4519ab6",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "dcce5e33-d55e-4e01-8477-522761c213ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "058330ac-03a2-4b20-a7a6-9ea63a9379ad",
        "cursor": {
          "ref": "8b1527ea-8fd2-4406-9c53-0a3009e6b2a0",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "eece4fa7-8541-457b-8942-c7edcdcee56e"
        },
        "item": {
          "id": "058330ac-03a2-4b20-a7a6-9ea63a9379ad",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "76584ecd-eec3-4778-b077-974909d25bba",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "892db3b7-6607-4134-a38e-0bfa757ff358",
        "cursor": {
          "ref": "5a5ad67e-f78d-49fb-8f64-c0bea1e010ff",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "7ff7ff87-0661-4d28-97de-90a268ca4fef"
        },
        "item": {
          "id": "892db3b7-6607-4134-a38e-0bfa757ff358",
          "name": "credentials_verify"
        },
        "response": {
          "id": "7578efa7-f864-42a9-bc41-8095dc1638a8",
          "status": "OK",
          "code": 200,
          "responseTime": 1538,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfd5df54-feac-4843-aac8-29a9925d4620",
        "cursor": {
          "ref": "8398634c-a955-4663-b255-51b0a10c2b39",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "8499d77e-17eb-41fd-93ef-7b1e10403184"
        },
        "item": {
          "id": "bfd5df54-feac-4843-aac8-29a9925d4620",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "08da5817-6397-4004-92f7-570329b9faa6",
          "status": "OK",
          "code": 200,
          "responseTime": 2819,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d81c3df7-d2fd-4ea1-9f60-80cd8132ec14",
        "cursor": {
          "ref": "64354a05-0e0a-4b7d-91c8-840848ea7e33",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "145566c7-ac8d-4431-888f-48b36bda9b2b"
        },
        "item": {
          "id": "d81c3df7-d2fd-4ea1-9f60-80cd8132ec14",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e9f4e832-93b2-4840-9fbf-41244fa5da40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "d81c3df7-d2fd-4ea1-9f60-80cd8132ec14",
        "cursor": {
          "ref": "64354a05-0e0a-4b7d-91c8-840848ea7e33",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "145566c7-ac8d-4431-888f-48b36bda9b2b"
        },
        "item": {
          "id": "d81c3df7-d2fd-4ea1-9f60-80cd8132ec14",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e9f4e832-93b2-4840-9fbf-41244fa5da40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "d81c3df7-d2fd-4ea1-9f60-80cd8132ec14",
        "cursor": {
          "ref": "64354a05-0e0a-4b7d-91c8-840848ea7e33",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "145566c7-ac8d-4431-888f-48b36bda9b2b"
        },
        "item": {
          "id": "d81c3df7-d2fd-4ea1-9f60-80cd8132ec14",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e9f4e832-93b2-4840-9fbf-41244fa5da40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "b6480cbd-6fe3-4879-87e2-ffaf89d65846",
        "cursor": {
          "ref": "47b58ba6-bbe2-4e94-895f-d685055cea26",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "746ae7ad-0723-47db-8eea-5445c3322582"
        },
        "item": {
          "id": "b6480cbd-6fe3-4879-87e2-ffaf89d65846",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "bd7b3f3f-64cd-441d-afc7-d030a4e3fbd7",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "85ebdd28-fac2-4160-a6ac-62ea16c8b61c",
        "cursor": {
          "ref": "6f47c586-1948-4798-b4b5-16852aeeae0c",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "07e4e109-e82a-466a-b992-7787c0ae1ada"
        },
        "item": {
          "id": "85ebdd28-fac2-4160-a6ac-62ea16c8b61c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b14e2251-e413-4d8d-be76-94642cd3e90a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "85ebdd28-fac2-4160-a6ac-62ea16c8b61c",
        "cursor": {
          "ref": "6f47c586-1948-4798-b4b5-16852aeeae0c",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "07e4e109-e82a-466a-b992-7787c0ae1ada"
        },
        "item": {
          "id": "85ebdd28-fac2-4160-a6ac-62ea16c8b61c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b14e2251-e413-4d8d-be76-94642cd3e90a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "1122ace9-790a-495c-9cbd-60445ca3388e",
        "cursor": {
          "ref": "699cbfed-e5bd-4fd1-a843-d7a9da19ea9e",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "864ee8b2-c157-44d9-917f-7c197b9c7501"
        },
        "item": {
          "id": "1122ace9-790a-495c-9cbd-60445ca3388e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "88af5c57-8397-44f9-8d55-e57d9d0e4cf6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 110,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "1ebf516c-6381-4e43-9952-b24323541341",
        "cursor": {
          "ref": "3fc47fd6-1280-46ea-8702-0c0b3d4a88a3",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "bf9a81be-98d0-4d49-a330-5e09f88b9527"
        },
        "item": {
          "id": "1ebf516c-6381-4e43-9952-b24323541341",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "54f19846-fbd1-4fc8-8f6b-64b1d50d1234",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "1ebf516c-6381-4e43-9952-b24323541341",
        "cursor": {
          "ref": "3fc47fd6-1280-46ea-8702-0c0b3d4a88a3",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "bf9a81be-98d0-4d49-a330-5e09f88b9527"
        },
        "item": {
          "id": "1ebf516c-6381-4e43-9952-b24323541341",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "54f19846-fbd1-4fc8-8f6b-64b1d50d1234",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "8dbf9f6b-c605-45d1-81b0-1b9ac49f84c3",
        "cursor": {
          "ref": "7d09d8c4-54bb-4ff8-9946-5f2399a7ef8a",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "0751cba9-18b6-4d37-bf2d-1032ee37f45b"
        },
        "item": {
          "id": "8dbf9f6b-c605-45d1-81b0-1b9ac49f84c3",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "673c1f67-b7f4-4507-b234-21fa42919365",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}