{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "a3694196-110c-4f25-997a-3f13ca39e5fb",
        "name": "Clear Cache",
        "item": [
          {
            "id": "d56f1283-e3ca-49d7-b1a5-b3c4343acf8c",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ac6944d1-2de9-4e3c-a75d-5352ddcb6d17",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "56ad8369-d085-4150-9f99-c7fe54056097"
                }
              }
            ]
          },
          {
            "id": "38f7db90-93e9-4389-b851-d0a4655e1132",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bea26aa3-191a-4aaf-af9a-c1422cde7240",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ab0ce564-af05-4c1f-a52d-6d61003ab4c2"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2d33647e-faad-41b4-9455-e9bdc22e5bce",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "3d3f5774-4fab-4b4c-8bc0-7f510c7e005f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "259686db-b3d6-4abc-9ff4-c226a5b57d95",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed87ed91-9683-4528-99ba-07610a09a1b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "59e97e2b-ccfc-4110-b180-f6a8824a68f0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "264c8077-9579-4dfc-a0c4-78c68075b618",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6ef631a6-9e61-4e9a-96a2-45786ecf4e8f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3af7ec05-975c-4961-9c48-f127c0f9288a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e140209c-7cc6-45b5-ad92-48ca043a616f"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "31513fd4-f95d-4b89-acef-ad1d011b4b3f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "32812050-987e-446c-891a-bd2955dfbe52"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a33fda4f-d4e5-4986-b417-256e49585f02",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "17acc958-9b45-4e50-b65e-28a2bc1ba943"
            }
          }
        ]
      },
      {
        "id": "9b2fdf4e-de45-44c1-a017-c70e44cf770e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "555c6add-ca1a-4907-9a97-1375ead6bdf4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9874b25f-970d-408e-9105-72b585acacf5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "baaf5bd3-3908-47fe-9d00-01d45226a1bf",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dbf3c1e-92ab-4669-941a-3de2ff000406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "593f50ff-70d7-439e-8eb2-301d723eef6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d69dbaa7-dbf4-4181-9c05-64d8b10e5e48",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56cde694-9bc3-4e03-a10e-b5dae2378851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "71c48fd5-3984-4955-8160-335cd5f2bb5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c27773-6e2e-4a5c-aea2-d8b3b7954dc4",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed89efc-f8a7-48c9-840b-c44a0b2cf87a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "21d633b2-2bd1-4515-aeec-2217515e2f20"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0b6509e3-0edc-4e6b-863b-6c38e3d8b458",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eaa59bce-970f-42f6-8c76-7ca4ee119e5f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be167181-77cd-49f4-970a-7d29f9e83c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c4285131-17a2-4419-a152-c86cbc030fc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ab8174d-5dc8-4768-a978-bbaf904d0052",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "405c3ca5-43e2-4e71-b3d5-fdad9b6c0579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "792adc97-b4f0-456e-90f2-2e948db5a82b",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82f9af1a-5e7c-456a-b58f-820ba255e1d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "042beb0e-acdc-43be-9662-85fbd03b57bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e0f853b-96ed-4a89-bcc5-024cd3e28652",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "205b790f-98a1-4aa6-ac02-3aefc424b422"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "53495c58-490a-4ffd-967d-71c39676d591",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1e73774a-8641-4f44-b11c-fd3c91efe7cc",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d8d4061-1218-4a20-856f-7c69690a6eeb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "46978656-a8f7-41c5-ae88-ede9fd4ed579"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e36663f5-9ba7-47d0-b17b-cd343fd92ed3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "e4967e06-7252-42b6-b2b1-d66bcc65dff7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "523c4fa6-1ebe-4b74-a60f-e2aae37e945b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "961636ae-0cef-4dfb-ac39-cf75996e9940"
            }
          }
        ]
      },
      {
        "id": "638746c3-2928-4d88-895c-ca6a979ac367",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "816bd8ef-0ede-46eb-91e9-600396a01e59",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9170aec6-6429-49e0-94d0-720042c4a9b1",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "70ce9cd0-d32d-436a-b03a-23727664bd35",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93aea295-994c-4f70-8447-10a438b43b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7c5f335-bde4-45d3-a012-c895485177b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8553f22-778c-4d7a-ae09-c76db1c782f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b0d24317-610a-4cdb-85d8-577399a682b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a1c5d2f-5583-4b66-a093-51f12fd5019c",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "008c5fca-d4ad-4284-93b4-51d0047bcd0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bb9221c-359c-4993-8c62-717a34df4169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1121fa7a-85d5-480a-ab02-4972a5e38d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "85c661e3-098a-4d64-9f17-09612e37c604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afa4ab6c-d8f2-4911-ac7f-3088dbbcde0b",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d42fe7d5-36df-44a8-8156-dddd5392a0ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5945f06c-8910-43fd-a3c0-4f06c2052177"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f43228c0-ad97-4269-b93f-3deee49957e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2bdc4f9f-4bad-4911-9df0-4ff20cb82c5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "665ac0f8-5959-4a4a-aa36-582b5d337ba2",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0968ae2b-ba58-4912-ae52-5e6d5365752f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed13f0f6-bd15-4bc4-8aee-8c5298d33411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc01759-0972-471f-bbcc-1ff1208ba6c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d04f53d-3bad-4023-9e90-7f4efae37539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8e8b94a-99ba-47c9-9f76-757c040f2ac2",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56cdedc5-ba6d-4e82-913d-5df554ef8ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b473e502-9749-4315-ba3b-ee4b0737c778"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d30ed8b-9c9a-4faa-a992-0865bb559fb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eb10fabe-167f-46cd-ad34-09bbd09d7c7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba777066-edc0-4d96-8576-868d1170240e",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e674ab1-8731-470f-a4a0-285443648586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60343dfb-6964-4e7c-80f8-6b2f20ea8862"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ca5656-33be-4dbf-8e66-4bfc4bb75cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "242fc3c9-0191-4e0a-b8ca-ddc17c606718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5248390c-5cb8-4126-97bf-2773c7a60a05",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "763931a0-40ec-4c91-ac9f-397cf24045b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "263172e3-8e02-440a-8eee-128a691a0042"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50384417-046b-4161-9249-e59e9ce66fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1138cdfe-7100-4260-9d9e-b499afd6b3cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6c1b80c-065d-4985-9e6f-eb8d9ac5179b",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca3c3141-a758-4600-b4e0-bf83ed928f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3971e5cd-d233-4941-aeac-99d920c9a942"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24f55bd7-585e-480a-a97f-baa929874fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "722af48a-d23d-4893-92d1-7c50dca48929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec8ac8d9-58f7-4df0-be18-fb9d44dccd15",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ebdd3f-f6ee-4cea-8615-17a4f3d23987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30d154f7-2ad6-4c35-953d-780aa6ade156"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d1c2c5-41ba-4e80-bd4a-a549032ead49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "15c6eaab-d23d-4491-9b84-b81866b91453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85f2a7ba-7807-477d-bf9c-3d8b45d23390",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb5bc7d-7154-427c-9532-61ca0d569b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5a69d3a-8796-45ab-9b56-9f7eea5593ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df4d402-8273-4365-a9d5-e4fa26e759ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f9c07a6d-5591-4cc9-ba9d-6f8baf625cf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19c95dd1-f1a1-4a74-b1de-811971d1deba",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c83cc73a-ba60-465f-8bb1-1ae44a285121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddeddeba-ae6d-41fa-b5f8-0e0e9ed30e62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ba30477-c0c0-49ec-a70e-1b73f8bd89be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d60a8fdc-8299-49e7-9deb-e39252112002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "047a40eb-5fae-4068-afba-8067296016cc",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f3a27d1-5594-4ac1-9d0c-35e28b3b5311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1edc8c15-a5f0-44c6-ab68-3dc0c0d61298"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8023c4d8-c3a1-4fa6-961d-02ccb2befbe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d51b6da2-e033-474e-86fb-7cf88e1fb76f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "118f9708-544f-4272-af4a-c91dc6e34afc",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43972e6f-6484-4069-b2b8-6a5b7ed4996c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2cf3859-00db-4284-8faf-2ddaf3c6747d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4b514f6-d685-42ee-97ce-503393e98703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0b09fa55-5b9c-4849-9172-b2ca94ef4f1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faef05cf-e118-450d-8e9f-60e266288937",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8b67542-7854-44fc-9740-54ece360ddbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d55690f4-1246-49a3-ab90-6c83f68c0361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86445b11-363c-4937-906f-e467fd4e1d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "abc68a8f-8b0c-4ad8-9e45-24a2c0f8e9d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69c75a5-a0b8-45a1-b7a0-4312738cf6c0",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "056b8559-96e5-4889-8e61-0e6bdced751e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b5906b3-842e-4fae-a410-06f03b0c176b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0fe58bb-0782-4552-afab-f68940c57580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a34c4237-9e61-41ce-b0c5-1d595b9925fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "584aaa9f-3d48-4061-a0dc-9e96f0c70581",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9f443a6-0a03-41c1-a499-853f7b8875b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3778622f-fbf0-4c2d-a6dd-9725b86cd680"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a45330-41c0-48c9-9bb7-ffda63f318de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8080ad1a-afea-44c9-9e2f-60cc05dc11f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cbdcace-8549-41c3-bc0c-190b4ecccff5",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6056055d-31e8-401d-b326-f69594e19700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97377071-d548-426e-8cff-ca9bdc59c822"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df74036-d698-424f-9f60-cfe93bca6a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1101b053-7cb1-4267-b759-e0e2deba234b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72c66f72-a492-492c-abc1-6a8eff84e2e0",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26e762d2-c068-4f22-97cb-489a515b9392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d3bbbe6-907f-4eb0-903c-57498b72b8e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39d46ca8-3cd3-467e-a1f8-5cf8a40e0f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0dd0fa7b-0cf4-4052-9302-6409d946d0e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c2b096c-66d4-4f37-977a-4367d6a5faa6",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e749a32-6768-491c-81a5-2bcbc67349af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40097f88-7c96-4d3d-93e5-000702a8fefa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "818208c9-158e-4d57-8925-2f5760b8c3c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a119757-0385-48d5-8ba0-12209d39ee42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14d4734b-d831-4a17-b6c5-a0b7ddae828b",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "932cd5cb-1a60-4b30-856d-2d7a86d7c68d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdd44a04-2b17-41a8-983c-172b5942d680"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54bac69a-feb9-4eab-ac15-e2775a553944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ebd04b57-bd4d-4d3c-a560-5a9764d09ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9ce2c72-fbf2-4529-b84d-9961f93f817c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebddfd25-1779-40b0-98e0-90f5336d43bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a9a6eac-3d8e-40ff-9a20-e13a93e7b6b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5024fcb0-1b7c-4c57-8f9b-03b88f87e36d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c38dd75-0b13-4282-b6cc-2173f2bb7b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49d72ef7-f394-4acd-8434-a8803dc1e034",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2ef6a57-0daf-4ac1-bf7a-94a9e11cbb42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05322af6-253a-4ce5-bbcb-1477365a1481"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87f48704-62fd-4dad-a100-0ff7f527bc44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "70f13f70-9d09-4bb2-8012-91bddcdd36da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb2e4149-cfa1-4086-991c-25a40d83229e",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7ad6592-cc7a-49eb-8fd5-6b31e5c1e761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb014bda-b6f5-419a-9890-34330e255046"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b8b462-9263-4e32-bf9b-b23a6a3e296c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "33b12fbf-ffdf-46b0-93ac-5ee6704eb999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29881caf-2984-4844-8d27-c64fc1e838b3",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "650f6b13-7f97-445a-bdb4-6500349a9139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de4b574f-98f3-49be-b99e-1355642e8bc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa6dfd0-b0aa-42e5-aef3-edbc9773075d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "796495c0-b951-4eec-b649-eaac6cde259c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c58098a-497a-4f5b-af46-e8c57de3d734",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4996cfa-54cd-428e-81e5-b373b034cb99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aae58f4-e64a-431a-a59f-3bff2ad8f0ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddbaf8ec-e37f-4e24-966a-1905591b5af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "35f667af-f7c8-40be-afb6-7e3716364a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90237adf-17f5-406b-93ab-a3f399ee38d8",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ea615dc-1048-4aec-8456-4d6eabc02f1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f6246cd-077d-45a4-b3de-1f154e3dfc5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59a4862a-a2e1-469d-a969-62f3ce1f66b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0d19de9-f743-4aee-823f-6fda026d21d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3bdaf69-fdca-4f32-884b-895f8ad3e848",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f14902a6-56be-46f0-9773-7d6d633cb863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2213eec-88e9-471b-92d4-c5a0968a203c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0151e66c-ee05-4f1d-8df5-d4acf285c0d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "91216daa-ce72-4448-afda-9bb9bf948653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f8d41c4-04d0-49fe-aa00-d2f797dd010e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ba23bb-e0c5-4cce-ad29-bb827ca367d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba5ac91a-7bde-4e4e-ae77-3faad816c18c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d8e48f0-0016-423c-9888-3af40dae5c89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "04c20727-9126-4f3f-8799-a0cff85438e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "018e9afe-583e-4308-8365-4221ae3095ae",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1389fb99-608d-4fe2-9652-6d1be9def45c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4089bce5-c040-435e-a1ed-c44d1f976587"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51f709f8-bdc8-457a-a60b-eebe7f96fa4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ea9bb93-9200-4e16-96c3-29e41f49d5a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87e09119-7e9c-443f-8d09-abe58ef6e37b",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c19c499-8ee9-488c-8043-5b48d857c4a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6071cd58-421c-4cf5-a905-ba65c412bbd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9619c24c-6293-407b-aa08-3259fa1a52ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f4d31f7-d2c0-443a-89b4-ce858f9133c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a027e18-36dd-48db-8f99-79031ba94b2a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dde15d0c-a9d2-4cf4-ba89-49df5a32dc4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11912563-2f40-40c4-b4cc-ac2695d907c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffaafcf0-0546-486b-81e9-3f4063df3b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2bb3dbe-c911-4cef-b0a0-fa2572c7fbc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35e89358-5aac-4f56-b257-c0b2149f1560",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1ac4e3a-bfe5-40f3-a3af-025e595e8caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a38506c9-f8b2-418b-a19d-3b914791ee2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a5e42c0-b688-4880-b2bd-eeeb57f36e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6bc7fbd5-0df9-48ed-9cfd-e167664511ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "108e90ad-2766-4e9a-a17c-31cdfd2f66b1",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec4929f-923f-45e9-865b-18f9a3733507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a409aa1-fe80-4127-94ec-7360ce742133"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc529546-1d74-4bcc-a8eb-8e10660ef475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea787694-1f04-47f3-9403-cd6e9cd6b357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff94d3f0-eb59-4d6d-bfb6-7a3de2f9739f",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7178b5b0-acf6-49cd-b509-6575b9550ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79d925b6-b22a-48c9-ac8f-b6240d41bdc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f95fd081-de76-4ecb-b31a-902760e6d40f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ce31759-b324-47d6-9ae8-0698dcf137f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63179d64-3bf6-4897-883b-8b377bbe6075",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5519ea7a-9322-41cf-807e-17defafce259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db7fdc6a-cb50-4279-a06b-48b2fd926b3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0974d8c3-d555-49b5-bdab-049960c25d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "0ed1feb1-bc47-42c8-a622-1dee42f8d6a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86fa15cb-05a7-4384-b628-94018bea05fb",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5abcddd5-2529-450c-b726-18361daa6595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b144ff44-3b4c-4779-b3e9-e6e4c3bdec88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8083b8e-6c3e-49a1-b04b-7908d4dfb4e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "181a2792-aee1-4234-be76-b5c9107e3370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f66b1fe-93c4-4615-a19b-4646903beb6a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b111bfd1-4d2d-43f9-8d84-4873a5e72bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84f5375f-de5c-4abf-8208-3adb748af86c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f672c34-b376-4117-877a-52ab304a6ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5561511b-71db-4638-b078-028da021b6b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbbe56c2-61f7-49fb-a085-7523aa06ff74",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6688092a-4068-41fb-9e37-ee6a76a0eb13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4abce2c0-4a79-4196-a3cf-5395b196d5b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1358c68d-0a28-414a-b92c-6ec4f9839fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3dd28257-a2d6-414e-8da4-0c37531f227d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2ec96f6-ad06-482f-b400-b4b2abbed764",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48173bd5-b54e-45aa-beda-9c64e44ac525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94fdb612-faff-487d-abda-e8be4fdb324f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c494066f-0344-4168-865f-b74dff12166f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e99cd7dc-35a7-40c6-b56f-fc552e9adf6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8384bf72-c2c0-4093-be34-f777d535a210",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2034460f-1cb8-4825-b118-0d9b22f2c358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a89271b7-c99b-45e9-b350-8885ffa98af5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74ef1f06-b0cc-4ff0-83e4-dd98a77b54c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e89d93e1-f567-4126-99f3-6fa530bed59b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "916f4718-e26f-474d-91c5-fae4c3f6538d",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e0387f3-9901-4798-9679-7b9f18a3efd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3be0385c-268a-43d3-bf4b-9fbb36d2d653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b4d931d-33d3-4777-9e6a-93a0e257c227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "60f77c2a-0b3a-45d2-b654-821093d72040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e40e889-9412-4509-8ae2-68e99e02eca5",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "450dbfa4-70dd-4ff1-af26-9d641a2a58e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af18f79c-e26c-40e8-89e8-35ea88db2e2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc981c68-4ddb-4514-8c35-f9aa688726d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "95bbcb64-72a1-4b63-b360-0d3c811e5ca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e77e418a-7f3e-45ab-b7c3-a3c44de872e2",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a872d497-fbdf-41c6-99fa-05e79f2210a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8ea341c-937c-4c7a-aa83-730595a38ece"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6cbf9dd-ccc2-47e4-8703-73bf647d6cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f379d1b-4d22-463e-8c76-79a4186b64b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33ce8ec7-624e-415e-add8-f8d092ed6570",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5028c868-2558-4fde-b301-73fbf908e130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "890f7feb-bada-44de-bd22-0021eba6d0d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db56098e-4bce-4f80-a576-465753b5b763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "be08e1a9-d74a-4259-9f6e-f6d2ccb69e51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29f0de14-f69b-47d8-ad37-ef88ad2f59c7",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82ef653-34ee-4ff1-b9d8-e45a2c91c0c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f74bb8c-81a3-498e-9fe6-e36410d978bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab2eca51-1416-4043-837f-96922617b94b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0cb9dcb0-c18e-417d-a7c9-24869af90b63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a71875f-49ab-466b-b775-88b2beac77d9",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4e05b63-4ebb-4eec-b07c-8eef5e67543f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6730fd8-bc1a-463b-a276-c49ff1a40c6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c473d71a-a485-42fa-85d7-63f72462b78d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3763cbef-98fd-488f-a73f-b167c6af4fbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa69308a-4475-48bf-b32e-6505e52c8ce2",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7acb6a45-bb90-4c2c-9764-f307b7732402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6b86e65-c14c-4ba2-a929-17487ccf5a95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd56b896-fe62-4739-a404-43a0bcd37f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa6dad89-d7a2-47b4-9736-6fd4364884a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef102059-e4de-4017-b16c-8dc7af1abda1",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62cf70df-3b2e-4a4e-bf4b-c786ae4f4816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e47de381-d31a-4095-bdd0-2fc1cd1a9af5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81344bdd-9b40-4be2-b5a0-14820fc28393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "09cf83f5-2228-443b-a74a-25cc4b9b06c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa7bb43d-2848-4883-b8ad-9d67ae432d54",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb83a926-48c1-49a4-ad69-991d968aa8ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79956b28-1e43-4b86-919e-82591180eb6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ceee2bd-7495-4ce3-9c67-4bd5e68f97cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "df1a2c7b-f078-4e06-b620-888462ea719d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2bae5bd-ddc3-424a-bd4d-392436698c6f",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d42d336-d50d-4ee6-b41d-46152981f3ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84465a4a-d260-48d2-a6a3-2944c6cf21ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "637913c4-57b1-477c-bf13-3035a96aa7e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "37fede90-2af9-4ea3-95de-bea9b04cbdb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f9f6b60-28c4-47b9-bcbd-287aacb1c489",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab718e68-83a6-4378-9681-5736bfd2a4de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "801e6604-f16b-4908-9b0f-2839e57ee6b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc92961-e8c9-4a56-afae-9674bdea72da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "df5c2445-abbb-47bb-8bb0-7b806f7d0b4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ddec7d2-59d0-4a9e-a1ae-00f78a57f54a",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc034ac7-6a8a-42ce-9cb0-6dbdae2621ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a2c5bdc-4338-463c-b6b3-7cff77b8c533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2865f040-ce5e-4694-ad50-c59b5d1091ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b68df958-d458-4654-97de-5662c1cc6c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb51acc4-ea2d-4b8c-bbba-ef9548eb5fe9",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce6af06-255e-4f24-8ecd-4a56f8cd5a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b9c2b30-783c-44ea-a160-b89e3a38b828"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d68f96c-0c3b-41fd-b7da-5bce68157be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8bc8eb1-226e-400e-ac64-aeda3ac325dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc289858-310b-4e07-a2bb-45a6b18042bb",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ebb73c-839b-408b-8687-ab742c165f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e28771c-263d-4587-b3bc-98f8a66910c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3caed88b-8468-4690-a65a-a55d0b961f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ecba155f-b0ba-41da-aa2a-c2e688e93389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7fc6707-2874-4f9b-9e10-3005b8019a09",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "109cfdc2-4e4b-4fe0-b113-75d0bb6a1d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5b9742a-0649-481b-b226-f916a0e68078"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "628a7a6d-2b7e-49b6-9371-8a99fd642090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "360dad36-36ed-4d59-9b74-cbe48657170a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cde6076b-0d5f-437d-91c5-d13f81978c11",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b1472e8-0ae8-49e0-a025-edb60d840508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a1ccfef-d508-4f7e-8b6c-1267bd5b4b05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "657cc35f-0556-48f0-b394-72d1195d596a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "93f2b14c-6228-4110-8d25-61dad5677c4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60c121cd-8c1d-4b42-a0e9-7001ee995366",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03aa48dc-048b-4304-a1a2-126f090d717b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d63fe049-7a1f-44f9-9215-ae00989fa753"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da104ac0-ff8a-412d-bd13-4d6cb5161584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6ae748f-ce13-42ce-b727-2452bacf8bbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9986814a-219b-479f-9f52-9779ae8ef0c7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "999bcf05-0eb1-4df9-b1a0-ff90bb586c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e942370e-9e85-4865-b59a-a0ab0aa8fcf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72318bb5-e7cb-4730-8f28-e609ca8f6900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c551f76-368a-496b-aa39-b5effb9cf3a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73211f37-7fc6-4f3c-bf28-38f89bb896cd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f91181-081d-46d9-b92a-1184c4c76b4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "359fa72f-e9cf-4b6c-b65b-1a7a80476902"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59cf79ee-95c5-4a88-b655-c67cfb7119d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e150f97-a03e-4104-a03c-00877602dc11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b546e112-18c9-4601-a01f-0671680b7303",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e402f872-184d-4eef-94d6-278079ae26e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70a6331c-a32e-4a08-bb9d-b5d17971ff01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffd02f43-8700-423b-ab14-3327d0dc7377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3d7ed0c-c5de-4f20-abd3-ac39e208433f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae1f8ffd-6512-44ae-b816-2f783852ce30",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46cecbe7-8dd1-498c-839f-7dbc21b5c1d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d91a287f-9f4d-4ad3-8d9b-34e9d273e5d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28cac7cd-eccb-4ba8-9410-ee64aafdf597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "92cd3f3b-b8cc-4f41-b1dd-78a22c261557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "390d2bd6-0e46-40a5-806d-152455e3350f",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe412c9-d173-41dc-b9ac-e3df8e2f7be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fbe26d3-fb49-4d20-b6ad-a8ea881ada47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "967e765f-d4c9-401f-9f9e-6e0cc7078432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "b80bee76-a54b-49f5-9e8b-a15a1de2e79c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16c1f0fe-d494-4c03-8ee1-75bf0152c472",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcbed7cd-14f9-462f-bbcc-441341a65070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93292143-19f5-4063-a986-95488bcb8609"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2de087e-8ae9-4486-aece-b35ab7a31711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d014d9d-c97c-4951-849b-eb0ae5fc655c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92b0550f-0c96-475c-ad58-a6964af8a49f",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53bcd96d-8f58-4aeb-b8f8-b2c5b544e001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bde907f2-f611-44c8-b546-a0b9f645964f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7a171d1-09a3-4a8a-9577-35564473e7ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d29e4ebe-e6f9-48d4-9e50-b05553de1e3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c474af8-d5e1-49bb-ace4-6fecf92f0508",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b46dbf9f-da70-4d2d-a74f-7dcc991a9614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "075e740a-f37e-4ad1-a685-8aa85a8cf16b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e10370fc-5125-4c71-a161-db4dfc516ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "61dd0f06-47e4-412c-9b27-552d7e3d1f4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2870d57-61a0-48ff-9f2f-3f378b5ca7f3",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9a29d0b-5043-4830-86d9-a3c2ebf55117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4b4425a-6cff-4681-a656-462249f419e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b173f40-8934-467e-aeec-f2738779e2e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "640f4be9-739b-4d99-a009-c2e28dc685a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e6dbb07-84e9-4672-b2cd-ae9c382f8d9c",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6421b044-4db7-4ec5-81f7-1055cf349e1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "805a57c5-1fea-49dc-8fe8-db82f72d5bc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "258a85b4-9951-4459-bbbb-dfd48142f469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "96aa3cdf-60e0-4043-8d3e-b33f57102a6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d02b72b2-7f28-4285-8c0f-3a7aeb68f317",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58666e73-6d03-4e16-b075-8400958a645d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a334b7f4-8f0c-49e3-84d8-774316d3d85e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e7b6d55-2eef-4b42-bc0a-d5b8f86ab0ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a50691c0-abe4-4f33-9c10-e4d77db7a81b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d758671d-3f22-4a81-9831-8bc2caa31830",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "800859ef-e363-433f-b353-0349b302f863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abbae21c-5919-4eb6-abe8-2f86b191ed3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9db37a0-5420-48db-bf34-22c7bcff9f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "18069efb-cbf0-49dd-9526-d691fdbdbea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00225184-88f8-4029-8300-22e269da514c",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f064070b-2096-431b-9d8e-e56c0c1f9f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f5771e0-964a-4c45-94b0-d6c46849768a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77f7bfb1-5cc1-4e1e-826e-d00ca1eec9e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5073317f-8c06-4824-a4ac-22dcf9ac3272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87cf0193-a4c0-4122-8cea-f7a09748ea88",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2de1456b-4165-4334-b805-50995cefd7d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eeb4a35-195a-4749-ac59-ef66f4ac10f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4080534e-fb0c-45a2-8b58-956e88baee40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b433beeb-f0c6-4c60-9320-12d4c2ad95c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eb8179e-7515-43d9-a43d-200bf8e6e404",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38e58f2b-8833-4bae-ac48-9b818a336684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa07a8f8-48d6-4b58-bed0-8b370222a4bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32bcef4b-41c7-4602-8823-2a35c0480340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fa9afef-334a-4fd6-8c14-ae0bb11b1c5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c29d1d08-e499-476b-8b51-dffef932acf8",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb38a62-97b6-4e59-ade3-5603b7be1260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a086ef67-d45f-4a28-aa96-560aaf132f13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaffb415-b220-4906-8554-fdae3264270b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "00e33ade-666f-4ffa-be37-69c4deeaaaaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7baf251f-8f47-409c-b5be-6d7afbcdb0c0",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "629e6cf9-3831-4793-a688-b526b0b91499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7d3ff9d-3e70-486b-bda5-2c8599476d0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5adc5489-d02f-4e82-b84f-827534bac01a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3167c4fc-e2b1-494a-9ecf-d2de6f0f77ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f08473e-0363-419b-896b-2d639281579a",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e9d3d71-6d6d-4ac3-af48-6b001c640c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b606a3b7-bac7-415d-9dd5-0cf6cb63f2d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b155cdc-273f-4da8-b8d9-6815aa027c18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c22e3d6b-058f-4c37-9218-329b8ec27963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35e1be82-ef71-4ec4-a26f-6f3ae8bbcbd6",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d93a9a2-9157-4462-baeb-4ec9ecb14153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4252e214-83ad-411a-ac96-55a37fde2f5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a54f1c5e-8062-4b91-bf2b-e0711bdbaebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa5b90cf-99d3-4f13-87d3-e45f9f793bd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ab1d8cb-0014-485f-adea-7bc81682384a",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d116539a-7248-403d-9e73-29fd4512da18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c02a88c1-68c9-4478-a22f-b9dda83312fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d332ac59-6de8-46e2-aa2d-ea259c51de02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "08b9b7c8-f71e-409d-b668-b45c3df60f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d555296-14f4-44fd-a856-b4fab5f49f6b",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a015004-b1b6-4204-bd4f-89cc064d649e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2adc0fab-ee68-40d3-bb1e-118ae4d16890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "128a8025-ec30-4a84-be4e-9fa19ca552c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2a21348-310c-49f7-81d8-35e5d4b739b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef22bfd9-a3e4-4610-a533-d727dc336467",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc8417d4-828b-4cec-a7af-70a95d8895cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94d799a8-1645-4734-9acd-0e955ec9355e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "929ccd40-ff0c-48d4-ae66-0cae68a96508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fe3ca80-af74-435a-8bbd-092b40539b23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5c874d8-c7b0-444b-8dee-fbe808ec8d55",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c12e7d4-b92f-485c-8f80-ababd7d685e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86da3941-73aa-4397-bb3d-c0ef120902fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fa78c34-729f-42e1-9d91-932480b84cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "64634b7e-c00f-40e7-a685-da4bf6adda0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77fd66f7-641c-4072-b117-1b48865298d8",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8228f36-6ae7-4d2a-90ae-438d479e5b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "970404b2-0d11-4b49-9bd9-6334d9ce8a51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce5f260a-d4e5-42f2-9cec-cf4f413c0ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "358f6361-3a20-4db0-bffa-09ba3feccb4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19481863-91a7-4acf-a501-8661c8571910",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "149fb5e8-3798-4afb-8d35-4a7352a8e161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82cc2639-e67c-4846-a92d-4d3c707e5779"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c070d7a9-8d4b-4eed-9e21-726d767a2064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "531578a5-76e3-42fa-897c-f3b05c2088c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50d3fd26-e988-469d-a8d8-9bb2f57de52b",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c5764ca-b2e8-4bb1-b6e1-1c063944a8af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2074db34-c605-463a-9b4b-99d4e02acc95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c5239e0-4123-47d1-b1b9-a8c9607e9137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0691b61-0c71-47f3-a465-ace1150efdd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba21f9c1-1f39-4b25-b29b-b2767f4dab64",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6068b5d4-9119-423c-bcac-ba4c02102da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34055154-fe5e-4d9e-a941-0291401c2097"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "124a6bcd-09cb-400f-956b-0f6df724509a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4178eef2-7ee5-401a-b909-470b7a0427c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd52a4d3-6c1c-4f11-b012-6a98bae4402a",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55cbc36f-14ed-4826-baea-8a86fca58f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10a26695-e9df-429b-9952-86d1756b2d17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac03510d-e606-4b02-b4f5-ab873e1e1d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5c778ea1-a3cd-46b1-a503-d4469e8c6256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d1ea821-af0b-44e4-9952-d1fbdbea91b4",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d49bda1-3d9f-4555-a72f-096c536d5d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0490b719-5c8c-4994-86d8-70caad01ec79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d45884-9635-4a8c-aacc-f33fde88d40e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1677ea2-0e6d-4374-ad7e-eea195fa5d4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc061906-85d6-45d7-9b6d-a6aa886e9f76",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7348e699-e31e-4e24-95f4-cca7716c4db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88378a6f-01c3-4f29-9eda-9f9ba1b4af97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff1fe6a1-b8a0-4011-beb5-a1015c019c14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f26fd278-fdbb-421a-a8d9-6ab56167dfad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39c5e478-afef-4368-836c-74d9f1a36e8b",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddec9eff-8b7b-4196-ac23-101004ccb8eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e95b0a78-7e4f-47ae-8b17-3f29769e4a0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4de60242-e915-4d01-89c5-6ee8d019e739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "078bb5bc-ebd1-4791-a070-fc3d90fbc439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e850d637-6d27-41d2-8627-546b5200b61c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "548d15b4-564b-4dbd-a972-db4ccbcc5cfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b89c626e-f1bc-43a8-b4c2-8a4984876ccf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ae961c7-2b49-44c2-8482-3d2a5bc20f1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e314680b-e0b9-4323-a934-91c42d022fab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e10b03-6139-4e3b-9917-b65fb301cd61",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf621424-292b-420a-9e9f-d6f4243680e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3049428-dcd4-4bd5-b4ae-f797a5574794"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf48baef-c18e-4c19-b874-59c6ab7755a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b232299f-cf56-46d2-88ca-1739f3a495aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f77b98ce-b64b-47a1-abef-7cb1b76a36ef",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ff0ca91-6d9b-46dd-86de-0da011683a18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91e5522a-2ca7-4fc3-9cc7-cc51935c98fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42ea33d3-f3b5-4fc9-a297-8c4b8def5936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a9d35913-cb2c-4b06-af6a-20fe5bbc8e79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa50c98-0392-4254-b33d-a7ab035b6027",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67290e29-dc5e-4327-b740-5c1109917651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ac07b1d5-0192-4a87-acb1-b8d027383540"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40ffb16e-7c96-4dcf-85ac-b79e733330ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a6f3b87-5f8a-4456-85f3-ed0a8c83e374"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "08b4d9b5-2e8e-480a-8344-8b8de9eeb191",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c2e4963c-9c06-42ac-a8a2-7d6723562326",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a960c6e2-0dfe-4a22-a569-f71de3a9da7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ed148f80-54b5-48b0-8635-506b0a43fa44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3e41092-487e-46e5-9261-cfce376d146f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f7733c65-8511-41a1-9d67-0aa05b26c400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8249c464-87b7-437c-a773-dae310d92fe1",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cd7f3a7-8989-4760-837c-e09365f49a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "272bac90-036c-4a0e-9847-7fe6163ed2db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaba81b2-8b9b-464d-9972-eda2231d7762",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ebade8e-f3bb-4502-bdd5-327e18191487"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "31da64c7-bd5d-423b-98cf-c38a99091ace",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eded3174-ed9e-4f80-932f-5009e098fcdb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "341a8918-41e3-460a-9be5-58727e467211",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00c853a9-4f04-4b51-9a8b-df449dcb3d97"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6bd369d6-f51f-4055-9af0-6403020bdd8b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "30dde68b-17ab-4e04-8690-8a2a8ff7d3dd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0314fc5c-75d6-4440-96d0-e283c8c83ae3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3795b85a-8f81-43b1-919f-a1e52855c815"
                }
              }
            ]
          },
          {
            "id": "689bd428-1e65-4c5d-a295-5ecd4e31cfdd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "37a9f701-e122-4a68-8b95-5f4d39c6a15b",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5d858e52-2a69-4511-8928-c9496611b8f1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c07853ff-8924-447c-b426-96e92da54e41"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "27e8b5ae-3568-462d-b23b-1db4ef46f85f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e44bd8c8-ae49-49ef-a5b8-a326467dbe5a"
                    }
                  }
                ]
              },
              {
                "id": "de21107d-8891-4907-904a-84ece085f46c",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d095111-4584-43b6-851e-7b4fdb29fac0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "345e81e0-447c-420a-982b-bb06099c4b5a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b142f7c0-af18-49f2-b56e-3bf6b3aba027",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "676b4919-5805-4efc-b08c-1dfe9d6ab51b"
                    }
                  }
                ]
              },
              {
                "id": "0ea57f0e-698b-4ae3-b72a-39a7e484969a",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f6a7fdf8-83a4-463b-b171-af72a86c5e80",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "86c29227-8585-40a8-8ee5-24bb9e6146ff"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ece270c6-1674-4432-84e4-19ca57ac1c51",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5b05c583-3f11-4ff6-a531-ac08bfa57659"
                    }
                  }
                ]
              },
              {
                "id": "0545a4bb-e647-4e72-97fe-b9a579273c8a",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f10d378-eced-4141-9399-2f8f5bafe1d3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f78c7e8a-8c3e-45d9-9695-3f2d0c87ea13"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "395bafe0-75c6-4e3a-ba7e-2bd9fcd85d9a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "f35ada23-1a97-468f-a131-919a9978a7db"
                    }
                  }
                ]
              },
              {
                "id": "af5b0c7b-fc9c-48d4-a258-095e6b901520",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "40b33d23-1b6a-4019-9e05-875e68d8dfb3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e7e1ff1b-e9b5-47e9-a47e-400101daee12"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b1aeec47-cb34-4082-83dc-adda5bbc4fd1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2805d832-0abc-4dfc-aff4-4e14188ba88a"
                    }
                  }
                ]
              },
              {
                "id": "4c8ed638-d154-4d24-94ba-cbbf05d4e277",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe553c1f-7de2-4bbb-9173-c9c3d3846113",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "881a6170-9623-4ed3-bff3-ce589d1343ac"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "095e2435-0e3b-4c30-a1a4-3a5342afc58d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "652cdf6d-a786-47c4-9274-2dcec14df024"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "07d79396-c34b-4495-94ba-c9f429404f4a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "72fb74ab-b142-46c4-851c-330fdf8c36c1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7416c1d9-9f50-42be-b664-d89ae3518842",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "daa8dcdb-97db-4685-b4b8-cd78e6fb797a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "42d71a56-7159-47b2-88bc-7dffe7e2fb9b",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "286019cd-4ea6-4a62-a4e2-a651b63b56ee"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "118c8e90-b95d-4d1b-8d96-16fedf523aaf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "be510e01-4519-4a1b-bc21-88a0bee277c4"
            }
          }
        ]
      },
      {
        "id": "bc3e195d-d342-4e9f-8b2b-f6757f04aef8",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e5764f78-94b0-4069-8efe-f0fbd6ee7bdb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ae158805-1589-4df1-9fcc-c71656c87206",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "57909e49-b1c9-419c-adbc-94768b660e7d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1ca4e0a-f563-4564-aa2f-c4cf157ff65d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "509e595e-aab4-4723-a7a5-4bc467e19a5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aad5acd0-ef6f-47a3-9529-c753ef37870f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "3156521e-b690-4a52-9dee-37a55ab7b552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d92e282-4a78-4cb9-8702-ffbcdef86d52",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "524c3579-6636-4355-801c-7dd4009e1000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d632eb3-8fac-455f-821a-f995711c6f50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e11d691e-07d8-43d7-9244-b16a733200cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "372cc97d-c0c7-461c-a2ff-952c25eb6afa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2042b9d2-6165-4df9-9c71-aeb5ea81f06b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d5e0f62-8257-4e8f-b855-235807ef8b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07a0814e-5b32-43bc-9ace-bad7d8b3e1e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db328eb8-1afc-4d40-8313-a57f48df58e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c43288e2-d515-46ae-9acf-54a33e3dd55d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c925a4e-7712-43e7-9723-8d5dbc20d2fa",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dea04e3-bf3d-49f1-8c36-9841fc5beced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57c13f87-8bf5-4303-b744-c94ed50fe10d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76fab38d-3e19-4170-9b09-c2ed5def4b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ec3168c-bf98-42c2-a409-9381cdc73714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f4cc800-6bdc-4b48-9495-96986fe481d9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3e16d34-e5ee-4a7f-b33e-b1bb0d8cdbf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d9c9991-4521-4af7-b19b-6740b643f8ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ec78dba-c491-4a72-9acf-4255683aa76a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "418657c8-b33f-48a4-addd-736946183665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cecb48c5-342a-418f-9421-85f0a7127118",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c61dd0d5-51f9-4823-b7e6-6bfc81f929e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4461cb15-e54f-4db2-8a61-c623f1035e14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a32864-69cd-4e20-b3e2-231afd0dcdd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "27010910-edfa-4ff4-b25d-3964441e3157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3592e662-f045-4708-b652-38991737c69c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94387789-3388-425b-aaed-ccf440d1ff9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85f8ca3e-c300-4124-86c8-d403ae25363d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57f37d1e-4e9c-4cec-9197-570d4cfeed46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "90d478dc-8b72-48aa-ab42-4550d3e95f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15d99e25-b939-438c-87b4-f7f4e4bf7de0",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "471a1d6b-d0cc-415f-bba6-77d9fcede5af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ec938fe-e7b2-4184-b355-bffca99884dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf0fe8a-a6af-429b-92de-14b3194fd285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8133e7be-6a05-4f37-a547-e0ab64d8d5f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fab6fd40-e0b6-4404-aa90-65a76f914fe9",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e89f712-a4e3-4c05-8731-fc5fbcb41e58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb7203ad-734b-4664-916a-37c1b5ec045f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b34e65ed-8cce-4994-bdef-64ef3a2637c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c83f445-aa5b-4783-8f65-98d1c7e2b334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e85fb852-441e-4bcb-bfd5-f532d40d7de1",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da70558e-da39-496f-8485-35be5178bbde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32844b78-db9d-4ac1-b638-88376d603afa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9aa5b49-6702-47d4-8116-01dcff98e301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "21d20302-936c-412c-a862-947bfe95a4ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d03b33-d594-4271-8b08-0c162f5c0975",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05735722-753f-41e9-9916-acddec3781f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92927f83-b19a-4d72-9f61-55eafdd8cdbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5ef6f0e-719c-4f3f-a0e9-fb7beea58dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b4ae64fe-f5f8-4866-80b3-9f07b3d1c1fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "179c32f5-fc14-4ae7-8225-0fd0ee712ed7",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e1de45e-6188-4291-942a-9e419357d36d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "317e2f19-6b1a-4c0a-94ad-28b37fe96557"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed051f5-d07c-44da-a793-c2233f5b02f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "58592b51-c7fe-4044-b7e7-30926fc1549c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc4ab319-f2da-4936-a1c6-d08a535225dc",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa6545c5-d3e4-46b3-9b34-a19038a5fcd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e87cdc25-c1e7-4743-aec7-673218402ca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a77e55b-074f-4f25-9b3e-b2885e3fd81f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a09db476-d61b-41d8-a46f-5c7810a6f665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10b4dc7f-5cc6-4320-b9f9-f2b8ab4df1b2",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0e8fcf8-bd3f-4b41-9226-5679dd9d46f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b923251d-ff79-46fd-a513-5e2a842adbe6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35219e2d-10ff-4701-a0e1-381dcbc19b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce90ce99-fd31-4bfe-be0f-549b57a4d292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f4f96ab-4167-4af0-be5f-442a521a00ea",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53018575-3410-414f-a09f-86d95d1c497f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99fc2216-8f16-43df-8eb5-eb22393738cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7181fef3-9ae0-4d11-895c-cc8a797dbc14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8b1bf25-4680-4137-962b-4a3cabbd0e66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f68c6deb-945e-498b-957f-4f08c3bb7a8b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13e8823e-9496-4815-9da7-58c5af32122d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54bc1253-a615-442e-972c-3955443eaddb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8344283-b8e4-4793-9a3c-7ea9715007de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "d26ce271-1cc6-4cb2-a567-3682a8d35d1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29eb31da-5c92-4780-851f-8ec90901cadb",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a941e9c8-4026-42b3-8ff1-084f8a7724c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "734b136f-6bce-4740-9cc1-434410cf4310"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c324433-336b-4c52-b278-889eb7980157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a8d7ac6-01e8-445f-98e7-5a127248d481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb8ca80b-9886-4d04-a21c-ccb1d08ee254",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8f3a288-0611-4996-9b11-5f466cacfc26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64186b4e-a8b1-4df1-a79f-ef5668ea0545"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fd180b8-aec2-42b0-82e3-a24beb7a8316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3babbeb4-2aa7-437b-8a12-332429bd41a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c1f064f-d5cd-466d-b6a8-60e852fcafa4",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0107e7a5-47cc-497f-bb7a-fd3704ed36ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51e6f40d-50f8-4cbe-8ab8-e16c92f8c204"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b115581-1c55-42e0-8f2f-b9011db87270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f111bde-b3bb-48bc-9c79-92fcf1a2319a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc1ce731-591c-4495-b4d5-be9776263f81",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b949dc9-5645-4ed7-a10b-5fb908276e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b6a4041-081a-4674-9e6c-dde64aa9dd16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6881d3-d7fa-4fc8-ac6f-bae0a022550a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4906081-fd81-4b86-9ed2-92c23a5bc1e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21e2f668-8483-4384-9aa4-d8ffbc2069c5",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b296e3-b712-4013-8bb8-4e79cc36050d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42a69895-4b7e-4c86-adee-a5328eeb44a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c473de12-c49c-40ff-a361-81313d5e3e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f813c4d-ee54-4848-917f-1aa820cc6547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47dd0a15-5332-45eb-948e-40a025c26044",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "696a756e-9280-4645-ba93-506ecd02892e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fb7b9f2-4d27-4d43-adb5-61ccb2cee436"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9522dd52-ae74-4b76-8c59-58535fa92495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "448b858b-6901-46af-aacb-879ba46a6402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d326bd6-8dd3-494f-9c4e-3ecc1fc3d490",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d28613c-3ad4-42e8-bd3b-793610eb236a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "770ddc9b-fb6d-4e04-9af9-0ef10d4c2ce1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e8bc13e-a525-4c61-842b-21deea6da3a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fc87205-49fd-47f0-9803-24b7e00857f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ee0fece-797f-43a4-84da-b62142ef765b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab3d1f47-113d-43e4-b17d-efb185375fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f41e542b-4916-40ec-a59b-d52cae298423"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18aee63b-c431-4d40-8468-6bd810717f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34dd03e1-3782-417e-9d85-8624b9874610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed0f14d1-cc8d-4298-a55d-a1d74cb39526",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05a5a72-2658-4162-b9fc-329053c3becd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db3ac073-beff-490c-872d-80b2aa1def7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c29f6c0-db43-4711-bda3-11db6b35a45e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36db4714-0c71-439a-9372-0d7be49b1f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a610effe-8155-4501-9dbb-7fc5b0401eac",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d1d2cf-e7e3-4ba1-8457-bd6d0b859f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dffeee0-a34f-48b7-92f7-17cbb44f5f20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "328df696-f730-421c-9ac2-44fc50195423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c4cc7f7-e6c2-4568-a94b-d9401a310e4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e32b5095-39d7-4b85-9f55-d692da4dde27",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78744e88-4c4f-4ff6-b47c-ac940203d7c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "755e4e52-561c-4efe-be25-173341c74db4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d37b03-c2c5-4b97-ad4f-8de150eaa30f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "031c0ba5-eab8-4b32-bb79-1c317767618f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c173518-5204-4913-b143-98bd79625989",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e32ab957-e112-4cef-b4f8-e474158ca4dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "566606c2-26aa-4b1a-ae2e-f4a72705aebd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d22c8a1-d703-4a87-9958-a61b714e765e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0ebbd42-4794-407e-9225-f3dbda11116f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b75c899-b363-4db6-9715-3dc45b82e0db",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a48f19b5-b348-493f-ae14-79bd4838ab1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d7cde1d-79c9-4681-98f2-e365928c677e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d27f7ca3-9661-4040-a771-31ecea9eb928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b3d8cdd-a60c-475f-8700-367287c0564c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee4b0c1c-cd8a-4028-8330-68523810570b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "920a64e8-0724-4e42-a031-2794651ad86d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63e06129-6a95-4431-8d63-435b4e0e1b15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91cad1e1-55da-49a6-a284-37a724d3550a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d69ec7a7-3e1c-4701-8e65-231870ba155e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63630fe0-5e0a-4e14-9af9-68494db58a35",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28b37fa-a4ee-4263-ad2e-796f60fb8234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b179793c-317e-4e0b-b280-1b18f7d766ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f9548f7-ebcc-420a-92ce-d13254254350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ac10430-a3f7-47fb-ae03-0d8f85175817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb56d699-2663-4e64-a607-8c320696790e",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa6374cd-501c-41e3-b36a-26eae289c116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "047f5b7b-4f4e-410b-9615-55ec9129455e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6315bb4e-755e-4ce3-8a7b-01c913225114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76b1d639-8b69-42c0-a9c4-dece3d2054ef"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d9e3ee75-4710-4eec-b8fa-5d56c76e6780",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cb1ea6ec-5b73-4144-941e-bb0952a8dd9e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d30221b6-859b-4099-a78d-4354da3011ce",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5eaf9a38-c18f-4d8c-be41-7b591ceaa395"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36f2a21e-360c-4fc6-a0e3-85bafd7e4729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ffd2190c-7892-4ebf-a69e-5bc94b9747f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11a70a89-3b83-450c-ba61-71a42e3bb64d",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f7c396-9bbc-41eb-a380-eece0592df3f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b454e538-bf93-49f3-8eab-0dc25eb4a029"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20bbd1e2-2bb3-475d-ace6-83e67e867d42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7bbea383-3f20-4739-814d-b5e7aaba4e67"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a60553cb-74c6-443c-be7e-c5c6cc55f663",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc9d2f01-a464-4e9f-9948-da9af70ccfc7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "77aea4a7-2831-498e-a617-9d094b592ccf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6313de4d-b4c3-4b67-8810-0494d57c3729"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3c49b907-48d8-4f17-a3c3-0af4f4a4e33b",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "985a81a9-d027-4214-b176-fa43cece41a0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aa328bec-a7a1-40b1-8f81-4d096d04d319",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ca13dbd4-b024-4673-ae44-8d3dbe9d246c"
            }
          }
        ]
      },
      {
        "id": "9c47513b-68ce-4358-adf8-afd308c1fd7f",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "8a6ae680-4076-48c8-adce-c77f77aba639",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f2762a75-243e-45c2-b8da-4155038ce5ed",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "60542ee7-b127-4248-a0e2-951de56e2320",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce80a229-ce13-4ecf-b24e-7f3714455663",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20bf466a-ae7c-4dec-ad61-e45d9f9b1248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a0cc067-d18f-4d91-a9d6-b7973bb200ce",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d7842fb-9c52-47c1-b46f-c6df66fea892",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76c84df5-7b41-454b-85a7-41fda8a00a11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92d8337b-310c-45df-a4fc-3b692ea9e864",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b48008ab-4626-435d-b1fa-12409bdad6bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d07ccc2e-c54e-4ebc-af32-c3b261383459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb3c10e4-4a44-4e65-9e1f-2d375703ecb0",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56f55b86-51f5-4ac2-9110-905e578df416",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07b8cda6-18df-4930-b995-960638e4a23e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "047070c1-38b9-452c-af63-b077314d05a2",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53991afc-abd2-4d74-81c8-bb7cc6351cad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a237ae0-d33c-470b-905c-eeaf1d7502e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81bd15ed-be12-47f5-9b87-bda88c10c533",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b90b3bcc-a3b6-4e50-9805-8ace8601c932",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cecbe51-ada6-46e6-994a-f62b740ee0cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05626ef1-2520-4241-8acb-eda637f3ec74",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49d9d0f4-8df1-4519-b547-88a9742d1563",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "415566e8-984c-467c-9fa9-96c6453989db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc6cc944-da99-460d-bd08-d7d42591f641",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37c39c5e-3d62-46f8-8a1e-989576ad620e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d68a0259-e15d-4571-8caa-f1d1d3a26cfd",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0012f32a-636b-4a1a-a1d6-d026a62fbad1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19b6cf36-8b47-44e9-9b5e-f6ce05b9d247"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0901dda0-70b4-4d7e-943a-69b4a54327b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b9f54bb-4933-4288-80a6-1cc5e305cf6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "047b1af6-c23a-4477-8593-c6ef1dd51e8c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9047ab8e-eadd-4c09-adf8-779dbbb11d6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15349cf6-1781-4ecd-a1f9-1e5d8f8df926"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47033e9e-b5db-4e8a-ad75-29841e7df8f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c8da692-8fc3-4b18-83ea-ff47807c13a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c51eedd-689d-4800-a7b1-707a4ad3704a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5667c737-d6ae-401b-b4d0-1dfcff76c4dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18575b7d-3ced-4cb1-9ebf-d9cf1cf102db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a2be3c-dd91-4a63-8d31-40003823ce97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9308e98-0af6-4eef-ad69-c5f0672a658d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce0f34ba-7594-4db4-ab62-d6fe3ed5e6b5",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25918d51-8f2a-4e51-8a09-6ed18e5a06e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f22940c-cdd4-4fc1-b195-2ed4f6c2f9e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90be95de-89d1-4abf-b131-207ba256d8aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e305c92-0bbb-413d-87e0-3e61446782a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c347a4cc-6ba6-4df6-b15d-7090682f40aa",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "069c397e-259e-42cc-bc72-ef8a279bad17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed086d34-b2ba-4382-b51b-88802562c6d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65252156-4eb6-4fd6-a1dd-7f74a0946071",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f65d340c-521e-4e1d-8fa4-89ce6fab84b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c44d271-c20b-42eb-88c2-b5289a5bc2b9",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d5b042-2538-4edf-9df0-539be7f5d851",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0643a34f-2c7f-46c5-aaf7-ad70cd23adc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ef852df-dacc-4df8-aeff-f1c684ef2cfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9eb0b7d-d35b-4327-a25a-02d29b673f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0101b52c-0f67-4b6b-8415-78bbaaca485e",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79c1c752-1c22-4ae1-8691-6daaede062ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bb4b725-3dc8-4cc0-858d-46016877cb67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a786ab8-ba92-4870-a78a-c67194a4c144",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f84e199e-b834-4068-b027-45870bf15bbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cba96f1f-577f-4d6d-b78e-120c91d34c6a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d2a1232-b215-4696-a473-da3fbc9d2754",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b4d4867-1fc4-4795-9744-0a05d78a7f7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c37f079d-4c5f-4005-9f3e-1a1782071d75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4191f073-cebb-488a-aa3f-1161b2dd0987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d62cfcb0-db8c-4f2b-9cdf-9e9ec1369822",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d1ed637-3e38-4f9a-a00f-f79192090d4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "998e0ec6-4c3a-44cf-90b7-5e4da933c6b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5adb586a-e85e-4a54-9e6d-f16b32d79b83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc3a3d62-a981-405e-9122-f7507439eff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22cb975a-817a-4d74-8251-cfa162ac4e3a",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaeb106c-0b62-4bac-8c3e-fe30a606b110",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8807c84-9937-4265-98bc-f1af95ef40a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b78d32-31ad-4bb8-b0ed-a7df3669f06a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b49a8125-810a-4129-89e1-a07216a3996a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8756fd76-8052-43e3-8c69-47fa7ad83307",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "498b7080-e007-4182-b069-c9dc8ea5f19a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8adabc23-f5f5-483b-b9b5-86841e33d010"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3427128-0475-417a-a748-46cf47377cb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ed8f41f-0307-4d47-8d38-021ebc24edb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21f02c26-a576-4dbf-ad8f-f2a884c976a9",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc8ff1a2-648d-41c8-9365-d715250429c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c9fa661-be0c-463b-9f78-415fcbbf3f20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a31d61a-a84a-459c-9646-b5ede6503fa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e4d0633-8700-497d-8378-d1ce54d73e97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae7b59ce-e22e-42f3-baf2-0fc8d34ca0d6",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af4c9315-a6e9-4774-b275-ef914855fa9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d8de4c1-3c0d-4c29-a891-da6dde2e2cbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "166a4b76-03b3-442a-b298-8cdaa1336749",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19a23e25-e327-41c4-8e13-71f9e086b1c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "356361ff-efdd-48e9-ae49-b2307e4dcd1f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb5a721d-b21a-42d3-9b80-d0c8bd2b3ef7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38920865-1bcf-40db-a122-528e311718c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c40b9f-1e09-418c-945b-2999d8a16deb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3440b35d-bdb3-4e9f-a6d3-766180ede03e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fdbef7e-f9d1-4810-b9cc-e7ca29afbe32",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47c24cb2-9195-47ad-8f2e-23e46debf5a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f076291-6b0b-416a-99de-1c331990ed2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce02c04-eac7-4b3d-9129-edeb796453f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e17b77bc-581f-4ee0-af62-b2d1cd173f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab2bf597-62fd-4fc7-85c1-c7d9a21ad3b7",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef45a646-f856-445a-91c6-8c41845a2b7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "529a9a46-6c4d-4581-95ff-c767d1f60b74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "830c4e5c-9958-49db-b358-5b3f730a2bd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a5c82c1-592c-45c6-9f38-5aa19fff65af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d60eb7c-a205-4eb8-b999-b4338220642f",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "372b83ed-0f08-415e-aa25-a1120ca4e8cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2423a11f-e6f6-43b0-9062-1df3c4a3f3fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "704d8aad-5471-403d-9083-9f3aeec03878",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbb953ce-c8d0-4d73-8df3-c495da49eb37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "465c5c22-7590-4da6-bb09-94905a5c1633",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9320126d-95c3-4de4-ad2a-0505646bd6be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35ca3f46-e569-4c88-80e9-d1d11757f10b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25320b6a-7219-420a-9da7-da27f7b5c52f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97a99a0a-f4d4-47ce-9f30-f9d89f744739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d9047d9-4d8c-49cd-bf69-8eca482cf8e2",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff0a9324-14c6-44ff-825e-82544ae415e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "585eb929-54e0-4017-a9e2-7fa4851b0b7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f086eed3-a1dd-4c08-a897-aba8c0fe6df1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26c1cf88-e69b-47f0-9275-d733c564d0e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe97093-a3f1-491e-b275-a698971cc004",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6be00bd-4c2c-4b84-aab3-ba453ea6fc30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d9ca5aa-5cd2-42ca-bb0b-fb559aea12b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caf38326-9ff0-43a0-be8d-7399c0027827",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb2265af-54e9-40a6-a30e-5ca751c06014"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81637d15-915c-4c8e-8c64-5050616e168b",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb1a1aad-2bf1-4795-a71c-d7bf7dcc0fef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6a9cb2c-aa4d-4135-86e5-9f7c23c15d3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d84652-9e2b-4e1a-a675-7dcc71d3a2e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac0d0e4d-eee2-469f-b701-6e7e8e192994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68ad7c36-1f3f-4568-9d35-aaa79ead7412",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5ed95ac-9baa-44e4-add6-0c7e9dbcd513",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e944f759-2912-4111-a628-925ef5bf8201"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "291d4011-69a1-46a6-81f3-2689cfc117c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdb105d1-4e7d-45da-816d-a445dc9259db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5940336-a82a-4508-89b0-876d62276724",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e370200b-e03b-4759-883d-5b46b2357f7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caa43948-1ab6-4a5a-8e1d-a8b98524c110"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9887c999-b49c-4c81-8521-d08082db2c1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99e310de-2417-4eb5-bb48-f6217b61b015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd623be9-cb2a-4b6b-8adc-cebe03e30aa3",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67ecf8ad-3727-4b7b-8b7f-81eb2f0794b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed98028b-1f0f-4e64-ac7a-2380888fc6c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32211a93-e458-4197-bec2-850e92ccefd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdf9e5c6-4130-4d89-b07e-2ea6783430c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f985f4d-b91b-4abd-b67c-1d3a9ca09c0a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db578d4d-fa95-4e51-a7c2-27f690ce87f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a6f91b1-5381-4829-bfae-95e6cf97867f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "043b07f4-c96f-4e82-bb5a-6d157140a9ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcc94054-06d9-4e36-bc08-4664abe4e55a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d85f075-5393-478a-a8be-e6b66ee34ca1",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1dd02bf-4c6e-4467-a214-489abeba02cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50f57cf6-dc64-47e7-a7df-d864f9e94ba4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eefc9e05-0325-4778-9126-ed1260678ac6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15a311f3-aa0b-4977-b1e7-f534b74f9377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f07588fd-f57a-471e-8249-590ca031fd60",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4db6737-d3c4-4935-ab1a-583170b34ee8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0a511c0-ce21-495f-a0d0-23c68a18015e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "384a314a-1b54-4d17-985e-030d4e753f04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f11b8fd1-5dd8-4b80-944f-9a1141151c54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab7dd31b-4aa8-482e-be6f-15bccad6ed22",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07f93331-8d11-42a5-a6a2-781aba4babc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60c65109-8c50-4af1-935a-357b3e69303c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23449e15-0dde-4f99-9110-f11578af2459",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0c37b2a-95ea-4b10-8d0f-bf874ec022fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2677180-0a8d-42c4-a287-02d5b4ac9f7a",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb557f26-dd1a-40ed-a37b-e3cabc2dfda3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cb536c0-5fee-4d1d-820c-23ffe2089be6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55955c6a-df83-4cfc-a6ec-1d2bdc38dd2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80b54d3b-b523-4723-b562-da97ff40e542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bc01d0a-cac4-4ca6-b3db-2c5f6ddd127a",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5844284-99a2-4cfe-a493-eb846ec8568e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c7233f2-ddc7-4129-b752-baddff5e1302"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "801ec874-3b24-48d2-a93a-6cbea6a32ba3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59e0512a-280b-43e3-8405-ede3582c8bc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e13316ee-2241-4da9-a0cb-78ca04eb696c",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c9329d6-1b7d-4829-b77f-05d1877c7a49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8c40e53-468d-4c25-a7c8-8bd6951adc63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "417077d2-be43-48f8-8cf9-de3659cfea28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3aea6ce0-7bc4-4b5e-bf19-9e4a4b1ff707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f10a122f-553d-4b3d-80eb-573a5f5bbd5a",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bcfddaa-769f-4386-81df-ab8c43127dd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c54f9978-883a-4836-8b5a-9eafa7311298"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "955ce273-a986-4286-86f5-af78a3c8a8ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84476047-91f0-42a2-9ad3-9004e1594f4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6712df0b-d22f-48da-98cc-fbb2a1bd34c9",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89f9fdd1-0c8f-417b-acf2-050ac11199be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9be7d64e-96b1-4dae-87ef-0986ee971888"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5e6b298-bfac-4764-85f0-9b8c2c89590e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9594c7f-c523-4d34-94b0-465cf9cdb00f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17fba36-2577-4ef6-a904-ec85cf62f7f1",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d302cce-0664-4738-adf2-9f64f848bf86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43e477f6-73db-49c3-ba72-ab61e4d542f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0184cec8-ba0c-43c4-9f5a-60f739dd9774",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "623da23a-3982-4318-8dbd-0ed47a3ed6b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fdc6ecd-959c-4225-a6a5-9260cf1cc12d",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bf3c309-d142-4313-a322-52cd40468bb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75aba55c-5b54-44fe-b814-95c3aec9d45e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "271dd03c-1c9e-48b5-a892-29bf54950bf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff1b8886-5fd0-41d8-b7f0-de7e4cf8fc5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45cf12dc-e16b-4863-93e2-0a9688040ec4",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b328fa3d-3c2e-404c-908a-82cd8aa39790",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33354a41-e80c-4a2c-ab0c-2416028e9129"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8517596-0651-487a-a571-c331625535e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96d58b1d-2029-47e7-b94a-da96a51ec3ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01a5de98-21ab-42d3-9d42-a05fdf8f23d2",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05c05067-20d4-4da3-9e1b-64670d960cd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ea44253-22f6-4d6e-b371-5acf284ec490"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c316c4-98d5-45f3-be9d-b0c307a0de43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "094e3dc9-bbf5-4346-843b-2121739eb91f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b1e2e90-880b-4c38-84db-3d7188a63ab0",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd3e6c8-d2b2-441d-bf86-5fe766540c4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e792446d-a1e3-47f5-b302-2f52951c9621"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "530e3d7f-3dce-44b4-8a7c-e0a623b55550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b02f1fa3-3f48-4bdb-9622-e4de200baa7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b0b4070-5737-4e40-9564-708d61856642",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1684b8f-371d-49c5-b704-77a0b17711ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57829886-4393-48af-b828-0258093abf07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e7354ec-df37-446a-b85a-185b443f3916",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "120ef3b2-eb4c-47a4-9381-46ddcfa0e209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b46695c-8b39-4b20-a43b-77db1a54464c",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "018362f3-48ba-4147-bd5f-381a5c579fb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7780934-b8b2-439d-94ed-7b5db7ce9485"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1307869d-e507-4be7-a5fe-d23929b89af7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a969f0c-4724-48a5-b89b-eebd52309c18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f408c4-6faf-40a4-88db-b616f89d48ce",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "514274c5-fd5a-4b19-9351-55911ff81fab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5944d341-9ad4-4cd9-a90f-66edfd9a70fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dc27570-8c7c-43be-b903-6546c50ef80a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ec6bbd9-a5a0-45b9-9e3d-44678b835c0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d95fc44-aebe-43d1-8e6b-8f59a2a2558e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "452893dc-48a2-4727-b7e9-65ac574e4aab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "966659a9-1dcd-4a5b-a614-7639d362303e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f632e8-524f-4e8d-a10a-f321bc979fe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b7266a1-8b7e-412e-9327-8a7fd05f9129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "115dbb99-193a-4484-b621-197cbcaf5007",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c72152c-92ac-496b-8624-f9e1ed88b31a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9074ebe5-e69f-442b-8ac4-3b13995f84bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20a4ea0a-12e8-4f50-8ef8-5d6d105d9b81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5733dee5-de79-4dd0-ae3a-490613cf4408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0c8386a-8f09-4f69-881a-de3dc0ca8f5e",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23d2425f-5b39-48c7-a48d-aba6b37d7fb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abeae6b4-af15-4ecf-acf2-df0821d00cc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd8ef8c-3b80-4bf7-9375-349e210b9b0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e75bb86e-3fb0-4344-814a-113e82aadbb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "863794f3-3755-4dbf-989c-b1d092a5c31d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10fa234c-13f4-41a4-bbb6-37185fd1da12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fb8191b-c7b3-4206-bdee-ec2ac1b40aae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "128838c4-c161-4750-916f-8eb6fbe7ea44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a66ffd02-9232-4e33-899c-1b924f690487"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccd424c3-bd92-4a5b-9b48-0916d8141b2c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af289ee-aacd-474d-8a50-c6318b77fab2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49a2ec2e-d3fc-4f7e-9079-17d7d2daf8cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4883538-570c-433c-a1f8-e0da6853a738",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98eb2d7d-e049-4b54-863d-c8a15569f67d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94502975-218c-47a6-9460-7fb3710f6d53",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fc61df9-3abb-48cf-ac0b-b74e380e5f33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e248922-239a-46f9-992d-c44a8ed9e13b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8982c672-9b23-4ab7-a9ef-7fd5a27ba767",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "135b56eb-c4f2-4c93-b66d-1e92b1896a8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31fa2755-1082-44d2-9e36-e3971bc48b4e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b16f33e-8fd1-4844-a426-ddcba7d41a58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f358d64-8033-4f4b-a737-6e9780497562"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13b118ae-6b68-4e1c-8c7f-7e0db3db42c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a25fc89e-fe4e-4443-931e-764f37ac338f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a1fa7d-3852-4040-9c3e-b477cc30f2e0",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "329daf45-8f0d-4bb7-b174-b03bb2a7a22b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c06eb6fc-1c7d-4314-92b3-733002742c3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4430b615-20ff-4797-9c5d-c994260d3817",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "971842a2-0e29-4edf-9945-390ae7f4a485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "493b9cdc-6ad9-4139-95b3-d0db844241ea",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b273330-50ed-4a82-9fdc-5c99765f1ec4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9ddd34f-6883-40a8-9981-1652b18915da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21a24136-2359-4a95-ba0c-715d5813ee10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0907499-1ce5-4ca6-8ba2-f415ca3407eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d38feb9e-52d6-44de-8ff8-afeb1400bb8b",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e73cd2c-f1dc-46ca-98df-c6286189de8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e45c9ace-b1e7-4b6e-9f58-2fbee1ad0480"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a86d17f-1a72-41d1-90a0-dfa9d04cb98b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e864f88f-a5b1-4152-99cf-22a7ae40f39b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b916cc26-0b83-4a63-8798-fbd1b884c73e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8423ea97-1934-48de-8573-a086b065a750",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5eb5c81-bf49-420f-b87f-943450f92dca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6477e803-30e7-49d7-86fa-19b67656acd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b737367-4c7e-43f3-bccf-9c9551554c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0e63723-3a47-40b9-9472-4260488a92e8",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ac2e5d-097b-494f-a653-76b9241795c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cab7d6b-8ea5-4127-b270-2f9fd7d617c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bca777d-7b02-401c-af78-b559b7999353",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9bd1b58-e540-4934-b75e-42747a02d440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e845d9c8-d3f2-428b-b226-7433eafef6e6",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e167300b-84db-497c-b5b3-ba43de145042",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3851235d-3b6f-4952-94c9-f8f3e0bbf04b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c31420c9-bcdc-49d8-a92d-4e26c7534ce7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36bd5fea-cf7c-4b2f-94e8-b3e9aae00bf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e28f8e-2504-4239-84c6-5c5fc4a1fa4e",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ef9659f-7b2a-4f94-b83f-8f1c9f0ca2e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f21ce06-3d61-4305-9b9e-62766141bb3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96561272-c9a0-47a9-989a-cd23319212b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f98af0c2-c90e-4c6d-a9e3-833932abff02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2725f4ba-719d-476c-b134-078fcab7a350",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c14e2b-5c5c-4a24-a06f-0482df1435ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3602d88-e572-4d69-86eb-de5cfc0669c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e941c86-176a-4a83-a53e-8c7852072870",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9356974-2bec-4cfe-add8-a4480f108c6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "412850f8-6218-410d-a997-e3e29499d1aa",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4d00f36-4e14-4139-ae08-8f642b34d3c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c063e9f0-3fc0-4879-9c83-b8e0e707f9b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1f5236-7e2d-494d-a433-fe1cf0011182",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd288cfe-d8c3-4f08-867e-2bef90610dab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "084f1938-0ff6-4d0f-a7d3-f05c63c7bd84",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbd0ded0-7e2f-4dff-964b-10ba0aa48c12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1ed4a3a-d78e-47ab-bd0c-7677f40bef2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae19b805-c78c-4337-898f-8111cb0a7d2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5007f41f-32a0-4e11-961d-b509c76d8240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "543efcf1-21a3-470d-801e-0a8b04ef24be",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d801604e-9bdd-4d82-a63f-0f7dd250ff05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c7cd225-0b89-457c-9956-95020b07edfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa69d5bd-c1f4-45d0-b466-a3f929a73f94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07aa9ee1-8bfa-4527-8f1c-6c5210a9921e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f37d780f-5bdf-4607-8612-e0d8ef72fcbf",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04acd994-a3de-4fee-9243-1a44976c0120",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ef3f753-0d08-4034-906a-34886e5f6202"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89afe0f3-e72d-433b-904e-ae0056afb649",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca2bd26e-3790-436c-a405-41f2d0d03df3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f85cd642-570b-41ef-b0dc-599b328ca957",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d2a0c41-9066-46f7-a0a6-d5f7f27972a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43ae1411-62a4-4298-ae16-8b7daff77af0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d3f40e-abcc-4b07-9868-d31e088ef344",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "397252a5-034b-4580-9900-cda7bcdba2d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef51a16-553e-4b8f-a686-d43f33a4e938",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "821961fc-4420-4983-81ed-ea66856a7d8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eea7e878-ec06-4906-b132-cb702aeb206a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1c94cd8-bb11-41b1-a009-c1f8dc557715",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1739110c-9e00-4901-ae51-7e533b148bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a55103-051f-44ca-bc31-c28e3a63e26b",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbe789b5-78dd-44c0-98d8-b7ebe7a3b623",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf5c05ea-4700-430f-9b39-bbfddebe06c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef49a87c-ef45-4c4d-83b5-76004693af68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79e1767e-090d-4734-9a79-1329594da481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "161791db-3ea2-409e-9e67-efbce8339426",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1c8d051-7b2e-4bbe-a302-88c89e6e6344",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd497033-169d-448b-b531-053a9d5028ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42bb61b1-a9fd-45dd-825d-5ce96a14dd84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67466f1f-ccea-4113-a96e-2fc12c610412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80c9bb62-b2d4-4c93-b978-98489b3999b3",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5094ff8-de11-41b2-95fe-9999e4c87b2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3be35eb5-1363-45d8-bd3f-89d769575def"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a67d2c4-3af4-4b49-b170-fd4ff6819386",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0aaf9e1e-83ba-4c9c-ad7c-22a6531a7bec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63e94b76-a4ae-4a8b-b220-adfdd6e7dd3e",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43eb6c0b-e4f6-41bc-9c2e-a16ecb60b17d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c62430f6-98f4-4fda-9218-efa135030c4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1798d1f-842a-47fc-9a49-dbc88cb9f215",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2242a800-2030-4b31-b553-68ea8cdf4e73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa154f44-4467-4901-a6f0-f2e71500a288",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b91626-a024-4a09-b781-13e7a5d0bbe2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00468d3d-7b4e-44f6-ab60-a09fe71aacc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81586fbb-e7d9-4b7f-affd-144694f13c4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9219a092-722d-4b7d-9d45-d7ca5e0c541f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "148b63b6-3b1e-43b2-9331-10aa2a7db4dd",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9079ba57-beca-48fd-a855-a69c7b7adaf7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3c67cc8-56d3-4dff-a6bd-00e7abea95e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1d51fe-1fe0-40dc-9166-9b7818fd7eee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a6d2287-4aae-41ce-8e0c-f78291542fb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "578bcf91-4412-4d35-8ed6-4c7d031a9a5c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ddfcbf9-ad10-4efe-bc80-7c3de6e4f940",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cd823ad-9ff4-40d5-b5e3-c249c43b445d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bf08485-cae9-432e-93ad-ad283ffbedde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45e4fbd0-f094-400f-8c35-92cf91584d50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc3f4155-38b2-4832-99b0-8b09381139dd",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46858fa2-95b4-410f-90ef-52b3bca11578",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c469909-b05e-478e-be8d-2422a7f47234"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3007152a-280b-4cb4-81b3-3e3f4806d95f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f3adada-4c9a-45e7-9735-c809504d2cce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c1c43f-ec5c-4a5b-b67e-30561f1783fa",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e914cb2-f6aa-4101-93af-0583f05d1c46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87f09760-22d1-4f43-81ed-f4c977a95a2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfbe92b1-ca1f-4e4e-9f57-8e2ab2c141b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4d988be-2eff-4631-8a5c-e43006abe715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cdf8f70-f731-496e-b562-705c5a09216a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "634ef76c-4cc9-45d0-8dee-bc5503677ce0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba1823d7-ecc1-42cd-83c5-196b65ce54e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a9d269e-1cb8-41cf-a512-2f63a3e56c8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94cf79e9-f161-444b-bda2-7bd59f9b23d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce02cb70-a28b-48c2-b4a3-9e3c02b7e2ff",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bd5e284-7805-477a-90b0-7b32f21fe231",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0390316b-7f87-4451-bb39-44d161cd19a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d91fbf3-89c6-4017-a170-2e636660206f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "837e80a3-635f-412c-abd9-cea6a08cfe9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ee4d6a8-d124-4e6d-b85e-73638bba07a4",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d263e6b-2d76-42ec-ae9a-164130573ba6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c92a6da9-e557-4091-ba1a-9fb830bdf391"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fcf8686-a7af-4485-92bc-4d14808ce720",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f52e6d8-a119-487a-a8c6-2e1dcb90bc73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af8d7d2f-e285-4625-99bd-d63190d44ee7",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb8b3b07-e18e-43c3-be18-3d9e3e0396e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f84b0eb2-268b-4f80-81fe-fa079629c6a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecbafce8-c5e3-43d9-ada2-4df3386f927d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e2aaa12-b68b-46c0-a6a7-98da755aa158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fba9e301-a889-468f-917a-c6ccbf7fd55c",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ebc3843-29e7-4414-aab1-f744cdaac78f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6a1b282-b2bb-4f7d-b6a7-0f2123262503"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "742532ae-d499-461c-9eec-1c03d50f3a17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "077a40e2-7b7f-401f-a94c-8bc1ddb3bffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6f3b199-a0c4-4850-8673-72007c6e3cba",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd1fe734-469b-42a4-936d-7ad55de63904",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bd3dea2-fa21-47df-bdc4-954086cbd02a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "296fb2a3-9cfc-43fc-ba2a-d7095d2e7323",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b8e747f-0303-474f-be4e-bd9ca1791e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f64f47f1-f270-4a93-983f-4685be7a0749",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38d4398e-274c-4976-bff6-dd21d2f8ab96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35ff154c-49bc-487f-a9c0-318d7b76f064"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b9cb7a4-a095-4085-9c80-6a8d864d98c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3d01ecb-8f07-42dd-b44f-aff6aaac0db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed6a893d-b751-466c-8de7-f526c9655e71",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "667f4231-a956-421a-9b48-fda5809a66ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3721232-8ecd-47dd-b88d-6196499ea7e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ada5b76-641a-468d-aeb8-d6764b36cab1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "297a270a-2af6-498a-bdb1-c49e1c08abd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "185f6816-2e15-4ee6-bf20-bd3635e2aa08",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d34dfc48-061e-47b8-8474-7b02049030c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61dcb307-3b4c-4ac7-bf39-2580a8aae85c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81bedf85-f1be-4bf3-a9ac-ea610691ad47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "251e7038-b905-4b6d-a094-286efa8380d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d02792b0-11ef-43c6-8f88-5d6e7a424c50",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aec3e92-6477-4f83-b6c3-b0db377aeb5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65b6cbce-6c6a-488e-a02a-1fb6d819e0b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b025d252-45ae-493d-af3c-47d28028254c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d790f694-c4e1-457f-913a-2b2fbb92e5c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "103dc5a6-f649-451c-a4aa-53368e8fb783",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "788ae49e-706f-41af-9598-37cfcc753050",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04d5ccd5-8274-4094-b4ca-b69117787127"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80cc2ce8-5e23-42fa-9a0b-d3203d879813",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71dd6c21-a4cf-4820-b2eb-29b7bf31427a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab5e232d-13e9-418d-a07d-a6026c9f464b",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "962c9b92-8e00-4faf-aab4-fe6badc32ebb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25f93cda-f601-4ede-a551-98d4596dc02c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3ff0402-e4fb-4099-8309-942993b7a5e4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93bd7430-d9cb-408d-a13f-7b96f8e87001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ff66acc-30c1-4868-acdb-ae7a6fe4c96d",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab20d6c3-ef3a-440e-baa6-95abf8cddca7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7201d907-0ebb-4173-9579-8717ea2fbdb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31299e2a-79ad-42e4-acf4-48b2a8fc4e00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3855ac95-d63b-45fc-a950-7c4ec78928f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db60a7dd-07e4-4671-86cf-1d541a91904f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b398883-7e4f-43c9-9b89-dbaaef50df03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37d34afe-6ebe-4e95-8d5d-d72bf7d7eae4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1b5eaf5-5962-41b4-a676-6a75543b3fbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b76d9685-2785-4c93-8503-2809c0d6ceb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efd1890f-d161-402b-ae9c-5424049c1c17",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f439a2d-13ee-4e5e-92a4-0fae9da2afa9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "beb40620-f72e-4c55-92e8-6bcd271a0c5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "368e5eef-ca6d-43c7-9f0f-2bd20c5013da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "924f7aaf-a0a1-49e7-9a6a-86d78efbcc98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6f5d182-38aa-48d4-b0e5-5d9e1fd44fbf",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "685653d7-ad7f-442c-8313-6bd00d8e22e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e2a3dee-8e88-4726-95f3-a922548c8d76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5daac283-c150-4198-8268-d01dd5d7502b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e927eb2-c719-47f3-acea-10edd307b13b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63db3aaa-5358-416a-9b27-e9b506b4666d",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89ab576e-5134-4c8e-8e49-893629d881fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7325eca5-3b7a-4013-98af-34ad101414f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae31d69b-5b81-4304-848c-158d05eb33b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b7f42eb-d013-4411-a59e-bf7e8eda97be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "946baf65-ad14-42cf-a1c1-6b673c4f0974",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db6fba43-8b02-4dd0-9a09-d38b628fc5fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2415bbb-122b-4ae5-a223-a57446d35268"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de2656e0-8719-4911-a599-251debe189bd",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7f21784-6052-4765-b7ac-4167d570b5f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ff3539f-f608-4a11-bec1-7a67cb560ad7",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87df1b3a-3a7a-43e0-9aeb-306468d6797d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "857d951c-2376-4a75-aa72-c12f3131a0c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78cae870-83e0-4403-97fe-ba898928d526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "913b282f-fa3d-43c1-aea5-75885c68e0c3"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b8580b7c-46a5-4319-b77c-0a690b95987a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "836e6e64-babb-4db9-9bd0-ad067a6ddeb2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9657cdf3-7d91-4960-b4f2-fe332c30a029",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e524b246-4dd2-4ee3-b31e-7af2579120bf"
                    }
                  }
                ]
              },
              {
                "id": "3ac02233-9714-49ad-8328-71de7db3369b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "68cac7e6-62f6-44c0-9d82-0c804a197f21",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "659e9fc8-ad2d-488e-830f-ce573161d3b9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "777e59cf-545c-4df9-8d22-cdecc48af125"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8e20175-a5e3-42dd-8467-ae64bf94f508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7de67e8-1b37-45a3-99fe-690126ee52e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4d34fa9-ae80-47a9-9e6c-7ca3b3dec7ee",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "287f95fc-726b-4608-9391-de950176b8bb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f1cea11f-6b34-4762-9980-85ff07b9585a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a2147f7-859a-4c35-910e-5c7c3dff57ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1857ee95-7d69-40a7-8e94-f0c7d526f82a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d6c57b55-9e5a-48d1-bf62-338fac3651c0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "815e15ad-2197-4bea-8e7f-d7a66d2242c1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f56c82b2-bc31-4eed-9b1b-02ec7f2f6ed5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f68cbb1a-9dd4-445b-bfb2-622ac50cd6f4"
                    }
                  }
                ]
              },
              {
                "id": "ba392041-d383-4fb8-89f1-02dcadafe925",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "92f39203-1b51-4223-8610-b5fef755d26c",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "925a4e5f-356b-4da6-93ec-a8d4fd7a23c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "3c5c9f51-b430-4a9f-bffa-3ec470f4820d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34d5fb97-ce07-4f96-a572-1d15d6bf07b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6212464-78c9-4174-99c2-08a93ad7392f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0f2fb5b7-e3d3-4d03-877f-7300e0f55123",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f1710602-2eaa-4f73-b8b2-5ca834d67d1d",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d633fb4-7ee8-4e75-bbec-b0bc791e24e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0955b2d9-ede0-48f4-8dd3-bd61f7c4c48b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7148b5a-e457-40a2-a3a8-a6d931f52561",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7bf9722-be48-417f-8093-b13879fdc636"
                    }
                  }
                ]
              },
              {
                "id": "1f4ddcc9-b7bf-4ebf-82b7-4931424b2dcb",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "99885604-a080-41c0-ade2-ba9758054901",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "52f2954d-fbf8-4d9e-86f9-b200565ccd4f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ba1bd7fc-3fb9-4c1a-a2a3-f1dd90ca7bf3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3ce42d32-0648-498b-a4a9-56f6fbd3db65"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "908ed3f5-12c2-4d21-8a9b-314a5c783298",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e14fde2a-f18f-498a-9142-018f23d508b0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2d327dc2-64b9-47b5-b41b-f0cafcf38d3e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a9619f74-0d46-48e0-850a-4e4cdea06747"
            }
          }
        ]
      },
      {
        "id": "1af4c295-3d23-44cb-989e-2b042f8d4847",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "bb80f6dc-6101-4bd9-9106-d2fe889c1971",
            "name": "Negative Testing",
            "item": [
              {
                "id": "47a39684-5aa2-4628-8c75-7d718583186f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4defe09b-e0b6-4861-898a-16ed531a1ae6",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c8d692f-f60d-4dee-acf9-aa51fde7be29",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fd2fc601-3f33-42fd-ab7c-2252f4a2326b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f42c0769-8c81-4a40-b450-7c0671777cb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "361992f9-cfe1-45d0-92ad-96674c285144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b91dbc29-b33b-47dd-80e9-bb0b6390ca92",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2a43c42-4d25-4f98-b7cb-f11e21279194",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c6161b78-9550-40b2-a4ab-92a16d023dfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4f4e0c3-d383-41ab-9072-020d6d79e391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "17baa1fb-f2ed-4bd6-b17c-471287eb6bb4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9beaea7a-af1c-4926-8493-691fafa962d7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8dc3784-92a6-4235-b949-c0ad28f7d2de"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a8f60b4-13e3-4974-ae34-df43c1ebbcd8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1c430e4-deba-4813-99a9-aaca3d39ce3d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "91dc75ed-9a4f-493e-b068-546bc5d1b9a7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "81bdc062-719e-4993-9cdc-362e7683889b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "52d1f752-64d4-4951-a4c9-20d48dbfc7fe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "99b81756-6830-44b2-a20c-8e721f11a19b"
            }
          }
        ]
      },
      {
        "id": "5dd8d2ea-2a70-4e18-9146-6ec14b677896",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "740393f6-1211-412f-844b-382d277a523c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "76db3bfe-18af-464b-8664-d5e0e21d7cb7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "13deb5aa-6200-46de-8a09-911dea7fd53d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98da2bc6-86ec-4a44-a200-555c01f92f0a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "373e3f4d-ab84-4695-bbcc-e74b7da37d95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e55f632-bbb9-496a-9f42-0155608e81bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "87370b79-dcc4-4d34-ade4-f384e4a4fcf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c738017e-3614-4359-a806-6b7374e33af5",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65cbe67e-08b4-4c57-83f8-41937babf160",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "3b0d4788-854f-46c1-9a0d-543ae496caad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c15197b-813f-4f97-946c-6ca194846f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e5fb8407-5927-40ea-b5a1-d58d550f4be4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f41f53d-e0cb-42de-8f51-3d5d5123cd3e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c089de62-83f4-434f-a83c-b4dc60604e14"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "239659df-c1c3-4f27-bf2f-cf278bec7a97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "064d036b-8e0b-4d81-bd19-bf1d17543ce2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "95ee8844-a541-448e-83c3-aab1f1c953a3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "748c4e8e-7140-41d8-ba4b-f09adb269b93"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "06e1c6e2-90ce-4af4-9ed7-a285302eac27",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "70bf342c-3e4e-43ff-bc42-44f33302719c"
            }
          }
        ]
      },
      {
        "id": "68e2d178-f91b-4f10-86e0-3a097910e15b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "39bb4929-efa1-4cd7-b188-94f52e2edb0a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6bc4f8a2-17b9-4f49-bcdb-7c4c37a22a2b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d4681878-05c6-4a77-8826-d64afacd20a8",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11cccb2a-bb00-446b-8584-2b9fcc93a74e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "38481aab-5892-4ded-a1c6-673e8e883925"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9391e05b-2bfb-4efd-8a6b-05b0bc6f7651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "34264695-f757-49f0-97e1-21ef4cbf4220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1940f8f0-6b9c-48f2-b708-dfb6f392c637",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7de6d2e1-f44a-4287-ab73-ce1b757e13cc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9bfa70fa-900d-424d-a46e-c709b039cc2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a763ae35-4c41-44be-b87e-6c8dccb72e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c61d984d-aeb9-4f4f-968c-c18cb73e353e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd0789d3-9ab9-4ebb-b376-2348d0085c2a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "debf4e59-b869-4b04-8ef8-f7817e12244e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "789742e7-ac11-41b1-a495-bc645a3b52cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "09c101ac-3cfc-40f5-9bc2-31cd1dde6378"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "01143d3f-f1df-481d-bb3a-5d3da7052dc8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e20a224b-36e9-40f0-b60b-2eee793b7bc5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "26d73342-807f-4d34-ae67-aa2c03002e9d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0755a584-2fe3-4096-bbd2-fd8b31d2d23c"
            }
          }
        ]
      },
      {
        "id": "b27cd2e4-1c2f-4d14-9a83-b5ea934e38c1",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b996a176-ed26-4b27-b789-b90133c5545d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8e82d382-11fc-44c1-b23b-68bdd96cc93c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "814a8b87-df14-4de7-8517-93ceee5aacb6",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "48a0caa3-e42c-419d-b564-7a49cf928f50",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "752f8b58-3c05-4843-901b-1a49eabd3413",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 314.03076923076924,
      "responseMin": 8,
      "responseMax": 8665,
      "responseSd": 966.7864089816915,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1680568610773,
      "completed": 1680568705091
    },
    "executions": [
      {
        "id": "d56f1283-e3ca-49d7-b1a5-b3c4343acf8c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1c78a6d3-cf78-419b-a719-192d8a1b2fa9",
          "httpRequestId": "e0b080e2-9910-436d-aceb-195b3ccb5550"
        },
        "item": {
          "id": "d56f1283-e3ca-49d7-b1a5-b3c4343acf8c",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "9282067e-a3c8-4e01-b94f-dc709532ee83",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "38f7db90-93e9-4389-b851-d0a4655e1132",
        "cursor": {
          "ref": "7aa6bccf-4ccc-4894-9374-03ae81d47ec8",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "590b4d17-65f3-47f7-bd72-d3fc8395b37b"
        },
        "item": {
          "id": "38f7db90-93e9-4389-b851-d0a4655e1132",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "cc4cdb21-6eca-424e-a052-8e1b245aa83b",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "259686db-b3d6-4abc-9ff4-c226a5b57d95",
        "cursor": {
          "ref": "566694ca-221f-4e39-862a-f6279054252b",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "81e5efa2-5c3e-478a-a5c4-7770b33d5969"
        },
        "item": {
          "id": "259686db-b3d6-4abc-9ff4-c226a5b57d95",
          "name": "did_json"
        },
        "response": {
          "id": "20e139da-208a-4692-a811-d85df52b9669",
          "status": "OK",
          "code": 200,
          "responseTime": 442,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baaf5bd3-3908-47fe-9d00-01d45226a1bf",
        "cursor": {
          "ref": "35149efb-80c2-42b2-b56b-c8cc756f398d",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d07cec38-7354-4f3f-916d-2e1a263b3911"
        },
        "item": {
          "id": "baaf5bd3-3908-47fe-9d00-01d45226a1bf",
          "name": "did:invalid"
        },
        "response": {
          "id": "9e22c6d1-13cb-45b0-ae5a-950cd1548ad2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 947,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "baaf5bd3-3908-47fe-9d00-01d45226a1bf",
        "cursor": {
          "ref": "35149efb-80c2-42b2-b56b-c8cc756f398d",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d07cec38-7354-4f3f-916d-2e1a263b3911"
        },
        "item": {
          "id": "baaf5bd3-3908-47fe-9d00-01d45226a1bf",
          "name": "did:invalid"
        },
        "response": {
          "id": "9e22c6d1-13cb-45b0-ae5a-950cd1548ad2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 947,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "d69dbaa7-dbf4-4181-9c05-64d8b10e5e48",
        "cursor": {
          "ref": "a233a867-dc21-4336-8016-7ae9d173acf0",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6c156228-b4ad-4cae-bd96-a976f080c2eb"
        },
        "item": {
          "id": "d69dbaa7-dbf4-4181-9c05-64d8b10e5e48",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "3bc7e3de-9e90-4542-892a-8a5c4396c563",
          "status": "Not Found",
          "code": 404,
          "responseTime": 82,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c27773-6e2e-4a5c-aea2-d8b3b7954dc4",
        "cursor": {
          "ref": "0ee96314-d138-4c0e-b14c-6065f3ac9533",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4510bd02-309c-429e-bbab-83ef4e4b7a92"
        },
        "item": {
          "id": "74c27773-6e2e-4a5c-aea2-d8b3b7954dc4",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "d701abdc-af39-42f5-a849-1d037e32ddf6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 62,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaa59bce-970f-42f6-8c76-7ca4ee119e5f",
        "cursor": {
          "ref": "0916ff23-4f30-46d7-8cc1-88d71a658f46",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "fa6ddf8b-fae8-4b0f-bd22-236b067eab9a"
        },
        "item": {
          "id": "eaa59bce-970f-42f6-8c76-7ca4ee119e5f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "d4c54d97-9607-48db-9b65-958b1ffa71d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 178,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "792adc97-b4f0-456e-90f2-2e948db5a82b",
        "cursor": {
          "ref": "9f80dda7-57ee-43c8-89a2-ce951343e521",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "37d672c7-3425-4ab2-aac2-2f4b9cfd132e"
        },
        "item": {
          "id": "792adc97-b4f0-456e-90f2-2e948db5a82b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "1e2696b9-2363-4faf-ae5e-8d76617d1112",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "792adc97-b4f0-456e-90f2-2e948db5a82b",
        "cursor": {
          "ref": "9f80dda7-57ee-43c8-89a2-ce951343e521",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "37d672c7-3425-4ab2-aac2-2f4b9cfd132e"
        },
        "item": {
          "id": "792adc97-b4f0-456e-90f2-2e948db5a82b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "1e2696b9-2363-4faf-ae5e-8d76617d1112",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "1e73774a-8641-4f44-b11c-fd3c91efe7cc",
        "cursor": {
          "ref": "f08ce5f4-b787-4acd-bfb9-ec62e03e2b8c",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4a3a560d-fc88-46c3-9fd0-543762c95dc2"
        },
        "item": {
          "id": "1e73774a-8641-4f44-b11c-fd3c91efe7cc",
          "name": "identifiers"
        },
        "response": {
          "id": "c7deb5ee-fbab-45c5-af53-c296112ab6b2",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70ce9cd0-d32d-436a-b03a-23727664bd35",
        "cursor": {
          "ref": "1b6f2ac1-fb49-4a20-a267-2f50a47be6d4",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ef44a2ea-5bf2-4391-adf5-9eb6843bf4d5"
        },
        "item": {
          "id": "70ce9cd0-d32d-436a-b03a-23727664bd35",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6144db98-ab1b-4591-9689-fc6308f7962f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70ce9cd0-d32d-436a-b03a-23727664bd35",
        "cursor": {
          "ref": "1b6f2ac1-fb49-4a20-a267-2f50a47be6d4",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ef44a2ea-5bf2-4391-adf5-9eb6843bf4d5"
        },
        "item": {
          "id": "70ce9cd0-d32d-436a-b03a-23727664bd35",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6144db98-ab1b-4591-9689-fc6308f7962f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a1c5d2f-5583-4b66-a093-51f12fd5019c",
        "cursor": {
          "ref": "a3946aa8-bfc9-47d4-8e02-310b8365934c",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "68f889dc-59a9-47a6-a829-99295f5a7030"
        },
        "item": {
          "id": "5a1c5d2f-5583-4b66-a093-51f12fd5019c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9e56825a-ebca-42ff-a5e2-d427328f06af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afa4ab6c-d8f2-4911-ac7f-3088dbbcde0b",
        "cursor": {
          "ref": "708bfcb9-dde4-46a4-9501-2d7a1943a335",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "9be98bac-ccae-4be6-aa80-e4e3e9e1aa8d"
        },
        "item": {
          "id": "afa4ab6c-d8f2-4911-ac7f-3088dbbcde0b",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "6f78c33d-c25d-49b5-a247-a0a61afdae8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "665ac0f8-5959-4a4a-aa36-582b5d337ba2",
        "cursor": {
          "ref": "3665e96b-b09c-4b0c-8a00-96635c77bcab",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f93dba95-2e40-420a-8f56-f3f01f7b6e14"
        },
        "item": {
          "id": "665ac0f8-5959-4a4a-aa36-582b5d337ba2",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "9580ae01-b7c8-4d78-9da4-c876f62668be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 159,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8e8b94a-99ba-47c9-9f76-757c040f2ac2",
        "cursor": {
          "ref": "72253012-44c8-4a73-89f1-79ff6a793d3e",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d8f13d6e-f67a-424c-b22b-2750019904a3"
        },
        "item": {
          "id": "b8e8b94a-99ba-47c9-9f76-757c040f2ac2",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a9f0ac79-4ddc-4567-b24c-f5f14eeeaa4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba777066-edc0-4d96-8576-868d1170240e",
        "cursor": {
          "ref": "fccbd70a-0fc8-431e-8f66-0d31fd00d0b8",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "33a336c7-4fc6-41a6-a621-53ac80c8d9ec"
        },
        "item": {
          "id": "ba777066-edc0-4d96-8576-868d1170240e",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "2528a7a0-68b0-4bc0-9f70-ac1a2f052cf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5248390c-5cb8-4126-97bf-2773c7a60a05",
        "cursor": {
          "ref": "c814a05e-4730-42fb-8119-f6bc479be370",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "fbb3e3f6-9574-4070-ab8c-4ce1fe8098bc"
        },
        "item": {
          "id": "5248390c-5cb8-4126-97bf-2773c7a60a05",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "193d3394-4cca-4507-990d-c5e614c8d2a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6c1b80c-065d-4985-9e6f-eb8d9ac5179b",
        "cursor": {
          "ref": "2fb53e9c-c303-4830-855d-c487f5069a57",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "b0098cbc-a34e-48e3-915b-86f901b22030"
        },
        "item": {
          "id": "f6c1b80c-065d-4985-9e6f-eb8d9ac5179b",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "6ec41ebc-ec43-4075-b972-ecfc6ac28157",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec8ac8d9-58f7-4df0-be18-fb9d44dccd15",
        "cursor": {
          "ref": "96ba1b32-fc69-461c-bc72-be5a80d449fd",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "7ff0af2f-c2a1-476f-949c-1494cfdffdb3"
        },
        "item": {
          "id": "ec8ac8d9-58f7-4df0-be18-fb9d44dccd15",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "f44e19ed-5ccb-418e-ac01-6bd2d379089e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85f2a7ba-7807-477d-bf9c-3d8b45d23390",
        "cursor": {
          "ref": "ce49d1bf-b781-4901-afa5-b08fcc9c7a8f",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "48bc0577-b1b7-4183-80f2-d84f99d4d664"
        },
        "item": {
          "id": "85f2a7ba-7807-477d-bf9c-3d8b45d23390",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2892b3ff-f8c9-4580-a709-086ff6b38f9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19c95dd1-f1a1-4a74-b1de-811971d1deba",
        "cursor": {
          "ref": "06cfe25b-c536-4344-9e91-fa2890c61c6d",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "576e388d-698d-4f4d-a26d-f16b07314a12"
        },
        "item": {
          "id": "19c95dd1-f1a1-4a74-b1de-811971d1deba",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "fbae30a3-fcf6-454f-8dc3-0f1a33a2d660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "047a40eb-5fae-4068-afba-8067296016cc",
        "cursor": {
          "ref": "e5e33bd6-14b3-4561-8f55-58f5d7877c31",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "4a12d2c5-5198-45fd-849e-d2dda5602243"
        },
        "item": {
          "id": "047a40eb-5fae-4068-afba-8067296016cc",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "150f9b6d-e0d6-4a3d-8a6e-08a1f773f443",
          "status": "Created",
          "code": 201,
          "responseTime": 780,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "118f9708-544f-4272-af4a-c91dc6e34afc",
        "cursor": {
          "ref": "96558ce9-19ef-4e94-9585-6f962d432bdb",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b1ff0987-8014-4459-9c2d-9cba41debf76"
        },
        "item": {
          "id": "118f9708-544f-4272-af4a-c91dc6e34afc",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "820cb61a-e1f8-4935-93e3-3f88597e3d87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faef05cf-e118-450d-8e9f-60e266288937",
        "cursor": {
          "ref": "14d7a6a8-0c0f-4154-aa44-3b0278497904",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e974e3ee-b96b-4b54-a688-aa591c25f9b6"
        },
        "item": {
          "id": "faef05cf-e118-450d-8e9f-60e266288937",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "0feaffac-34b9-4ff0-99bc-fd12c7c7f479",
          "status": "Created",
          "code": 201,
          "responseTime": 5663,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "e69c75a5-a0b8-45a1-b7a0-4312738cf6c0",
        "cursor": {
          "ref": "f011eb6a-c3d9-4f55-a5bd-1d779e33077e",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "80a8d35b-7683-458c-83a4-2eee220efdcc"
        },
        "item": {
          "id": "e69c75a5-a0b8-45a1-b7a0-4312738cf6c0",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "bae808ee-9610-4019-b0ba-53ed615fa3f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "584aaa9f-3d48-4061-a0dc-9e96f0c70581",
        "cursor": {
          "ref": "a264f78a-07b7-48d5-b8b2-4ab7ed98dd53",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "0c1718fe-2092-4570-ba8b-0e794313cf8d"
        },
        "item": {
          "id": "584aaa9f-3d48-4061-a0dc-9e96f0c70581",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "a71cd7b6-20cb-4209-8b54-be2b24a05149",
          "status": "Created",
          "code": 201,
          "responseTime": 4267,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "7cbdcace-8549-41c3-bc0c-190b4ecccff5",
        "cursor": {
          "ref": "968af15b-5b51-4149-aa02-f9f50966a348",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "13bbafe5-7694-4d92-b3a3-3e18a25a3e49"
        },
        "item": {
          "id": "7cbdcace-8549-41c3-bc0c-190b4ecccff5",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "1c08297d-3135-455b-b713-dbc74fd3cafe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72c66f72-a492-492c-abc1-6a8eff84e2e0",
        "cursor": {
          "ref": "8cdd4891-42a7-456d-bdc9-3b2363b0caa8",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c4d00b76-90d3-4fbe-abfc-55d512174af3"
        },
        "item": {
          "id": "72c66f72-a492-492c-abc1-6a8eff84e2e0",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "618bf730-e566-408f-9d43-6fb9c8ffc1da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c2b096c-66d4-4f37-977a-4367d6a5faa6",
        "cursor": {
          "ref": "2f338772-09b7-4ffb-98cc-1e5dc9bab2cf",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d7adeb38-dd0f-45f0-a698-ccc9b14df8c1"
        },
        "item": {
          "id": "2c2b096c-66d4-4f37-977a-4367d6a5faa6",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "d3d6b23c-1062-4058-90a7-1ac397a33b00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14d4734b-d831-4a17-b6c5-a0b7ddae828b",
        "cursor": {
          "ref": "3b1d1d32-2519-463d-9417-fd09e9263140",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "56586be7-d3f2-4078-ab61-3a7f9eef6b11"
        },
        "item": {
          "id": "14d4734b-d831-4a17-b6c5-a0b7ddae828b",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "ec0dcdc0-ae1b-4298-b560-6587c0254fde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9ce2c72-fbf2-4529-b84d-9961f93f817c",
        "cursor": {
          "ref": "158735bf-0a38-4aec-a0af-5b5ae5aa3a07",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "94ffed2e-d0bf-4602-8187-94539358feef"
        },
        "item": {
          "id": "c9ce2c72-fbf2-4529-b84d-9961f93f817c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "67f00164-c365-428b-985e-937c67ab8e08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49d72ef7-f394-4acd-8434-a8803dc1e034",
        "cursor": {
          "ref": "c3f351cb-16cf-46c3-a513-65dfc8b98293",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "fb76e891-8718-4a65-b819-3557e20e06f9"
        },
        "item": {
          "id": "49d72ef7-f394-4acd-8434-a8803dc1e034",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f4f86959-3d7a-4194-9b58-58c87ede465b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb2e4149-cfa1-4086-991c-25a40d83229e",
        "cursor": {
          "ref": "7094e61f-b3b6-4f8c-b0d1-ba195b8bbf1f",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f4bc20a5-2f48-4fee-836f-254b288ab968"
        },
        "item": {
          "id": "eb2e4149-cfa1-4086-991c-25a40d83229e",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "dad55d5a-817a-4462-a9e3-c164c6897143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29881caf-2984-4844-8d27-c64fc1e838b3",
        "cursor": {
          "ref": "88c3af84-f8e8-451e-96e5-bd8a52c62519",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c5b8ec13-e694-4d1f-8243-ab38f6e25379"
        },
        "item": {
          "id": "29881caf-2984-4844-8d27-c64fc1e838b3",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "cad8e4df-99ed-4c94-a4e2-e058dc29af2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c58098a-497a-4f5b-af46-e8c57de3d734",
        "cursor": {
          "ref": "8bcb0c76-d5f4-4fd1-ab1c-4fb611699dc3",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "45f40484-cee5-4723-af4b-cc47fdfbb4ff"
        },
        "item": {
          "id": "5c58098a-497a-4f5b-af46-e8c57de3d734",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "71a92e02-5e02-4dcf-a0e5-acfa5017a73d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90237adf-17f5-406b-93ab-a3f399ee38d8",
        "cursor": {
          "ref": "d9443ba4-5630-4252-babe-c8c361e21bc8",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "bb3b7956-b2c5-41a2-a7c7-a775d755f25f"
        },
        "item": {
          "id": "90237adf-17f5-406b-93ab-a3f399ee38d8",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "f2ce13f3-1456-47e5-8682-2ab512ffb949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3bdaf69-fdca-4f32-884b-895f8ad3e848",
        "cursor": {
          "ref": "6828544b-903b-4b75-8f8e-05a5bf2b2319",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e3c79ede-57bc-4b74-a22a-cd81e7725787"
        },
        "item": {
          "id": "a3bdaf69-fdca-4f32-884b-895f8ad3e848",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "995cf14d-2d5a-424b-a99f-4d8fee33d548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f8d41c4-04d0-49fe-aa00-d2f797dd010e",
        "cursor": {
          "ref": "f4ef05e6-a625-42d2-b22c-02b62606ce5a",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "d132a6a0-1108-455c-b461-21a1ff54c7dc"
        },
        "item": {
          "id": "0f8d41c4-04d0-49fe-aa00-d2f797dd010e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "5ddb71f0-c385-42dc-815e-258c201afaa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "018e9afe-583e-4308-8365-4221ae3095ae",
        "cursor": {
          "ref": "befb26b5-3829-4268-8e19-c1ae52b75d85",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "8535a66a-ab4b-434c-95d4-53887f7d6b00"
        },
        "item": {
          "id": "018e9afe-583e-4308-8365-4221ae3095ae",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "1c668570-8d62-4fbb-a8a1-6ad794f7f245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87e09119-7e9c-443f-8d09-abe58ef6e37b",
        "cursor": {
          "ref": "854c2f39-a234-4082-95bf-b8bc9be728dc",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b068e1b8-6c20-474d-8832-807247584074"
        },
        "item": {
          "id": "87e09119-7e9c-443f-8d09-abe58ef6e37b",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "bd38cbe8-a7f3-49f6-b40d-f87f791cdd9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a027e18-36dd-48db-8f99-79031ba94b2a",
        "cursor": {
          "ref": "1e2fbea6-ab32-40bf-ba2f-946f5f8c6eeb",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6b87d275-e31c-40aa-aa8f-5c7494893a9c"
        },
        "item": {
          "id": "7a027e18-36dd-48db-8f99-79031ba94b2a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "5cfb83b7-f77d-449b-8631-153bd1f1398c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35e89358-5aac-4f56-b257-c0b2149f1560",
        "cursor": {
          "ref": "a825c5e1-8807-44cf-b22f-29682d882a2e",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "bf9cdc29-e031-4689-a197-fc7cf6454493"
        },
        "item": {
          "id": "35e89358-5aac-4f56-b257-c0b2149f1560",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "db4e1ac4-bd32-496c-8e18-dc1999f94fa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "108e90ad-2766-4e9a-a17c-31cdfd2f66b1",
        "cursor": {
          "ref": "b24799f5-cf2f-4c92-8fca-05fe1ae433b2",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "53087998-92a3-45c1-a77e-a52bcf190e0d"
        },
        "item": {
          "id": "108e90ad-2766-4e9a-a17c-31cdfd2f66b1",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "b61fe4ce-5fd1-43da-b6e2-7248cfced03b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff94d3f0-eb59-4d6d-bfb6-7a3de2f9739f",
        "cursor": {
          "ref": "d365a99c-f20a-484f-8fab-7154ea9c0ad0",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b4297fb3-5be6-4c38-b00f-4521a2fb9ae8"
        },
        "item": {
          "id": "ff94d3f0-eb59-4d6d-bfb6-7a3de2f9739f",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "9c9dfe73-4659-419e-8b60-d5fac0e0b183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63179d64-3bf6-4897-883b-8b377bbe6075",
        "cursor": {
          "ref": "65be0bb4-aeb4-4fb6-960c-464ab8cbe59d",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "86dc0846-0494-4ef7-8d56-3d97f4a30af8"
        },
        "item": {
          "id": "63179d64-3bf6-4897-883b-8b377bbe6075",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "8460a05c-4b4b-480c-b384-fe4fc0d7ebb0",
          "status": "Created",
          "code": 201,
          "responseTime": 7116,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "86fa15cb-05a7-4384-b628-94018bea05fb",
        "cursor": {
          "ref": "5cc103ae-feb8-4cc4-9685-17fc2ee249d5",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "d2307d7e-4955-40ed-a16e-413e2323d81c"
        },
        "item": {
          "id": "86fa15cb-05a7-4384-b628-94018bea05fb",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "2a81aa5e-e570-44b2-940c-ad0fd6fdc6ac",
          "status": "Created",
          "code": 201,
          "responseTime": 8665,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "0f66b1fe-93c4-4615-a19b-4646903beb6a",
        "cursor": {
          "ref": "3d873686-4f9c-40b8-9b84-f48ff6d4d99a",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "efd8fa01-341b-4f08-a7a9-bf2e5f314dbb"
        },
        "item": {
          "id": "0f66b1fe-93c4-4615-a19b-4646903beb6a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d2e9e470-f3bb-4600-b9b8-d947d631f7b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbbe56c2-61f7-49fb-a085-7523aa06ff74",
        "cursor": {
          "ref": "86e673bf-ab47-44a9-8ed5-75cccf3e550c",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "4e217b64-9ec9-474f-a892-e01861e9bda5"
        },
        "item": {
          "id": "fbbe56c2-61f7-49fb-a085-7523aa06ff74",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "394c07bb-1247-4a5c-a43a-882bd1fe3df6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2ec96f6-ad06-482f-b400-b4b2abbed764",
        "cursor": {
          "ref": "73257945-a09d-4daf-b822-93bccc804149",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "9cc72c1d-4ec3-411f-a098-1e885c1ac314"
        },
        "item": {
          "id": "e2ec96f6-ad06-482f-b400-b4b2abbed764",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "bbfe5a91-49b1-4e0c-86fc-9bd9d1a77c66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8384bf72-c2c0-4093-be34-f777d535a210",
        "cursor": {
          "ref": "ad96c219-c37d-416a-8776-53ab0f774c59",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e94e7ede-406f-43eb-ba6c-85ecc7a758c0"
        },
        "item": {
          "id": "8384bf72-c2c0-4093-be34-f777d535a210",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ddbdafa4-a784-4979-9908-e63ce861fa74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "916f4718-e26f-474d-91c5-fae4c3f6538d",
        "cursor": {
          "ref": "eb460c0d-3c77-4b37-b716-315258fbf986",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "3012ffeb-2abc-4026-b985-7444aeb901f9"
        },
        "item": {
          "id": "916f4718-e26f-474d-91c5-fae4c3f6538d",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "12ae962b-ad51-479d-808e-093e546eb0ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e40e889-9412-4509-8ae2-68e99e02eca5",
        "cursor": {
          "ref": "85d0ba3c-eb7e-4308-a7e7-9c6b9ee81ae2",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "140a5465-f069-46b4-9152-5e0b2e55f91a"
        },
        "item": {
          "id": "7e40e889-9412-4509-8ae2-68e99e02eca5",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "b8730f88-fc0a-4eb2-98b4-3441970bd1b7",
          "status": "Created",
          "code": 201,
          "responseTime": 2476,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "e77e418a-7f3e-45ab-b7c3-a3c44de872e2",
        "cursor": {
          "ref": "023c22c1-d8b5-407d-a1dc-95333a54525c",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "64c8051d-0d95-48e6-8bdc-a71701338dc9"
        },
        "item": {
          "id": "e77e418a-7f3e-45ab-b7c3-a3c44de872e2",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "0ee256ea-7b1f-4466-9842-294b08543c4f",
          "status": "Created",
          "code": 201,
          "responseTime": 2625,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "33ce8ec7-624e-415e-add8-f8d092ed6570",
        "cursor": {
          "ref": "91e86424-14aa-4416-9031-9caa40f1684f",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "828017d1-feaf-43da-b429-381bf74d0ff9"
        },
        "item": {
          "id": "33ce8ec7-624e-415e-add8-f8d092ed6570",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e95e2734-eacf-4c71-8bae-8a9544b7fe64",
          "status": "Created",
          "code": 201,
          "responseTime": 2623,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "29f0de14-f69b-47d8-ad37-ef88ad2f59c7",
        "cursor": {
          "ref": "cd9ec735-1c36-4cb2-9810-a1c478868b52",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "bc0f6ef7-b2ab-4f2e-98fb-4788bddab588"
        },
        "item": {
          "id": "29f0de14-f69b-47d8-ad37-ef88ad2f59c7",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c83ab2ac-318d-4f5f-90e9-a5a43c4659de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a71875f-49ab-466b-b775-88b2beac77d9",
        "cursor": {
          "ref": "bea093a2-95f2-423f-80dd-8e1b2e13ccea",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "20d895fb-cb0c-4404-ae99-7312318d55e9"
        },
        "item": {
          "id": "8a71875f-49ab-466b-b775-88b2beac77d9",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "f7391528-c09e-47a5-91ba-7bf775b96315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa69308a-4475-48bf-b32e-6505e52c8ce2",
        "cursor": {
          "ref": "b96d8579-412b-4f3b-8bfa-c0b73b16daf5",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "02f5c972-92fa-4b9e-bfc4-7573cb928c85"
        },
        "item": {
          "id": "aa69308a-4475-48bf-b32e-6505e52c8ce2",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "57ed1c0b-f105-4398-bfed-52f2936f2ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef102059-e4de-4017-b16c-8dc7af1abda1",
        "cursor": {
          "ref": "9c09546b-1d63-483d-946c-b055568343ea",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ac523755-b358-445f-a8d0-644b0eac04e2"
        },
        "item": {
          "id": "ef102059-e4de-4017-b16c-8dc7af1abda1",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "b1fe28b2-3f31-4748-92be-0210629ecbbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa7bb43d-2848-4883-b8ad-9d67ae432d54",
        "cursor": {
          "ref": "ae06c4ef-c2e8-4ff3-ada5-9c3502a91411",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "1d993011-a6c1-41d7-9588-6b5e581ce6e3"
        },
        "item": {
          "id": "aa7bb43d-2848-4883-b8ad-9d67ae432d54",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "5271d480-1653-4b5f-9c5a-e04905d0d149",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2bae5bd-ddc3-424a-bd4d-392436698c6f",
        "cursor": {
          "ref": "f0549235-9c28-4106-9228-cf6e669406d6",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "c04b4d72-fa25-4a7e-806e-7fc5eee60322"
        },
        "item": {
          "id": "d2bae5bd-ddc3-424a-bd4d-392436698c6f",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "ba08767e-3369-4633-885c-76830730cb8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f9f6b60-28c4-47b9-bcbd-287aacb1c489",
        "cursor": {
          "ref": "eb303e81-0504-4c8e-b59c-0f0bc4fd295b",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "776f2070-6f3e-4ae0-8008-56780f96021d"
        },
        "item": {
          "id": "1f9f6b60-28c4-47b9-bcbd-287aacb1c489",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "32acaef1-ccac-41f0-b69c-9f93dd00f4b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ddec7d2-59d0-4a9e-a1ae-00f78a57f54a",
        "cursor": {
          "ref": "be174133-875f-4fc4-a202-6d1174bbaca3",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e48280db-94cb-4f3c-bfd4-ce0d5dbfd3e2"
        },
        "item": {
          "id": "8ddec7d2-59d0-4a9e-a1ae-00f78a57f54a",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "c3c9f5b3-009d-420a-a008-1a9133c5b8c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb51acc4-ea2d-4b8c-bbba-ef9548eb5fe9",
        "cursor": {
          "ref": "e8603d38-3a0e-40fc-a00f-636f2eb9e3df",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "17e0ab4f-9d70-449d-95f4-333aa9bcb754"
        },
        "item": {
          "id": "fb51acc4-ea2d-4b8c-bbba-ef9548eb5fe9",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "8929e1e2-d280-41a2-b206-9e8dd958a188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc289858-310b-4e07-a2bb-45a6b18042bb",
        "cursor": {
          "ref": "50b2dacb-45b7-4892-80fd-601ce9219aad",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "502828bb-126d-4f0d-a2e8-00a28d74d8ed"
        },
        "item": {
          "id": "fc289858-310b-4e07-a2bb-45a6b18042bb",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "7de68b2a-8a9b-4a8e-86d5-c95485a19718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7fc6707-2874-4f9b-9e10-3005b8019a09",
        "cursor": {
          "ref": "d0071c18-8fff-4e46-aca8-c3b4ef3c5b54",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "cb1b5dc8-dfd4-463b-8b18-05f9b40f8c03"
        },
        "item": {
          "id": "c7fc6707-2874-4f9b-9e10-3005b8019a09",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "5ad763d9-b7a3-42c5-a2e6-4d31334c1fb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cde6076b-0d5f-437d-91c5-d13f81978c11",
        "cursor": {
          "ref": "45412f9f-a041-4fc6-a2a0-77c11fdada53",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "772ec442-d4ac-45d2-ade0-fadc83782f75"
        },
        "item": {
          "id": "cde6076b-0d5f-437d-91c5-d13f81978c11",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "52331b4c-f947-4492-8bfc-ebd032da6d41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60c121cd-8c1d-4b42-a0e9-7001ee995366",
        "cursor": {
          "ref": "e47c2dd9-9b56-4dd1-9afe-e67f5600fe19",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "47e14774-6403-4b30-8cfd-7fa907edb78c"
        },
        "item": {
          "id": "60c121cd-8c1d-4b42-a0e9-7001ee995366",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "d0faaf69-cbe3-4d27-9d01-c162bc96e1b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9986814a-219b-479f-9f52-9779ae8ef0c7",
        "cursor": {
          "ref": "1600b367-66c4-4783-af88-bcce8a68a882",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "5146ce9b-e34c-48a2-9710-fe4e853f01cf"
        },
        "item": {
          "id": "9986814a-219b-479f-9f52-9779ae8ef0c7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "f0c3b523-17b9-4a46-bfb4-427471096d25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73211f37-7fc6-4f3c-bf28-38f89bb896cd",
        "cursor": {
          "ref": "05eb052c-5c29-40d2-9126-4b6712ee8ee8",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "cd503b2b-1501-4d60-beea-467eb0e4ff6e"
        },
        "item": {
          "id": "73211f37-7fc6-4f3c-bf28-38f89bb896cd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "42e1e2fe-b630-448e-bf39-534126bf812e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b546e112-18c9-4601-a01f-0671680b7303",
        "cursor": {
          "ref": "5e7ed5fa-9480-47f7-afa6-c8b19bf2b2b2",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "05955bcb-5427-4332-9d0b-a33c9a16ae1a"
        },
        "item": {
          "id": "b546e112-18c9-4601-a01f-0671680b7303",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "fea2500a-98bf-49a6-8c4d-4746f4b42bd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae1f8ffd-6512-44ae-b816-2f783852ce30",
        "cursor": {
          "ref": "52773749-e925-4498-a036-d874bcdf2196",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "da81f43c-e5e9-4be2-b38c-c7f4d822856f"
        },
        "item": {
          "id": "ae1f8ffd-6512-44ae-b816-2f783852ce30",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "ee1081d8-ebfc-406b-852f-7637cb03b2e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "390d2bd6-0e46-40a5-806d-152455e3350f",
        "cursor": {
          "ref": "f2b5aa87-30af-4c6c-bd38-aa540ec06860",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "b43db147-1556-4973-8379-ab74d00b5606"
        },
        "item": {
          "id": "390d2bd6-0e46-40a5-806d-152455e3350f",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "5d499169-7b8e-4f5f-b64a-a0f0401436dd",
          "status": "Created",
          "code": 201,
          "responseTime": 1990,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "16c1f0fe-d494-4c03-8ee1-75bf0152c472",
        "cursor": {
          "ref": "f68c82d8-5527-4d53-a675-92a2d5bed8dd",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "c0193a62-0aea-449a-8e32-14738f55684b"
        },
        "item": {
          "id": "16c1f0fe-d494-4c03-8ee1-75bf0152c472",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "0d99b205-a0d0-4296-a1c4-088755b72569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92b0550f-0c96-475c-ad58-a6964af8a49f",
        "cursor": {
          "ref": "a3d8ba2a-33fe-48e1-b9cc-748c923a8575",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "31ffb8c8-8daa-4e66-a82b-707c93e70664"
        },
        "item": {
          "id": "92b0550f-0c96-475c-ad58-a6964af8a49f",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "f8d81b5d-3f2a-45a2-9281-9c193ace8c66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c474af8-d5e1-49bb-ace4-6fecf92f0508",
        "cursor": {
          "ref": "940817c2-cd0c-445d-a331-5449fc382730",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "8521f075-341d-4ba4-b9c5-6758114cab86"
        },
        "item": {
          "id": "9c474af8-d5e1-49bb-ace4-6fecf92f0508",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "b1e47930-e98c-437b-a0a6-c7ebeb1c9a2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2870d57-61a0-48ff-9f2f-3f378b5ca7f3",
        "cursor": {
          "ref": "f0c91276-dba6-4c5b-b6a1-954101f54a2a",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "51f98ac5-58bd-472e-aed2-38c3af83eed9"
        },
        "item": {
          "id": "b2870d57-61a0-48ff-9f2f-3f378b5ca7f3",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "fcfa8139-cdf8-4873-97cf-49a270cbc5d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6dbb07-84e9-4672-b2cd-ae9c382f8d9c",
        "cursor": {
          "ref": "c97b2006-7856-4bc0-b265-0ab0fa3b24d2",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "307f72b4-47a0-4783-8886-50ef86888190"
        },
        "item": {
          "id": "9e6dbb07-84e9-4672-b2cd-ae9c382f8d9c",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "8eebdb99-eb44-4d52-9c57-ba9370823843",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d02b72b2-7f28-4285-8c0f-3a7aeb68f317",
        "cursor": {
          "ref": "6eb8f5fe-3082-49d8-9b6c-a0263ac07632",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "58bcb3a3-0a0a-4987-bf60-c3a2d20a5fe5"
        },
        "item": {
          "id": "d02b72b2-7f28-4285-8c0f-3a7aeb68f317",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "66eb060e-9107-4e74-b44e-d7ccec277d48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d758671d-3f22-4a81-9831-8bc2caa31830",
        "cursor": {
          "ref": "8c07e734-d083-459e-b416-97cb5d203b7b",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "813e64c9-2131-4fba-891e-2f5e342f81be"
        },
        "item": {
          "id": "d758671d-3f22-4a81-9831-8bc2caa31830",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "83f47e74-7c7b-465b-8395-1665c5922f8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00225184-88f8-4029-8300-22e269da514c",
        "cursor": {
          "ref": "bd965f3f-c1b7-47bb-82e9-41298229d201",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "269d00c0-a85b-429f-b08d-c79988410421"
        },
        "item": {
          "id": "00225184-88f8-4029-8300-22e269da514c",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "76b8097f-d8db-4920-bb36-19b849fb2b74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87cf0193-a4c0-4122-8cea-f7a09748ea88",
        "cursor": {
          "ref": "ee6aa83a-fdec-4e4f-adad-faa3ac120188",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "4fa0e6f9-e28c-4d63-8659-0c8bb48ca319"
        },
        "item": {
          "id": "87cf0193-a4c0-4122-8cea-f7a09748ea88",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "ad86cdd2-b60f-41b6-bd8f-7c470cc5e4c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eb8179e-7515-43d9-a43d-200bf8e6e404",
        "cursor": {
          "ref": "8a1a30dc-cb9a-427c-bb47-ed86cc6c6e61",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "84320b5e-3241-4daa-9bed-1fe533cc81ca"
        },
        "item": {
          "id": "0eb8179e-7515-43d9-a43d-200bf8e6e404",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "90c9ef92-d604-4463-9c79-c2c0b1d234ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c29d1d08-e499-476b-8b51-dffef932acf8",
        "cursor": {
          "ref": "63e5e279-3300-4543-a580-b1622932a4c9",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f1604282-7c80-46a7-aa4b-387327272047"
        },
        "item": {
          "id": "c29d1d08-e499-476b-8b51-dffef932acf8",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "db71bdb4-603b-4645-afac-c3f640a113fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7baf251f-8f47-409c-b5be-6d7afbcdb0c0",
        "cursor": {
          "ref": "5df256eb-8a3f-4546-a003-61fb5acd09f9",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "aefe39ee-be53-48aa-800b-6077d5c55880"
        },
        "item": {
          "id": "7baf251f-8f47-409c-b5be-6d7afbcdb0c0",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "0d71c5bd-b3e5-4c54-9c9c-c5a82096ba10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f08473e-0363-419b-896b-2d639281579a",
        "cursor": {
          "ref": "162ca366-75ca-4699-9fb8-571c646446d1",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "eabea748-2ffc-4bd3-a5dc-7b70d9f92bbe"
        },
        "item": {
          "id": "9f08473e-0363-419b-896b-2d639281579a",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "b4b806c8-1ce1-4af1-aa28-aad83919beed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35e1be82-ef71-4ec4-a26f-6f3ae8bbcbd6",
        "cursor": {
          "ref": "0dbdbf9c-804e-49cb-b718-b1c323bc1459",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "e0ec9749-7f1d-409b-9a70-f996fb86dae4"
        },
        "item": {
          "id": "35e1be82-ef71-4ec4-a26f-6f3ae8bbcbd6",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "11f46f3f-2138-49f3-98ad-51300addee4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ab1d8cb-0014-485f-adea-7bc81682384a",
        "cursor": {
          "ref": "9c3afee0-5077-4edc-91dc-77349f89dfd7",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "267ef2b0-ca08-49ea-8b4f-92e202c6c3c6"
        },
        "item": {
          "id": "1ab1d8cb-0014-485f-adea-7bc81682384a",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "73098675-9f71-454c-a280-c128a8d158b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d555296-14f4-44fd-a856-b4fab5f49f6b",
        "cursor": {
          "ref": "64860362-824a-4aae-9c14-3812a4854e8b",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b04bd7c0-4e09-4c0c-865e-d6c7f6f9d947"
        },
        "item": {
          "id": "1d555296-14f4-44fd-a856-b4fab5f49f6b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "72c97afd-add8-484b-8717-2a24e34bbf31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef22bfd9-a3e4-4610-a533-d727dc336467",
        "cursor": {
          "ref": "2839e179-5e6d-4521-8410-ee8421c83241",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "a9ee32e1-a45a-4d4b-9bfb-173f01c63b77"
        },
        "item": {
          "id": "ef22bfd9-a3e4-4610-a533-d727dc336467",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d1a474fa-c993-4ebc-a0f9-8ed22f685304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5c874d8-c7b0-444b-8dee-fbe808ec8d55",
        "cursor": {
          "ref": "5117997d-ab03-4192-8dbd-7f1dd021e4f6",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "794be0d7-6487-44d9-a562-91467860d27f"
        },
        "item": {
          "id": "c5c874d8-c7b0-444b-8dee-fbe808ec8d55",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "6e08ed40-13e3-4624-8212-0e59a15038fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77fd66f7-641c-4072-b117-1b48865298d8",
        "cursor": {
          "ref": "4011efe8-f4fb-492a-8e85-3c88c9abb3a7",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b2afbd5c-06e2-4b87-9168-6ba5c3842c8e"
        },
        "item": {
          "id": "77fd66f7-641c-4072-b117-1b48865298d8",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "6c789b63-1513-4ff4-bd75-acecf235b5ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19481863-91a7-4acf-a501-8661c8571910",
        "cursor": {
          "ref": "b7f57515-fa1c-4295-bb92-a796921f65ac",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "44099159-3b46-43f7-8ca7-b310a2955c2e"
        },
        "item": {
          "id": "19481863-91a7-4acf-a501-8661c8571910",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "0f53c845-df8e-48d3-817c-049934866620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50d3fd26-e988-469d-a8d8-9bb2f57de52b",
        "cursor": {
          "ref": "de94db0a-4544-42c7-b977-c139146dc647",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ceddfbfe-ec9a-4744-a2f0-d43c90ac7543"
        },
        "item": {
          "id": "50d3fd26-e988-469d-a8d8-9bb2f57de52b",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "28e7bbb8-d71c-4729-8e9f-52ec1ddb8a57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba21f9c1-1f39-4b25-b29b-b2767f4dab64",
        "cursor": {
          "ref": "18469fe9-38e9-4e2c-9ada-292371239bb3",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "cea65eba-3a6c-458d-b5a1-42f35de7bf56"
        },
        "item": {
          "id": "ba21f9c1-1f39-4b25-b29b-b2767f4dab64",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "c254ad8b-c304-4b19-bd57-da43bdbce4f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd52a4d3-6c1c-4f11-b012-6a98bae4402a",
        "cursor": {
          "ref": "9a93abf1-713e-4846-ae64-0f16ef7e5211",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "6b6d7629-3fec-4edf-837e-76c700840580"
        },
        "item": {
          "id": "bd52a4d3-6c1c-4f11-b012-6a98bae4402a",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d7b35084-0558-4b3d-a944-5d80969e21c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d1ea821-af0b-44e4-9952-d1fbdbea91b4",
        "cursor": {
          "ref": "84e710cb-895e-40f4-a0f9-e55e6319a707",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "069174a0-b389-47bc-a63e-83e9afb7fa94"
        },
        "item": {
          "id": "9d1ea821-af0b-44e4-9952-d1fbdbea91b4",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "57490b28-6b28-4710-bda5-fa8798af3372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc061906-85d6-45d7-9b6d-a6aa886e9f76",
        "cursor": {
          "ref": "95993ec2-a598-4079-9786-2ebcf2e4d9d2",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "e65b4cd3-f0bf-44cd-869f-62e06ce1b1bc"
        },
        "item": {
          "id": "fc061906-85d6-45d7-9b6d-a6aa886e9f76",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "161f4228-70b3-49e3-804f-5fe7d602b416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39c5e478-afef-4368-836c-74d9f1a36e8b",
        "cursor": {
          "ref": "ab7c3ced-d241-4831-b206-43ab49e9bd39",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "da5789c7-283a-4780-94eb-b9e691101795"
        },
        "item": {
          "id": "39c5e478-afef-4368-836c-74d9f1a36e8b",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "15652fc7-db55-4081-b63e-28a0c744112a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e850d637-6d27-41d2-8627-546b5200b61c",
        "cursor": {
          "ref": "472d1a77-632c-4906-8ee5-7fe1f522c800",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "6e9145ee-9ac4-4750-8822-8b9502f81f47"
        },
        "item": {
          "id": "e850d637-6d27-41d2-8627-546b5200b61c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "5339a00e-64c1-4a03-8baf-fa80597afa2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9e10b03-6139-4e3b-9917-b65fb301cd61",
        "cursor": {
          "ref": "b05ab0c2-cb58-4575-aea2-aff1f67d57cf",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a8804350-3a6f-45c0-9a10-b77767ec7648"
        },
        "item": {
          "id": "d9e10b03-6139-4e3b-9917-b65fb301cd61",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "041f7bbf-5980-4ec3-a2bb-098e1f1a5c34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f77b98ce-b64b-47a1-abef-7cb1b76a36ef",
        "cursor": {
          "ref": "7ee37eb1-f567-4a0c-80a0-161e56425624",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "264ce087-cb72-4556-bcba-7792e8325295"
        },
        "item": {
          "id": "f77b98ce-b64b-47a1-abef-7cb1b76a36ef",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "0aa34f65-647f-446d-b55c-c3353fc75fce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fa50c98-0392-4254-b33d-a7ab035b6027",
        "cursor": {
          "ref": "111d646b-ddba-4c6f-8a0c-93d39cc886a5",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "4d5e9675-5080-4c7c-a563-e3d8de985b6e"
        },
        "item": {
          "id": "7fa50c98-0392-4254-b33d-a7ab035b6027",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "9e70acde-917c-4d15-a693-187ff2e60102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e4963c-9c06-42ac-a8a2-7d6723562326",
        "cursor": {
          "ref": "6170e4c4-9249-4e1f-82e3-c2d005354de6",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "cea87381-2fa4-47dd-bc29-cd8fca1f5ac0"
        },
        "item": {
          "id": "c2e4963c-9c06-42ac-a8a2-7d6723562326",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "614796a0-5d3d-4ed1-b5f3-332b9a80438a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "8249c464-87b7-437c-a773-dae310d92fe1",
        "cursor": {
          "ref": "914d8fc5-211d-4e2f-9c38-b03ba4d7b98d",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "337811d0-892f-4805-8ba6-445424471e22"
        },
        "item": {
          "id": "8249c464-87b7-437c-a773-dae310d92fe1",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "0a224afd-b2e8-4ab9-b96f-049bbe5f467f",
          "status": "Created",
          "code": 201,
          "responseTime": 2059,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "37a9f701-e122-4a68-8b95-5f4d39c6a15b",
        "cursor": {
          "ref": "cd3ddb62-690f-4b2d-a3d3-57ad6ecbb22b",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "1884a6ae-f9ae-4438-b975-34430cc7b89e"
        },
        "item": {
          "id": "37a9f701-e122-4a68-8b95-5f4d39c6a15b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "1b04581a-c87f-47c0-b529-d45f2e69bf31",
          "status": "Created",
          "code": 201,
          "responseTime": 2582,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "de21107d-8891-4907-904a-84ece085f46c",
        "cursor": {
          "ref": "f13bffb1-c203-49e1-b32a-4ccb919621d2",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "65ab9839-b608-43b3-a133-405171db5f25"
        },
        "item": {
          "id": "de21107d-8891-4907-904a-84ece085f46c",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "b1b32988-7b79-4dc8-8bb2-6efe87668c4e",
          "status": "Created",
          "code": 201,
          "responseTime": 2521,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea57f0e-698b-4ae3-b72a-39a7e484969a",
        "cursor": {
          "ref": "b9017dc3-aa61-4932-99b4-c9d2436ddc80",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "3b571181-ea58-46ab-b9b9-88b70af4783a"
        },
        "item": {
          "id": "0ea57f0e-698b-4ae3-b72a-39a7e484969a",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "92a91a01-440d-4c99-81cc-9a9ace256772",
          "status": "Created",
          "code": 201,
          "responseTime": 2526,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0545a4bb-e647-4e72-97fe-b9a579273c8a",
        "cursor": {
          "ref": "856a6ef5-823b-4954-bac5-5588c8f43f65",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "33013beb-4fc5-4297-8575-08d036101c46"
        },
        "item": {
          "id": "0545a4bb-e647-4e72-97fe-b9a579273c8a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e09a9b18-ec32-492e-bce2-e064403dc46c",
          "status": "Created",
          "code": 201,
          "responseTime": 2315,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "af5b0c7b-fc9c-48d4-a258-095e6b901520",
        "cursor": {
          "ref": "1570998a-e2ae-4133-afd7-a054227cf0bb",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "b9f077d0-90af-46fd-8b49-c7296db1834a"
        },
        "item": {
          "id": "af5b0c7b-fc9c-48d4-a258-095e6b901520",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a1010aa5-6095-4756-bdbe-3f1c5d65a5f4",
          "status": "Created",
          "code": 201,
          "responseTime": 2658,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-04-04T00:37:55Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-04-04T00:37:55Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "4c8ed638-d154-4d24-94ba-cbbf05d4e277",
        "cursor": {
          "ref": "3ff178b8-f9a9-46f9-a0aa-2f675ae816b9",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7c4a6158-458d-4529-8927-09fbae897341"
        },
        "item": {
          "id": "4c8ed638-d154-4d24-94ba-cbbf05d4e277",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "2d9936e4-bfca-46e1-9ad7-f4936e8eae7a",
          "status": "Created",
          "code": 201,
          "responseTime": 2898,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57909e49-b1c9-419c-adbc-94768b660e7d",
        "cursor": {
          "ref": "5195a637-b33b-4da2-9b75-e7299bec1389",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "082798d9-a0c0-46c9-9ec8-ec81c50c3b18"
        },
        "item": {
          "id": "57909e49-b1c9-419c-adbc-94768b660e7d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "971d7dc8-a743-4640-a05d-15d2a84fff6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57909e49-b1c9-419c-adbc-94768b660e7d",
        "cursor": {
          "ref": "5195a637-b33b-4da2-9b75-e7299bec1389",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "082798d9-a0c0-46c9-9ec8-ec81c50c3b18"
        },
        "item": {
          "id": "57909e49-b1c9-419c-adbc-94768b660e7d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "971d7dc8-a743-4640-a05d-15d2a84fff6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d92e282-4a78-4cb9-8702-ffbcdef86d52",
        "cursor": {
          "ref": "8efa6a69-c593-443f-a72a-c88bbd70c72d",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2bbfacef-4cd3-45b9-9b9d-3a56d2a9c55f"
        },
        "item": {
          "id": "8d92e282-4a78-4cb9-8702-ffbcdef86d52",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7ecc8399-6f57-46d9-91e6-db224d1cd1ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2042b9d2-6165-4df9-9c71-aeb5ea81f06b",
        "cursor": {
          "ref": "de3ae13e-eab4-4d87-aaf2-c240861b6f43",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c1d8c744-bb1f-41f5-9cf2-aed2878f5d3d"
        },
        "item": {
          "id": "2042b9d2-6165-4df9-9c71-aeb5ea81f06b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7e029b40-2bcf-433e-9c90-1bc16eb48b8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c925a4e-7712-43e7-9723-8d5dbc20d2fa",
        "cursor": {
          "ref": "de311a4e-44b9-4754-a453-97232c8e5b2d",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "ba3265a6-d05d-4c72-89e1-69a12bfb5757"
        },
        "item": {
          "id": "6c925a4e-7712-43e7-9723-8d5dbc20d2fa",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "fad1e382-5d8d-473f-9cec-910788c93bd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f4cc800-6bdc-4b48-9495-96986fe481d9",
        "cursor": {
          "ref": "586e1ef0-ec93-4f5c-8172-307e4aca1d5a",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "3502259f-5640-44b0-b45d-9bd46bf58404"
        },
        "item": {
          "id": "5f4cc800-6bdc-4b48-9495-96986fe481d9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7495db64-614e-4327-9e4e-7ceb666dd075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cecb48c5-342a-418f-9421-85f0a7127118",
        "cursor": {
          "ref": "fd8e3b85-4057-4656-8dfa-81a5f82d58a5",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "197906f0-e57c-4cc8-bd0c-2c83dbd1d17c"
        },
        "item": {
          "id": "cecb48c5-342a-418f-9421-85f0a7127118",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c7622ed3-63c5-49a4-a3bc-005395f2de8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3592e662-f045-4708-b652-38991737c69c",
        "cursor": {
          "ref": "7cec46c0-2eeb-4c98-ba0f-a4101910cd39",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "153e8810-8f2a-435c-93ac-a5672cda54c6"
        },
        "item": {
          "id": "3592e662-f045-4708-b652-38991737c69c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d67aaaaf-9b9f-43f8-8754-31266b6e9040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15d99e25-b939-438c-87b4-f7f4e4bf7de0",
        "cursor": {
          "ref": "30e57f87-677b-4041-a102-f4557dd0bc7b",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "678a310c-6f6e-41f1-a51b-20764e666bfc"
        },
        "item": {
          "id": "15d99e25-b939-438c-87b4-f7f4e4bf7de0",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "baabce32-62da-4024-b2bf-1f3a66e197e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fab6fd40-e0b6-4404-aa90-65a76f914fe9",
        "cursor": {
          "ref": "8f045c38-4159-403c-b9c7-f01611ffdf5a",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "3264b849-e194-42f2-ba6f-433e39ee8e49"
        },
        "item": {
          "id": "fab6fd40-e0b6-4404-aa90-65a76f914fe9",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "fdab3ed3-9279-4700-9eb2-3439e50d9a18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e85fb852-441e-4bcb-bfd5-f532d40d7de1",
        "cursor": {
          "ref": "67cf825a-bebb-4a15-b620-5b6970b0a7f6",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f45f4f10-dab5-41ad-bc0c-19fdb492a8c6"
        },
        "item": {
          "id": "e85fb852-441e-4bcb-bfd5-f532d40d7de1",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0513eb82-b534-442f-8bcd-653253a60a98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d03b33-d594-4271-8b08-0c162f5c0975",
        "cursor": {
          "ref": "76c81677-47a1-4c8d-9cfb-f8d8b32fe6df",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "20bedfab-a493-4407-8c57-0f4575153017"
        },
        "item": {
          "id": "32d03b33-d594-4271-8b08-0c162f5c0975",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ff995b9e-047d-481c-85f3-b60aada0dd88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "179c32f5-fc14-4ae7-8225-0fd0ee712ed7",
        "cursor": {
          "ref": "2d038993-f2d2-4c1d-8cbe-d75faf56c6ff",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "dd9fd03f-616b-4960-9b68-dd3da169da2e"
        },
        "item": {
          "id": "179c32f5-fc14-4ae7-8225-0fd0ee712ed7",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f28ac6d2-0230-4b9e-9294-ade5b862cb91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc4ab319-f2da-4936-a1c6-d08a535225dc",
        "cursor": {
          "ref": "ce164cbc-9408-487e-ac42-cc59d192be80",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "935d1189-ec0a-4181-b548-14bd67fce8ab"
        },
        "item": {
          "id": "fc4ab319-f2da-4936-a1c6-d08a535225dc",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "46cd96d6-b124-44c6-b6ae-45c3ad7601c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10b4dc7f-5cc6-4320-b9f9-f2b8ab4df1b2",
        "cursor": {
          "ref": "6d5ff9bb-340b-47c2-840e-c26b4c3b1a89",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "cf4b8014-738f-4b98-9f88-57575d8454cb"
        },
        "item": {
          "id": "10b4dc7f-5cc6-4320-b9f9-f2b8ab4df1b2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "b150837f-c3ab-4166-a8b5-511bc4b83368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f4f96ab-4167-4af0-be5f-442a521a00ea",
        "cursor": {
          "ref": "4729eaa0-efb1-43b8-8545-178d6152be19",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "eaef00c3-bc4f-4023-a644-8365107f7b61"
        },
        "item": {
          "id": "9f4f96ab-4167-4af0-be5f-442a521a00ea",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "acf6a087-ee0d-46cc-b553-aa28f025c76d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f68c6deb-945e-498b-957f-4f08c3bb7a8b",
        "cursor": {
          "ref": "4fecc7b0-a8fc-4826-9e6a-e98c1f90bb92",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "10fa4132-c86f-4d21-ba25-0fa328f1a9d9"
        },
        "item": {
          "id": "f68c6deb-945e-498b-957f-4f08c3bb7a8b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "991308b7-041e-49ca-984c-2fe0ce2dc54d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29eb31da-5c92-4780-851f-8ec90901cadb",
        "cursor": {
          "ref": "b4143e60-a654-4685-b419-1afc8326beb7",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "f733246b-b82b-44d8-990c-3b08b461bf86"
        },
        "item": {
          "id": "29eb31da-5c92-4780-851f-8ec90901cadb",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "3d07e9b9-638f-4304-aae1-4b1b2750ce8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb8ca80b-9886-4d04-a21c-ccb1d08ee254",
        "cursor": {
          "ref": "eeadef8c-d7e4-4d1c-9a72-a447e72e785b",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "edefa9ea-b2cd-451c-ab41-b022819ff2cf"
        },
        "item": {
          "id": "bb8ca80b-9886-4d04-a21c-ccb1d08ee254",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "dd0e92ef-bc86-44e3-8cb4-ea0ef6c3c265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c1f064f-d5cd-466d-b6a8-60e852fcafa4",
        "cursor": {
          "ref": "51909be0-4427-4f63-beb6-ef5fe76ff9e9",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "c44955c6-f770-4945-a044-10ba328713b4"
        },
        "item": {
          "id": "1c1f064f-d5cd-466d-b6a8-60e852fcafa4",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a7525e8a-448c-4cc0-bde9-119391fb042d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc1ce731-591c-4495-b4d5-be9776263f81",
        "cursor": {
          "ref": "f1aafe58-127d-4bbd-abda-7b7162aca34f",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8e04d284-2fd7-488d-99f3-d8af59aea47f"
        },
        "item": {
          "id": "dc1ce731-591c-4495-b4d5-be9776263f81",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b21a5a22-be48-4472-9605-195c26e9260a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21e2f668-8483-4384-9aa4-d8ffbc2069c5",
        "cursor": {
          "ref": "8617339e-7eaa-4d38-aa6e-925c637966e2",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "7fe6f66b-484f-4aeb-b47d-c7b0c38b0c17"
        },
        "item": {
          "id": "21e2f668-8483-4384-9aa4-d8ffbc2069c5",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5904a104-487d-4d06-827c-9dbe63386652",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47dd0a15-5332-45eb-948e-40a025c26044",
        "cursor": {
          "ref": "0330824a-5161-4b56-8988-338d5429ed9c",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "ac6445ce-28f5-4dce-8286-ef98ba09f561"
        },
        "item": {
          "id": "47dd0a15-5332-45eb-948e-40a025c26044",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1bc8848c-aa84-4022-a9ea-ddf7e21026b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d326bd6-8dd3-494f-9c4e-3ecc1fc3d490",
        "cursor": {
          "ref": "4d0c7300-c940-4215-80a9-636b99acc348",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "cc546a7a-cedd-44ba-9696-ae9e80021da8"
        },
        "item": {
          "id": "0d326bd6-8dd3-494f-9c4e-3ecc1fc3d490",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "bbefa01f-933f-40f8-90b3-7ad271d4553d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ee0fece-797f-43a4-84da-b62142ef765b",
        "cursor": {
          "ref": "9dc9d517-bf03-4891-8e24-db0a9e231e93",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4aac55f1-a341-412d-b56d-d795a391c06c"
        },
        "item": {
          "id": "2ee0fece-797f-43a4-84da-b62142ef765b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "babad28d-5e11-46c1-bcb7-af610d2ff8bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed0f14d1-cc8d-4298-a55d-a1d74cb39526",
        "cursor": {
          "ref": "3d01f145-81c4-40ae-8d4b-8395df508b58",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "2edb4581-fa41-4513-b093-eaf2914b48cb"
        },
        "item": {
          "id": "ed0f14d1-cc8d-4298-a55d-a1d74cb39526",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "1f2a2728-3a58-4700-919f-64151f2fb34d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a610effe-8155-4501-9dbb-7fc5b0401eac",
        "cursor": {
          "ref": "28944667-2879-4267-9121-4bb02ff0df2a",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "a95300b1-344b-42f7-a22b-dd7dea637978"
        },
        "item": {
          "id": "a610effe-8155-4501-9dbb-7fc5b0401eac",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "40c279fc-790f-434a-93a8-08a838cfd2e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e32b5095-39d7-4b85-9f55-d692da4dde27",
        "cursor": {
          "ref": "cf30ea6b-4050-4d89-92d8-3e0747683628",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "6dcdcf61-1416-427f-85a3-23fca3ab0a30"
        },
        "item": {
          "id": "e32b5095-39d7-4b85-9f55-d692da4dde27",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "4ddcc85a-7e03-483e-b5a0-b8545d5c5595",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c173518-5204-4913-b143-98bd79625989",
        "cursor": {
          "ref": "2ff3e38e-0a63-443e-85df-175b3fc0c3c0",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "4d90cd8b-6e83-4a3b-b057-21d7cbf380b7"
        },
        "item": {
          "id": "3c173518-5204-4913-b143-98bd79625989",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "2c448c6c-a7d7-42c1-8858-712ff5383488",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b75c899-b363-4db6-9715-3dc45b82e0db",
        "cursor": {
          "ref": "a63f6751-1ff5-4a21-bd45-e7b7be4ecf94",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "07cbe0ac-1559-4772-9f5e-57d6c2a059f3"
        },
        "item": {
          "id": "8b75c899-b363-4db6-9715-3dc45b82e0db",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "01b3d534-a598-4203-a4cb-f82a8a511cc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee4b0c1c-cd8a-4028-8330-68523810570b",
        "cursor": {
          "ref": "8501e63f-b94b-4581-88a9-b72a0bb436c0",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "547fdab2-6e15-47e3-bc42-29885dda3536"
        },
        "item": {
          "id": "ee4b0c1c-cd8a-4028-8330-68523810570b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7e77933e-8f3d-43f2-a87f-75c964ac7c7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63630fe0-5e0a-4e14-9af9-68494db58a35",
        "cursor": {
          "ref": "a6c9debf-2a35-47da-a3d8-965e90f164d2",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "4d1b41c4-44bc-476c-b266-dcb6a4e7c49c"
        },
        "item": {
          "id": "63630fe0-5e0a-4e14-9af9-68494db58a35",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c8ac4285-5d82-4494-9a4a-f59e86ba533c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb56d699-2663-4e64-a607-8c320696790e",
        "cursor": {
          "ref": "03d6790d-2385-4931-9cec-7b9f3fbc55a0",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "133b826f-f54e-43dc-a94e-b251d326e8d4"
        },
        "item": {
          "id": "fb56d699-2663-4e64-a607-8c320696790e",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "b8a84df8-218b-4da9-b57c-09b5c981660e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb1ea6ec-5b73-4144-941e-bb0952a8dd9e",
        "cursor": {
          "ref": "70c502a4-57af-4eb7-b5de-dc0edf552273",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "a193ba1f-6640-438c-92f9-74998e819af3"
        },
        "item": {
          "id": "cb1ea6ec-5b73-4144-941e-bb0952a8dd9e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "92b5b10c-fc76-4aeb-9439-d3dc7f7a8a10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "11a70a89-3b83-450c-ba61-71a42e3bb64d",
        "cursor": {
          "ref": "4e176fb6-209f-4ed3-8dd7-450ca9630aa1",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "59b537dc-e57a-4f05-b190-9a2647a6f35b"
        },
        "item": {
          "id": "11a70a89-3b83-450c-ba61-71a42e3bb64d",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "40c9b0d1-1d53-49c4-8f1e-26ddaddb72ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "60542ee7-b127-4248-a0e2-951de56e2320",
        "cursor": {
          "ref": "c2eb7995-49f7-49b9-a173-06b419f7b6e3",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "78194e2d-b952-4819-b8f1-84449c1703f0"
        },
        "item": {
          "id": "60542ee7-b127-4248-a0e2-951de56e2320",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "48146618-a254-4941-9603-674dc8f5cd5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60542ee7-b127-4248-a0e2-951de56e2320",
        "cursor": {
          "ref": "c2eb7995-49f7-49b9-a173-06b419f7b6e3",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "78194e2d-b952-4819-b8f1-84449c1703f0"
        },
        "item": {
          "id": "60542ee7-b127-4248-a0e2-951de56e2320",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "48146618-a254-4941-9603-674dc8f5cd5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a0cc067-d18f-4d91-a9d6-b7973bb200ce",
        "cursor": {
          "ref": "61a1e6c7-f3a5-4bb8-a7b9-794672693ce7",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "10e80457-e899-42be-ac87-49bedaee0a70"
        },
        "item": {
          "id": "9a0cc067-d18f-4d91-a9d6-b7973bb200ce",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "8385dd8a-610d-4473-86de-f25d4813603d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92d8337b-310c-45df-a4fc-3b692ea9e864",
        "cursor": {
          "ref": "3ea6ae27-7af2-4695-b46c-79252351fffd",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "c155b959-8783-405e-af5e-dd044ff6d833"
        },
        "item": {
          "id": "92d8337b-310c-45df-a4fc-3b692ea9e864",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "5f746f29-237c-4ddc-bf29-7dd76b7b341f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb3c10e4-4a44-4e65-9e1f-2d375703ecb0",
        "cursor": {
          "ref": "dc93a846-ed4d-4cb5-b868-e6c0b3e9027d",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "5d13f792-067d-49a5-9bb4-9dbd36c429dc"
        },
        "item": {
          "id": "bb3c10e4-4a44-4e65-9e1f-2d375703ecb0",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b8bc8188-3086-4647-a305-2714e13bf7ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "047070c1-38b9-452c-af63-b077314d05a2",
        "cursor": {
          "ref": "84897bff-2e3c-4193-8192-3dde65e5b31f",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "91f9adbb-5ea3-4059-80a9-ecdee1fdee75"
        },
        "item": {
          "id": "047070c1-38b9-452c-af63-b077314d05a2",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "d82dfbd9-0835-49a2-9892-cab9c544a0b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81bd15ed-be12-47f5-9b87-bda88c10c533",
        "cursor": {
          "ref": "b4240624-584d-4926-a11f-3efc32e214f1",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "bca0e63f-80a3-403f-84b5-d1a5551c262b"
        },
        "item": {
          "id": "81bd15ed-be12-47f5-9b87-bda88c10c533",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "1489b5fd-2c8f-4131-bbbc-9d31a6f579bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05626ef1-2520-4241-8acb-eda637f3ec74",
        "cursor": {
          "ref": "b9f71f70-fe07-47db-98c7-19e3e5bd33ee",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "c6c98a2e-6045-4bc5-9558-3840e1aa3219"
        },
        "item": {
          "id": "05626ef1-2520-4241-8acb-eda637f3ec74",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "3009cb26-4ea0-4a33-823d-819e90d542e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d68a0259-e15d-4571-8caa-f1d1d3a26cfd",
        "cursor": {
          "ref": "f0de609b-30f4-422b-a5b0-13d72f6c4d6b",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "ae588841-b89e-48de-a930-ace92893d586"
        },
        "item": {
          "id": "d68a0259-e15d-4571-8caa-f1d1d3a26cfd",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "5eadbcdc-649a-4ef1-9b63-afc08549b6c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "047b1af6-c23a-4477-8593-c6ef1dd51e8c",
        "cursor": {
          "ref": "a4822817-74e3-4dbb-8747-dfded17e8e51",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "7a6b6749-550b-4d6c-914b-589cfec6465e"
        },
        "item": {
          "id": "047b1af6-c23a-4477-8593-c6ef1dd51e8c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "60d7216c-2029-40d4-b8d2-0c71e63f6983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c51eedd-689d-4800-a7b1-707a4ad3704a",
        "cursor": {
          "ref": "3a7c77da-96b9-4329-8771-fcacbfa947cd",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "7da85f7c-f265-4d82-8f2e-756a1bd0874e"
        },
        "item": {
          "id": "7c51eedd-689d-4800-a7b1-707a4ad3704a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d8a64488-2418-46b3-9c80-aea1df9dd583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce0f34ba-7594-4db4-ab62-d6fe3ed5e6b5",
        "cursor": {
          "ref": "b3496e6c-3e0e-47ef-9540-56696b2d46a1",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "7044075e-152c-4340-9024-df5c6a243a91"
        },
        "item": {
          "id": "ce0f34ba-7594-4db4-ab62-d6fe3ed5e6b5",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "d9b2679b-6787-4fad-ada5-6d68301b7cb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c347a4cc-6ba6-4df6-b15d-7090682f40aa",
        "cursor": {
          "ref": "96025d3c-be61-4fd3-8735-ed9c515d888c",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "95dbb8fd-9b4f-4649-b95c-cf35b718b881"
        },
        "item": {
          "id": "c347a4cc-6ba6-4df6-b15d-7090682f40aa",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "8c15a94e-fe8f-4a66-8c9c-4f177ef4fa59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c44d271-c20b-42eb-88c2-b5289a5bc2b9",
        "cursor": {
          "ref": "080dc7fc-4596-487f-acde-00860d4fe578",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "94382d12-44d9-4193-b462-5ffd75bd7ef6"
        },
        "item": {
          "id": "8c44d271-c20b-42eb-88c2-b5289a5bc2b9",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "685ef75c-ee3b-442b-88c0-ba64d6befed7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0101b52c-0f67-4b6b-8415-78bbaaca485e",
        "cursor": {
          "ref": "f5645e72-d530-4a2f-8b5e-7e089b936a7e",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "c2232784-7d8d-428d-bd5c-7f4d9bb1bcd3"
        },
        "item": {
          "id": "0101b52c-0f67-4b6b-8415-78bbaaca485e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "540b512e-7967-4db0-9077-4d49833c42e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cba96f1f-577f-4d6d-b78e-120c91d34c6a",
        "cursor": {
          "ref": "d8711ad9-3d25-4da2-83dd-f5967972ae26",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "cb6b6045-ced8-4ed5-835a-1f5fb9ef048c"
        },
        "item": {
          "id": "cba96f1f-577f-4d6d-b78e-120c91d34c6a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "cd056726-393e-42f8-bcab-6c208fabb536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d62cfcb0-db8c-4f2b-9cdf-9e9ec1369822",
        "cursor": {
          "ref": "b953b2a9-e0c0-43e7-bba6-abf1fc3ce7de",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "202079e8-0cb4-4b9d-985a-3aa1b44b0bb5"
        },
        "item": {
          "id": "d62cfcb0-db8c-4f2b-9cdf-9e9ec1369822",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "b321cf93-629b-418c-bbbf-825ceb4f05a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22cb975a-817a-4d74-8251-cfa162ac4e3a",
        "cursor": {
          "ref": "a82e525c-ff6c-4599-a5ca-a40a9f5e703f",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "94dd4d8f-0b3d-4406-ae1d-3f8035418eca"
        },
        "item": {
          "id": "22cb975a-817a-4d74-8251-cfa162ac4e3a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "cbee799a-647d-4a7b-81fd-74cb73598a3c",
          "status": "OK",
          "code": 200,
          "responseTime": 236,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "8756fd76-8052-43e3-8c69-47fa7ad83307",
        "cursor": {
          "ref": "486a8447-75b9-462e-8468-25d0bdee7d32",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "82f226ca-a581-4544-8ad5-4f741f906e6c"
        },
        "item": {
          "id": "8756fd76-8052-43e3-8c69-47fa7ad83307",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "59226f8c-f156-49bf-a4a4-661e9a3b4d52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21f02c26-a576-4dbf-ad8f-f2a884c976a9",
        "cursor": {
          "ref": "37a2942c-6956-4b82-843a-157c570c67c9",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "fab7e48c-9fed-4a22-90a3-b59e0d3c7274"
        },
        "item": {
          "id": "21f02c26-a576-4dbf-ad8f-f2a884c976a9",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "68d4976b-db5e-46dd-b89d-4295c7067cf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae7b59ce-e22e-42f3-baf2-0fc8d34ca0d6",
        "cursor": {
          "ref": "0bc7a554-e504-4d0e-822b-9722bbeac51a",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "04779886-6dee-40a2-bc82-d5a85c09bd1c"
        },
        "item": {
          "id": "ae7b59ce-e22e-42f3-baf2-0fc8d34ca0d6",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "29ec5293-9b88-4afe-bfba-a96d6e856694",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "356361ff-efdd-48e9-ae49-b2307e4dcd1f",
        "cursor": {
          "ref": "fe95ae48-08ca-489d-b9a2-6180b0373c4b",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ad4aaf72-ad9c-4e8f-97c1-a7bfd1d175cf"
        },
        "item": {
          "id": "356361ff-efdd-48e9-ae49-b2307e4dcd1f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "d7551867-8f8b-4375-9b2b-b7010f58204b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fdbef7e-f9d1-4810-b9cc-e7ca29afbe32",
        "cursor": {
          "ref": "965f50ca-5a26-4997-9334-9e02016c10fb",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9af66430-465b-49b7-9d2d-84ec2b0d5b7c"
        },
        "item": {
          "id": "1fdbef7e-f9d1-4810-b9cc-e7ca29afbe32",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "5401d6e4-6b38-4269-b097-e1f661887728",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab2bf597-62fd-4fc7-85c1-c7d9a21ad3b7",
        "cursor": {
          "ref": "ce29f7a7-2323-421c-9de8-1c02f07f39cd",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "48a9a6f6-dec1-4613-9de1-e339ec750c3a"
        },
        "item": {
          "id": "ab2bf597-62fd-4fc7-85c1-c7d9a21ad3b7",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "b7748dcf-e315-43e1-b908-4c620324f4a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d60eb7c-a205-4eb8-b999-b4338220642f",
        "cursor": {
          "ref": "1d1c8968-700d-44d5-82f5-b278d2d7c6f2",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "aeacdd31-8f22-4769-8698-20214d46e7cb"
        },
        "item": {
          "id": "5d60eb7c-a205-4eb8-b999-b4338220642f",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "cc451d9e-d92e-465f-8dbb-aa1cbe6d2fe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "465c5c22-7590-4da6-bb09-94905a5c1633",
        "cursor": {
          "ref": "38b190b6-0a0c-477a-be4b-7874dc8258e0",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "3e7dddad-8cf6-4a7d-8e59-9140f74cc9ed"
        },
        "item": {
          "id": "465c5c22-7590-4da6-bb09-94905a5c1633",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b4922258-3c44-4e75-b120-444d071e3f37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d9047d9-4d8c-49cd-bf69-8eca482cf8e2",
        "cursor": {
          "ref": "adc3b403-3b34-46f2-b07e-f0c35cbf8300",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "10f6c8d8-6f9e-4843-a7f6-065fdaf6d8b4"
        },
        "item": {
          "id": "5d9047d9-4d8c-49cd-bf69-8eca482cf8e2",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "5d0b4f46-4089-4fa8-85d8-bd687e46ec1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebe97093-a3f1-491e-b275-a698971cc004",
        "cursor": {
          "ref": "71434d57-7da4-4b22-8655-b574ccb55dd4",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c63e50d9-3af8-48e3-bffe-2be442c326f9"
        },
        "item": {
          "id": "ebe97093-a3f1-491e-b275-a698971cc004",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "b2d7a283-5035-4a16-932f-ae69033458be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81637d15-915c-4c8e-8c64-5050616e168b",
        "cursor": {
          "ref": "58add0f0-a9d2-4d67-8429-e7357f73b766",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "a3f53ff1-3f75-43bf-95b0-1a7ee7e07778"
        },
        "item": {
          "id": "81637d15-915c-4c8e-8c64-5050616e168b",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "5ec8dc00-3ec3-4661-9b91-697eff2ed1e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68ad7c36-1f3f-4568-9d35-aaa79ead7412",
        "cursor": {
          "ref": "56a8a923-0622-4792-ba37-818438f3d530",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ab29472f-2a3a-4f73-a3d2-78c96c020647"
        },
        "item": {
          "id": "68ad7c36-1f3f-4568-9d35-aaa79ead7412",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "164f4e0b-ec57-40b6-bddd-53ff39b1b73b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5940336-a82a-4508-89b0-876d62276724",
        "cursor": {
          "ref": "f615043b-8d87-43b9-81f9-41298a33d55b",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "b3835c2e-a2a7-45be-b5e7-94df21f8f0c2"
        },
        "item": {
          "id": "b5940336-a82a-4508-89b0-876d62276724",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "b23c3130-a22c-4f7a-a709-ab9e36a15ddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd623be9-cb2a-4b6b-8adc-cebe03e30aa3",
        "cursor": {
          "ref": "8ff8c83d-53dc-49aa-8f32-170959f8b7d0",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "7f308168-6c6f-4d82-b874-9d8317d4b148"
        },
        "item": {
          "id": "dd623be9-cb2a-4b6b-8adc-cebe03e30aa3",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "c1338ead-876b-44b1-8a1c-94bf2ba476f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f985f4d-b91b-4abd-b67c-1d3a9ca09c0a",
        "cursor": {
          "ref": "7314a383-9e26-4417-a0cb-4e898bf8bd83",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "2589d7c1-39cc-4f4b-bada-4641a0d342af"
        },
        "item": {
          "id": "7f985f4d-b91b-4abd-b67c-1d3a9ca09c0a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "5aa5ce9c-8c37-4c4f-bfa2-61d623c7be0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d85f075-5393-478a-a8be-e6b66ee34ca1",
        "cursor": {
          "ref": "84d470bf-46d6-4b64-a76f-d92df48e5f79",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b93f7e3a-108a-4720-b0f6-8e98002bed2c"
        },
        "item": {
          "id": "8d85f075-5393-478a-a8be-e6b66ee34ca1",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "346f483e-aa57-4f10-a57a-e074c786495b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f07588fd-f57a-471e-8249-590ca031fd60",
        "cursor": {
          "ref": "b8ad5272-87a2-4d47-9fdd-fa2ab69ced69",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b0300873-f1a3-4ef0-855e-03892e0ea88e"
        },
        "item": {
          "id": "f07588fd-f57a-471e-8249-590ca031fd60",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "bede3dce-48e2-4157-abf5-f87f6bad318b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab7dd31b-4aa8-482e-be6f-15bccad6ed22",
        "cursor": {
          "ref": "0113dccb-6ae5-4e30-8514-70be76171f62",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "b83b1de2-fb5c-482f-a5c1-a95369120e1a"
        },
        "item": {
          "id": "ab7dd31b-4aa8-482e-be6f-15bccad6ed22",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "7e356598-eb5a-4f66-8503-3c558e0e1504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2677180-0a8d-42c4-a287-02d5b4ac9f7a",
        "cursor": {
          "ref": "928b9423-7504-47cb-a7ba-21c8f95ea4bf",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "e0ac21eb-0ad5-494f-a013-c4156780bd50"
        },
        "item": {
          "id": "f2677180-0a8d-42c4-a287-02d5b4ac9f7a",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "52bea0b6-7979-469a-a11e-0831e755445e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bc01d0a-cac4-4ca6-b3db-2c5f6ddd127a",
        "cursor": {
          "ref": "4c21dd6d-757f-4e79-861a-8606d0ba354c",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f9861700-1939-4606-9f85-4f89681ba02b"
        },
        "item": {
          "id": "1bc01d0a-cac4-4ca6-b3db-2c5f6ddd127a",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "82fcad91-7924-481f-be90-afd873cb9c02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e13316ee-2241-4da9-a0cb-78ca04eb696c",
        "cursor": {
          "ref": "dde68742-99e5-46ef-83af-35ac6cc83816",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "ad42bf39-5b2e-4db7-8f19-9b3398a61629"
        },
        "item": {
          "id": "e13316ee-2241-4da9-a0cb-78ca04eb696c",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d4528297-938b-4c78-848d-51d94e44e4c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f10a122f-553d-4b3d-80eb-573a5f5bbd5a",
        "cursor": {
          "ref": "6a405eda-3d68-44d5-95f0-2c3d95faebda",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "84ba5a5c-409b-424f-9b83-fd03e572a096"
        },
        "item": {
          "id": "f10a122f-553d-4b3d-80eb-573a5f5bbd5a",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "f02c7808-d036-49bb-80ed-23ce4676bf0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6712df0b-d22f-48da-98cc-fbb2a1bd34c9",
        "cursor": {
          "ref": "fd2473be-4a75-4cac-80e9-23015d239fb0",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "696bd192-56e3-46fa-b81a-f0045ed3c53c"
        },
        "item": {
          "id": "6712df0b-d22f-48da-98cc-fbb2a1bd34c9",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ef0190bc-a043-4432-87ef-ac70c5bb8074",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17fba36-2577-4ef6-a904-ec85cf62f7f1",
        "cursor": {
          "ref": "0396cf49-1d88-47c8-a465-b5d726f37b10",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "0a393e06-d6ff-454c-b105-2e93a4262d40"
        },
        "item": {
          "id": "a17fba36-2577-4ef6-a904-ec85cf62f7f1",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d09fe1ce-d764-42d4-a2da-a90e93ffdfd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fdc6ecd-959c-4225-a6a5-9260cf1cc12d",
        "cursor": {
          "ref": "fe16b46f-4305-455f-aeac-ef1105a4eb7d",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "04e659cd-12e0-4739-a1e0-6db2dc247d5b"
        },
        "item": {
          "id": "1fdc6ecd-959c-4225-a6a5-9260cf1cc12d",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "e5f017e5-672b-426b-a7ae-dab5d9cd3e75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45cf12dc-e16b-4863-93e2-0a9688040ec4",
        "cursor": {
          "ref": "478bfcda-c662-4079-bb83-a67e11aa7704",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "198d8b3a-1ded-420c-b215-3962ed6128dd"
        },
        "item": {
          "id": "45cf12dc-e16b-4863-93e2-0a9688040ec4",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "c90fc90e-f189-4dac-b2a5-f52cc1651f94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01a5de98-21ab-42d3-9d42-a05fdf8f23d2",
        "cursor": {
          "ref": "597e99e5-2a3e-43c4-be13-6f56b8ed6436",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "977efea7-5dc6-425d-aad7-8234b770b55c"
        },
        "item": {
          "id": "01a5de98-21ab-42d3-9d42-a05fdf8f23d2",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ffa4ecc7-6c95-478c-9fc1-ef595d71d30a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b1e2e90-880b-4c38-84db-3d7188a63ab0",
        "cursor": {
          "ref": "0608b052-49a9-47ee-aafc-83ee6e55412e",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "f3dca3d2-1c78-40fa-b26f-abf12d351971"
        },
        "item": {
          "id": "3b1e2e90-880b-4c38-84db-3d7188a63ab0",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "f9e37168-67cb-4336-9292-f83728d6848f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b0b4070-5737-4e40-9564-708d61856642",
        "cursor": {
          "ref": "e2657685-6106-4cbe-873e-b03f0ba19885",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a2c7a4b7-0a63-4e0a-bfce-97f38c8bb49c"
        },
        "item": {
          "id": "7b0b4070-5737-4e40-9564-708d61856642",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "bb1298d9-e76a-4d08-8e02-d9947ffc087d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b46695c-8b39-4b20-a43b-77db1a54464c",
        "cursor": {
          "ref": "2baf9595-c6f6-4c2b-8bd7-4e9d613a0163",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "85cdf09b-dfdf-4920-990a-734a180eef34"
        },
        "item": {
          "id": "8b46695c-8b39-4b20-a43b-77db1a54464c",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "bead4e49-55dd-4a98-abee-467638aa954d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8f408c4-6faf-40a4-88db-b616f89d48ce",
        "cursor": {
          "ref": "22b5eb1e-ef93-49b2-9324-25bbe2c6cb99",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "82948550-ac79-4fcd-a44d-47f0ccbfbf9e"
        },
        "item": {
          "id": "d8f408c4-6faf-40a4-88db-b616f89d48ce",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f7049ee7-a0b8-471e-817b-6306d53a1968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d95fc44-aebe-43d1-8e6b-8f59a2a2558e",
        "cursor": {
          "ref": "56920cdc-33bd-4d7b-98fd-2fefb77b1b7a",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "6610037b-8e43-4b85-b014-bab26bf57cca"
        },
        "item": {
          "id": "4d95fc44-aebe-43d1-8e6b-8f59a2a2558e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "ea61fbc1-a9f4-433e-9f48-d14970f729a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "115dbb99-193a-4484-b621-197cbcaf5007",
        "cursor": {
          "ref": "53afd0bb-f5ce-477f-bc93-b690b435cb2b",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "a27bd668-462a-44cb-9402-8b53ffc312a2"
        },
        "item": {
          "id": "115dbb99-193a-4484-b621-197cbcaf5007",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ff125589-4e3b-4e51-8d55-fe807fde47e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0c8386a-8f09-4f69-881a-de3dc0ca8f5e",
        "cursor": {
          "ref": "078176f4-0dd0-41c2-a3cf-96eb7085ffa1",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "0daef736-7462-4ed6-afa6-affacd7d3e6f"
        },
        "item": {
          "id": "d0c8386a-8f09-4f69-881a-de3dc0ca8f5e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "3edff490-307b-40ad-b106-a9f12cfd8532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "863794f3-3755-4dbf-989c-b1d092a5c31d",
        "cursor": {
          "ref": "5dfae338-6609-47a1-acfe-af11a4e21ce6",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "28791597-4be2-4df5-a2f5-85aaa4a9b7fb"
        },
        "item": {
          "id": "863794f3-3755-4dbf-989c-b1d092a5c31d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "7970a209-af94-4179-b58a-f474eb01c4d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccd424c3-bd92-4a5b-9b48-0916d8141b2c",
        "cursor": {
          "ref": "01e76a46-e327-427d-946d-962101d9bfe0",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "9680a80c-b891-4862-a3f1-eea2c420f7cd"
        },
        "item": {
          "id": "ccd424c3-bd92-4a5b-9b48-0916d8141b2c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "33775cd6-064d-4d05-8650-d0caf93a12e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94502975-218c-47a6-9460-7fb3710f6d53",
        "cursor": {
          "ref": "c04d1d2c-4a39-44a0-befb-85200effbe1b",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "6a5be72d-25b5-4f0c-b6e0-8634f223d438"
        },
        "item": {
          "id": "94502975-218c-47a6-9460-7fb3710f6d53",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "aa64b348-8172-4094-b439-c1ba6f524318",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31fa2755-1082-44d2-9e36-e3971bc48b4e",
        "cursor": {
          "ref": "c7549b9c-b76d-4c9b-8683-a86bb375099f",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "90d8501d-43f0-4edf-88c4-661aebd266e1"
        },
        "item": {
          "id": "31fa2755-1082-44d2-9e36-e3971bc48b4e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "1355b2ef-188b-436f-a223-1726b960b4e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a1fa7d-3852-4040-9c3e-b477cc30f2e0",
        "cursor": {
          "ref": "d4f742c5-7267-448f-9325-6498096af3fa",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b631473e-eb48-4a0f-a1b5-da28f5958b91"
        },
        "item": {
          "id": "a5a1fa7d-3852-4040-9c3e-b477cc30f2e0",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "6f5b2294-6105-4452-9bdb-5741ed20495c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "493b9cdc-6ad9-4139-95b3-d0db844241ea",
        "cursor": {
          "ref": "f0d73f96-4b35-4093-9cfd-88f0a7415103",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4c2d73ee-265e-47d5-ab9e-9f86247ad944"
        },
        "item": {
          "id": "493b9cdc-6ad9-4139-95b3-d0db844241ea",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "497d05ea-7d66-4299-b427-64b08944d646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d38feb9e-52d6-44de-8ff8-afeb1400bb8b",
        "cursor": {
          "ref": "63027758-a92f-448a-8794-d38bc4b9e76a",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "87c8d4be-fb42-4015-8652-7076cff840f4"
        },
        "item": {
          "id": "d38feb9e-52d6-44de-8ff8-afeb1400bb8b",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "1ad83a87-73fe-41be-8b20-4d2c66331ea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b916cc26-0b83-4a63-8798-fbd1b884c73e",
        "cursor": {
          "ref": "35e3d475-68b7-46d3-9555-0acbf2c16ee8",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b6eb6276-ad07-425c-ae2e-938112cb52ec"
        },
        "item": {
          "id": "b916cc26-0b83-4a63-8798-fbd1b884c73e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "384fcf09-2d62-408c-a988-5882f1fe685e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e63723-3a47-40b9-9472-4260488a92e8",
        "cursor": {
          "ref": "1f9bbf17-5e57-4d47-a2a0-a910a5aff631",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "cb2ac72e-f0b4-4a35-9684-af4bd9a3b167"
        },
        "item": {
          "id": "a0e63723-3a47-40b9-9472-4260488a92e8",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "662c37ce-03de-4c5c-b45b-5e2d11f0c004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e845d9c8-d3f2-428b-b226-7433eafef6e6",
        "cursor": {
          "ref": "283aa5c6-002a-4e9f-9919-a081f37e5337",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b96bdc47-e06f-4aa5-a2de-600153930133"
        },
        "item": {
          "id": "e845d9c8-d3f2-428b-b226-7433eafef6e6",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f0b47367-5960-44b4-b61a-f8feb075eba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e28f8e-2504-4239-84c6-5c5fc4a1fa4e",
        "cursor": {
          "ref": "ba178c35-6ec3-4e86-89fe-f11bc9974adf",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "04437482-608d-4a2c-ab14-75520a476c6a"
        },
        "item": {
          "id": "94e28f8e-2504-4239-84c6-5c5fc4a1fa4e",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "24219ed2-958f-42b2-98b3-6419be5a0da1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2725f4ba-719d-476c-b134-078fcab7a350",
        "cursor": {
          "ref": "459709d3-aeeb-4785-a604-d28111090b39",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "cde02084-546f-4969-9846-427467878383"
        },
        "item": {
          "id": "2725f4ba-719d-476c-b134-078fcab7a350",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c7b48cc0-dcff-4bc6-acda-2f1b7cc04047",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "412850f8-6218-410d-a997-e3e29499d1aa",
        "cursor": {
          "ref": "4c1c9296-5223-4052-95dd-353b0d0a53cb",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "af2e88b6-8c4d-4077-b9f5-db7f3e384213"
        },
        "item": {
          "id": "412850f8-6218-410d-a997-e3e29499d1aa",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ae85b31b-fea9-4a16-9656-95413108d7de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "084f1938-0ff6-4d0f-a7d3-f05c63c7bd84",
        "cursor": {
          "ref": "2142b46c-345d-4ec5-b037-68d9f37b8ce9",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "35c26198-87a9-4dbe-9a98-2f4844fdddc5"
        },
        "item": {
          "id": "084f1938-0ff6-4d0f-a7d3-f05c63c7bd84",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0f8da923-874e-4b78-8fba-7fc98cb060d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "543efcf1-21a3-470d-801e-0a8b04ef24be",
        "cursor": {
          "ref": "074d88a7-cd05-4d5f-a465-3e59f4f81301",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "78888c99-4867-47c3-b812-6986b4daa5d0"
        },
        "item": {
          "id": "543efcf1-21a3-470d-801e-0a8b04ef24be",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "8a0019e9-d239-4b3f-a759-f564286cc655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f37d780f-5bdf-4607-8612-e0d8ef72fcbf",
        "cursor": {
          "ref": "c32655f9-d484-494b-8ef3-358a9af8e33a",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "5210515f-234d-4684-a0f0-5edec84ce5fc"
        },
        "item": {
          "id": "f37d780f-5bdf-4607-8612-e0d8ef72fcbf",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e4bb96b6-f841-47c6-8023-661d3e30f96f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f85cd642-570b-41ef-b0dc-599b328ca957",
        "cursor": {
          "ref": "ba2d0447-dea6-4270-8e7c-79c8836d9a91",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "21d2e6e0-4b43-4e63-81f3-7efe9b216fca"
        },
        "item": {
          "id": "f85cd642-570b-41ef-b0dc-599b328ca957",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "55c0e071-f556-4c75-970f-1599c1243d71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef51a16-553e-4b8f-a686-d43f33a4e938",
        "cursor": {
          "ref": "f0bd6c40-6f4c-4070-aeb1-0e92bd13a6f5",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a068e4b0-6567-4b3c-996c-7eb96cd0ffcc"
        },
        "item": {
          "id": "8ef51a16-553e-4b8f-a686-d43f33a4e938",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "7699178a-2bbe-426f-9764-934866f28fc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7a55103-051f-44ca-bc31-c28e3a63e26b",
        "cursor": {
          "ref": "fba6e574-dce9-4499-98df-9e6bb5a98dad",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "c2ed597e-54c1-4d11-867f-e463a7bca928"
        },
        "item": {
          "id": "a7a55103-051f-44ca-bc31-c28e3a63e26b",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "ff51ac9d-79a7-4fcd-830f-c70bba9a881e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "161791db-3ea2-409e-9e67-efbce8339426",
        "cursor": {
          "ref": "cee87c19-fc80-460f-8a3d-911a177c5a5f",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "1ef4a055-19f5-4718-a206-6e3f56be852e"
        },
        "item": {
          "id": "161791db-3ea2-409e-9e67-efbce8339426",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "1b991cd7-7720-48e7-965f-e766b22c416b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80c9bb62-b2d4-4c93-b978-98489b3999b3",
        "cursor": {
          "ref": "793c3660-bc09-4e4d-8376-98f5c69686e3",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e1cebb9e-bd78-4324-91f1-b6d71e9964ab"
        },
        "item": {
          "id": "80c9bb62-b2d4-4c93-b978-98489b3999b3",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "8796c802-5361-4639-9b24-bf7f784235fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63e94b76-a4ae-4a8b-b220-adfdd6e7dd3e",
        "cursor": {
          "ref": "a9e50c1d-4fcd-48b9-81f0-602f979ef834",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "28ad4180-fe86-4b14-a7d1-53e5eef825e2"
        },
        "item": {
          "id": "63e94b76-a4ae-4a8b-b220-adfdd6e7dd3e",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "f500a61c-c92f-4f39-a60d-4fa41c215502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa154f44-4467-4901-a6f0-f2e71500a288",
        "cursor": {
          "ref": "ee435c05-2528-4419-a6a8-88129f31284a",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "784d3e83-c015-4077-81e5-f04cbb18a569"
        },
        "item": {
          "id": "aa154f44-4467-4901-a6f0-f2e71500a288",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "263c48cf-5a95-4de2-bbb7-4d780f1dcd8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "148b63b6-3b1e-43b2-9331-10aa2a7db4dd",
        "cursor": {
          "ref": "5396c3e8-88d0-4016-8af8-32d274d93953",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "fda1bdbd-c678-455e-bc96-830cd3c9baa7"
        },
        "item": {
          "id": "148b63b6-3b1e-43b2-9331-10aa2a7db4dd",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8fa7640c-aa68-4c6d-a32b-605a91de1f6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "578bcf91-4412-4d35-8ed6-4c7d031a9a5c",
        "cursor": {
          "ref": "0ad2d533-72fb-4b45-be09-fc8229e43513",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "9a6a35f5-2cd2-43f0-b5e1-04a3d446d90b"
        },
        "item": {
          "id": "578bcf91-4412-4d35-8ed6-4c7d031a9a5c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "eae70ded-3ece-4b9a-b276-9e6545373ecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc3f4155-38b2-4832-99b0-8b09381139dd",
        "cursor": {
          "ref": "43a7977b-e97a-4b2b-bc47-0f6b4aba0730",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "f876ab55-17d0-49af-9322-b827e7813bb0"
        },
        "item": {
          "id": "cc3f4155-38b2-4832-99b0-8b09381139dd",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "464280fe-4706-4c1c-894d-487c45f2e2d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89c1c43f-ec5c-4a5b-b67e-30561f1783fa",
        "cursor": {
          "ref": "8bdf7c58-4ed5-4a22-9a5c-812575edbf73",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "1fe3d69b-4e20-498b-834d-cd804b248046"
        },
        "item": {
          "id": "89c1c43f-ec5c-4a5b-b67e-30561f1783fa",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "a8a15197-47ec-40eb-b607-11b7d6cbb133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cdf8f70-f731-496e-b562-705c5a09216a",
        "cursor": {
          "ref": "2579af73-1d34-4efd-9196-765ca3382f89",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "80caabd5-a05e-423d-ac6c-09ef5a7a8355"
        },
        "item": {
          "id": "8cdf8f70-f731-496e-b562-705c5a09216a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "1ebd07c4-f27d-4512-998a-d64605ec092d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce02cb70-a28b-48c2-b4a3-9e3c02b7e2ff",
        "cursor": {
          "ref": "b12dbf7e-21ef-4e0b-abe5-fe7ae157583c",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "d9d8d6e0-2a8b-4846-99ed-88b68eb9f03d"
        },
        "item": {
          "id": "ce02cb70-a28b-48c2-b4a3-9e3c02b7e2ff",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "af710ae6-5f13-47d5-9655-db7e9f8231e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ee4d6a8-d124-4e6d-b85e-73638bba07a4",
        "cursor": {
          "ref": "7c88919e-7e5f-4cd3-9768-742e7d0d30df",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "1b185c4e-8a52-47fd-bdd9-ccc1d914890e"
        },
        "item": {
          "id": "4ee4d6a8-d124-4e6d-b85e-73638bba07a4",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "bb48fa6b-6894-4319-ba67-53538ea83cd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af8d7d2f-e285-4625-99bd-d63190d44ee7",
        "cursor": {
          "ref": "ddd766f1-4bd6-4064-a96c-10c7071ecc6d",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "462d8efa-068e-4ab2-a9fb-666311aae4f3"
        },
        "item": {
          "id": "af8d7d2f-e285-4625-99bd-d63190d44ee7",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "9e468daa-3393-4489-9eff-14194d32716b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fba9e301-a889-468f-917a-c6ccbf7fd55c",
        "cursor": {
          "ref": "d72bbbed-a6f9-4afe-926f-e4c32ea99d09",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "1c07a2d0-ad6d-4978-bafb-4259834a8178"
        },
        "item": {
          "id": "fba9e301-a889-468f-917a-c6ccbf7fd55c",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "cb56e071-90bf-417d-8ec8-d68f60ba1096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6f3b199-a0c4-4850-8673-72007c6e3cba",
        "cursor": {
          "ref": "863d44d4-6ad8-40f8-b659-ef67705d5d45",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f388afde-fe19-427a-a1de-083af6ee14f0"
        },
        "item": {
          "id": "a6f3b199-a0c4-4850-8673-72007c6e3cba",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "088012dc-4f72-449f-9581-321153fcb8ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f64f47f1-f270-4a93-983f-4685be7a0749",
        "cursor": {
          "ref": "2534ea80-bd53-498f-b907-32d9d415f468",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "bd653826-763b-406e-b5c5-12abeb289308"
        },
        "item": {
          "id": "f64f47f1-f270-4a93-983f-4685be7a0749",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "c4819ee7-c9b6-4474-9995-03fc08dc4e87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed6a893d-b751-466c-8de7-f526c9655e71",
        "cursor": {
          "ref": "9ee65c04-a6aa-4450-859d-9fbab98b06ef",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "682af833-bc8c-47e9-89a2-a7d23cc8ae29"
        },
        "item": {
          "id": "ed6a893d-b751-466c-8de7-f526c9655e71",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "6c530bdb-adde-4446-ac27-82ba1d0e4e8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "185f6816-2e15-4ee6-bf20-bd3635e2aa08",
        "cursor": {
          "ref": "39a12ec9-b8ae-4a7c-8346-b78c65868550",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "7dd29f9b-2a6b-43a8-a612-da366fcd1856"
        },
        "item": {
          "id": "185f6816-2e15-4ee6-bf20-bd3635e2aa08",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "50f78b94-6a1b-4245-8065-cf04b34f5038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d02792b0-11ef-43c6-8f88-5d6e7a424c50",
        "cursor": {
          "ref": "69a8cc5e-a59f-4f4d-9e34-634b2bd983ec",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "a9a8bb89-8643-465f-bae9-c2255930dd7e"
        },
        "item": {
          "id": "d02792b0-11ef-43c6-8f88-5d6e7a424c50",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "652232b7-6b64-4c4c-9ea0-126fe7c34822",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "103dc5a6-f649-451c-a4aa-53368e8fb783",
        "cursor": {
          "ref": "7131a371-6449-4185-8deb-057b38fb361d",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "8f5bfbb0-2122-4320-a8b9-52a0224fdb02"
        },
        "item": {
          "id": "103dc5a6-f649-451c-a4aa-53368e8fb783",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6ef14827-92d7-480d-bd2f-5e0cfdbec6af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab5e232d-13e9-418d-a07d-a6026c9f464b",
        "cursor": {
          "ref": "d87dc229-4b8f-4fd1-9b95-03604abce473",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "1d7c54c8-310c-4f6d-a68d-95be1260219b"
        },
        "item": {
          "id": "ab5e232d-13e9-418d-a07d-a6026c9f464b",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "3bf8f1b0-72fe-41d3-adb7-dd3930277cf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ff66acc-30c1-4868-acdb-ae7a6fe4c96d",
        "cursor": {
          "ref": "190fdbbe-a187-4ffa-baaa-c9ee38085d6d",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "907bc84e-3f56-41a6-9f2a-c342b61ace00"
        },
        "item": {
          "id": "6ff66acc-30c1-4868-acdb-ae7a6fe4c96d",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "72fcaaed-15c5-4b6a-81b8-7139d42f7b0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db60a7dd-07e4-4671-86cf-1d541a91904f",
        "cursor": {
          "ref": "b7963e8c-2a33-46ba-8afe-5e4b1dba3a72",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "962d18cf-a896-43dc-aa10-4c290f26ffff"
        },
        "item": {
          "id": "db60a7dd-07e4-4671-86cf-1d541a91904f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c310dc14-a753-4141-95d4-b7f732fb2a92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efd1890f-d161-402b-ae9c-5424049c1c17",
        "cursor": {
          "ref": "cac443ec-a9b0-4be0-b79a-54cefe6a86b1",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "870db482-dbbc-4403-a285-eeb812b39658"
        },
        "item": {
          "id": "efd1890f-d161-402b-ae9c-5424049c1c17",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "617d1ee9-ea9e-48af-b5d5-4d41eccb85bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6f5d182-38aa-48d4-b0e5-5d9e1fd44fbf",
        "cursor": {
          "ref": "9fdc7668-8f4a-4cf5-91e5-e78c98a4f0ce",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "9bb4790b-2d2f-4c03-b3a1-0358fc9f6c68"
        },
        "item": {
          "id": "e6f5d182-38aa-48d4-b0e5-5d9e1fd44fbf",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "9e7bb24b-7889-49d8-b676-55c25e1f1502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63db3aaa-5358-416a-9b27-e9b506b4666d",
        "cursor": {
          "ref": "441b854a-359d-40ac-970f-cf790c1f68da",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "636411a3-0e67-4518-beb1-17e9737a6bce"
        },
        "item": {
          "id": "63db3aaa-5358-416a-9b27-e9b506b4666d",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "822676f9-71b0-4ff6-9148-2a6d5d859167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "946baf65-ad14-42cf-a1c1-6b673c4f0974",
        "cursor": {
          "ref": "228f6d64-35ae-4a84-a3ed-8cc34041f245",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "e23278af-bc8b-4653-ac0f-ce47eca880fa"
        },
        "item": {
          "id": "946baf65-ad14-42cf-a1c1-6b673c4f0974",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "bca11705-d61c-4389-8774-8587fb15b194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ff3539f-f608-4a11-bec1-7a67cb560ad7",
        "cursor": {
          "ref": "958fceb5-4002-4c1f-ab29-59989e1669c1",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b7ea8a03-5b81-4b16-9df7-90d0b1aa41a3"
        },
        "item": {
          "id": "5ff3539f-f608-4a11-bec1-7a67cb560ad7",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "e5f03bbc-2b56-45eb-b851-47cd3ee8cfc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68cac7e6-62f6-44c0-9d82-0c804a197f21",
        "cursor": {
          "ref": "ed410481-f9f8-478d-8640-b077119176bf",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e1280208-b491-4f7e-9446-bf27d63cadfe"
        },
        "item": {
          "id": "68cac7e6-62f6-44c0-9d82-0c804a197f21",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1bb91f7e-6d28-4a17-92da-90da4739ef28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "e4d34fa9-ae80-47a9-9e6c-7ca3b3dec7ee",
        "cursor": {
          "ref": "a0cd352a-0aeb-4ad8-8175-028f60e6d4e2",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "1dc7dc2e-513a-453d-b73d-84d48efc17ef"
        },
        "item": {
          "id": "e4d34fa9-ae80-47a9-9e6c-7ca3b3dec7ee",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "1713e0f2-731f-4d0d-94e2-30607e444c64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "92f39203-1b51-4223-8610-b5fef755d26c",
        "cursor": {
          "ref": "ebf927c2-0be3-4739-8e42-afd02798ddbc",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "f7b9e2a9-50a0-47bc-b168-2ce7939669f0"
        },
        "item": {
          "id": "92f39203-1b51-4223-8610-b5fef755d26c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "78b96842-0101-4021-bb93-68ab759390c9",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1710602-2eaa-4f73-b8b2-5ca834d67d1d",
        "cursor": {
          "ref": "bcb878ec-a9c4-4b1a-88ac-0a3c5b975e2e",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a87d3692-6563-4abb-9941-9328b24d86a6"
        },
        "item": {
          "id": "f1710602-2eaa-4f73-b8b2-5ca834d67d1d",
          "name": "credentials_verify"
        },
        "response": {
          "id": "d11e9e3d-8c2e-424b-8caa-905082e688bc",
          "status": "OK",
          "code": 200,
          "responseTime": 3239,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f4ddcc9-b7bf-4ebf-82b7-4931424b2dcb",
        "cursor": {
          "ref": "1a442ac5-5bd1-4614-977f-26792d9b2359",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "e2abaa51-81e6-4bca-8f3f-67d9d50886d7"
        },
        "item": {
          "id": "1f4ddcc9-b7bf-4ebf-82b7-4931424b2dcb",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "53e46367-ab1d-4f9c-a683-4ef34458c0a3",
          "status": "OK",
          "code": 200,
          "responseTime": 2459,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "4defe09b-e0b6-4861-898a-16ed531a1ae6",
        "cursor": {
          "ref": "22bce553-4550-442c-bfc1-5fd09d8dcee7",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f8a99ad4-1b69-47b4-80c3-de57465069b2"
        },
        "item": {
          "id": "4defe09b-e0b6-4861-898a-16ed531a1ae6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "caa99c27-ebe4-4729-8edf-3a060a7dc319",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "4defe09b-e0b6-4861-898a-16ed531a1ae6",
        "cursor": {
          "ref": "22bce553-4550-442c-bfc1-5fd09d8dcee7",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f8a99ad4-1b69-47b4-80c3-de57465069b2"
        },
        "item": {
          "id": "4defe09b-e0b6-4861-898a-16ed531a1ae6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "caa99c27-ebe4-4729-8edf-3a060a7dc319",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "4defe09b-e0b6-4861-898a-16ed531a1ae6",
        "cursor": {
          "ref": "22bce553-4550-442c-bfc1-5fd09d8dcee7",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f8a99ad4-1b69-47b4-80c3-de57465069b2"
        },
        "item": {
          "id": "4defe09b-e0b6-4861-898a-16ed531a1ae6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "caa99c27-ebe4-4729-8edf-3a060a7dc319",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "b91dbc29-b33b-47dd-80e9-bb0b6390ca92",
        "cursor": {
          "ref": "8178e48f-4334-4017-b409-4976c09f0da6",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "5dae0e79-c247-4a3e-9e8b-88f1bd0b6d89"
        },
        "item": {
          "id": "b91dbc29-b33b-47dd-80e9-bb0b6390ca92",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "47d6fbed-d0d2-4421-9863-8b1b5333f4ba",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "13deb5aa-6200-46de-8a09-911dea7fd53d",
        "cursor": {
          "ref": "98ff8096-1228-45f8-a6d2-eacdb0a37e92",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "9a73d469-b50b-4674-b10d-223f229e3954"
        },
        "item": {
          "id": "13deb5aa-6200-46de-8a09-911dea7fd53d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e1947a09-5e5a-4c43-80d2-06d2c444be83",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "13deb5aa-6200-46de-8a09-911dea7fd53d",
        "cursor": {
          "ref": "98ff8096-1228-45f8-a6d2-eacdb0a37e92",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "9a73d469-b50b-4674-b10d-223f229e3954"
        },
        "item": {
          "id": "13deb5aa-6200-46de-8a09-911dea7fd53d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e1947a09-5e5a-4c43-80d2-06d2c444be83",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "c738017e-3614-4359-a806-6b7374e33af5",
        "cursor": {
          "ref": "45d7f1a9-74d0-4d0b-af0a-cb453738750d",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f5eb6a14-963c-49b4-afad-61a42fbe5a27"
        },
        "item": {
          "id": "c738017e-3614-4359-a806-6b7374e33af5",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "4f32604e-306a-48cb-a88b-b2b2616a7b5a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 121,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "d4681878-05c6-4a77-8826-d64afacd20a8",
        "cursor": {
          "ref": "f0117aaa-db8e-4a12-bc26-341a0b84b863",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "d470ad50-a4ad-456e-975e-765bcad8a32b"
        },
        "item": {
          "id": "d4681878-05c6-4a77-8826-d64afacd20a8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "99617442-bb61-4900-a67d-b0bc16e6b43c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "d4681878-05c6-4a77-8826-d64afacd20a8",
        "cursor": {
          "ref": "f0117aaa-db8e-4a12-bc26-341a0b84b863",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "d470ad50-a4ad-456e-975e-765bcad8a32b"
        },
        "item": {
          "id": "d4681878-05c6-4a77-8826-d64afacd20a8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "99617442-bb61-4900-a67d-b0bc16e6b43c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "1940f8f0-6b9c-48f2-b708-dfb6f392c637",
        "cursor": {
          "ref": "274e130d-9d4c-413e-ab04-01f1fecf6acf",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "782f9a26-b69c-4153-ad9b-5816370c831c"
        },
        "item": {
          "id": "1940f8f0-6b9c-48f2-b708-dfb6f392c637",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "c231854b-2eee-497a-ab2e-a16a52e09041",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}