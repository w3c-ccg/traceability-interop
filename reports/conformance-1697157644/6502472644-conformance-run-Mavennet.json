{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c05ef002-315a-4034-a1f8-529b86a07411",
        "name": "Clear Cache",
        "item": [
          {
            "id": "fde66af2-c152-4785-81c4-2835f8773633",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b3b73e85-5e3f-4999-93a1-90867b5efa14",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f4e90340-e148-45ca-a4ca-e61b85db732d"
                }
              }
            ]
          },
          {
            "id": "64192b51-e99f-4b6d-be2d-2688746e7994",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6d95b070-fa27-4b19-ba15-3694b625bffb",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a2cee189-ddbb-4139-a854-7492a0d81e18"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "bd204bf7-6e7f-4555-a49f-1e959b2e13cd",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "8695d853-333c-4e2f-9f06-a33eb146f98a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "98771155-e709-4f05-ad29-4e57fe362ad5",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f998213-70e0-4384-8491-abf169098634",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "46ee9523-df5c-41f6-905b-c58099e05416"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "84a703ed-cbae-42e7-b5ff-8556f0d6c833",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "30948032-1e76-42ff-b027-838d708fa1af"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c0af3db8-2756-4d11-bdcb-56a1ad1691e0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "29b58887-c4a2-40d6-8a1f-e0ca68541f7f"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "81041b90-fcf8-4d39-a878-6323d1ed3a79",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "b34770f7-711b-4c94-bd4d-68d3879f6c81"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0bdee604-c4c3-4715-ae2a-e833f880ead6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "477ebd3f-01b6-40fd-bf75-d03113524e32"
            }
          }
        ]
      },
      {
        "id": "28d88520-d441-4c7e-bbe8-738e7a766738",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "cea41a8f-96b8-4e5c-89a0-f247edd40b52",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9dc2a1bc-7c8b-4444-be5c-b37d1a2fbc72",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5197f83a-6220-4a09-ba35-3d1ad59b65bc",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5993b58f-82ca-4e00-88e4-a66d428d4db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce12451c-a4d7-4732-b3a2-ce5c15c947b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a48c573e-c96a-4839-b524-cd5d7cb4dc9a",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "509999bc-e133-47ca-b752-f42842eea0c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3033a930-c376-47a8-a6ef-a68aab5abbe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c81b96f-209f-4061-8ef9-ea789d238409",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5f0ba72-02df-4003-8dca-da1985a1dc04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c31e9685-87ba-487a-90cc-6aa9ab4668da"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a59bf49c-2ea2-459b-9292-763d3ba60b7d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "550af996-bad2-490a-8e03-fb810d5f5dea",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b06ff815-0257-421d-95d7-340111ac775d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5fcbc453-ccce-42f8-b436-c492bf358e36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c66724f5-d728-4859-b121-bddd86369708",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c9a6fa9-46c1-46c1-9c33-3a2eddb551b7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1ae92d02-edf4-4377-a7d5-a228825eba29",
            "name": "Positive Testing",
            "item": [
              {
                "id": "83946dc5-fd26-42b4-87a8-a58363cbe5b6",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc3737da-d96f-4654-b95f-decfce707032",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "de58e095-984c-4e18-94d0-d0fbba7e5a90"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "257c4661-5564-4968-b508-880f5728d02a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "7ebb2a86-9ba9-460b-89c8-2e2846581b7b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0d2e0e18-bc18-4f68-96df-48310b15bf88",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "86b7c2c9-c578-4034-bfe2-06609cd3da15"
            }
          }
        ]
      },
      {
        "id": "f67673c9-431d-4a43-ba1a-0b70b09da1cc",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "49f53632-9395-42a5-9a8d-0343968ed991",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2f99bec6-f0fb-4e48-8a64-0fd214444c95",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "30a309d3-3d96-4101-b562-f2a41406a41a",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41c59bec-61ca-4cf8-9dc2-d4127bd2e90d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de1c672b-64f7-4d5a-8267-71753f56c424"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9c1072e-bc4f-4362-8f19-f776d5caed94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7abb30e4-6211-4fe2-9358-c7ba55a507dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3b90b37-2c81-42da-8276-eab21055015c",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d4404a8-819d-4609-b2c7-8394baf7bccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c314f43-f843-4966-a357-ba19d1a60a55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "937698f7-1efa-4b0c-bd80-c3c4c8b6dd76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1a206cf8-34f6-4bc9-8a2d-67b3029e60a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e117956-a0df-4481-a9cc-e619bffa2dfb",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc89cf76-ea60-4b45-80ed-ccd9eb1530ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91deb6e7-3d38-467c-bba9-37da80bbe5bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "108a097b-b9d9-43ba-bb83-637b529b8245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7aaca8c9-2923-4446-8811-5d28151924e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21217bb2-97c1-40af-9a2f-f2106c3731b0",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61b25e4d-e3bd-44e6-b22d-a48a6d297a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19f9805c-c553-4a2b-b886-f6cd38394e2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4aa7cc1-2733-4119-9c0d-65a3b4851a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c17b4dc-ef1b-4c0c-b54f-5efb7d797ede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e933619e-2cf4-44b8-b5e0-728f8168c573",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4085ec7f-a7e7-47f3-82a1-afbaaa56d73b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "850e841d-e633-46db-bc1d-e9cb29d81712"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "467a4119-9b2b-4a82-8da7-82c2f92cc976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "14dace01-9797-4edc-bf1d-5f8dff88e1c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbeb24a8-7eb9-4521-aef0-8fa97f51a423",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9189144c-d9ec-4016-9018-baf40268b54a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "285c8b03-c19b-4759-8c51-dd214802477a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f1cd31b-a00a-43d8-b9e4-d747abf6f7df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4677cdd0-cb4f-459b-9765-1158df220f94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a52fc3-9615-47bf-ba99-d548410dd76b",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b9f69e-938c-4d2f-a327-7115a5f3af79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "459ee00a-cb05-4fb7-a3f9-f9b13a13edcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea71627-7c9a-4ec4-a871-b906bbe92e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "92e1b190-4066-4542-b0e7-09966f72f1bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7696af1-9168-428b-bb2d-3efa87d5995a",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34aaf27f-22ef-47ff-b3e3-e237b49ad3f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74f783ab-1ad6-4716-a1a6-b46621214995"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b318c74-d66c-4657-a9ef-3ff875b9ccaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16732b84-77a2-4d7a-b864-fbf0296221e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7564baff-4463-4dab-b9b3-ce911ed9ea7f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74c16667-447b-4633-a7df-cb530bbe2642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "210afd7b-a713-4f04-80a7-4e7f36ef5707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc31c46c-fa34-41f4-bd15-547dab11a230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d33da01-9d5c-45a7-8069-19f267502057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a1af46f-da6c-41ff-b3fd-015e4e2ee4d2",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31a93966-0ea6-4267-85d9-dc18e0a98ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69dadd92-c6cb-4de8-91a5-29a9bc5698eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af40bf6-cb25-4acd-97d7-fb99dc396b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "46c4b82c-2704-4526-b4da-61b9354cfe07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ac3bea-fb0f-4efc-ab39-9feba1db1613",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c644779e-9185-490c-ab39-fc5d5dbf189a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b2e76e0-18d8-4958-9e1e-0e4c891b821f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51127d09-c84a-42c3-abd8-5d589ffd5034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78831a78-2148-41ad-b829-ac899389e59b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3230980-a5ad-4a26-947c-66e0ec9c58f9",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d224a9c0-0aa0-4665-b652-0135254ca5fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42b325fa-5088-481e-8a98-ad3e7628e545"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c37fc64a-e20c-420c-bc74-aec5bb6516af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b866cee3-f9ee-4cdd-80d1-cf7e901e0c0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b3837a6-bd49-498b-9158-85310cf9cde7",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e342c1e-b60d-4aa8-91bf-3b1eb7dd7ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ee80ffa-52f0-48f0-84dd-9cd65556f98b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8699e53-763e-4fc2-be5d-b314adf02a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "938d4b85-fd65-4fbd-a799-f9009d775160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc44910-9270-4d64-bdbd-38097d42b2fa",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceafe6e4-14fb-48f3-9d69-c1b626ea4258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "500a6dfb-e26b-44f0-9af5-2927b0c4ad20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1a2bcca-2ab6-44ef-aee3-c3d89a4fbcc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1865ff65-5012-4760-a549-db1fe6cb5997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "531aec9f-637d-4a12-b54e-53dcebdf4a4a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5e6b649-d389-4e2b-b148-f6869dfcaf31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb779212-2cfc-4899-a4bb-7b50003014e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38f89df6-3395-487e-8c84-ae6e955b3bb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0ccff7e0-acde-47fb-9366-c86f81d921d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc953fc7-e740-4584-a425-6c12df2bc56d",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5778bfbc-8636-4b15-b9a5-1a3a9514927b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4431caf-6c65-4861-900a-2a8fc3c37773"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "714cbc6d-5369-4e88-a2c4-15f0bba80369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f2b7320a-9018-4c1e-89fe-aa1e08b53459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14fcf329-0355-4201-8d58-e9006935bb4a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5345e8a2-fb23-4fa5-a3e2-e45cebde577e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d28f497-119a-4f87-a4ec-d36732b91942"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6733804-31de-464a-a8b7-e8e4d94c92e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad0ad903-ad94-4f08-8293-9fa3d9ac9f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb193ba9-1e0d-43b6-a99e-97fce8e5a48d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f221c79-cae0-4774-9e29-da81eeb38bd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33f6670b-0af0-4e14-8ca5-347cec703f65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee059551-77df-4ac9-b02c-e4e7576009a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "00def4d8-6cf3-4d66-8548-c1d6d26cbc92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9270664-2a09-4fc9-a85d-5c3486a9b35c",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60fc397-911c-4049-a1aa-fa3b6fe4da24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc9a7024-7f4a-46cc-87c8-4138e848cda7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53a6b3da-5f3b-40b0-9640-edf55208452e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ab73f8c-19c1-447a-b1b6-f52d21479204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85c7dd12-599f-469d-94d1-ed64d63a1eda",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4a344d0-e56d-4a13-9586-d3cb54e930a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76dd9c79-e1b6-4d69-8410-2089e17ecfd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f51de962-1a69-42b8-b12b-4d5823e6bdc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "46969335-a36f-48d9-aca4-12cc5f5e2e1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5edf472f-195e-47ab-8410-05bc9a9ca873",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4a1d94b-ed90-4937-a2a5-1c6bda388e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "107f423a-7f7f-4ec4-8f2f-e0274c033d7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbd146af-997b-471f-8fb6-837d9f8aa7e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "634aa559-096a-44fc-9e5c-8c800baad621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c0abb7-340e-4edc-aba6-c2e9fb9b6dc8",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af8e19b1-b8ce-45ce-85bb-a9a85540b1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a650571-e166-4f9e-a678-7c8919c2c7ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11422163-fe8b-4936-abce-f251af8257b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3161d243-50c9-4169-8aa7-b2733bec7668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07f3f9f4-3d9a-4141-bd1c-1e2513a449be",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9efdb475-bb19-4122-8fda-b7e3924869de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0b025ca-66e1-420e-9115-9c7e0ce3e5b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f99c9953-d4fb-446f-ae6f-19250a13879e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "08db5f61-b05a-4180-a428-c6e21b5ce177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "475f4793-4fef-49ce-a3ab-f0054975b568",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6c3328d-8c8b-4e09-8cd4-a0b5a20c2cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0fe2cd8-fec6-4b4e-9892-250e9ad6eaae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2e44c60-f664-4cdc-b09d-db7bca0ab1a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5ab2168-3221-4b09-8682-39ff0ec80b3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be7849a8-52ce-4460-ac77-85af7aab1275",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02fc9298-3403-4c15-b5ae-654750b9e87d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f4a6815-f45a-43a8-ae06-27841b30bda9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a381576b-6a82-4376-a681-4ee20631db02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "44c3fc7e-b17f-4ae4-ae6f-d664649604e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "613f64f7-dd4d-4ab1-bf2d-ff34ea1255d7",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "292cdaae-793b-44e2-9f6d-796c7b54c071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13df502f-0f14-4e05-b720-0e08c5e1fbe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78c8b4c8-4f1f-4b4a-b53f-bfe6905f605e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5d835bc-6d66-41bb-9ac5-9e7d1d820e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7b1f0a0-16e1-4125-896e-c1f30c9a64da",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ec77f6a-e51d-43f7-b5c9-c0af1bdf10bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17208107-69e2-4d53-b8e5-2eebbcf794c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "415ff1a4-ba62-48f9-9f0a-0961ed9c0eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf9d5cdc-0aa0-4640-b340-2a733f344175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98de5779-5c45-48f6-b57d-cfc2e5793c94",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aceba229-2389-4ad7-8a59-09d5c5032be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09a0528f-9ed9-44f8-8faf-8a049f5e7d0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc0b7699-1353-46a9-8e48-c9b011bfee13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "48bbd8a2-49dc-45b8-bb64-5a920d7b421e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "097ea05e-d0ca-4b8e-bcc7-ed939b450766",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c32b08de-092b-41de-93bf-489ff4740a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea839fb2-061f-417a-9401-5ce6148ccca9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef6ae09a-46c9-42e5-85b8-485dfaf5d172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "de0edba8-6d27-4ae6-9be0-ec7e9d5dcaf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2a93419-295c-4093-922a-3362726947cf",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ba9247c-6cc6-4473-93fd-b4088701dee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ede8124d-5c9f-4478-8e0c-9bc79086561f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa9be838-4ccb-4237-86f4-27e46d0755b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "51e6e121-d17b-4eae-83d4-1a75ccc71fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d02e931-c89a-466a-a02f-32178d256823",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7019200-6c09-486a-ae4b-8203968da4f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e787acd-4379-46ae-af7f-99e8b8e4bf7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ce68840-1ec1-494c-a439-de9ef5972782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "73de43d6-be6a-4350-994b-89105641a023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90e2a2a5-da46-4e25-b1a8-0e32efb3e302",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a23a7d-3976-4d64-9fd5-67a9a149e8cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "485b1bd1-9ac0-4c7b-8773-bfe655662965"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45f9e193-bc73-4dac-9484-7c74f11b3e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "436b769f-b2f9-439d-b9d9-4a7e2e954f4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5177a5ac-419f-4745-9ba3-3f9b04ae65f2",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb9e6c4-2df2-4626-b941-91f763247384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b98435b6-426d-408a-a974-ad502d4cc3cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a672a04c-aa30-4771-b7e1-cd7ddaf0eaae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1110db4-6d9a-46f6-8c2b-80944338d5f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b88821e1-26bf-4029-8dd2-0f360c798f13",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "452298fd-6a72-4854-99d8-e2a46050aac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0511737b-315c-4c33-87c8-739926f0b22b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33d80d31-90ef-49ab-9b5e-d2586d85958d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "73eadeab-7f50-4bb1-9b76-313b18e81636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c72ec8a-6a88-485a-9fae-512742c07c3f",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb92dd0f-5c32-4e5f-b550-4ed16c949852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9085521-b9aa-4a56-a455-3dc0c091b8c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b00c75-32f0-4c65-a3a8-e3119d52562a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "3a335bce-3692-4d4a-999c-2598884f847e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a1811ec-d9f7-41b3-8225-df133c293d5c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08092e05-552a-4e52-be17-720a6c6cde9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "09ddb1fb-de15-45ea-b471-111a3a21500a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79804a0a-17ae-4b25-b2d0-04e470423c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "718feb82-0fbc-4ad5-91db-df206d645c7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b882419-47d5-4390-9672-9af1260ca8ab",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d3207e-8602-436c-9cc4-e3cc110aba63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d169cee-4b30-48d2-bd0f-b7c4fab84421"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a4b5b2b-4389-4bff-b5aa-eacc646f3145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c319e064-9d6a-4728-8f9c-5cfcc93351ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5e37f33-6c4f-4c23-b8c2-4b46b11917b5",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8769c7a9-5aa4-4081-abe5-896acd4c078f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fed57dba-b5c2-4aea-aa9b-a72973ebdd46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72992eb7-fbf9-4361-8c98-8b12a071e131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7948fab0-50f2-4942-9e1d-151f9cf3ddfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed901240-1520-4113-ace3-12994e07779f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c43db883-a7b6-43c8-8720-6eba22d029a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcc62a1d-dccb-4256-ac2e-2af45ed6afab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39b73bc7-cc69-4b3e-9284-d58e4c9e379c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cff2f972-e478-448a-be10-a91f87815659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dd9966c-ce9b-427a-82de-2fdf42af75a0",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f493055d-5e5a-472e-b122-81df464ec6b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2f1e147-ec3e-4346-8e11-1b1977770b96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a00542e-e8f5-405e-b66e-5276770d902f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "07b77c27-0410-4431-8c38-f870bdb681d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c2d0333-ee53-45b1-bd42-575a47434445",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0fcef11-0e06-411f-ad6e-2aadd0be0441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e2b4a1a-5894-43a9-8d4f-ae15c97699c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa74ace3-6862-4dfd-a6cb-65c2e9f238b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cbf56a18-de1c-4f35-affe-1b3825d384df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67250424-b2a9-4bf4-a313-0aeb6fd85059",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abe1c8d7-6e0f-4243-b28a-be03f11273d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9e826a0-e643-480d-b45f-6f054941bd4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cae2c110-f708-4506-95c6-b227827eec75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "06a9cc2a-1115-4de0-ac9f-df4212a738cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bf66339-e4ea-4513-a2e4-6c32dc9ed50f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5530f82d-aa97-4a2e-9bef-9b2ae7bbf772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6877b43b-2b97-4131-867d-3a4cda13e6f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f9f2542-de15-42c5-97d9-7a51601b0d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "26e18837-6afc-412c-b88a-01d4980215a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28885b3e-1062-41d2-8a90-7b3dcaa90aea",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5d2bc59-49d4-4a32-9804-11bd29ede4fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eba08f28-a536-40da-b778-a3c940f5d9fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57401d39-fb95-4bb0-9b59-a11617fc1350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "ceb8ac2b-a6f5-4217-b9b8-d41443b20669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd557e59-06ad-4206-822b-ece7b4a3158f",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a78dad-a6f6-4897-875e-959a3468db9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aac1cc3-e99e-4ff6-a0f6-71bcde91eb3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0724afeb-58b1-4973-98ed-3762b43b0410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4091ab78-5a36-4e8b-9b4a-794844e32d52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb367ee9-eeb2-4740-9098-e8e5ff4ccb89",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2019896-d80d-4f27-ae78-5e7d74b89f60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3778e4f4-19d6-4e85-8290-916bdd37419f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91884221-ac94-41a4-962f-d35ebd0c8df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc28c82c-7515-45bf-8002-5af5ea97e982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc510946-adac-4ebf-91e0-c49014780542",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7847486-9f0d-40f8-bcc8-3651bcf3f0df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9600d0b9-b285-427b-8d56-a80d1c218fb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00ed1125-3570-4558-aa15-99d879aadc92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "50dbf746-a08a-4555-9894-23ee15eaa8fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eabbc0b-4e23-4382-969d-427a7732dad6",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db80617b-a0cb-4334-aaae-e76bace5e79f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b463883-56c9-44d7-9e64-17877ae5eda6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd71bcd1-216a-47ec-81bc-238900c2abf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5396c116-b08a-400a-994c-0d3a05a8d45c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6289f16-1b35-45d2-8ddb-dc4281ed65fd",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a848fe9-8d36-4939-9a9a-532f41537554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d1b0cbd-aa41-4055-bab2-e7abf6312539"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed6b65da-d659-4608-9314-aaaf7b5b6575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "af45fed4-7f63-49a3-ab66-b4871af15800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca35dde-9b5b-4d60-b476-986fa91ce6ce",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "136c2a58-5b42-4f2d-b045-cd568f21614d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fadd366-c2b8-45b8-b735-4a34fe7490c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdff7597-1d1a-4081-9f3b-349558cd756c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3b3bc82a-d58a-424e-bd29-a111d1fc3b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd6e9acd-0372-4fa5-bdd2-18394ac2881a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76522887-79a3-4ce0-8ae6-2a0057c17a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0077774-88ec-4de9-bd55-c33efadc0fb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9776a4b0-5dbf-4d4d-841b-84375b274c6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "64e0e192-6944-49a1-9f66-2e40faca2832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12918e12-10ff-4d31-9f5e-bc6f350a06a1",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85712cb7-08b0-4655-b8ae-9588a1aafa53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fff3607-e0a0-41a6-a6bc-b51f9d020eaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae22303f-1147-458f-853b-17ab2bf35d1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7dfe8f4-f36b-4447-aafc-a74e84eb674f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "874b3a48-8717-41d1-955b-1386acf4193e",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03802ee7-1d2a-4edd-a8f5-e2502c43b3d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26b36f55-6ec6-40ce-9a95-6bf9083ef985"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d4c3b6d-2132-4dd0-ba27-48e8557b1fda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4afd530c-cdec-4af1-a519-7432258191d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a5d5acd-434d-480b-9189-d4466a86689c",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1febe809-28e9-478f-8a29-6b9c0f7f6a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfc0bc88-26b9-4760-b0fc-8195d0675e11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b830f1-91b3-4c23-b381-db406e60715a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "633f8c18-bd47-4f71-8004-5bf3e84b22b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6785a26-15a7-42ed-838b-9f32943ded40",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44c67b19-2aa5-4e3f-995d-afc92bbfbbe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3c117f1-aa86-43d7-a16b-937fade736de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34e3c2d7-04bb-481b-b765-41443fc04b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ece716e6-172d-4373-ac40-098af98be0e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69851b54-e6d5-4a90-8c2a-68d8a0d3e8cf",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2beb78b9-e3e6-48cd-be88-4a874ea86eef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99b6f6b0-1d1f-4b20-891a-d8b1f50882a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968ed771-3d3a-45c1-a571-aa9b8a176993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5838dbb1-7dc3-4843-9cfd-04092ccae68b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19828ab6-04a5-47b9-9207-9765418cdbda",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "121574d7-d035-4c25-90c1-a0bddcdcccea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "763a8d50-a8b3-42db-8804-7fe200ef8fd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a82017-cb51-4b98-8b37-00f7fbbb5540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1772ec1f-2d75-41b0-a0f2-86c33ace36ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f55f458-b3fd-4370-8e19-688042b1ac57",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58dfc8ec-1bff-4cf6-a139-9e3261220a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1a54ef3-1cdf-40ee-b394-2f84e4da40e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83519838-f36b-4ffb-ae38-3578774f0dc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ece21ecc-8b88-40ee-80d7-eee85a17b181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20116e30-535e-43a4-af3e-79ac09cd18f1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9609482-9861-47ba-9ebc-cdd50df2b942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55bbebc6-2700-4b21-bc8b-1e9ee5a355cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab9e42cc-92cb-4ece-add5-81f08ab7c626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "338e7f2d-4380-4fe5-a552-3ad80e5da919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aa743c3-8ba2-4781-a75b-fb3f74bc3c86",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ebb5529-0fa9-4b8a-98c4-ccd48101aa4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a8515e5-3fd7-477d-9452-0621dece7714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba1be7ca-a9e0-4542-94bc-cd4c9ad667bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fa4c1d8-ea85-4bd1-8c06-6bf4b1dfecee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f34d8c4-5d0a-4d1a-9b7c-d56ea150e09b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b9d7ad4-b21e-436d-b970-2d414d35f433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1468533e-79c0-4b93-9b0b-298bbc3b4f27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92c6a4fa-f5e6-4267-9120-56f7c3b841e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "02f6b359-ea61-421a-8bcf-512074499700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b41d36-8e53-4c97-bdba-594bec2e1a22",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38787c0a-278b-47a4-83a1-57b31e48a580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da3ba4f8-bd16-449f-8aab-66dbd7cc0932"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67691e90-3081-42f8-be48-1f385c02fcd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "6bf922fa-b9c2-4f73-866f-f73aec8eb3cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07a42bf4-a8ad-48b3-b2cd-512f52669e3e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5278fa4f-137c-468c-a764-ee37d29f5244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18035700-d146-4ae5-bb39-5195e7ef0e03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95fafae1-289c-49ba-8303-e595dd8bf579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f858657c-7a6b-4a7b-a4d7-eddbc8f10c66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0538833-796f-487d-a47a-259e49896863",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8f4882f-3ac0-4043-9cb8-5c9ff73a695b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3890fc85-d1db-4506-bf1d-4364b18a192d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82c0ae22-408a-41ac-909c-d5d298f6cfab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7f6e717-d4f8-41fe-9b05-f9725ee6b136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54dbeb01-65d9-4a7f-bba7-77fe9912c167",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1237c38c-20f6-4004-b3aa-32b8b123a618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5f2d8db-52cb-419b-b671-130ec54fc0bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "164cf494-4d76-461c-b7e0-884a79d64187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4eb3b62-6a8b-4f0c-86b1-c70089fd948d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01526076-3266-4a0c-b95a-e4afeb0a7e5c",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c0f8df-0ba5-43f3-97e8-a8aa4a3c9330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b362ea05-85ac-4b51-96e2-fcf4bc703fe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b8bb469-8d46-4c50-a4b8-083bde3a869e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd3f1246-5943-4731-bcc4-cd295bc3c271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2eeedcd-9fb7-465c-8a3a-b1da9f4dd3a3",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a86dc4a-4164-4071-b078-fdcea76da9a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0227a7b5-9f7c-4451-8cdf-4542ff3ef796"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1adbfa50-2dcc-4eeb-8614-7578967788f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "03421d92-e7f9-419b-8c64-a15cb5248005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c2e1180-c398-4368-821b-793ba8c21d68",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae97431e-3d74-4378-b7d0-8bca7c8f365d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aa37e19-95fc-4708-928d-5dd2f02f6310"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c78c6d30-d390-4f7d-965a-0de3407757ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc238991-7b04-46ed-a371-b60ae0ac30d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e588f453-3e01-495d-894c-54a3f45f59d5",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd509a2f-a3b8-4716-bb3f-f92a7365e33d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1a994f8-f622-4110-932d-c1fedae79292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "714c998e-ba8d-48c8-890b-f84fa69438d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0cb9d9a-edc1-4c23-bf88-f0f121fde764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa564ec-8d22-4992-adf4-b3d7e6c241ca",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dc36dc7-55d7-49b3-bd62-c7ad590e2ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19aab390-b122-4e9a-9b88-3694b7d35b7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb0bfee6-5df9-4794-a54b-7d587465138f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ead6782e-66bf-4d2b-9ce3-e15542b94c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a909fdac-3980-4390-86ca-7f4f31230d5d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "573c365b-1b35-4079-87ab-f8027ea16ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75193713-36b7-4dda-8ea7-cf9860fbc10a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f366578-7139-47c8-ae51-85bc9da432df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a456a127-5d6b-4fa3-8bf2-224584d06555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c8f123f-02b0-497d-bdb5-96e6d5688cb9",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dbb1336-f2ce-4475-8f3c-374602f30549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99c9f028-8241-40f4-8fd6-27c167c79030"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c87d9bbb-9ada-4e4c-8241-d206abf40ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e091c2cf-9069-4620-a232-bd3f1d459279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d542e747-62ba-409c-b5ff-669470a57345",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "398303ed-451a-428c-a27e-72af17ac7234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "375d1a5a-017a-4332-9f06-7cdb39977d9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff44e946-28eb-4662-8d49-b9700cd67e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b1ab2f8-f404-458c-b998-fbbd4dd582ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44b932d1-ae11-4bc7-a2c9-8c76cdf8d533",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d558087-7676-4f36-a64e-8dd0496139ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a95bc00-c11e-46fc-a5b6-49e4583718ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "975e83a0-955b-408c-8ce3-89642f9796b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "37509614-aae0-4abe-bf34-ed5bcf8e11c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de761925-e6d6-4e2c-8bf7-431acb13b890",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f634ebb7-19ea-4f43-9deb-eef147e57c47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a219158f-5cd2-4339-8f3d-7c7965d69641"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15274a76-a0c0-4403-b010-62e622bf9509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5519d595-29f8-416a-bd73-7e9869870002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ff6852e-c038-4980-8460-23ce41fced17",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "057a5745-c570-4377-83c4-49d234f3d6f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "babf04af-c5f1-418e-994d-2837de474611"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3359ec0-3be6-45b7-8583-578d9251c59a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "481fddd9-a92c-4e72-b40a-cf3e2e120fd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3450b461-5660-49c8-a0ec-693d6f71594e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e79542d7-7b08-467c-91ad-5d60ce048ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b96a132e-e43a-4587-af7e-6d3a26976188"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae76d420-6a05-4f2d-bc3a-57ce07874058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "766e2851-27fe-4d9e-8bd9-99e350804d88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4248bf63-c4ef-437e-88ea-b6d2d3826102",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd624154-6795-4244-8380-0da6003024d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e630e6d-7d5a-4b49-a729-2346d2c7f163"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbd4b54b-6c2d-4482-9689-e453d988a40b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "675f8c55-62ea-4fc4-bffd-8b2948810d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b231921-aa9a-424c-b954-38ed1359c995",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6ceb7eb-3c85-4858-b05c-d553f4a85644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa735994-fa90-419a-8356-ba7fd8cb4c9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ab93761-b399-43d2-ace3-06b2417e8436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae22a766-752f-40b5-bb81-2d7620d704ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01c098f2-0c02-4382-ad0e-b727a586f6c5",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e46d960-47f6-469b-b442-d1299dd93686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab2bd470-1630-46be-a86f-e3145236e030"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45302c27-3a8e-4682-9efa-b5b0716babce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "78fc58c7-e293-445b-aea6-e73ce217d338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e5f89f8-f4fd-468d-942f-5278456097d3",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b47f7318-5a68-476c-801c-d636a9acd432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba1bbe2c-4552-4a70-b94f-ea4e3670eb2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7227970-36b6-40c9-b981-121c6daebbdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbb1267e-fd18-4862-adda-43890b81e6b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e3555f2-f218-4ec4-a567-e10d87cac082",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3ac6a98-1e1f-4cd0-9456-6ea5b7d81af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cfba3da-322c-4cf5-a090-ce1fd3db409d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "436b9a2e-101e-421e-b3ac-df70833ac18d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a84ad0be-afc6-4727-bc77-7fd3c7921bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5544bf0-b312-4798-b47c-a6ce28c83174",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aca517bd-b010-4cbd-8db2-736881fcf8d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33ae1661-b855-4484-aaf2-fff30a36d12a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d51e97de-ea20-4536-82a5-28a61732066c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ec6b37a-57d6-4ffd-8eb5-daa2daa4f442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47056cca-5fc9-4099-9591-3fe02d306018",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67a24a93-12ef-4bbc-abab-09dc8381ca51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2777482-42de-40ec-8d8c-4ac20467139e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e2f6617-95bd-4a1d-83fa-08dcf3c20115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "787c80cd-e6e3-4c40-8023-83e9002c0d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "247b51c9-fbe2-4a8d-ac83-27988d52f4a7",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34d885a8-2910-4927-acd1-d7556e462f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98089973-0e82-4510-bdf2-0f2ea5b9edf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc133f7e-7ee7-4835-aa66-234989e381eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "46e4d9f3-69dd-45b0-a146-428b3daa28b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9897dd3e-3039-4a5b-9fda-43d4f4a1f0ee",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d3abde-c957-4e7c-90e9-79e32d09ec5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4560a15-d66a-49e7-89a0-e3c9428aad20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "885476ee-790c-44a2-ae12-13cec1c06933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "29224a86-7cec-4f4a-879d-5e252828ac6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70175e6e-997d-4076-93ec-a1a35610645c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd99662d-ca1e-4056-b93b-270b0c655a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cdcbee1-6511-4ca0-a2cb-db96721d43b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa8212a9-45a3-4a6c-97aa-37cca637de42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "29aafaf5-086f-434e-80e1-349883059694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af97b587-c937-47e9-b884-8a44e0684c8e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fea76c09-defd-4019-9606-1cdb6784e41d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71b701bd-7172-4b56-b15e-ac89ec5b2307"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6537fc5f-f205-474c-ba54-1a7851b5653d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b0d2559-f576-4c3b-b823-23e5bed6cbd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f92168c3-031c-458d-a861-493e742273ac",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b8a97f7-8166-45e6-a15b-6d54654f0fb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fde41de3-151d-4cd5-b031-856404e5c842"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff5f55f7-3214-40b1-840b-71cce28a50dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a28a2ed8-46da-4d4a-9757-12321c782800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edeae9be-7619-4594-bcd0-c1dca37f7a01",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91922948-f847-490e-a007-9167f9463eb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b4df492-1169-4ad5-82bc-b42bbfcfc40d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "741fcc91-1a6a-4eed-9bc4-c027561f8d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a9fcdd34-6d6e-426a-95d3-da773984d371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b81ce76-0e61-47be-b206-78f0b8dbab98",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8936d35e-d554-4910-9f52-ebbdcef717b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "910bf5fb-69ef-4950-b1ab-00ff913753be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "464b9618-73c4-4645-b9fe-6923e555ad19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "16c1c28c-b061-495d-9dbf-1f60821b8c61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3a41f7b-2f36-4f69-bded-670589e257f8",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c61b4a-1fc3-46e9-a145-49406aa8b2d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "69d19487-1f3a-4e8d-9df1-5a75b2987947"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e46b3402-6aa6-4962-bb33-04dcbe6df580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "23f7a50f-8d6b-4ff5-b8ba-451d10ff0ec2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9510901c-2e9e-4678-8330-0812c2685899",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ce20392a-964c-4aa0-910b-4a4ebbcf2773",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "601f04d3-9609-4017-9f0b-fccc9115115a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "987ac7f9-f9bb-413a-b992-5ff11bd48f71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e7573f6-e420-4442-ae96-d8f93c710bcf",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae540a0a-a79d-4e61-ad60-cadcb284e01b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff15f84b-7c41-4e02-b6ae-eef5d08bdcc9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a9d8eca9-5165-4dd7-92d2-1e110750a5df"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "772db46d-9abc-40b1-a94d-2ab9625d26bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "80ee2d33-216d-451f-8913-d6af13e13bbd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "42da29f4-01c3-4497-b91e-5abf5303a122",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3e4122d2-7811-4f74-91e0-ca40624fb735"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2e04c153-407e-4eb8-a62d-0c4941ba93b1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "55de4798-078e-44de-95ea-85d5bf9450bf"
                }
              }
            ]
          },
          {
            "id": "370ef235-b254-437b-b280-a3b1af6ec7b8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e7200550-da7a-4039-a07b-21bd3be0cadb",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ad31e46f-a1c1-4f97-8239-3a52e523000d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2ef92652-57b1-4e24-8ef6-2390a6aa94f3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "04d54926-98d4-4c66-bfbf-5f050daf5827",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b7a19519-b4b2-4d91-97f2-806b636022b1"
                    }
                  }
                ]
              },
              {
                "id": "2c271ac0-73c8-4e40-9874-3f4ed2ab3621",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2fbff71b-dc3c-48ec-8600-31aee53debd8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "29fc3f30-a998-4052-b5c7-44546a2780ba"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f05974d-bc47-4a4d-ae96-2423b196b4ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cd4db3d6-4a06-48d4-8b37-bd135c203beb"
                    }
                  }
                ]
              },
              {
                "id": "f9432dfb-0be8-42ae-9a02-8cdbcf7aeb51",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b5b6202d-3d30-4df2-a8ae-aee29862ce7d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6c18fcea-0abe-4cb9-a73b-dd4d28d8dee6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "85637522-9fc2-4ed7-9981-84dc30b24e2a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "29a66669-5e26-41b8-b46e-f67a68bba7ec"
                    }
                  }
                ]
              },
              {
                "id": "0848426f-ce7a-4435-bc73-7356cc168265",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8fa78aed-851e-44f0-9e8d-d01b080b0af9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9f7f2ec0-140f-4be9-aebb-6ea0a2d1bd4c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7a536af5-4009-4586-b0fb-1f5e12007b3f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "c90d9e9f-8ab6-4651-8f68-1efc54847673"
                    }
                  }
                ]
              },
              {
                "id": "c4559131-0060-4120-bf51-e5b8560f9fae",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ae86496-840c-45d7-a353-2d9387a779e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "89233713-354e-480f-9c65-11236d515985"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e495ac6-abed-40bd-9c2f-1f3088ddff0e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "aab6e657-2fe1-403c-8ea7-13477e3df6f7"
                    }
                  }
                ]
              },
              {
                "id": "72d036f7-800c-4f85-9690-15f7d84970b0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b22eae55-adc9-435c-9de5-fcf3b8c1685e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d50ee12f-2187-4b95-95c4-cea31e27d258"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f6b2134-4713-40ec-917b-9f566bf0ae86",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "38a186de-478d-48a8-b0c0-d758c7ed574d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "59402f51-71f2-4204-8565-8cb32ea2fbe7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0f1f5fa3-6df0-4d13-9471-ce44bc2c2567"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c70e5868-4c17-47e5-804c-7dda0cd011a9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b18c0d77-13d3-4497-9ea1-848975a3cf2a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "25e66643-2674-4db4-a0c7-c73b40ddddcd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ac56138a-e9cd-4874-a09e-c6b93a702f69"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7aeaef0d-61e3-4414-a31e-3a5131fc117f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7a65ae4d-3bcd-464f-b017-0e78fa7ce388"
            }
          }
        ]
      },
      {
        "id": "82fa1ee3-83a6-4bde-b126-d34aafd2962c",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "af0618b0-6616-4197-abaf-2af755579883",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9d15ffd2-c13f-4ca2-827b-0543e4426b87",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "880265c8-f843-4ee2-a538-b216b0f34b88",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73e83ce3-2df9-4448-9cd4-76d4306eac61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5236c5a1-a67d-4f2f-bdf3-b5dbf7cc347d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "180166f8-bfbf-4588-aacd-40248f199f25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3ff5a26-f211-43ca-9144-d40624ce717c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54dc1632-bff1-43b4-a193-4adab15fea10",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bed80ed9-992a-4414-882a-2c5549d9112b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cf31f68-84f8-4027-a410-1e3fb7370b85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acbfb850-dac8-4451-8f90-b8d54e6190f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "093b4893-d9d6-41b7-bf32-40f844f589bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c31edc53-93e9-440e-966d-6289edd05ae4",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec3b1dd5-2e7e-4f06-8ad6-1d4cfed8e89e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a13848b-f549-47b7-9d65-1328f4716cc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f5138a-440b-4a18-a5d0-7df9851e78f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "679d1c58-d0b9-456f-98ce-dc2adc16d2d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccb9c82c-944c-417b-9479-ee342d29840d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f1ade6-d572-4fab-bdc7-0a06c509d48a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "631cff47-0d3c-4172-9a32-d4d8e8fb3ae8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c661c8b-3753-4ed6-8a15-f07889915cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5dcf5ec5-7f2c-4b3b-8e70-d5c645c60334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34b682ae-76e6-4a88-bb80-f54f0812fcb5",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66473956-221e-4183-8841-6f67f0408d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4603b93-b682-4643-81ed-95794e5eaa00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcbbc385-e4da-40a0-a80d-26e37f798100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fe7d787-deab-4835-827c-3bb9808953e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62978f03-e265-4f1e-9526-496c94bbd142",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ef42ae7-58a3-4335-a120-892f119fe541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccc70809-c59f-4dd9-9c51-5e6317ceddbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "794b1b14-bb6e-4120-ac6b-c6ed5996dfae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ba2aeff-d573-4b30-9589-13ace8096798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc8eded6-94d1-4b78-9874-fa04176e4495",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cbfc665-3a0c-41e0-b9c3-6eeb2f188883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43bdd740-9c17-456b-861d-bc2da2018a70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e0c4c0f-b43b-41c8-8b8c-1c66a7c03b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bc07304-dc9f-43a0-b137-02945cda0bd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac30553a-f46c-452c-a5ca-3241a9bd12db",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd6ad603-339b-4dae-88d0-2899a49ee226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41ea1338-1e3c-442b-9ce1-db53443477b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80043240-e709-420a-a00f-12dfd84ba38d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a0ff948-5157-457d-afad-7bba6e9e1788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30d1382c-dc3d-4596-ac69-c53325418f9c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae049005-cb14-414b-9504-b04e97f050ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "892d3e99-e14e-44e7-8e8f-dc0c4540d303"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbedfcc9-a304-46fe-8850-7e8d1b43014b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "60e0f834-1a21-419b-8312-20d2fdcf92bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fa28e6d-7499-4efa-a3b4-5412bab4c942",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5462bc3-b24f-4ed4-abb3-9220c8dc31a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a46f52c2-762e-47e0-b0b8-e442e88f4230"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc87ec84-b475-4a1e-a489-4dd11967a6f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c6c27a5-59da-4195-b9ca-dc7d064b35e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bacd4738-2e73-41ad-abf7-2af380e1575a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3547b20-faa2-409f-9e3f-d041e69a279b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96d610cf-c1b5-40c0-846d-6cba47b35ed8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4de1ea4-5453-4210-858f-dd22b4d34e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "66a71e7b-e453-4aee-afba-28d241366ddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7999307c-51b6-4b64-8f6e-b7b352626bca",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20458b72-9629-4611-8312-a61b46907e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c05a6db7-853d-4dd6-b437-f7b769f82470"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d7af26-640d-4b54-9b41-63a1953f4c60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8fa98592-3d29-4eb3-a06f-acb4b865f4b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "950e547e-2e24-418d-be42-10bfa8c88ee0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e314e264-61c8-414b-a33f-2b7f9caab0a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d70db81-5956-4ad2-9ec1-c2e996fcd98c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "032c2b98-0e6c-45bd-845d-4d2b606b6c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f38e6733-5b1a-4b45-aaa2-2bb8d783dbf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdc67c6d-cec7-477f-84b7-836db1ca086a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e4c448d-2554-410d-aa6b-ad0eb62e46ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25d72d74-a66d-40e0-a3d2-acb915ed1789"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a0c16d-fe64-414b-a2f4-8f2743bb5e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6772375-2ef0-45f5-892d-60dac8c3cbcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "760c3f22-df58-44e7-a57b-95ba09778b53",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94048c55-f97c-4c58-90ba-c279f236a286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96fba29c-fa45-4fec-9959-65726b5273b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9947db1-4775-442b-9166-25b786b28793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c6d9ff7-7056-4a6f-8256-e8703b37e812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49e2a6e9-8f7d-4f84-9974-796b5fe77fb4",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "454e88f8-aea1-468d-b183-c94fd90a0730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eaff085-7bda-4380-8b97-f055b2e9eaff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b15799f7-fc6a-4175-a8f4-dc8aa604c0a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c165ca8c-94e1-4e34-b7f1-44c3738c108f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd370b6a-4032-40a0-b851-ebbff4d2ce73",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd70519-d7f2-406a-9c57-55b5351f191a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff176d2a-06f3-4895-be37-54dcb831d222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ed1ffb-0ccd-49b3-8be0-c91eaf57753e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c85a263-c54e-45b0-9b18-d8fb190dd7ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c7338f3-ca3e-4883-bee8-32da6a2d7f0f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef916c16-8d83-422a-bb0b-21754b6b64f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d79782e-dcf4-455e-8850-0549b49701cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d18daaf-d48a-40f5-863f-1dd408261310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "54bce267-7e66-4f74-8a7d-132db76ee8ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b794c28d-5918-4a62-9431-baaeea016712",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00b3b56d-4c89-4762-8e11-2990cb4e5999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d539fe4-0aa6-43ec-ab3e-0b5668843d3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bddd4721-7a69-4943-b0db-3c69d4e5cfa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a8c212e-5901-42f4-9cd0-22ae5e2eada1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90224cea-0e63-476f-93d7-e249a53de5ba",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "913ec083-bb7e-47b6-8f8f-e907cee25828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2e40490-a117-4d35-b7cd-663173f16830"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f06f7032-325d-40c2-899e-c05340d4b32d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4434e02-9422-4e89-a87d-36b1a1f9f733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13bba7d7-c294-4996-9de8-87aab6869a8e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46deedf4-c956-4501-88dd-8b02894d9ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc793418-f88f-4e85-ae0c-5f7b195c7bc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d848900c-cb07-49d0-96a2-0a26aeafe4f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "96888f87-7cc7-4072-9265-9f6a44ca515c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8d1df3d-c93c-49d2-bf4c-9f120f00f02c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ced8fed9-aad9-4ae0-b21f-ac114c7dfbc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af8ed2de-9543-4d73-8f09-bf800697381b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f955bbef-f19d-4a3f-9177-c7f5f7daf741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bab9a41-616e-43f9-a6ae-afd208ac7c83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7932179e-575c-4952-9fcd-d74e918f0add",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86f9b096-8261-41ab-9e05-435238ca726b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "748f147f-3ff7-40bd-b38f-b6ae96d0059b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5626e98c-63d3-4382-94c9-78237f91af60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8aceccf-bf7d-46a9-87b4-58f69b52b94a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2649a93d-3087-4cf5-af83-f836d1cc9369",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e4c61e9-dd40-4281-b62d-8091f76a6346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48a2a48f-a5df-4110-9887-dd1763487abe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "023ed633-6d1e-479e-b941-4144314bc047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf044366-84ab-484c-8225-f8a8da064fe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfb84941-bed3-4fe9-a7ca-d462b9451cdd",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb7fc09-9c74-43e6-999b-a43ca776c957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b7d48ea-48d2-4a95-970a-9805f6373c83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4a5d222-e6ff-4fd0-ad5d-4e7d7e0fa78b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6198920-3a5f-45dc-9874-f6854af70622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "601eb620-4bdd-4613-aa48-96863a23f64b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2775e10-81de-4a0c-9032-cf2a588c5353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f41f9e82-068e-472a-801c-94a1a5eefeea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53e18b1f-6525-43cd-a4f1-c1993d2a89be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1b48855-ff23-4f9e-a1b5-467a4ac51e1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "222956bb-f823-4c86-904a-6f75dd0b371c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20df8de0-d6e9-4e3c-8a67-ae8ba5e74d7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d27932c-dc38-4d89-a58c-7ce88e04255d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "438e51db-b778-4e55-b1f5-5d0aae558541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d75d60ad-82fd-4e1c-9395-2cae7a17f606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04c4f922-954f-408f-b51b-29f8c422d05e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7b80cfe-1120-4e07-aff4-ca831e0ca9fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8dbda9d-b8a2-486b-b6f3-d8b381111e33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c1855b4-ad8d-4788-97f8-6d5067a97423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c449b70-7f4a-4461-987c-66dd079670e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43633c41-f8b2-47cc-b491-7a14f0e5c22d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34d06cb2-5aa0-4113-b287-0db90ef3bfce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff07478f-7ac5-4f1e-a478-d3d93a650757"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec2e1b4-f298-44af-88b9-f7c3125f0824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "511a5f46-df3d-47d0-961d-bd38aa962e2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adbfb2fc-a240-45cc-9169-be1d88ae83ee",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3017ed8-8b02-4f60-820b-ee77b582470c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15a1eb9c-bf7a-478c-946f-57453904af1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4de61e7b-6f78-4a08-9e95-7069287ea40a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ce27f0a-2a78-458c-9176-43007ab32daf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6607221-0938-4333-8cf7-6f29f0227d4b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee925686-1c50-4d58-aec3-f932de233b47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66cc1f09-352a-4432-9076-65a9e3503c06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f93f01a8-1bf9-4fb7-8609-89add2ba47fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "732d361f-431c-4acb-9d37-b42aaa4b6641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db2aac40-7b0f-421e-8a1d-63d65821d8e2",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55826cf6-2eec-4508-abf7-64db2ae3fb74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c588ac69-8c16-4b0f-b9c2-48c74d33cf44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f9f44a8-95bc-4e72-91b0-fa34f7e9e5d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0dbde3f8-e4b1-4986-abad-8302be72492e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6da7dc4f-5000-4de7-a69f-ebd5a17ab76f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0fb25fc1-02a3-43f5-b4e0-a1cea1b148f3",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26464b21-b8b6-4196-90c8-7f63c7fe8abc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6d900e39-8a3c-4ab3-80a8-299106af00ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81fa525f-3786-4fcd-bc3e-b1c30b05d94b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "267af22d-0835-4649-b46c-293ae479f725"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "769f0171-df38-4ac6-b6a2-793cede1682d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79e68582-bb58-49d8-b960-df7c76fef49d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6fb50248-1515-404b-8fcc-e2e44d1881d4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bdba1b93-c9ae-4799-989b-815e1afb83a9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ebea9893-c178-460d-8a33-0346e83dbe10",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8c1f3d85-1d26-4272-bde0-5679eeb6d558"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "364f4a74-0335-4d0e-94db-0cd7b45690b6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fb3b2876-6165-47ea-afcd-44dafc4d5242"
            }
          }
        ]
      },
      {
        "id": "13f93e4e-9eb6-4ce7-bae7-1df89c2cdb9c",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "a4a649be-1ea7-48c2-bd4b-6dce15420fde",
            "name": "Negative Testing",
            "item": [
              {
                "id": "94d844e4-2186-4797-83d1-32ad77ca32f9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ba7830a2-2f98-4155-964f-cff82b782f98",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "720c34f6-7e22-4a72-a2be-ddcd76cd8e6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67bd88a3-9a45-4f67-ab7b-5f72c9e79a2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f759e474-58fd-49cd-88a8-a79b86b70494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d79cec02-f27b-4432-85f8-01eb5ea6d9fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d11e4c1-9efd-415c-b39b-59fc4ff44537",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf4f577-3781-427c-8025-3f7124fe7448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8b30b1e-42da-44a0-923d-7046033bd09a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a9be90-21a8-4610-bca6-5e9804f1d64f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a363eaf-8012-4918-bb90-68a0e3c0246c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf6111d7-be88-4779-8145-ff49fe8fc4ae",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64032e99-d981-4586-a4c8-c610dfbc6b15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "985f9208-39cf-42cc-aaad-08589de5806c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7b745ff-6b0a-4047-8f9d-6995b147052e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "20226b9d-1466-47e9-80b0-8de369f6102c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5acb67d-70db-4acc-accf-90376ebb1897",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "838529b4-7350-4a6e-91cd-a56c12c22f1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbd8195b-ec63-4744-b7d5-4800909c2978"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bd23ba4-822b-4ba3-b19b-029748738b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f68bb49e-d679-431c-823f-d15a689e47e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2f947e9-f07f-473f-bd8c-223dbd51d754",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6327e123-c571-4c55-a8a3-db459767056a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "168988d3-c498-4238-a5bd-71961b2dcc62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35570ef4-945d-4ca6-b275-b7d7e454966c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "92cd04ee-00da-4c8e-ab61-476052fe937b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac17616-3bf8-4b8e-bf1a-c8c677f88de3",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e10bb7b-7544-49f3-804c-96456466e95d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dc70366-146f-43ea-a1c8-ba6071ef0511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9afc0ff-fad2-4bc7-b9d4-71d73c78f20c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0fc61107-b2d8-483f-8b8b-d4d2ce5d0743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a08972f3-9898-4051-8722-a77efee1b065",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28a73962-3357-46ef-81be-45c62b55ef35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8e57e76-8883-4f24-aed6-b6e2f70139cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e8a69d4-8444-4a5c-8606-fcb79aa29ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "42c4bab1-fbc4-4c2a-bb32-87d5105f0216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed02c7d-a7e6-49d2-b8a5-56a5c38ddf20",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2af1773-b006-4d28-93ee-24c0ed1ec306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "047ec2b8-e1bc-4ff1-8385-9962b703ec1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b47dca3-9c87-470e-b6d7-f65cc4b9a5a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "461ccb33-7501-47f1-91f5-9e68826c5b0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62322675-58ce-4efc-9de0-4e33ad5de79c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c6f584-aff9-4d55-87bf-ab610dfed689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5815f6a5-38f0-42f5-ae07-41ccc5c1506c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58b60510-6539-496b-afd8-4fdb8c137aec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f0fb8d5-2143-4fc9-8f7f-019a16ca6658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0cd4149-d227-4dec-89c2-65e239e74068",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a055b85-e6e2-4b06-8871-aa52c6e85e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ce14e05-0830-4f3b-8157-93a113258a95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6014926-08ea-4a65-a92e-d62283cd89e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "622de957-f4b8-4fc3-8bc2-0530fc08e456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16b63240-3916-45b2-8d25-ecf979c39e19",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cc01864-ab77-4810-92c7-39223a30f9e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50d2d15c-de04-4159-add7-b6dedfa55888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec7bd448-545c-476f-9f8d-b200c3f94b8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "0b9cc624-5b79-4143-a40f-d2acef072ae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50695ee6-cc49-4ec7-bf95-923d2b495339",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c44f3bef-9f81-49b2-bee2-c439695f80a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96562233-e69f-47c1-9efa-8638fd3dc7e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb9f24da-c1fa-47ed-88fe-726830947c72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ed6f0b28-6f96-4d0e-8404-bc91fa60a405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca0819d9-f133-4e18-9668-e178e87d1927",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b7dc49-e8e4-44d8-ac5b-594318bc6893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f67c09f7-5e18-4a16-a74e-3deb97abbc31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09a67d25-45eb-482d-be31-570ec2e4d60f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e8ee432-69ed-49c1-abee-03df1e234f8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f6a7684-5158-4066-b358-fcbe4ee7c8f9",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c03c74c-e203-4b65-82c6-4ea1459769a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3426cb82-1af7-4183-9632-35bf6648b27b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3b0b921-9100-4b89-8dbe-52a909f40342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4eeaa90c-7e14-4507-b5f6-d4abf8e76d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "258f90af-0db3-4f3b-9361-9be6dfe0cfa7",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c854522c-70f6-4690-b1a4-8ec581b2986e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56049e65-166a-464e-bb5f-4824acdc7518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "581f668d-0d37-4c00-a549-4a2ee3b88afd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "143ccdd5-037a-4a44-a66e-9e3124c1a8cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39f28c4e-7c65-4cf2-8f25-2e8d879b5358",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3885090d-1ecd-4fde-9f21-53d67f7bffb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1af84e4b-a5ca-44e8-9cdd-bd36f1c5b395"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4924e4ee-a498-456a-8bb2-71e70b597665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b748763-66a9-432e-9826-fbf4474bea5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b067bd15-02cf-4e3c-aa68-152680b75629",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a88e8ce2-35c5-4610-ae40-37ec9925e2ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "067fc63d-2232-48ac-b1eb-074113a5b020"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852c2039-cb1b-48fa-ad91-81714d7bfb3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d6f3fff-7543-4f4a-ab43-3cc8bca047b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "259a90ca-ba8b-469f-a27e-ef8b5c497b34",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82aba6c6-0e2f-4fa1-b25d-e84cb45bb657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6f0af42-9713-457e-bdcb-a0fa1da8bd83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0272f11-bd73-42d4-a586-414f11b84bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8f61455-503c-44bc-a878-6581b8f798cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69aee80d-fdbd-4054-8638-3fe5dd0bf183",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c9b24f-b4cc-4fcd-807c-9e7aea7ab758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d133c91-ce0b-497b-8321-194223c64f77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86fb3897-62fe-4df5-be53-323aa2100c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5db3b1f1-66bd-4f97-8ec4-5321e3697e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f100fd9-0318-4162-afd4-aece782058ae",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9beb7438-a254-446d-a03e-f170697008ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed6c21b4-efbc-4491-9b9d-43aa02e9effb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac07f238-62bb-4e99-a527-fd407627d152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61ab0131-04a6-459f-87fd-21b8e363c3ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "741f1906-3059-4873-b357-0e7a8f61d453",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "114178bd-0367-4b79-b0e0-2e474582a5d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88f795f1-53e7-4c76-bee0-d76e4e54cd03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf0a8d39-055c-4380-92d3-b42fba41ece5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfff64f3-e640-4986-bb45-fc1b750f14ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "800d9077-c2b6-4c7c-bac9-7267e220532f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82abaa2e-a8bd-481d-8eb1-65ea4f541bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1587baf-8fe9-4482-aa80-9aea45f5990e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7521c311-462b-41c1-9ba8-a9b12d6e890b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4db8903b-7d40-4310-a190-5570906abf4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07c07e69-7b56-4c0b-b139-6e528fcdb81d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82e12a5a-19a0-4550-a529-10ea71a4ada1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7562e97c-9c80-4831-85f9-1e2050acc736"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17cd6bfe-35e1-4934-ac73-a3bad29e0edb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6de478da-17ad-4f7c-915c-c1b4c715641b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20f38c67-a82c-438a-9969-2231547a4af9",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d739443b-b7ba-4112-a519-55bdc5dac304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "966c6349-66ac-45c5-983c-911c662997fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1158359c-edb0-4b67-97ae-9c32dc3b3200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "84ef6e43-b38f-4b50-8f26-db27ee908b30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6004f6d1-cdb2-43bf-940c-4b22c0a1e4d9",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "611cea9c-d48e-44e3-877e-c047969da176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9784eeff-d0ec-4138-a3eb-3b8020a237da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50f3d75f-89b6-4291-8352-b488adc5318b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbd0bdd7-091a-4a15-b65b-6c7c9b25920f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b3c714-bdc2-4fc7-9cf0-e3c8073b2efc",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6544576-9114-4be5-a6fb-3d3bddaa10ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73192fa9-58f4-485a-ad6a-51df512be22b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f708b6-a4d8-4e3d-9d87-5c9199cce363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0cb9375e-20b3-428e-8800-dcbab256bee5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a859862-26a7-41c7-8a2d-00ae356a20f6",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "356649ca-f40b-4354-8d4e-e87e1c2ca665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da1edc6a-4ed3-419c-ab5c-4d6c8c213dcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eac085a7-d4db-41ad-8bc6-81be2c8f3454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d94283d1-c1d4-4999-a545-90707f74c254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a6cae38-11d5-485a-a3a8-c1f6df72129e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a0b4eea-f548-4624-b819-1393331db7dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc8fd179-55bb-4689-8718-0c398a05125f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f27402c-e07e-464a-ae65-3227e143eb89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8fcb195-9f48-46ba-bd9a-6fb5cfa9e666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea525d71-b312-4bb9-8b95-b327f4b86544",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a659f524-0c71-4894-b67c-aaf4c96d7cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "776571fb-58ec-48d4-a2f3-904482b2421a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66b58c67-8a65-4913-b17d-51b9ec38e35f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69e7ad81-0d96-414c-9940-4077a7338660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b50cd9-4c1d-4f10-8ec6-466b7a777294",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e8130e-c7dc-44d7-a2a9-6d6526d04196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bad32afd-5a1e-4655-9fb7-471613f62fe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8322bbe3-327b-4d07-9e85-c58a5384aea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5419168-c31f-4c8b-a7d2-415de62271b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a31f64da-2964-4ba4-833a-9ccf2d004ecc",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d085b7d-3a94-4a0b-8b74-6faf2d253373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac3c398b-5515-4ad2-8cd4-31673ae4ea84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61839b54-ff74-486c-a3b5-11b8eabefc3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1429b412-18a9-4858-b530-2719bb7c3db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f7f6767-83ea-48b7-bcf6-b964c25a6b56",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2bb0f12-789a-45ca-96a9-3cb5e9b783b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb0d8880-22a8-450c-a5be-c7cbd07855ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10925fdd-a113-4145-a5e6-0f20b0b0611f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5dd4acf-08b5-47a6-a85d-1ddfc62e946e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "443d82cf-edda-43e4-b60b-a862ffe0cf5d",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f8a6c8b-5456-4030-bf6a-8b109edd9130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18313d2d-3fc9-420a-a050-89b2936afb7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb1627fd-659f-457b-920f-9ec98e8c8b8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfb79f61-7ff8-4201-8e81-bd5c73bf72a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2edf0a6-53aa-4546-953d-d61a3e3680e1",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c5abf49-f2bf-4f85-9646-ccc4c4cecd9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0297ecf7-f921-4cd3-99fc-86e03395b1d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a75a3396-a007-405c-8768-16e349059e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4261452a-81f6-43ca-8d74-5d0f4c0e9442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b116d94-e8c3-4c4d-9cbe-0b04f822ebf8",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea9bb0c0-f2a6-43b7-b508-89bc396dc0b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "664b9d82-70e2-48df-ae48-a24e2e5548c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d3433f5-8304-4118-98f9-f2c54b2d0048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a578562-895d-4e5b-9fdc-d397957ea2d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98d77bb0-a437-46d6-a728-1ee7f591915c",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9fe36fc-6426-45f0-9cd6-c866c4c855a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99178f39-c04c-4ef4-a25e-ab7ab1729aa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e0723e-b40a-44d7-a846-6887aee0d1f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bf0fa2e-d68c-43ea-957b-9e1b08f645a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb76512c-1210-4727-8974-c9f8978e22a4",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9687eec6-1dea-4644-add0-2578e27393d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88c94213-df0d-4731-a4f8-4c5ccb3cb6ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36d7a780-ae5e-4c3a-9dd1-66267f7349d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5ba1280-461b-4ce0-bad8-6d713c3cdb6c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "25640bc0-96ed-4da1-9a1a-25e695296f18",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fca0985c-61ee-420b-b783-9fce0e79f816",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caa217d7-e332-447d-9e8d-fb4095aaf847",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "202859e0-8820-49bb-99ca-0b9fd5288fac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a933274-3896-4a63-9d84-785323097c46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ea2708b0-eb19-4fca-8e7a-cc5b411ab7db"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "80b9a5c6-d813-4fb9-81bb-f168b5a7c40a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f380374-94b0-424c-8fe6-a1c1b963a67d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5bc67abf-4d0b-459e-9e2a-f3d1d447e70b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8afab79-9b3a-4277-b0e0-73e0b40d5ddb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dbab599c-50bb-4c1d-84b4-f2214ae39fe4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "25b3b7cf-ddc1-4704-9b0f-1169e5c0539b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2e6e035a-d73a-45d0-b789-d3d7e20ba432",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8f106c22-a909-4e11-97a9-eb595cef54ee"
            }
          }
        ]
      },
      {
        "id": "b09b1195-0426-4840-a467-f7da9c48f658",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "73231a09-e1b5-4470-9681-781d39e0a910",
            "name": "Negative Testing",
            "item": [
              {
                "id": "abd08e62-c9b2-4f38-a8db-cbf796cede52",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d3036c3b-2805-4f63-bc69-1884e4465b2a",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2c5c538-123b-4200-859b-a1738326356d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bec654a-a041-4d90-b800-3ddde6b010dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9bf6224-606c-4f83-b42d-53724fc8b9f4",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46d6393b-3a7d-4829-a8d8-1d93df28ad5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ff67409-59eb-41f8-9546-d6a3d95c1608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be58b2aa-d27f-4f7c-ad74-6d34d4ff3a2f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e794e9c2-1d9c-4e6d-9efc-9f041793e09b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4fe4df8-ae9f-4f87-91d0-a79db20443f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53a3bea4-e960-419d-b65b-34fde184a592",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd13d18e-bd74-4c7b-9ea8-867fc918c8bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22f9a913-6323-4bec-81de-058d781ef9fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b88603e5-61bf-4ef4-a9ac-2255ac8fbda6",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f6653d0-9ea1-4fc0-a744-fb74fd740b30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a06af090-ae0f-4ddf-8852-81858ad8009a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f716f36a-cd9d-4734-a281-35f24b03f8e3",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2731f42d-d3da-4d7b-8ea8-19073e5cc64f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14065daf-381e-47f3-88b5-6806866cac19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38446ef3-8a65-49aa-81bd-21a1d8bab873",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aefc512a-e5a9-4be5-b756-8eae146b37f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f04c6a7-6419-49ae-a7e3-841c1fa491c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "784021f3-276a-491e-b876-a4e5feac731a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8910610-5910-4a00-a50c-e9f143fa90ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb91aa25-72be-4e4d-8207-e957d598a443",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a23fb83-c4e8-4d81-aa98-393892a44828",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa0d6c4e-adf5-4d65-86e0-b414524b9dce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e293f0d4-0b32-49d2-a3bf-5d67a8c01f53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "048ca587-c1fc-4a27-bc5d-daf65f883b63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98e9fe9a-1ebd-4128-871a-9f923b137a38",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "402b4c85-602f-49f7-8543-8c476ae07f4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63cd05fe-5e8d-4fd9-bf59-4465c6f7a264"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b500172-f2f1-4fb9-b474-1c337b6b4e6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c5f15f6-d1c2-4cee-8483-1a17966c6beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4223f361-e7db-4d22-8c23-718632911b72",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "670dfdbb-4fa5-4d86-b2a6-3d3fea02e091",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83309bb4-11b8-4743-bb6c-ac1c43cd9653"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc9b5a2c-8bf0-486e-aa2b-2c75d268f2ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01bcc17b-2114-44e0-85ff-883e64f551c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a9b0c6-c4b6-4648-984b-3a50b1cbffe6",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f00afc0f-3593-4c5f-a512-38c670fbca54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a5a5fa1-05f8-4ca4-9581-d01da36e57ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b7072c7-f26f-4ab5-9c46-eac32ee058fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0054010-cabd-45a3-a1db-f78e70beb151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9866cc0d-69b9-4cf5-a8cb-1f21011de736",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4be80ebb-9fda-466c-aab9-2d41af529dcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63ac63fc-e28e-4824-88ad-4ebc84ce8ea8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb4c7931-131d-40f0-bf45-237106d721c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16510bf7-e36d-4362-9f50-8861d8cf3430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "323aa246-ea7d-4726-a27e-f4f7b369d667",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1e6f15f-fffc-47d4-9f92-4e67e6d2313b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca55e35a-0df2-4dcf-a896-4dfb9028a906"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94182ee5-fc6a-41e9-b0d1-67f9cc9adbee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eba9d94c-9704-48d3-a42a-af8508284901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "134992af-aadd-46fe-bf27-1370622e7444",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c032c32-6050-4aab-a234-59ee58482f85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7e5d14b-fade-498f-bb66-0e58734ef64a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adad8021-02b5-47ac-846f-416e3c63454b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ba12e02-9d88-4c9e-ae67-a4c03f5390b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2feb8a48-19d8-4e5b-82d3-b256efb3b197",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "326812af-1842-4758-8329-d13ea18c5253",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afc55ee8-546b-4c8f-abe7-93bd1685c615"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1133d0f9-321d-4946-ba7f-ad26c4942c5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd8d9d47-0a23-45a2-8099-b1307be8885f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3b73304-269e-4cc7-95d2-b9c1455ca53c",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cdd3ed9-be07-4b33-99d9-12ae452e588b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "403534d1-bc06-4724-adb3-62409cf680bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d798842e-b14f-447b-8003-2e4470e93b23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07e7614b-df13-4d87-bae6-49cbaca844cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f88ce11-9bcd-409e-b2f7-d07ec1bb7010",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b50acb71-1986-4626-bfb2-3fa71484bdae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd4897cf-963b-4e05-a9a0-d07fa5c79d91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "894cb22d-e954-4046-87fb-a3a5fd723568",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5c8bfe2-b728-4c49-b918-8c8f0dcbb5cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f311fe1-5662-42fe-bbfb-082b9172de0e",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e53fda7-2747-4485-8878-bcd23b0eecef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96bd0d3a-a6e5-40d3-b34a-0a59bbd61d0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75e49576-9049-4fa9-bd6c-67a3d5fe49e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a31fa9cf-b65f-41a2-8185-5b801067b448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e629ad39-6abe-470b-abfc-cbea3649a4c2",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd04ead4-7781-47eb-b703-bad48b6384bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dd63d6e-8628-4d35-817f-ef6465729617"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa075224-8887-40e2-b246-860d0d9d2074",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14775de9-0700-4778-a3c1-d84633a9da7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59424eb1-c4e2-455c-bf0b-fd71d6ce9faf",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "353878fc-ca1b-4cb9-8ebc-3d4fffb6b3c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ce7f650-6d3d-4f84-a46f-a96468c15889"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad8002cc-0d0a-42d7-acf4-ed03d11b0ebd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b61219c0-c889-4df5-8000-e673b3d6f210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c35e7687-d320-408b-a5f9-2671e4d2c6d7",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6223321d-4201-4ba8-a4fc-7cc872735bf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d9f72fb-4577-4185-b400-00d8fc1bd5dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec19f999-85c3-4f1d-b3ae-3d8a360e947b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8614f66d-5329-45e1-8421-60a17063fe5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05773fbf-e05d-4d00-820e-10a317426076",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf9fe541-9da5-443b-ac58-df72f08e874c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e16f5b85-9a3a-4391-91b4-548e44d4fa07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c90d46-e730-44e1-891b-8aed32200684",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dfec312-8e89-470e-a1a4-637732a87ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "136771b9-90bf-484e-b9aa-43288f5df68b",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "784687cb-bf41-4b4e-893b-252a6a5c9c3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "253f7755-365a-4ec3-bf56-32ed3c5926b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2b2f199-b5da-42d8-8fd5-056a3e403d66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d68dfdc4-f659-4442-ab36-84853f04c36a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4885c1fa-21a1-40b6-8956-1bdcf96fba62",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "051b21db-9462-4ec3-a742-6d96336b07e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7688755-43b9-4e40-983d-92dacb6c16d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cec2222e-4de3-431e-87ba-04179e8e8086",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abdb9566-c06b-42fc-b625-26d1fa6f1ef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c6e9201-3cd8-4591-9bb6-dcc044aee453",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc9b5cb-7854-400d-b47e-37e33a0bfa6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f565511-f170-4603-972b-bf763bef9792"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12d87a53-857c-46d7-b985-36a74d0baf83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e782ff9-6f0a-4cef-8462-5c7cb3037e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaebfb93-ef97-4ed2-ad58-e427ca2feee6",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fec43a1-93bf-4319-8c91-1c83d4c6dabb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95202ce7-beaf-4cf6-8302-a5a307a948e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9a2b358-99eb-4717-a53d-1ef2ce0f2d11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "067a3932-1f07-4a94-812a-b1404bb8e20b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eef696c-1a7d-4780-93da-9e3129381a6a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65361d9a-de6f-4f15-8fe3-c53d7a7a1ec9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2754ab57-5e19-4c19-8fe2-a54a89a23163"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e374f3e-ad1c-44c5-89fe-a085e7cf3272",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d126d816-2646-45af-b431-e37a167e736d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a19e89b-9768-4665-abbf-4199891c1163",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caef2d5c-b5a0-4e81-822c-d8401eb88d54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "606b835e-babf-4534-917f-2d5acb466f12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51fbfc73-304b-44eb-9b61-abdb676b3a4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eb7c747-8cf6-4cc2-becd-6e697a09ef10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63bcc683-59db-4acf-b446-3f0611e3fcc8",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b4d64d-7210-4e6b-934a-4c43d5b773be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ff12d42-c200-4758-b2f5-2fcc414b0089"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a940718a-d2c1-4c3c-a6c4-c46f88e0f554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c472630-3829-4e0f-9486-e2a0545cc379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9957936-b4a5-450d-a3e6-128601c3c38e",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e277e11f-089c-4cf8-9173-ef04c8722ee8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdcc6a54-ecf1-4b89-9107-ee40645654d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c76b9de-fcd8-4d73-9bf5-efd8166794d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e41bdebb-6010-468a-9658-283df41d612d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c20bfe7b-78af-4fb6-a887-a0b66eb86cee",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f1a4a0-5b2b-402f-9532-2e29ec2901aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a236bfc-422d-46ad-bf65-eeba201a9b85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05a15d83-b78b-45e5-bb57-0d911760253c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80931898-beb0-4c91-9222-755725b9342e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e57b8449-f212-468b-8d26-7acc06f03b05",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef9e8e7d-d672-44dc-bf76-67adac4c1b9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62c7fbda-f067-4455-9e0b-f6a897192611"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebfefd62-58bb-4b73-b375-d98bf48a0ff5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ba4bc76-2c44-40ac-97ac-8279182c83b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "130772e1-d5b0-45e8-bb76-ba132c63cb51",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f6444f7-1ae8-4679-8945-c22fbdbea36f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dff48f5f-15fd-49ca-9986-746775505e50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abef50b7-ba1f-4ea2-957c-0e2dc2e8c26c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7beb3c8-3fb4-40a9-b163-1055bf489b47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b31163-c76d-4ff7-bfc1-654139ba64e7",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14da5141-0414-42a9-a7f9-dc5449814d7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c65f3db-dcbe-4fa9-bca8-d259806611e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cb144f5-7d07-40da-9a5c-ffbcbe27e4c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7db3b107-3fa7-48a9-b028-637babef2c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a9bbd9c-9e13-4de9-8a2e-44a01036f215",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69d15c3f-f687-463c-bc1a-8af1343df7a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bde34ab-d568-4393-b8ee-776d00e7003f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fee505f-83fb-4dbd-8c14-92c4ae1a0268",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36cafdb5-2a1f-4790-8796-161a8b0e1e1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "821d9d80-05e7-42f5-9988-910a235c47df",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d2ce99a-2b64-4dff-aea4-236e806e62f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e72387c1-4927-460b-a14b-0e18edec35c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc577868-fa2c-40ec-a7af-936771f16738",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6febec3d-3238-4902-b207-a6063c388d35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea78d19c-55a4-46a2-9baf-aa469cfa71ae",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d68f1c9e-107f-49c5-9144-e92849b74e37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49a29699-bad1-433b-a7fc-2972df11d0cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f42d5bd4-e989-4a5e-b1e8-d40114c77b44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc7eb92c-b7c8-4e43-8b92-6b83f49cadf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71600ddd-70eb-4b48-97de-70184dd29a1f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac2a576-3644-4627-b577-41e592e620b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3efc4086-6663-4efc-b45b-2e14668da576"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa7c314a-e0dd-46d3-8c6e-a60a5c85a466",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e71fda55-71a7-46bb-aba2-dadd9bdd3a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dfff33a-4f4d-4f02-bedb-628d6c5e3fa7",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b022fa8d-d10e-4f3c-9c99-6d706e2b7e93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06e1970e-48a9-4ed5-b6a9-b534dbee6040"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1246dd9d-6cd0-45e8-9a5f-e11966982202",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26670e90-c3d2-4fac-a93b-f7fff7dbcdf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "778250b7-470a-4e38-9c9e-d2a58f6a6b66",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c05d0b-52e6-4f8a-8490-3e20dd702228",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fee4fc0e-d064-4ba2-91b0-4666b04896b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a172d20c-1d46-437b-bdf9-651bf2db4143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6c620d3-8efb-4fe8-9a54-ebc9283b182d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8cb1954-8740-44b8-aaf5-ec0efb118c00",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b93b90b5-b62e-432f-a93f-a591aff55120",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "763fa7e6-0840-4249-acd1-4c509626f908"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3966e2de-6fa1-42de-a4b2-4d85dd3e4baa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95959e2c-2832-41f3-91a2-183cd5b7f482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c59fec71-f4ad-4a46-ba21-09a7ec31b2e0",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78f940d5-c31e-4092-9aee-9f2fdeef947b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9b39907-1d71-4824-a5e7-1aca556e2758"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0df6cf3-6d8b-43dc-9d77-167cbbb14671",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfcd3953-8394-4da9-a200-b51b7f27b0c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2db6d9a6-ebe4-4800-94b7-0e92e7813118",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc71e723-8951-4ebf-bef7-5aa1cf959063",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8979189-5928-4479-b598-393e48ace025"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea660d9b-21fa-4c4c-b463-f86ca2b1b278",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06c235ac-9d74-4d65-a744-67a4543c4927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fe0c282-898d-4ecf-94e6-d39ead4ecdb9",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53189d5e-51a9-4aed-ac41-675668764ea8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10738b73-f88a-43a4-ae6f-a8c69450aa83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fa81a79-715b-42f1-a7da-6d235dc6cace",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de649925-58e3-40f9-bdd6-356e7e6dd189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cde4f96-da0a-4774-b99a-b35a9675b951",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19f107c7-8b8a-44f4-8e2f-b476f84a02d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37703559-c33c-4f61-b5be-bc23b13958a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "273004e6-619f-44df-81ec-4a1304f9ebfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8991f770-dfad-4f05-9912-6b774a453d76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edb64536-ec3d-459a-be9d-15fa4cc0b590",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bca90dfb-b772-4e30-98d2-3fcb115bb6cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "784005f0-2cb7-4b0c-87f2-f952ee22e908"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "380ef5c8-8510-4673-a0f4-99f374fa9e8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8d885b9-cf50-4a0a-83f9-de8acc8eb5bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31b922d4-3495-4bca-a4cd-b8c180180870",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9113b98-0db0-45f0-8d5d-05aa44e0afd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d46518ba-266b-4f17-802d-f90bb6c73340"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "163d94a4-ca13-454d-bf1b-ce452e19324e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47183041-9876-4ad6-b76d-43649ce3940d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "582a06cd-c63a-4519-90a0-7f38247a0e83",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9657a8b0-d46b-41a6-a266-807fbef23a73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf20c690-ddcf-4c22-89f4-3e9013db62e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79859124-2939-4cd8-9eba-b5006f21f758",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1b3efab-774e-4439-bd73-4789ec957d24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af9c602e-7d4e-4d20-8479-e848908a2e5d",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc291438-c1a2-429d-90ea-8f708acda5de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09e85ddd-e9a9-49a3-ad8b-ad3313aac1b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b364a3bd-708b-44f0-814e-e39907986f14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abc20cd1-82fc-472f-a73f-a54418853346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e944c9de-9fb2-4e7f-9d89-985e15dbea8c",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c7c62f-bd78-4e39-bafa-08467c4f1196",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90852961-7076-41f8-b123-003306af777d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5cba937-10f6-4ef8-924a-d1fa92f650a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "483989ff-81cc-41f3-b6eb-de22a96d4633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77ccbc32-a5e3-45e5-a2b2-8c997c2a429d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0910a454-b30d-4fc5-8edf-ed235a5993c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abe83a28-d8e9-4950-8371-4bf251bacf4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9fe6a7f-4f81-4de3-b3f6-cd5b77d8b511",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d5fad3b-415e-4d4d-8017-33d5596aada9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faaa4f31-8841-42ab-bb3f-daffefa028f5",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe38c30f-c9e5-4910-948c-d40cfa6fc68e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4158baf-0d10-4258-9e43-46cc97e5e696"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "359c722b-0645-4202-b6a3-9de0fe5e32e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "924637b0-da58-4d4b-9618-fc8cea2eb7e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d1eb670-77b7-40b4-86a4-8a7f039999f0",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1bcdf99-3cce-4e0c-8971-9a952dc917b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87fa186f-a6c2-4b12-8bc0-da20440b943b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "230ff415-93af-49f6-8579-356691a6c7be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30ed4bb4-6d3f-4e78-b610-f9217477e59d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af1a9359-d9c8-4372-8bd9-5fc60c62b09c",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28694a12-1f1e-4077-9918-f2236b9bd8d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8f239be-4a15-4266-9b3f-9caf3730c02e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "575d01d4-363d-465d-8193-902f4728edcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de392b6c-a7c4-4bf5-9182-d5e8298b6dde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44c01b36-ad97-465a-9a8d-7a942d9ff9e0",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6585c93-8033-4438-a26a-16e0089f659e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77026f5e-6d30-4528-bd74-7f2418267ef3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbe3ccbd-468c-4d9a-8630-e086d7d796d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17243c06-2528-47d0-912c-b22917b27ef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ec1dcd9-30c7-46eb-b2c9-f76c0aac5779",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a087bd15-b229-4866-a084-ff53b5b05c93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db7d0c93-b20f-4f07-9409-cb7cf749051e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dea804c-1dfa-4ad9-894e-ebe301141cad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c77b9909-1f77-42a9-a7ff-df849ca05e25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba49eb4c-e549-46f0-a8c5-51f06283de32",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ddeee8f-1682-4624-8eab-017e605f8ef8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e83f76f-f930-4fe9-8dff-84d6e901586c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47475225-1813-4f0d-bc58-d146dd8c747d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58c4bbcf-1dd3-4dbe-96f0-33c8ef122279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c748a507-da4f-4a1b-a4b1-d8acc64dee33",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "047e5c35-dfeb-43ba-942e-ea3ef67df1ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e287d24d-4a2c-48b4-8b34-f0d8df9e6c17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3b3ea13-4b64-4850-856d-96d0ee2aa654",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "307191d1-b31d-48be-9a6f-75b5ccaadda9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff0b1d92-94dd-4fa9-a01b-390d05f4dd1d",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58b8294e-85f9-41cb-bf71-efefc3aeb33e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11fb145d-9ef5-4867-b4b2-f5bd11113c22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2cb933d-939a-492e-8dfe-424a18994ca9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e732ae7-1f28-4b85-9dec-5873a5223ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03150e02-a9ea-48e9-a825-5d6c4d0ccacf",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd6938b1-d5d5-4472-934f-95f399a1287b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47de315d-a1bb-4690-878e-383a6b123cf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "655994c3-5f77-4aa1-9a59-53b653042242",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5478a3ee-37da-48a7-bf17-59788e36ebee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cf4f7a9-8078-4b85-8934-f3a1c91ce50e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f872239a-6c53-44d5-b5d2-2ba33ad2ec30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da74fe64-c91c-4d74-a0b3-9215bce967b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d96065e-04e6-4915-b30d-82a56e724e42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4594c30-4a91-4e45-a22a-1eb8c77ed07c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae746f9-2208-4652-bd35-61d946c388c1",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd14022f-5cc2-436e-b35e-a877beebfa11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfe64264-ef94-4c05-a13f-04f8f902f6ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8946891-a907-4a17-b5a8-4f8ad4e5b35f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8647be16-7d6a-4a1f-bcce-0efebffdff41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69ed44c0-cec6-4323-89e2-0792a64c28fa",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "009d09a1-3f40-48f0-b682-40a4a9ddf2a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f14652b1-0b25-482f-82f0-5205dadf3786"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cacba49d-5aa1-4b43-9d9d-5741d6794a2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1de1921f-0063-414c-b169-64501a73dd34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d9dd63-df87-4bc7-a059-8c06e2be4c8e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6b17075-7388-4ab9-be0d-4d9e7369fc89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dea21949-fd46-45a9-87d0-28de5c5542bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37e1997f-0074-480c-a8aa-c10922d3300e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80d45fb0-da8d-48d3-a314-ed4556059ba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec1d97d2-26af-4125-a598-1a3745dd7985",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a217f7c-0cf8-4a15-8600-d8c6c6878d83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d1d49df-858a-4ada-bfe3-77d03e39442e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc812630-84ed-4775-a8f8-9cc1927249e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29b844fd-4116-46cf-b091-b0e95444c955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbdb871f-0eae-4d51-a0d2-7d8ba594ddf2",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "356218bd-c979-4550-8b39-0ff7962b4048",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3479f5dc-7396-425c-8e33-3044665671c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "573dd505-724a-4916-a4ae-ed7e1be8799f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0193d4fb-6937-43d4-b5ea-254c41fb879d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6abdfac7-850b-4058-bd3c-344d570c916c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be9711f-8856-41b0-b06f-863aad1fe6d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a753a041-0dda-43ec-9a21-02119abf3ec1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbb76cf4-3675-466c-b7cb-3e997c7d7a8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c824fb30-36e8-4ea7-8bb9-a874b1462f71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b17e8f5-041c-4f8d-bc4d-1deaf34b211f",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93c365a5-1082-45f6-8d84-3ee8b893a62a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16b5a157-4b89-4bc9-845b-2beb913fdffa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60867bf8-ec46-4ea6-b0b3-e4bd2582abe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0608bec9-21cb-46db-b309-c0bd81798056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89898b8e-9cd7-4b1c-977d-654baea6832b",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c90563fb-8347-4e8c-a43f-315281b87273",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fb56390-ffcb-41be-8d35-3a8ea65cb654"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a8c3568-f1b2-4421-a80a-8adecd9b87c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1018a6a7-86f0-4299-90ef-eab7269c212d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e5e8a74-38a5-42a8-bd1c-1e94fce79cb9",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a03d6d6-0e4d-4ac9-b6ef-679e121fda3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3913978a-532f-4328-b329-95f3704581e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "628eac86-9ac9-45f3-9838-adfb96b67dbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "566fd8c9-b8fa-4b60-80e8-fdeb2956b572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2316249-f36e-44fe-97df-2ffa654f3624",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2206394-d9c5-4a1b-88cd-47eeb19134bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f82ea8af-ecd3-4696-8abb-aff41f34796d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41d53482-aa6d-4dd6-938a-04e7491f6a38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "585b81b5-9924-4bd2-a840-dd0ac1473ccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ea0c522-fb4e-4a69-9175-41527f1e823d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99d946ae-6911-418f-a86a-211cd8321428",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed5f627f-7731-4193-ad83-518ebce344f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfabde0b-6960-428b-b234-be7583031264",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03457982-c06e-436a-acaa-c28d0b678e22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "086e0dc3-7236-4c0d-96f8-2fa5a126625f",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "354ab782-4c6d-49c8-8659-0fde3e5be0a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db2bb0d5-dabc-4de9-af45-81ee88811241"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fbdf073-b2e5-456a-b9fe-e0f04e4dbb7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6458a75f-03ee-4506-8e88-55caaf97d06e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c44c8f33-0bf2-49fc-abde-4718c6e09909",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c611cdc-48fd-45db-8e61-09a909efbb3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d6075ed-04cb-4061-a1d6-3c58173d1d41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6915bc1e-8490-4e2d-8498-37fa58e2ec4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e89d2d3a-2a46-4596-a7f3-309b574ea6bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e156255-91af-4087-9d2e-961bb5ab49ad",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "961ec09a-43dd-46d7-9946-0d4d06d84ba1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebe395ac-7589-4101-a747-9957b68f8c3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0adf07f0-f29e-478c-871d-23391144fe96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0876a47-62ea-4085-a215-bce30d7b8445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b57cf71-0d6f-4356-8e96-e6ed4b016286",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6552db80-8052-458d-a7e6-9216d83c4724",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00ae8578-a24b-4348-ad72-48253ef50c1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "230a2d8e-3303-4fe3-b008-86f582f4192d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e0b64ae-774a-4313-a792-fc59fa569f1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "390bec4e-51dd-4e32-bd95-a7891a4f8108",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc91402f-d1d5-4e25-a9e5-1a9467a9dbe2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "412d4328-9e05-4555-9b37-1445e8bd9f21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a6df81-8ea2-4583-95a2-878a15bf5b57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1e11274-cb57-4b0f-8450-f105f016db1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c65ba7c2-d528-478d-b168-2d4258843904",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7330610e-a02f-4e97-b1a1-3b620732b61d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9f89bbe-f886-4fdb-99bd-0aae7a79d947"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d32c713-136c-4c0d-bd4e-1b75f1e47039",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "619cc6be-eb83-4f0a-b0d9-ef6af709ec3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f54a016-bcb5-4f86-9036-be90c3ce0fe0",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d48a68f-de13-40cb-bd93-9948385a8a1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f77db595-6bc4-4f33-8f4f-b15fbd9e530a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc8ed0c-c885-41a0-b6ac-760b9c82b65e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fd89331-b32c-41b8-af71-662f1d145a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c484f7d3-e62c-48e1-8882-ba7196f8ee43",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed4f6a9f-5f19-4902-becf-099a50c8158f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc583318-e48c-4b25-a7ed-865eb643fba1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5907758c-b779-42a8-b72a-82b43903eb65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7765d5b9-25a7-4e4c-9bcc-dba1800f4018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c7ca681-05a3-4a7b-8358-d6bdf068a80a",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84063896-c011-4d64-a10c-885d9741f3eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b35c03eb-2019-4bca-a2c6-30ff9d287bbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84dcd8e6-6f2a-4b61-923c-7f5db528d0b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f2dd6db-2369-4800-9e55-c2a7f12e2985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd1766e6-e280-460c-96af-43fcc3af3fbd",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d6111e1-e74b-49d6-9087-b3f86b19fd5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63e23187-2fc8-42f2-9b5a-510f898f2d2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2491b555-cb2e-4e92-a894-75574650f9a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f5470ba-0ff2-46d2-9349-1a1c21ce73e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd5da692-f4dc-4efe-a55a-0f5cd87c77c0",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19feb31a-a0a3-4f75-bdf9-8fbe310a2527",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0815c3b6-2d72-4c0d-9fce-7b0aadeb74a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be281530-5587-4e08-8c2e-24eec4ba60fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15606b72-7f1b-4da9-a04f-c06ea4cc0783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba11a9dd-aa45-4aed-acae-25eb48ac37b3",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9819c088-5fd6-4022-9f60-afe12193c33b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a57a35c-182f-464b-9cb1-969fcd1c334d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "864b2ba0-e35a-44d3-a2e9-840816c2378e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27145eeb-4e52-4e5a-bad4-b1b9b410cc47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbe7482a-7d5c-44a2-873c-2f39f279bad5",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06c0b89b-fb9d-4463-a191-1cc7a373f533",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d015b662-02f7-49db-8d9d-34b787c053eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7e81c66-a06e-490e-b8f9-ce5bf488082e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa649348-5c73-423e-9f72-62bf06bbc70b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f85cac4-5216-4b94-83ff-5c501ce28b36",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cefa8621-3fc9-416c-9540-c7a310ff06a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1cfd531-0437-4ef3-92db-6dc0a4069bb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68767ab4-0f4f-4f8b-a88b-a7e44e01246b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c4708d8-6b13-4e39-a3b9-2a8f880ac689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29c897d8-f20b-4ffb-a586-d112a669b87c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a26c6a4-7f76-4716-b958-9176e8534468",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb058476-15c8-49d1-8eb4-1289b3d46c97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b18e511d-6df9-461a-a240-6566ecfa2efa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed3f7643-4c42-48ab-af89-821fd16577d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6e1a14d-9ba5-427e-9fa3-54c33840f67f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db42a416-20cf-466f-9e2e-38bfc9d30e9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7404a982-c64c-43f6-972b-28d356afdc96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee66d986-5635-4b3b-840a-6dbadebd9236",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "987894f7-717b-4a3f-b2f4-79533e783eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bcfb653-3e2c-4441-9fdf-96ecfb7d12a7",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d612fb83-538b-4f40-a4c7-77ca60aef290",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "551d1454-5fb0-421d-abe3-76cc80a63dd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b11bbbe-1e53-4a41-a351-e3f9e2ef50f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07cf5839-fc88-47b1-bade-6a22c06414da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "878b618d-bb8d-44f8-b255-b872c7377246",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "605eed22-9935-419e-be82-926469f50215",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20868b64-b948-4268-a77b-4d76ecaed890"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2477b26d-421d-4e11-b1bd-fdb38c49cfa2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a268f72-4fde-4d80-8d7e-b38016543cbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3f67ee6-c580-40dd-9fd4-58cbe264e08a",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ced9ffc-a965-41da-a76e-b37bf9509585",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "857b9f52-e5d9-4ffe-b88a-276559ea4a56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "543d0d56-d41b-4066-b377-69b56b8957bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87a9245e-d012-4a69-84b1-c9c6a4bd5ce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ac5933c-3a58-4723-b182-1a08e3f402a7",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3036d47-260f-4a41-ad58-c0d6dcc2a1af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d3c76ba-b047-4907-9d6c-0f2cc0dc80c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc04eb0-5c98-400f-affa-d41936f773e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15f6f675-e625-4224-aa52-bcb5d27ad164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73135fd7-7646-47d6-91d4-6a75e670e1f9",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1413ed57-bcda-4ce8-8058-51cb83107634",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "403f6728-e5b6-456a-be53-04b19f1e10cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ca3881a-d70b-4972-8594-9501b833e026",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "448947f1-b28f-44d1-8a84-4cd76d24cfcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb37a868-fd9a-428d-82a0-3a8fd8f8e06a",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1659161f-c565-4b3a-8947-d3bdd2f43865",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6478ff1c-9926-4d6b-b6b4-392f533b1f24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dbe4602-c790-4f97-b9fe-452faa025cd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11bf310e-cb62-4f9a-82ed-3d848181f239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b69b04d5-4ece-4354-8e38-913f1e1ce0f0",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f917506b-137a-404b-bad1-18ad16ba7c82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc3b6bc7-0489-4584-8c93-216d1fa61f84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d8c5e2-61d4-401b-bd17-bd4e5f322161",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b18d8ebf-c345-4ab4-9e47-3121dd8f9e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e7432db-bd95-4c67-93cd-1ce21e6bbfcf",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5683443-0e2e-4b60-bab0-1d749800496f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60651067-2fa3-4b85-8350-dbceb5f6def3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "facaa9e7-95db-411c-89e1-5bf29056e837",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b30e1b40-fee7-499e-be3c-d171ce057187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b4ad5aa-2f03-44b6-9253-21dd441887f3",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e3e241-30a3-4dfa-b71e-873479342146",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b789f672-0e7c-4362-8dc4-dd2de70ab0ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82f0e31f-248f-410d-b61c-659cdcf7d5ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "120b9ada-acd4-48f6-afff-3d71936f0f33"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f0e78e88-7c7a-47b0-a6da-9c03f784e5a5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e5352b47-13a1-4d62-8b33-607fe50c6753"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5fd911a-c9b6-43fe-a984-2c29591d129c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ac5abd02-06ff-4260-a6b9-570c2ffb1a73"
                    }
                  }
                ]
              },
              {
                "id": "601a2986-cc62-4b7d-bd08-e1b8caeca66b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ecad92f5-4e54-4654-a90c-f4cb6c1aff4f",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60ddb036-e31f-411e-84ae-9814b3ad61b6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "e23a08e4-5396-460f-9208-85dc537de1ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce88034e-fd7c-4f25-a1de-b455b803a7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bef716c1-abfa-4aa3-88df-1a2d133988df"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5fc648ea-c697-40ca-af65-854e78e4ceb0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "24a9fd44-9dc7-4b54-b9bd-8a199c6037b8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b516476-2591-4ea9-8992-05c34e17c844",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e1bc051b-4aa1-4cb4-8410-662509852538"
                    }
                  }
                ]
              },
              {
                "id": "fe7f9acb-e231-4ea7-aa07-c959bfd81026",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "14b53103-b8f4-4d84-8f45-8559cfe1cf34",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bcf56af-c4a2-4202-91c6-7428aaf96791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "527d2af3-6ebe-42ea-bca6-41435c9dcfc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a46768d-717d-4fc0-8003-ecd98ea78513",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27e5fde5-6a51-4bc1-87e2-0133821923ab"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b17eb0d9-96eb-4a08-990c-71601188844f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0f71f2d5-a499-4069-830c-041fb3eea650",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ad7be281-c157-412d-89ef-85324aae8018",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "119c8df7-af9c-4b5b-96f9-2c25032f8595"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "245c0f41-6228-45d3-9250-357c23897404",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5604cab3-5eda-4813-9397-ea348ae87dda"
                    }
                  }
                ]
              },
              {
                "id": "b5e3ae68-dc94-4cfa-a514-4fcae1900faa",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "98564a36-f4c0-47bf-9b24-02c439cc2f5f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "15427454-c4b9-4740-ba16-e8d9a4e4e1c6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2cb02446-29b9-469a-babc-84d2fd42568d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bf5a8dd0-58fb-4b40-8fe4-71d50c38a821"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9fc1678f-95d1-4476-96fd-8ea46065e405",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "df585952-3a1c-4361-8f6a-46d4cd7fd529"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7b655219-15da-4143-9b78-c07dee527bb4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a89de8d0-9211-4137-b20e-7e5ef4b75ede"
            }
          }
        ]
      },
      {
        "id": "cc8ea5f9-1184-4709-bcda-a46aa7f5e343",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "aa4e5a29-181c-45df-9d56-4d9484b0179e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "88afd188-32c4-4bda-91cc-eb0ebf977537",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dbd001c8-52b3-4777-a565-3f98106d6b54",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b0bbbf7-1cf9-4afb-8b1f-6690f557f741",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e034f452-a7a1-4166-9584-fa034c812c1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "171a32bb-ce92-4f34-9836-ae5260619538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cae5c252-50b3-412d-9c55-5efb046b1361"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a03fcad-b5f4-4524-a0be-805127889595",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cbc58505-ef96-4710-806a-5b36e80298ec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dd786cea-dbad-44e5-9642-809a0df3d568",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6d926417-3917-4c71-8fb1-f464b4d2de3c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0fb295e8-5a5a-4731-86bf-e5487dabcd78",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6a70a821-ea55-481f-a936-92273f320f58"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1c7890d9-238b-4a8c-828e-31ca44550fb6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "957dc701-05f5-49c8-a6c6-552d4ae818c7"
            }
          }
        ]
      },
      {
        "id": "55808131-f792-4905-abc5-a9e72317beca",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d751d698-149c-4001-9a6a-38d4c1eeff2f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d1c9818a-83e7-4509-95be-5217830ce30f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f7a92e7a-8b72-4eba-8a13-18eebff18e8c",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e156510b-3fee-4a8d-aed9-71e549216bf9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c03e109-8c0b-451b-b66b-23bc339cd78a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cff48551-d1d0-4adc-94e5-0c03559b200a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2342b98-8423-49f8-b177-6ec34f02c95a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fc6c9387-6e6a-40c6-81e9-5809b28fe1bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ba627ff1-8218-4070-b512-206e954f4898"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "53554ee0-642b-4fdc-be3c-a0f107fb46c9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "405a472a-0899-4f2a-b624-1ac5b142eae5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3c0faf9a-403d-4169-9178-16cab691d455",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "24bd52bd-bca9-4b47-8011-375a302d6a9b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ce7c911f-cb73-4c14-b0bf-c45c94706d9c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1b8f0a8d-b742-437d-9db1-0a349ab9aa72"
            }
          }
        ]
      },
      {
        "id": "f8f49392-f1f2-453f-a11e-f990bbec9865",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "9c9c2e08-82bc-4f3e-b684-4b6a3458d1a6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2fc17932-a4c6-4582-92f5-b758abf54bc7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4799ebb7-d004-4d0e-a473-90242fc18992",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "224edbb1-5176-446b-be8c-cbdb5d573817",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "855f075e-bd4b-413e-8989-aaa42c04975f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af44f6f-290e-4334-919e-0262fc1c9c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89664ce0-4237-4d90-b86b-dc6605012bb1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f12dea32-bca5-42ea-91a1-17384dc0b4e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6cf2f95-6484-4d38-baa0-6ed1f3318274"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b3920b4c-ad50-4d08-8b94-c637b82dc257",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e79a2d51-ded2-4f9c-86d1-5e877c052001"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f055c383-a337-4ad7-9202-301054bebd1b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "972f1eb4-7b06-4770-8bc0-e9e62f2ca220"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "658fbadd-3729-4e7f-ac8d-bc5d693852dd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "57f14151-d0cd-4340-a01f-0a128126e99c"
            }
          }
        ]
      },
      {
        "id": "f762a38d-1d11-48b8-a752-31caa9408f91",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5f3c8c67-1cd6-4726-b028-739a0e442cbe",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dffb1e6a-b2a8-4168-b3b1-b7e7620a7bce",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e55a9b88-47b9-4c77-a128-ae62201831e8",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a1bcf497-2cdd-4ff8-8215-8d8231f19c56",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d1194fc9-be72-4999-b619-b0ed8427d3d0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 153.15845070422517,
      "responseMin": 7,
      "responseMax": 1986,
      "responseSd": 241.9316184213337,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1697157279567,
      "completed": 1697157337022
    },
    "executions": [
      {
        "id": "fde66af2-c152-4785-81c4-2835f8773633",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e1358101-9325-4ac8-a7ed-9a2174ca93af",
          "httpRequestId": "f5d1d80d-e5f7-4394-b7de-01bf8ac0a4bf"
        },
        "item": {
          "id": "fde66af2-c152-4785-81c4-2835f8773633",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "da9cc1f1-d602-4207-a2a6-10dd2bbfeaff",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 0
        }
      },
      {
        "id": "64192b51-e99f-4b6d-be2d-2688746e7994",
        "cursor": {
          "ref": "e4e98c26-ca2e-4ebb-a5e5-68b3392970e8",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "1c660196-af63-4d06-ad84-621752cdc293"
        },
        "item": {
          "id": "64192b51-e99f-4b6d-be2d-2688746e7994",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "1b07b317-683a-4546-8612-67bc461030c5",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "98771155-e709-4f05-ad29-4e57fe362ad5",
        "cursor": {
          "ref": "d051259d-d17a-476c-9d5d-88183df5b7da",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "2ed0ef5b-7f3c-4003-bdb4-425ec1051511"
        },
        "item": {
          "id": "98771155-e709-4f05-ad29-4e57fe362ad5",
          "name": "did_json"
        },
        "response": {
          "id": "bd7704d7-51b1-44e5-bf22-44d91448a800",
          "status": "OK",
          "code": 200,
          "responseTime": 305,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5197f83a-6220-4a09-ba35-3d1ad59b65bc",
        "cursor": {
          "ref": "12cc39f7-3d6b-47a1-8207-32c97bc7aaae",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "95cc3957-7ded-4d7e-8398-f8a45f91ce4a"
        },
        "item": {
          "id": "5197f83a-6220-4a09-ba35-3d1ad59b65bc",
          "name": "did:invalid"
        },
        "response": {
          "id": "c957908f-6fd7-477d-a4a3-c75e782ea221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5197f83a-6220-4a09-ba35-3d1ad59b65bc",
        "cursor": {
          "ref": "12cc39f7-3d6b-47a1-8207-32c97bc7aaae",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "95cc3957-7ded-4d7e-8398-f8a45f91ce4a"
        },
        "item": {
          "id": "5197f83a-6220-4a09-ba35-3d1ad59b65bc",
          "name": "did:invalid"
        },
        "response": {
          "id": "c957908f-6fd7-477d-a4a3-c75e782ea221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a48c573e-c96a-4839-b524-cd5d7cb4dc9a",
        "cursor": {
          "ref": "08b9fe98-a826-4a95-93a3-2dbad2cb25a8",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "1a43e382-038c-4124-a255-ab15d015c8e2"
        },
        "item": {
          "id": "a48c573e-c96a-4839-b524-cd5d7cb4dc9a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "8aee87be-2b8b-4c10-8e1f-d06913912cc6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 146,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c81b96f-209f-4061-8ef9-ea789d238409",
        "cursor": {
          "ref": "dd944016-acb3-4a91-b71d-d2721e6ff09a",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "326024eb-0d00-4839-a716-c7ca4cd3cfe0"
        },
        "item": {
          "id": "7c81b96f-209f-4061-8ef9-ea789d238409",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "80e9b341-e38a-48f8-a7cb-bf98299cffc9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 98,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "550af996-bad2-490a-8e03-fb810d5f5dea",
        "cursor": {
          "ref": "a728768d-5dc6-4ad7-8ccf-e4549057db20",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c84b9786-8f79-43e4-80e9-67b454439e8f"
        },
        "item": {
          "id": "550af996-bad2-490a-8e03-fb810d5f5dea",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "9ed3f3c1-c1a9-4884-b762-ebbae7837991",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83946dc5-fd26-42b4-87a8-a58363cbe5b6",
        "cursor": {
          "ref": "c96b1010-2521-4a6b-9850-882884ba13c0",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "14a147d9-bd2a-4bfc-9b30-9f401b2bdce3"
        },
        "item": {
          "id": "83946dc5-fd26-42b4-87a8-a58363cbe5b6",
          "name": "identifiers"
        },
        "response": {
          "id": "f0a767b5-ab33-48b0-9c75-d9f6a3a7670e",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30a309d3-3d96-4101-b562-f2a41406a41a",
        "cursor": {
          "ref": "53aaa800-a934-49f2-a7e0-4770b3a060c3",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9439fbdd-bf48-4d60-9ebe-f2270fc03a76"
        },
        "item": {
          "id": "30a309d3-3d96-4101-b562-f2a41406a41a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "bb9ce59c-522c-4829-8522-7015ea25729f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3b90b37-2c81-42da-8276-eab21055015c",
        "cursor": {
          "ref": "f34c3a92-9838-4317-a8b4-9f8166bddda0",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6003faa5-f9b0-4e99-ac43-17edee395b50"
        },
        "item": {
          "id": "e3b90b37-2c81-42da-8276-eab21055015c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "ca276aa7-c90c-4039-a914-8e873707415d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e117956-a0df-4481-a9cc-e619bffa2dfb",
        "cursor": {
          "ref": "0c93ccc4-5d04-4557-a9c1-4dae2820e326",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "57a14f9c-9e3c-43fb-948b-9678741a8f4f"
        },
        "item": {
          "id": "8e117956-a0df-4481-a9cc-e619bffa2dfb",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "2b0ceb4f-f9f1-4243-939c-449353d15df6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21217bb2-97c1-40af-9a2f-f2106c3731b0",
        "cursor": {
          "ref": "833e1b0f-190a-4f88-bdbd-259fac09c635",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "76f2177b-e920-4a5b-927e-d44dd8a1cc43"
        },
        "item": {
          "id": "21217bb2-97c1-40af-9a2f-f2106c3731b0",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "860e20af-58c8-41db-ad6c-c73d26726793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e933619e-2cf4-44b8-b5e0-728f8168c573",
        "cursor": {
          "ref": "0f4c3b2f-99bc-422d-8372-6b08bf7d02fe",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f0ace9d9-bd8a-4946-8aba-a8d9e956fd72"
        },
        "item": {
          "id": "e933619e-2cf4-44b8-b5e0-728f8168c573",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "605c0386-e89b-4dbe-aef7-e86c672dc92a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbeb24a8-7eb9-4521-aef0-8fa97f51a423",
        "cursor": {
          "ref": "846b8e99-32ca-4598-a515-ded8f4439954",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a176636e-7367-42f2-a932-5c6e3056ebd9"
        },
        "item": {
          "id": "dbeb24a8-7eb9-4521-aef0-8fa97f51a423",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "ad3a8afc-c5f0-4edf-b7b3-4c1c3833d030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9a52fc3-9615-47bf-ba99-d548410dd76b",
        "cursor": {
          "ref": "77b04966-9158-4032-aa37-0a1ed1292542",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "7aaf9a82-73c7-4c13-b726-53b0abc5aeef"
        },
        "item": {
          "id": "d9a52fc3-9615-47bf-ba99-d548410dd76b",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "bc6a17d0-d41a-458f-b1fa-f268f4a0e1cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7696af1-9168-428b-bb2d-3efa87d5995a",
        "cursor": {
          "ref": "d35cfadd-4eb2-4a6d-b4ff-56b029c03028",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "5a5423d8-bf1b-49a4-9c00-85f6d03dc7f1"
        },
        "item": {
          "id": "f7696af1-9168-428b-bb2d-3efa87d5995a",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "707bee20-9e64-4bd9-9585-989a821e0a65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7564baff-4463-4dab-b9b3-ce911ed9ea7f",
        "cursor": {
          "ref": "36c9bf7a-43b2-4db6-8c1b-63bc84ce4853",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "2bccc9d1-53a4-42a8-9614-2bf86227581d"
        },
        "item": {
          "id": "7564baff-4463-4dab-b9b3-ce911ed9ea7f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b8145809-880d-4356-a5a0-1e09e86165e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a1af46f-da6c-41ff-b3fd-015e4e2ee4d2",
        "cursor": {
          "ref": "d6ad1387-6878-4c9e-acf0-8430fcce47e8",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "5cb7fbde-6b93-4627-afa1-3134277a804a"
        },
        "item": {
          "id": "9a1af46f-da6c-41ff-b3fd-015e4e2ee4d2",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "47054654-c783-44d1-8fb2-a3dc3de9faa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18ac3bea-fb0f-4efc-ab39-9feba1db1613",
        "cursor": {
          "ref": "8ac59410-af9a-4edd-861c-38a414061b05",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "57372c98-8a65-425b-88ec-e8c7f298f1e6"
        },
        "item": {
          "id": "18ac3bea-fb0f-4efc-ab39-9feba1db1613",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "485c0d90-c9a9-43ce-9ebd-3bb84ff0690f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3230980-a5ad-4a26-947c-66e0ec9c58f9",
        "cursor": {
          "ref": "633779f0-fadb-4ac8-9519-dd628e7e181a",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "96e9ad93-40cd-4f0f-8a70-31130b2dd6c4"
        },
        "item": {
          "id": "b3230980-a5ad-4a26-947c-66e0ec9c58f9",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "fa1ce956-c0fa-4d87-bfe9-2fc33f1b0cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b3837a6-bd49-498b-9158-85310cf9cde7",
        "cursor": {
          "ref": "771ff0bc-186a-4cb1-8614-0f927368e9f7",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "0c6511d2-de22-417a-b256-a07c63093fe5"
        },
        "item": {
          "id": "1b3837a6-bd49-498b-9158-85310cf9cde7",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "c55cd3c8-3328-48cb-ba29-6b02615bc80a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc44910-9270-4d64-bdbd-38097d42b2fa",
        "cursor": {
          "ref": "27e9037f-1bc5-4f8d-babc-093569e3ddb6",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "fd7ff7d5-2834-4b1a-ab64-89c660fc603c"
        },
        "item": {
          "id": "acc44910-9270-4d64-bdbd-38097d42b2fa",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "94ff0e6f-7d17-434b-9fd8-1ad05a1539c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "531aec9f-637d-4a12-b54e-53dcebdf4a4a",
        "cursor": {
          "ref": "a1d4a311-d609-41a1-8166-5f4c7d317f08",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "675b40b3-13d9-4a09-bf74-bdefdc3a3944"
        },
        "item": {
          "id": "531aec9f-637d-4a12-b54e-53dcebdf4a4a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "4334a074-1524-469a-b9a5-9356dbc9b917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc953fc7-e740-4584-a425-6c12df2bc56d",
        "cursor": {
          "ref": "4ee2f3a0-89c7-4027-9116-b76241c6bfdf",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ca1a924a-1be9-4239-8c0c-208d5459f4c1"
        },
        "item": {
          "id": "bc953fc7-e740-4584-a425-6c12df2bc56d",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2863836f-f9b5-41df-81c2-6c8c0dde69a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14fcf329-0355-4201-8d58-e9006935bb4a",
        "cursor": {
          "ref": "cfd4ad21-9beb-41e3-87a2-e139b2ee0c6a",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "2c0c971c-40b0-4a2a-a77b-26355df1e851"
        },
        "item": {
          "id": "14fcf329-0355-4201-8d58-e9006935bb4a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "4c2d8655-1c63-4bd7-be01-2790608a7121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb193ba9-1e0d-43b6-a99e-97fce8e5a48d",
        "cursor": {
          "ref": "4ddfb86c-94b0-493e-9616-fe2ee7b7afe0",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "23cfe9fd-20f6-4c6e-b4d6-53c2b0eb2969"
        },
        "item": {
          "id": "bb193ba9-1e0d-43b6-a99e-97fce8e5a48d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "9af3b97f-0ba2-4d86-86b4-e6760f7664cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9270664-2a09-4fc9-a85d-5c3486a9b35c",
        "cursor": {
          "ref": "ec5939ad-090a-4df0-9412-d9f04e4f5d18",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "32d98036-472f-4e40-ac60-afb759f8927f"
        },
        "item": {
          "id": "c9270664-2a09-4fc9-a85d-5c3486a9b35c",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "db51db4a-ae92-4202-bba8-34f05a8b6541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85c7dd12-599f-469d-94d1-ed64d63a1eda",
        "cursor": {
          "ref": "23a13ef3-3170-47f5-94b0-010624d90620",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "22448f45-14f4-41ec-a9f8-ccaead375b47"
        },
        "item": {
          "id": "85c7dd12-599f-469d-94d1-ed64d63a1eda",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "228696d1-4711-4024-acf9-b1b5115da103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5edf472f-195e-47ab-8410-05bc9a9ca873",
        "cursor": {
          "ref": "dde3b3a4-931f-4be3-a040-c02c528030de",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e5017614-fd47-4133-94c0-c529b09eff21"
        },
        "item": {
          "id": "5edf472f-195e-47ab-8410-05bc9a9ca873",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "cc3d6e6f-e78b-4318-b17f-7c14ee7ee929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c0abb7-340e-4edc-aba6-c2e9fb9b6dc8",
        "cursor": {
          "ref": "61508211-c720-49d3-81d1-06d37c640206",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f4137cd3-9675-41b2-b634-a94a80e611fe"
        },
        "item": {
          "id": "20c0abb7-340e-4edc-aba6-c2e9fb9b6dc8",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "42fe9a21-dd5d-45b6-ab0c-a78de0f6df1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07f3f9f4-3d9a-4141-bd1c-1e2513a449be",
        "cursor": {
          "ref": "bdcbd368-08ab-4e1b-b16b-003b43b780fd",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "49c01332-4920-433c-9173-15f495f9a295"
        },
        "item": {
          "id": "07f3f9f4-3d9a-4141-bd1c-1e2513a449be",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "390aab3f-aa2c-428b-ae51-192ea066b5f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "475f4793-4fef-49ce-a3ab-f0054975b568",
        "cursor": {
          "ref": "402e2eee-c840-4497-83be-e81277c04cba",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "5b1a698e-9a9d-4b54-88a1-a22f2d56a979"
        },
        "item": {
          "id": "475f4793-4fef-49ce-a3ab-f0054975b568",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "df731be0-719b-4bc7-8430-08385e3b892c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be7849a8-52ce-4460-ac77-85af7aab1275",
        "cursor": {
          "ref": "640ff703-e7af-4289-a36d-e950d8835f49",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ff9d244d-62ba-4a02-a2d6-cfa3472d3ce1"
        },
        "item": {
          "id": "be7849a8-52ce-4460-ac77-85af7aab1275",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "8a96c4ac-cfc1-4f40-b203-ef79a2670066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "613f64f7-dd4d-4ab1-bf2d-ff34ea1255d7",
        "cursor": {
          "ref": "2ff67a38-e89a-4a30-a367-65f01cb1acb1",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5946f7c6-61a2-48d3-a914-f80990488df8"
        },
        "item": {
          "id": "613f64f7-dd4d-4ab1-bf2d-ff34ea1255d7",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "9b04af1e-7aa8-4f1a-83d4-525fc1ea0c8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7b1f0a0-16e1-4125-896e-c1f30c9a64da",
        "cursor": {
          "ref": "9a196437-94bf-4a86-816e-33c38ce1eb9c",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "8d0e8efa-64f6-4494-9682-2a2e1f2a1c72"
        },
        "item": {
          "id": "b7b1f0a0-16e1-4125-896e-c1f30c9a64da",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "36add1bc-5e00-4949-91f9-b35044c52261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98de5779-5c45-48f6-b57d-cfc2e5793c94",
        "cursor": {
          "ref": "fb1052c5-6d25-4d12-82d0-2ead0217beaa",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "6fc1c5eb-598a-4a39-be67-3d6502aea734"
        },
        "item": {
          "id": "98de5779-5c45-48f6-b57d-cfc2e5793c94",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "7b8833c3-5bda-4d35-913a-c50f73946f5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "097ea05e-d0ca-4b8e-bcc7-ed939b450766",
        "cursor": {
          "ref": "a244c1bc-20bc-4704-a738-03cd4aec84c1",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "094424e6-3057-4d20-906f-e47d8ee197bd"
        },
        "item": {
          "id": "097ea05e-d0ca-4b8e-bcc7-ed939b450766",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "9c8590b3-973d-4ad3-a13e-ecb5da5fa6af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2a93419-295c-4093-922a-3362726947cf",
        "cursor": {
          "ref": "e3848a63-d7d8-47df-b360-d2cc85f5beb2",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "36ad11ff-9c41-4eaa-8213-e7a556c0d3f3"
        },
        "item": {
          "id": "f2a93419-295c-4093-922a-3362726947cf",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "2e932c11-b61b-416f-8627-f21ab0837c33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d02e931-c89a-466a-a02f-32178d256823",
        "cursor": {
          "ref": "669b940d-0909-42e0-8da1-f83b221ac5d5",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "cc8177ac-ec32-4e1d-a681-b1c8b613a797"
        },
        "item": {
          "id": "9d02e931-c89a-466a-a02f-32178d256823",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "9dc0d816-a7e8-436e-8629-2428c6535972",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 91,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "90e2a2a5-da46-4e25-b1a8-0e32efb3e302",
        "cursor": {
          "ref": "06c72f2c-7410-43dc-a6a9-0e572f971daf",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "999d13d8-e198-4949-943b-4bd3700bca3e"
        },
        "item": {
          "id": "90e2a2a5-da46-4e25-b1a8-0e32efb3e302",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "0a415118-6739-4415-b199-b9e62c36d07a",
          "status": "Created",
          "code": 201,
          "responseTime": 1986,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "5177a5ac-419f-4745-9ba3-3f9b04ae65f2",
        "cursor": {
          "ref": "cd094c29-22e2-47af-a528-961ee7849644",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d36882fd-144c-4145-9651-12a1bcff6505"
        },
        "item": {
          "id": "5177a5ac-419f-4745-9ba3-3f9b04ae65f2",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f07c3ff7-cfd1-4db6-9fdf-065ca7c5a7b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 91,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "b88821e1-26bf-4029-8dd2-0f360c798f13",
        "cursor": {
          "ref": "6022d289-0378-4f2e-9e86-5dd8db61fdd2",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2ab193ad-d22b-4ce5-a03f-fbd71318d3b3"
        },
        "item": {
          "id": "b88821e1-26bf-4029-8dd2-0f360c798f13",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "3320f056-0778-4de2-9837-8d61364d9292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c72ec8a-6a88-485a-9fae-512742c07c3f",
        "cursor": {
          "ref": "e2a167fc-d7d1-4968-8248-4bd49e591682",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "e9f02738-47b4-487f-a4d0-b78b2578b36f"
        },
        "item": {
          "id": "6c72ec8a-6a88-485a-9fae-512742c07c3f",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "2e444b47-529c-44fa-8560-055bc62f18f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "5a1811ec-d9f7-41b3-8225-df133c293d5c",
        "cursor": {
          "ref": "3f455e93-d48f-4abe-bad6-7271da502f52",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "7f3d9e1d-6236-4554-9cd8-69fe8bec4bfe"
        },
        "item": {
          "id": "5a1811ec-d9f7-41b3-8225-df133c293d5c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e7e06fe2-8009-4874-8ec4-0a00f6cf4b63",
          "status": "Created",
          "code": 201,
          "responseTime": 1533,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "0b882419-47d5-4390-9672-9af1260ca8ab",
        "cursor": {
          "ref": "c90ba288-1d74-4d27-85be-5eee4990d8fe",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2fb37828-2ff3-4285-8ae1-b061edf41a63"
        },
        "item": {
          "id": "0b882419-47d5-4390-9672-9af1260ca8ab",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c0c51967-9147-45f5-9ee5-fa6adc162586",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 91,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "c5e37f33-6c4f-4c23-b8c2-4b46b11917b5",
        "cursor": {
          "ref": "0dd2ef7d-5f87-4137-988c-6dd1cba62d29",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f8a9e635-2510-4af7-b282-ed8a095d49b3"
        },
        "item": {
          "id": "c5e37f33-6c4f-4c23-b8c2-4b46b11917b5",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e215e397-2372-4aca-b885-5aa712cc69a3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 760,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "ed901240-1520-4113-ace3-12994e07779f",
        "cursor": {
          "ref": "9417381e-6c50-46cd-91e4-338563efa619",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "bb2aae8a-cde9-473a-b39c-da8d57bc5f6d"
        },
        "item": {
          "id": "ed901240-1520-4113-ace3-12994e07779f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "50fc49f8-6608-4b6d-a3db-7f1e5ba20f38",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 91,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "1dd9966c-ce9b-427a-82de-2fdf42af75a0",
        "cursor": {
          "ref": "98555e78-5ac8-4858-a834-b9adee1c4fc8",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a895129e-8af8-4a7c-82e4-4ccb71cd4221"
        },
        "item": {
          "id": "1dd9966c-ce9b-427a-82de-2fdf42af75a0",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "d0b68b9c-6c78-4c6c-9f61-786aeb21dbbe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 91,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "4c2d0333-ee53-45b1-bd42-575a47434445",
        "cursor": {
          "ref": "5fb6aa34-bf86-4809-a391-789fde8975d2",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "4f4424d2-ff1a-4ac5-87e4-996e7d78c008"
        },
        "item": {
          "id": "4c2d0333-ee53-45b1-bd42-575a47434445",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e3e90f85-0fa1-4e88-bbfe-4e65a6753bec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "67250424-b2a9-4bf4-a313-0aeb6fd85059",
        "cursor": {
          "ref": "51164599-5d71-41ed-b86e-c39695a97004",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "01ec66bc-c7fc-4d70-89a4-ed7d3219c3c7"
        },
        "item": {
          "id": "67250424-b2a9-4bf4-a313-0aeb6fd85059",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "64f22620-490e-4baf-b85f-4d674ece8655",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "4bf66339-e4ea-4513-a2e4-6c32dc9ed50f",
        "cursor": {
          "ref": "9ab7799f-3cac-4bdc-9e73-d59ec99f1070",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6b4c5291-845a-44a8-a38a-693f06f3e4e8"
        },
        "item": {
          "id": "4bf66339-e4ea-4513-a2e4-6c32dc9ed50f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "54015405-a78f-4847-89e2-59e3a4349669",
          "status": "Created",
          "code": 201,
          "responseTime": 972,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "28885b3e-1062-41d2-8a90-7b3dcaa90aea",
        "cursor": {
          "ref": "704de849-0109-4b0a-b09f-6f6819bbe9e5",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "12ab8dd5-caa2-4410-adfb-f1b8b5fb40fc"
        },
        "item": {
          "id": "28885b3e-1062-41d2-8a90-7b3dcaa90aea",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2fce3f80-696c-4bbc-9f82-1b65a5b21194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd557e59-06ad-4206-822b-ece7b4a3158f",
        "cursor": {
          "ref": "68cb2b80-1f14-4d2d-a86d-645a7d479905",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "039c0bd1-1e40-4e0a-8265-2f2a5f8ab4ca"
        },
        "item": {
          "id": "dd557e59-06ad-4206-822b-ece7b4a3158f",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "74c5c717-be03-472e-a2c4-f19584369808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb367ee9-eeb2-4740-9098-e8e5ff4ccb89",
        "cursor": {
          "ref": "79522417-5c39-40b1-8bed-e5a50197fe07",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "23c7aa37-f53b-486b-9b86-09e7f1d7c536"
        },
        "item": {
          "id": "cb367ee9-eeb2-4740-9098-e8e5ff4ccb89",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "fbb4549a-29b4-499c-a755-9b2a37b0edda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc510946-adac-4ebf-91e0-c49014780542",
        "cursor": {
          "ref": "7b4e0d5d-38d0-4a93-9d57-c79db287e093",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "19cb3e96-113d-4d8d-b0ef-96f5437ade90"
        },
        "item": {
          "id": "fc510946-adac-4ebf-91e0-c49014780542",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "39e76bc3-217a-4876-b5aa-fe8e4f180db0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eabbc0b-4e23-4382-969d-427a7732dad6",
        "cursor": {
          "ref": "d5ec328b-b273-4f13-802e-1435b0f83a47",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "1984de3f-91d3-48e8-b318-4f33bf11821e"
        },
        "item": {
          "id": "9eabbc0b-4e23-4382-969d-427a7732dad6",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2905ec1d-6a5c-4009-a70d-8fff8927e0d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6289f16-1b35-45d2-8ddb-dc4281ed65fd",
        "cursor": {
          "ref": "2fb58e59-e3ed-43a1-88a9-6f93584733b7",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ab8d9ab3-1e05-422a-a947-ed0ac3703427"
        },
        "item": {
          "id": "a6289f16-1b35-45d2-8ddb-dc4281ed65fd",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "0eeb9fa5-ff95-430d-a10f-d3690aa234a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca35dde-9b5b-4d60-b476-986fa91ce6ce",
        "cursor": {
          "ref": "38d342d0-531f-4810-b155-081b9d1fd7c9",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "1e8f89ea-cc68-4d92-b4ec-0ab51f5972fa"
        },
        "item": {
          "id": "6ca35dde-9b5b-4d60-b476-986fa91ce6ce",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b3223094-741b-42a1-b4c0-d1ae56884e9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd6e9acd-0372-4fa5-bdd2-18394ac2881a",
        "cursor": {
          "ref": "4e8c88a8-5ba1-43ab-b053-d054fadc46f4",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "dbd10ab8-7117-40d4-9f46-f042165b85d2"
        },
        "item": {
          "id": "cd6e9acd-0372-4fa5-bdd2-18394ac2881a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "5ab9bd7b-082b-43d9-b9ef-3194a3195227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12918e12-10ff-4d31-9f5e-bc6f350a06a1",
        "cursor": {
          "ref": "96ba3722-1d66-443b-8fee-19616982fc02",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "1a03ed4e-c19c-4d95-ba55-9725cc2b5368"
        },
        "item": {
          "id": "12918e12-10ff-4d31-9f5e-bc6f350a06a1",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "9e4ec7dd-b766-4929-bbf0-ab9e2a8ec772",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "874b3a48-8717-41d1-955b-1386acf4193e",
        "cursor": {
          "ref": "cc3e93f0-977a-4b1d-bc7b-7888c89a2bfb",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "03a449d8-a27d-42df-a193-d2df727da8d3"
        },
        "item": {
          "id": "874b3a48-8717-41d1-955b-1386acf4193e",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "5a2dc1dd-54dc-4c80-862b-bb193b786237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a5d5acd-434d-480b-9189-d4466a86689c",
        "cursor": {
          "ref": "4be379bc-ef3b-480b-ab66-4ebc90cc2c7f",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ee616635-916c-45d5-844d-93e0fbbe265a"
        },
        "item": {
          "id": "2a5d5acd-434d-480b-9189-d4466a86689c",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "6d5a12e4-4ba6-4bf4-9c75-ba591e7a5cf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6785a26-15a7-42ed-838b-9f32943ded40",
        "cursor": {
          "ref": "2ca169d6-44d4-491b-97ea-45d060b46b4e",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "98ab79a2-c90d-4301-8323-98f20e06af74"
        },
        "item": {
          "id": "e6785a26-15a7-42ed-838b-9f32943ded40",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e6e8b216-b6da-4e7b-961f-0cdbc453c765",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69851b54-e6d5-4a90-8c2a-68d8a0d3e8cf",
        "cursor": {
          "ref": "2725474a-f9f2-4e6d-903b-cd458ce8a1ca",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b76658a9-cc0e-462f-806c-188a0cb2dd54"
        },
        "item": {
          "id": "69851b54-e6d5-4a90-8c2a-68d8a0d3e8cf",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "dc393797-9b57-4e07-90f5-1408a87c7368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19828ab6-04a5-47b9-9207-9765418cdbda",
        "cursor": {
          "ref": "b65f7c5a-e0c2-4cad-86a3-3a4d3f566158",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4b37ecca-d9ec-48dc-842f-921c6ad89fff"
        },
        "item": {
          "id": "19828ab6-04a5-47b9-9207-9765418cdbda",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "74a626bd-4fa5-4f83-87ad-6c3579e37d2a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 679,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "4f55f458-b3fd-4370-8e19-688042b1ac57",
        "cursor": {
          "ref": "601ef217-fd55-45cc-8712-a5e7edf71a70",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "a0fb4fa2-8399-408c-a93b-3454f66ebfc5"
        },
        "item": {
          "id": "4f55f458-b3fd-4370-8e19-688042b1ac57",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "27a5eaa3-ece2-455a-b0eb-3928022ac4b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 725,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "20116e30-535e-43a4-af3e-79ac09cd18f1",
        "cursor": {
          "ref": "ce27f1a1-3da4-490c-a094-57b01bc4d33e",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "18c578ea-f053-4069-b5fe-d1e458955e1f"
        },
        "item": {
          "id": "20116e30-535e-43a4-af3e-79ac09cd18f1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "700009cc-9c12-45d4-b94e-73bbab269db1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "7aa743c3-8ba2-4781-a75b-fb3f74bc3c86",
        "cursor": {
          "ref": "376da7b4-b86d-49e5-a1c6-3286dde06ead",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "8f007119-041c-4680-bb46-12998fc7cbfe"
        },
        "item": {
          "id": "7aa743c3-8ba2-4781-a75b-fb3f74bc3c86",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "44d0736d-6a77-4296-ba86-58d7fbdd3196",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 843,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "6f34d8c4-5d0a-4d1a-9b7c-d56ea150e09b",
        "cursor": {
          "ref": "1b66292a-426a-432b-9b82-7ed2817b17c3",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "23a0da9b-3d12-4077-96e9-f4bdfa8275a7"
        },
        "item": {
          "id": "6f34d8c4-5d0a-4d1a-9b7c-d56ea150e09b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "aad9cf65-beb9-402d-8e2a-b21a70850ebb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "d9b41d36-8e53-4c97-bdba-594bec2e1a22",
        "cursor": {
          "ref": "2f8b5e5c-10f5-43e1-974b-0c7045c54cdf",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "5a658e4f-e15a-4271-99d3-f3e56d476680"
        },
        "item": {
          "id": "d9b41d36-8e53-4c97-bdba-594bec2e1a22",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "bde230c8-3bd5-4498-9b4b-78a8bdc1cfde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07a42bf4-a8ad-48b3-b2cd-512f52669e3e",
        "cursor": {
          "ref": "008249e1-60c4-4988-8720-525beae450b7",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "004e5f4a-8f3c-4591-b332-a876e1ecc68f"
        },
        "item": {
          "id": "07a42bf4-a8ad-48b3-b2cd-512f52669e3e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "bc0894b3-063b-4de1-82ab-f09a68de1f09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0538833-796f-487d-a47a-259e49896863",
        "cursor": {
          "ref": "58121aa3-5c09-4751-9bc3-30cf78b605f5",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "8cc4254a-7e68-4d40-ace7-0b48f60e4e0f"
        },
        "item": {
          "id": "b0538833-796f-487d-a47a-259e49896863",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "1d92536e-d398-4268-9871-1aeaebc03833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54dbeb01-65d9-4a7f-bba7-77fe9912c167",
        "cursor": {
          "ref": "03b15d4e-9f63-4cdd-ae45-1831652fdf4c",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "0ebaed67-ba06-4f69-ba9f-ef03ff81f902"
        },
        "item": {
          "id": "54dbeb01-65d9-4a7f-bba7-77fe9912c167",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "5805dd3f-2a3e-4ad5-85df-f8fddc1d7fc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01526076-3266-4a0c-b95a-e4afeb0a7e5c",
        "cursor": {
          "ref": "9d0b9add-6077-4f75-aa05-b02c61595a68",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "6c6ff7a5-ae2e-4c2d-91a1-18ac2368c26a"
        },
        "item": {
          "id": "01526076-3266-4a0c-b95a-e4afeb0a7e5c",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "f8ac7bd2-b3d8-469b-b4ab-a30ca0f2a96f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2eeedcd-9fb7-465c-8a3a-b1da9f4dd3a3",
        "cursor": {
          "ref": "76686b7a-1906-4458-9b1b-1885f0c5a10c",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "5d9f3a09-8f04-44f9-8bf9-f28db7b36fca"
        },
        "item": {
          "id": "a2eeedcd-9fb7-465c-8a3a-b1da9f4dd3a3",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "afea53a4-4b18-46af-b6ad-f6a0bb3342ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c2e1180-c398-4368-821b-793ba8c21d68",
        "cursor": {
          "ref": "6df2fe5d-a3ff-4e25-a82d-5904b8524db9",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "9dbff56a-7828-4b8f-ad22-7df19b8df41d"
        },
        "item": {
          "id": "3c2e1180-c398-4368-821b-793ba8c21d68",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "2331bfdc-f0c4-4b2d-abd7-7f3ab947fdfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e588f453-3e01-495d-894c-54a3f45f59d5",
        "cursor": {
          "ref": "50559751-755c-4846-ab1b-1a344965f727",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "9c63e22e-e1e2-4e88-8643-3aa3d4f6c337"
        },
        "item": {
          "id": "e588f453-3e01-495d-894c-54a3f45f59d5",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "872441bd-98e4-445d-a4e2-defa86968f7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfa564ec-8d22-4992-adf4-b3d7e6c241ca",
        "cursor": {
          "ref": "cb567062-3dc4-4050-a081-0c06ceb5de41",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "29470210-ec53-43aa-a644-a175e40b38bf"
        },
        "item": {
          "id": "cfa564ec-8d22-4992-adf4-b3d7e6c241ca",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "2a8760b4-3d87-485c-921a-227f5f4a96c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a909fdac-3980-4390-86ca-7f4f31230d5d",
        "cursor": {
          "ref": "f8bd26d6-b7d4-4911-a8dd-9127cc5761ae",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "4727d53c-e40d-4b3d-8510-434e39df785d"
        },
        "item": {
          "id": "a909fdac-3980-4390-86ca-7f4f31230d5d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f0c521c8-9c38-4804-be53-e2603391cbe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c8f123f-02b0-497d-bdb5-96e6d5688cb9",
        "cursor": {
          "ref": "0f4d29df-caa9-47ac-9a7c-010bf298b2fb",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "89adeb10-c106-4940-9658-e967df28acff"
        },
        "item": {
          "id": "4c8f123f-02b0-497d-bdb5-96e6d5688cb9",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "573d2a59-62f5-4330-a458-1b6338a95095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d542e747-62ba-409c-b5ff-669470a57345",
        "cursor": {
          "ref": "01028c80-033b-4fb5-8855-4cbf58437e06",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "385bdb4a-916d-4157-b5e5-3d4c55e0622e"
        },
        "item": {
          "id": "d542e747-62ba-409c-b5ff-669470a57345",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "8f9d23c5-f87d-418e-b284-a024126ea7be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44b932d1-ae11-4bc7-a2c9-8c76cdf8d533",
        "cursor": {
          "ref": "4538f687-efcc-48b3-93e7-df8c9314ff7d",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "30dde4cf-2d60-4868-9805-47f594bade3c"
        },
        "item": {
          "id": "44b932d1-ae11-4bc7-a2c9-8c76cdf8d533",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "402d111c-b186-4e79-b3a0-860fc2811069",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de761925-e6d6-4e2c-8bf7-431acb13b890",
        "cursor": {
          "ref": "724b569f-1c93-48c9-9140-420a3a9d2ffc",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "439ad51d-a52c-467d-8a3e-f72943ca879b"
        },
        "item": {
          "id": "de761925-e6d6-4e2c-8bf7-431acb13b890",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "132be4bd-2c40-49a9-a3bc-f6bd52f0b2fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ff6852e-c038-4980-8460-23ce41fced17",
        "cursor": {
          "ref": "23e30227-2810-4b3b-bde7-68edbedf3859",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "ba2651c0-2619-4d53-8d2e-37dc0e4e10c2"
        },
        "item": {
          "id": "5ff6852e-c038-4980-8460-23ce41fced17",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d74e8211-2217-492c-90b2-2177182862f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3450b461-5660-49c8-a0ec-693d6f71594e",
        "cursor": {
          "ref": "466d0e89-c264-4f05-bb54-80e8329fbe93",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "46ea0ab2-a8f6-445d-8441-d447983b1cc0"
        },
        "item": {
          "id": "3450b461-5660-49c8-a0ec-693d6f71594e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "651932c3-e42a-4d27-b454-2015120ac711",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4248bf63-c4ef-437e-88ea-b6d2d3826102",
        "cursor": {
          "ref": "3655b323-ce20-42c5-9664-60520c5b1a92",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "d25593ae-fbdb-4834-9baa-3a33e2b239a6"
        },
        "item": {
          "id": "4248bf63-c4ef-437e-88ea-b6d2d3826102",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "915477f3-8bb8-4037-a4b2-8a69abc3dbbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b231921-aa9a-424c-b954-38ed1359c995",
        "cursor": {
          "ref": "ba57965c-f731-4fa0-9e34-60381ea3eb30",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "9515ecca-2d70-4df0-841b-656ef9a456cd"
        },
        "item": {
          "id": "7b231921-aa9a-424c-b954-38ed1359c995",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "afb149b7-2335-429c-9de2-786611eadc45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01c098f2-0c02-4382-ad0e-b727a586f6c5",
        "cursor": {
          "ref": "5b64d5e4-53f5-4d0d-8f3a-e06a71991414",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "68caf07d-6b73-46bb-b492-7dabb67ca1d9"
        },
        "item": {
          "id": "01c098f2-0c02-4382-ad0e-b727a586f6c5",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "e46d4934-1074-4fb7-9441-a6bbe180e512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e5f89f8-f4fd-468d-942f-5278456097d3",
        "cursor": {
          "ref": "6051f0a8-3083-438a-8cad-9dbe1ec97d7a",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "69f68b23-bfcc-4622-a095-fb203a6c9b33"
        },
        "item": {
          "id": "8e5f89f8-f4fd-468d-942f-5278456097d3",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "d60a03b2-02d4-46a8-a849-62a9fb4e0cd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e3555f2-f218-4ec4-a567-e10d87cac082",
        "cursor": {
          "ref": "2205933b-0903-43ec-bfc9-a6242ee11671",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "fa0ec48a-ef47-44db-be92-72461c347407"
        },
        "item": {
          "id": "7e3555f2-f218-4ec4-a567-e10d87cac082",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "09e77b44-ab4b-4472-87de-5d429e4b4495",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5544bf0-b312-4798-b47c-a6ce28c83174",
        "cursor": {
          "ref": "ad9324b6-d6bd-401b-8109-5bb44174ef93",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "72e410b5-f81d-4bdf-946d-79474694fc7c"
        },
        "item": {
          "id": "b5544bf0-b312-4798-b47c-a6ce28c83174",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "15d9d97a-a969-4010-b032-d9cb13bf4211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47056cca-5fc9-4099-9591-3fe02d306018",
        "cursor": {
          "ref": "8bcd9d60-5d44-487d-a42e-3e845a409215",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ab2c9fd9-0b3f-4e94-a7b5-6d728ac1ad50"
        },
        "item": {
          "id": "47056cca-5fc9-4099-9591-3fe02d306018",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "866091d3-3c48-4d64-902b-912b54465bc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "247b51c9-fbe2-4a8d-ac83-27988d52f4a7",
        "cursor": {
          "ref": "e155cd8c-29b6-4159-8406-f3d5d118829d",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "5c0a434c-dc08-469a-a9ca-8a39e2542b7c"
        },
        "item": {
          "id": "247b51c9-fbe2-4a8d-ac83-27988d52f4a7",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "6ce24ea8-1a44-476d-a8e0-ec582bfb4a63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9897dd3e-3039-4a5b-9fda-43d4f4a1f0ee",
        "cursor": {
          "ref": "14677983-d400-4d0b-a639-e4c0e0f70cfa",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "8be905be-acfb-458f-bf21-4199418bd408"
        },
        "item": {
          "id": "9897dd3e-3039-4a5b-9fda-43d4f4a1f0ee",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3de55fff-4264-4450-a1d5-1a99629d58d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70175e6e-997d-4076-93ec-a1a35610645c",
        "cursor": {
          "ref": "4928e65e-f021-453d-9b02-a7a5fc72ec98",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "73f8281f-1c19-4511-9f0e-5f2f5ac88f87"
        },
        "item": {
          "id": "70175e6e-997d-4076-93ec-a1a35610645c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "bc67edd1-94f9-4abf-a91f-73845fae2de3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af97b587-c937-47e9-b884-8a44e0684c8e",
        "cursor": {
          "ref": "1a5bb727-6346-46b1-9b5b-b7aaced1c5cc",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "2c3fe488-06b3-4785-aee6-7fbb3f6cca42"
        },
        "item": {
          "id": "af97b587-c937-47e9-b884-8a44e0684c8e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "01582252-8a6e-4f13-ac0a-9a68a085a6c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f92168c3-031c-458d-a861-493e742273ac",
        "cursor": {
          "ref": "0b73a612-edd0-4c21-84d1-8c9234627c28",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "99e89382-d738-445a-863e-edd4cadff6aa"
        },
        "item": {
          "id": "f92168c3-031c-458d-a861-493e742273ac",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "44f8d644-05c0-4a71-afe2-6a3f93e95d34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edeae9be-7619-4594-bcd0-c1dca37f7a01",
        "cursor": {
          "ref": "582dde7d-82f8-4d96-abfc-3fa6ccde893b",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "3b86cc5a-d278-4be5-a23d-409b6b69f8c5"
        },
        "item": {
          "id": "edeae9be-7619-4594-bcd0-c1dca37f7a01",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d77b4042-b0ff-4713-b56a-0e85ccaf8e94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b81ce76-0e61-47be-b206-78f0b8dbab98",
        "cursor": {
          "ref": "046dadf3-4219-4d40-b3d1-69d2af040896",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "3621f966-ecd3-4560-850e-1c6c632170a9"
        },
        "item": {
          "id": "2b81ce76-0e61-47be-b206-78f0b8dbab98",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "34c3c901-18fb-491e-b634-4aba5cb143f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3a41f7b-2f36-4f69-bded-670589e257f8",
        "cursor": {
          "ref": "31cf4be0-7d68-44b3-b290-a2a291bb80da",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "adea23e4-4867-4574-8fd4-9482867163dd"
        },
        "item": {
          "id": "a3a41f7b-2f36-4f69-bded-670589e257f8",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "348abea9-475e-4b8d-9f3b-e22d957244f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce20392a-964c-4aa0-910b-4a4ebbcf2773",
        "cursor": {
          "ref": "e1e840d2-b1c5-4efc-a48e-9e8ce132fb0c",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "777a9e69-6bd5-417c-bd3a-44f692c74a52"
        },
        "item": {
          "id": "ce20392a-964c-4aa0-910b-4a4ebbcf2773",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d0dc49c5-7ec4-4b56-bbc7-2446597a7f04",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7200550-da7a-4039-a07b-21bd3be0cadb",
        "cursor": {
          "ref": "7e3e816e-b8cb-4fd4-839a-163a3d669687",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "9e4fa2bb-0290-4c8e-8c53-be1316e4efb4"
        },
        "item": {
          "id": "e7200550-da7a-4039-a07b-21bd3be0cadb",
          "name": "credentials_issue"
        },
        "response": {
          "id": "ce6b8a1e-9f20-401c-86ea-10b190ac331c",
          "status": "Created",
          "code": 201,
          "responseTime": 1087,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c271ac0-73c8-4e40-9874-3f4ed2ab3621",
        "cursor": {
          "ref": "920d3d37-fb1d-42a0-96dc-ea3ed63d2604",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "fba1e2f0-833a-4d0e-acd6-4bfea55c1471"
        },
        "item": {
          "id": "2c271ac0-73c8-4e40-9874-3f4ed2ab3621",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "ac1e806f-3c00-4bbf-baa5-d1d8334d30d5",
          "status": "Created",
          "code": 201,
          "responseTime": 1499,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9432dfb-0be8-42ae-9a02-8cdbcf7aeb51",
        "cursor": {
          "ref": "35c466e8-ed87-427b-9921-df10d55f0e2a",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d3d4c830-0eb2-43b6-aebb-693e841e6bf2"
        },
        "item": {
          "id": "f9432dfb-0be8-42ae-9a02-8cdbcf7aeb51",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "ce38a0b7-5dfb-42b8-8836-8a27ca01996b",
          "status": "Created",
          "code": 201,
          "responseTime": 992,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0848426f-ce7a-4435-bc73-7356cc168265",
        "cursor": {
          "ref": "980ba86b-8a9f-471d-9c3d-b5550969f1f2",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f3299012-e749-47e2-81f7-01561aaf541e"
        },
        "item": {
          "id": "0848426f-ce7a-4435-bc73-7356cc168265",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a5ff09e9-3647-4e86-be49-aee7c4ed830d",
          "status": "Created",
          "code": 201,
          "responseTime": 942,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4559131-0060-4120-bf51-e5b8560f9fae",
        "cursor": {
          "ref": "35d2a798-b31f-4465-9e47-1dd3fb00ea1f",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "0ec1e3f6-af8c-4bd1-b083-ea51fe9776d6"
        },
        "item": {
          "id": "c4559131-0060-4120-bf51-e5b8560f9fae",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "9b742c9c-4fa5-46d5-8b9a-1f4d71e1cefc",
          "status": "Created",
          "code": 201,
          "responseTime": 1001,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "72d036f7-800c-4f85-9690-15f7d84970b0",
        "cursor": {
          "ref": "d1e703a7-8b14-45ed-b809-61cbb5e2fc1f",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "7b0999b8-c38d-47d1-a35d-1308428afb14"
        },
        "item": {
          "id": "72d036f7-800c-4f85-9690-15f7d84970b0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d4ecd68e-3cb2-49db-8f4c-cdf66aa0150e",
          "status": "Created",
          "code": 201,
          "responseTime": 1027,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "880265c8-f843-4ee2-a538-b216b0f34b88",
        "cursor": {
          "ref": "9715d007-c7a9-4f39-aa4e-55bb447edece",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "35bdde2c-f4d5-4e6a-a2f3-c2f5e983c019"
        },
        "item": {
          "id": "880265c8-f843-4ee2-a538-b216b0f34b88",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6aaba1d9-11a6-430c-a749-5083758a38b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54dc1632-bff1-43b4-a193-4adab15fea10",
        "cursor": {
          "ref": "77559e8e-56be-44d9-abff-0e43f1ad41c2",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "5545eceb-0d6b-4406-a739-7cdeb474317b"
        },
        "item": {
          "id": "54dc1632-bff1-43b4-a193-4adab15fea10",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "2047c7cb-2c5c-4360-8a5d-4e024984d282",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c31edc53-93e9-440e-966d-6289edd05ae4",
        "cursor": {
          "ref": "4c088ce9-9fd2-4003-865c-da1bd93be36a",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "bde0e671-56d3-4e7e-af05-8a1f1c023a6c"
        },
        "item": {
          "id": "c31edc53-93e9-440e-966d-6289edd05ae4",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "78b66e57-4ec6-4702-81e8-1cb1f19475c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccb9c82c-944c-417b-9479-ee342d29840d",
        "cursor": {
          "ref": "592d8b9a-9bc2-47ba-bf0e-4145a8a110fb",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "db066fc2-7b3c-47a7-874e-c46a121ffd91"
        },
        "item": {
          "id": "ccb9c82c-944c-417b-9479-ee342d29840d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6cc5611a-c763-4ab1-b468-b770d76a9957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34b682ae-76e6-4a88-bb80-f54f0812fcb5",
        "cursor": {
          "ref": "2f85da41-d17e-40fc-8635-60dcdc0594bc",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a6fe24a8-e954-4be1-830c-14c7b32cfbe0"
        },
        "item": {
          "id": "34b682ae-76e6-4a88-bb80-f54f0812fcb5",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "07803c55-a3bf-4fb9-9df5-a5d45b08a772",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62978f03-e265-4f1e-9526-496c94bbd142",
        "cursor": {
          "ref": "51822d18-0f61-4231-ac7e-7acc40c60a70",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "1e324cb8-c369-4340-a108-f3a05113b7fe"
        },
        "item": {
          "id": "62978f03-e265-4f1e-9526-496c94bbd142",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "2620b650-3a6c-4895-869e-fdc0cd8f12e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc8eded6-94d1-4b78-9874-fa04176e4495",
        "cursor": {
          "ref": "3a6fc0a3-2322-423b-abef-fffad0ef16e0",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "0618dc5a-388e-4e74-975d-5e9060036aea"
        },
        "item": {
          "id": "cc8eded6-94d1-4b78-9874-fa04176e4495",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "0e96d37d-d212-413e-b023-5a9973fb479d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac30553a-f46c-452c-a5ca-3241a9bd12db",
        "cursor": {
          "ref": "08256470-0b93-4420-8d6d-4e052077cd92",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b91eea62-ca99-4d3c-87f7-f495d58a7213"
        },
        "item": {
          "id": "ac30553a-f46c-452c-a5ca-3241a9bd12db",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "0ab9b4db-c68f-4def-a371-375692b1435e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30d1382c-dc3d-4596-ac69-c53325418f9c",
        "cursor": {
          "ref": "27872e4c-03b3-491d-a341-498b5ac58a27",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "7775aa62-83ba-4b9c-835c-376d687ff31a"
        },
        "item": {
          "id": "30d1382c-dc3d-4596-ac69-c53325418f9c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "37fb0c71-f150-4bce-a9b4-a54e96f92e57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fa28e6d-7499-4efa-a3b4-5412bab4c942",
        "cursor": {
          "ref": "46f8ce2a-2cab-4d8e-a430-381449a24dea",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1202ba31-0671-439b-972c-174aec5fb220"
        },
        "item": {
          "id": "2fa28e6d-7499-4efa-a3b4-5412bab4c942",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8c0f0358-6916-469c-ad62-b0d51a0631d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bacd4738-2e73-41ad-abf7-2af380e1575a",
        "cursor": {
          "ref": "9d5d1c67-7cd3-428a-b6e0-99250a999ca9",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "738e842e-6295-4140-888b-177a230e21bb"
        },
        "item": {
          "id": "bacd4738-2e73-41ad-abf7-2af380e1575a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b3814c51-f094-4149-84e3-556d60178e51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7999307c-51b6-4b64-8f6e-b7b352626bca",
        "cursor": {
          "ref": "3c057af1-3c6d-42ab-a645-4840a0440d1e",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ca8f5143-b39a-4e2c-83f9-aa1207e34dc6"
        },
        "item": {
          "id": "7999307c-51b6-4b64-8f6e-b7b352626bca",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "bab8ba04-c698-409d-909d-bda230d622cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "950e547e-2e24-418d-be42-10bfa8c88ee0",
        "cursor": {
          "ref": "3cd427e2-6391-409a-b761-283c3e14cf41",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "2d595d88-cfb6-43b8-9887-35463ea5d483"
        },
        "item": {
          "id": "950e547e-2e24-418d-be42-10bfa8c88ee0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d34c5a1a-895f-4965-9ff2-5b122b127725",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdc67c6d-cec7-477f-84b7-836db1ca086a",
        "cursor": {
          "ref": "566c2e0a-08eb-48cb-9321-f424c9765265",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "089408b1-b07c-4db2-8e98-bebac9905af4"
        },
        "item": {
          "id": "fdc67c6d-cec7-477f-84b7-836db1ca086a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "b7fdb2b2-dfa0-48cc-8fe6-c969a8aa42b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "760c3f22-df58-44e7-a57b-95ba09778b53",
        "cursor": {
          "ref": "46edf6db-4dcf-43f9-a70a-9ffdf2e68cb7",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "11369efd-0b80-456a-a43d-91870db77397"
        },
        "item": {
          "id": "760c3f22-df58-44e7-a57b-95ba09778b53",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "7026907a-8c42-4bfc-9869-1d287063544d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49e2a6e9-8f7d-4f84-9974-796b5fe77fb4",
        "cursor": {
          "ref": "3dc2da2b-76e2-4a1d-a841-b036e0f5636a",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "fe0bb9c7-01b2-45d6-af23-e6756af40762"
        },
        "item": {
          "id": "49e2a6e9-8f7d-4f84-9974-796b5fe77fb4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6101e1a9-82b1-4c6e-b320-e5b60fe85a6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd370b6a-4032-40a0-b851-ebbff4d2ce73",
        "cursor": {
          "ref": "61b6f301-d321-451c-9bba-11c2ec6b9b16",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "fd6a8772-2d55-4bd5-a396-f1b2f4869f64"
        },
        "item": {
          "id": "bd370b6a-4032-40a0-b851-ebbff4d2ce73",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0a097dcc-710d-4efd-9316-fe3f00961765",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c7338f3-ca3e-4883-bee8-32da6a2d7f0f",
        "cursor": {
          "ref": "a30d7253-e0be-4c34-bf2b-69ebb6e209b9",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "a08149cc-5541-481d-8bb9-b76a26c686b0"
        },
        "item": {
          "id": "6c7338f3-ca3e-4883-bee8-32da6a2d7f0f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "80a61a63-761d-4803-aac2-131ab444482f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b794c28d-5918-4a62-9431-baaeea016712",
        "cursor": {
          "ref": "7a73253f-bcf4-4944-9469-b938b5b528a8",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "9b36f2c8-bad5-4378-8307-7caf16a48a9b"
        },
        "item": {
          "id": "b794c28d-5918-4a62-9431-baaeea016712",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7a2caa61-b2bf-4467-b683-0543ac66665b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90224cea-0e63-476f-93d7-e249a53de5ba",
        "cursor": {
          "ref": "97069333-dd44-4c42-b0c7-5401ad655d07",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ebe18765-f765-4f70-bc4d-e29d3cd8027c"
        },
        "item": {
          "id": "90224cea-0e63-476f-93d7-e249a53de5ba",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a32e4c5f-b882-4085-9de5-83d2fcc3d9f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13bba7d7-c294-4996-9de8-87aab6869a8e",
        "cursor": {
          "ref": "7d6bc4b1-2276-4bfd-af7b-52f8871aa253",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "c2ab68a6-8adb-408f-9dfa-f84e18e7386f"
        },
        "item": {
          "id": "13bba7d7-c294-4996-9de8-87aab6869a8e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c32cde40-daae-423c-b9c3-10c1a2616095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8d1df3d-c93c-49d2-bf4c-9f120f00f02c",
        "cursor": {
          "ref": "6374d8fd-1567-45e3-ad09-5262669da435",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8327f938-8f59-4fdc-9caa-11b0adb1e92a"
        },
        "item": {
          "id": "e8d1df3d-c93c-49d2-bf4c-9f120f00f02c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d69122a3-3772-4179-be11-6db4d79e2b30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7932179e-575c-4952-9fcd-d74e918f0add",
        "cursor": {
          "ref": "2a9f68b5-3cf4-4004-9755-db9f41b66758",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a333a864-108d-4eba-b764-0ccf5f581e62"
        },
        "item": {
          "id": "7932179e-575c-4952-9fcd-d74e918f0add",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "38180596-4292-4e76-8bea-c37631b36842",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2649a93d-3087-4cf5-af83-f836d1cc9369",
        "cursor": {
          "ref": "cf21e619-b891-4c75-9e2a-bd45db8d088b",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "17b5548f-242d-442c-a46a-01486a081c5b"
        },
        "item": {
          "id": "2649a93d-3087-4cf5-af83-f836d1cc9369",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f7059f3a-cf74-49d7-8998-33be6ea19095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfb84941-bed3-4fe9-a7ca-d462b9451cdd",
        "cursor": {
          "ref": "70c5ff67-93ce-418e-92c2-928c1f0f95f8",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "eced3581-9497-4ddd-99d0-5939b4a3b422"
        },
        "item": {
          "id": "cfb84941-bed3-4fe9-a7ca-d462b9451cdd",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "68cf90ce-fd5d-4058-bbf5-46859b24cf7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "601eb620-4bdd-4613-aa48-96863a23f64b",
        "cursor": {
          "ref": "355e4f21-baa8-4c28-969f-38f538470326",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "2fb41f5f-8666-4d90-b9b5-8f9bbd678f1e"
        },
        "item": {
          "id": "601eb620-4bdd-4613-aa48-96863a23f64b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "0a432d80-5019-4210-acc9-ee3bda6bbd88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "222956bb-f823-4c86-904a-6f75dd0b371c",
        "cursor": {
          "ref": "a08950b7-b4ad-41c4-bbe0-0e3fe7f747dd",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "84d42e7e-dc36-498b-872b-63a83f27883a"
        },
        "item": {
          "id": "222956bb-f823-4c86-904a-6f75dd0b371c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9a1b84cf-b205-457b-ba2b-1a45d70cd98a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04c4f922-954f-408f-b51b-29f8c422d05e",
        "cursor": {
          "ref": "a55079c6-fe09-48ef-8278-6c56f3fdf7b2",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "d16c7bba-f1c8-44bf-89a8-fffa96e407b1"
        },
        "item": {
          "id": "04c4f922-954f-408f-b51b-29f8c422d05e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f8a735fb-a86f-41f7-99d1-800380cbfea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43633c41-f8b2-47cc-b491-7a14f0e5c22d",
        "cursor": {
          "ref": "b7bb8e7d-0151-4afd-acc8-03fc88a3e54b",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "5819cf35-1007-4ed6-90f4-476f93e26e96"
        },
        "item": {
          "id": "43633c41-f8b2-47cc-b491-7a14f0e5c22d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "38f0c845-ccdf-4d8b-9035-6c939406e9cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adbfb2fc-a240-45cc-9169-be1d88ae83ee",
        "cursor": {
          "ref": "be8e7924-f315-41f2-bf78-231f0892d6fa",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "9f08750b-c957-4637-8e71-efd567878b6d"
        },
        "item": {
          "id": "adbfb2fc-a240-45cc-9169-be1d88ae83ee",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1ee20a63-0f9b-4e4c-a007-d05c27b138cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6607221-0938-4333-8cf7-6f29f0227d4b",
        "cursor": {
          "ref": "9b24fbc0-b56d-40f9-b768-8fa159deeef8",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "e2029e92-672b-4f47-975e-0498076209c2"
        },
        "item": {
          "id": "d6607221-0938-4333-8cf7-6f29f0227d4b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4cc74bbc-dd44-4001-be6d-9aa07b79122b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db2aac40-7b0f-421e-8a1d-63d65821d8e2",
        "cursor": {
          "ref": "69b9d07a-4760-4d5d-bc48-7b47f03fb8a7",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "3b9444f1-6439-4a55-99c5-88f8a927fc51"
        },
        "item": {
          "id": "db2aac40-7b0f-421e-8a1d-63d65821d8e2",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "19fcc2a5-f9ad-47d6-b787-c628e79b8dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fb25fc1-02a3-43f5-b4e0-a1cea1b148f3",
        "cursor": {
          "ref": "c066dd5c-b07f-45eb-8c24-4ef94008d817",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "3f391866-5bf7-4a43-b364-23141ef40d9f"
        },
        "item": {
          "id": "0fb25fc1-02a3-43f5-b4e0-a1cea1b148f3",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c1f9f9ea-cb93-49bf-a532-05cf90c4ace6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba7830a2-2f98-4155-964f-cff82b782f98",
        "cursor": {
          "ref": "2d742808-d59a-4cb2-9933-1b647cf091d6",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "80589833-ba0b-4af7-83d1-bbdc4b35a059"
        },
        "item": {
          "id": "ba7830a2-2f98-4155-964f-cff82b782f98",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7a0df441-955f-400d-8f6f-c68da039a064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d11e4c1-9efd-415c-b39b-59fc4ff44537",
        "cursor": {
          "ref": "188f05b8-2487-4d24-ba4a-36649f057a11",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "019d2647-5bc0-4c92-b9d7-74ead6cbb40d"
        },
        "item": {
          "id": "6d11e4c1-9efd-415c-b39b-59fc4ff44537",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e33d8f7a-ba4a-4a21-a583-11d8b7986f95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf6111d7-be88-4779-8145-ff49fe8fc4ae",
        "cursor": {
          "ref": "6d466dc3-c5c0-4f56-b4d1-c961b322ccf7",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1b8a247b-f7e4-40e3-83dc-e05c46f55141"
        },
        "item": {
          "id": "cf6111d7-be88-4779-8145-ff49fe8fc4ae",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "81f76bf3-f88b-463d-8a83-c18f00734033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5acb67d-70db-4acc-accf-90376ebb1897",
        "cursor": {
          "ref": "2b1f8d3e-2428-4b45-8fe9-be808b83cd35",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "f5703673-cc39-4cad-9068-da9ed7791b75"
        },
        "item": {
          "id": "c5acb67d-70db-4acc-accf-90376ebb1897",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4f63635f-cd9b-4028-878f-cc842d4e6d2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2f947e9-f07f-473f-bd8c-223dbd51d754",
        "cursor": {
          "ref": "fb6097fa-9414-45ce-8a68-7e114d0814ff",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "05b45317-9bfb-4d15-abb6-30c07fd05c41"
        },
        "item": {
          "id": "a2f947e9-f07f-473f-bd8c-223dbd51d754",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "dcd12c10-5448-46ce-bf63-b4e62dc68fdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac17616-3bf8-4b8e-bf1a-c8c677f88de3",
        "cursor": {
          "ref": "0d540528-9768-463f-953a-acd7734c2b51",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "9620d089-09fe-4f6b-8036-72c204f144e7"
        },
        "item": {
          "id": "9ac17616-3bf8-4b8e-bf1a-c8c677f88de3",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c2c5f415-1fde-4a47-b192-d4434edc29b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a08972f3-9898-4051-8722-a77efee1b065",
        "cursor": {
          "ref": "b354a139-3b93-4633-be42-2b83b398997c",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "1a9179fb-c2ef-4538-9be8-4812d0782061"
        },
        "item": {
          "id": "a08972f3-9898-4051-8722-a77efee1b065",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "804a8f7f-80a6-4647-aee9-59fb1a68f594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ed02c7d-a7e6-49d2-b8a5-56a5c38ddf20",
        "cursor": {
          "ref": "5f04fdd5-b72e-4c26-a8d7-07fbadd70736",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "ed6c1c81-f112-4197-8d70-223139ad8722"
        },
        "item": {
          "id": "9ed02c7d-a7e6-49d2-b8a5-56a5c38ddf20",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b6cef792-c4dd-4921-a2f5-f7057349fa7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62322675-58ce-4efc-9de0-4e33ad5de79c",
        "cursor": {
          "ref": "1adb60d8-9a58-41f1-85f0-9af11e99e540",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "1d08f6b7-e082-4bc1-9b72-1326a0762e13"
        },
        "item": {
          "id": "62322675-58ce-4efc-9de0-4e33ad5de79c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "fd95b4be-3a2d-4b58-8b12-9c71ffbcb0e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0cd4149-d227-4dec-89c2-65e239e74068",
        "cursor": {
          "ref": "f880629e-bdd1-4d99-b670-d7dd76e05ff9",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "0ac50b08-67a1-4bc5-86f6-9d295f94c517"
        },
        "item": {
          "id": "c0cd4149-d227-4dec-89c2-65e239e74068",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "baa62f5c-1edf-489b-bdc9-f56f0ea4b17c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16b63240-3916-45b2-8d25-ecf979c39e19",
        "cursor": {
          "ref": "afe26065-0cc6-4d72-9929-77778235e5f2",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "2d26cd2e-0699-4b3a-95d0-7d022b0f691c"
        },
        "item": {
          "id": "16b63240-3916-45b2-8d25-ecf979c39e19",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "8171b347-1cc7-4f5e-a946-ab9a0b826936",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50695ee6-cc49-4ec7-bf95-923d2b495339",
        "cursor": {
          "ref": "61552d31-5b13-411d-a974-17858754d18c",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "f0970310-9a55-45df-950c-5ca37b6181a0"
        },
        "item": {
          "id": "50695ee6-cc49-4ec7-bf95-923d2b495339",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "929c4bf0-1c5d-4558-a241-6f1cebfb4ebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca0819d9-f133-4e18-9668-e178e87d1927",
        "cursor": {
          "ref": "37462298-8068-467b-b414-0a26cf40ee54",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "5bfb06f8-5ef7-42b6-9c66-b31cbe9757e0"
        },
        "item": {
          "id": "ca0819d9-f133-4e18-9668-e178e87d1927",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "786ff753-0bf5-4f81-9638-0ea5d1030515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f6a7684-5158-4066-b358-fcbe4ee7c8f9",
        "cursor": {
          "ref": "0b1da4f7-51c2-4ff7-a619-52abf864d369",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "9571bc2a-39c9-4155-9535-fce681a559ef"
        },
        "item": {
          "id": "8f6a7684-5158-4066-b358-fcbe4ee7c8f9",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f888dcd0-de10-4011-be7a-38c0a01b374f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "258f90af-0db3-4f3b-9361-9be6dfe0cfa7",
        "cursor": {
          "ref": "06c48e42-a93e-497a-9576-fe68df0db06b",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "596a36f5-bcd0-4831-b412-ed2b47ba0a70"
        },
        "item": {
          "id": "258f90af-0db3-4f3b-9361-9be6dfe0cfa7",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "d711681e-28d0-4b77-aec8-8eee5e00ea56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39f28c4e-7c65-4cf2-8f25-2e8d879b5358",
        "cursor": {
          "ref": "c0514753-3a52-47d7-bfc5-36a1b65b11bc",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "40ac0ae9-cc93-43c3-a081-6ef876b44800"
        },
        "item": {
          "id": "39f28c4e-7c65-4cf2-8f25-2e8d879b5358",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "186fdbad-dc6a-4937-92b4-2b8c372cefab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b067bd15-02cf-4e3c-aa68-152680b75629",
        "cursor": {
          "ref": "92e209a4-fa10-4297-8390-6d399e493361",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "b1b4d026-1561-40cc-ace0-ddcbc2586d55"
        },
        "item": {
          "id": "b067bd15-02cf-4e3c-aa68-152680b75629",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "de06a6a0-7f4a-4d65-8cc9-17b1c06c2421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "259a90ca-ba8b-469f-a27e-ef8b5c497b34",
        "cursor": {
          "ref": "8850158e-6135-45d2-9640-f51e959c992b",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "a6b6ca05-2d24-4dd5-b8e2-86e56356b44b"
        },
        "item": {
          "id": "259a90ca-ba8b-469f-a27e-ef8b5c497b34",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "0af0f23b-9351-41ba-9d06-5450e1fa0851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69aee80d-fdbd-4054-8638-3fe5dd0bf183",
        "cursor": {
          "ref": "1829ca8c-16f6-4c2b-869a-cbfdd09b36ce",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "0521baff-f674-4b3c-800c-8f5cbe21ef8e"
        },
        "item": {
          "id": "69aee80d-fdbd-4054-8638-3fe5dd0bf183",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "921960ba-9bb7-44a1-857a-7e2cad1211ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f100fd9-0318-4162-afd4-aece782058ae",
        "cursor": {
          "ref": "eb8c0e8a-ca1e-4145-9c1a-2afe6a849670",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "0fdcf5ae-d7ea-4680-b10b-1946eccef8f0"
        },
        "item": {
          "id": "6f100fd9-0318-4162-afd4-aece782058ae",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "238d2c3b-63ca-4904-9d26-6cbc5880638a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "741f1906-3059-4873-b357-0e7a8f61d453",
        "cursor": {
          "ref": "05aafce8-9ad5-42a2-ad6b-92d53c7cc19d",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "df36062d-7260-40f7-ae67-a1ac9f798f20"
        },
        "item": {
          "id": "741f1906-3059-4873-b357-0e7a8f61d453",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6a04358f-d6b5-4f31-93c2-28824616d898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "800d9077-c2b6-4c7c-bac9-7267e220532f",
        "cursor": {
          "ref": "a8ca81e8-36da-4ee7-9eec-a5d0a8475cdd",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "5ab9e3da-1381-4a16-8e28-0ac8284197ca"
        },
        "item": {
          "id": "800d9077-c2b6-4c7c-bac9-7267e220532f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "31222d3c-80ad-4e0e-bb81-14e953f7d5a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07c07e69-7b56-4c0b-b139-6e528fcdb81d",
        "cursor": {
          "ref": "3169814a-6ef3-417e-8a4a-75648928f0fb",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f6e97bb1-2d3c-4f92-8123-4e6f87a1b7d3"
        },
        "item": {
          "id": "07c07e69-7b56-4c0b-b139-6e528fcdb81d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a3e030fe-95bd-4a49-896f-c61ce5210ba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20f38c67-a82c-438a-9969-2231547a4af9",
        "cursor": {
          "ref": "86d73f57-fac8-411c-9d39-ce25a05473a0",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "4815f950-cc33-4959-afc1-5b6edd284187"
        },
        "item": {
          "id": "20f38c67-a82c-438a-9969-2231547a4af9",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c9aed974-8716-4c85-b90a-45eced0975c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6004f6d1-cdb2-43bf-940c-4b22c0a1e4d9",
        "cursor": {
          "ref": "dc137691-866d-4fc7-9df2-30b6fff3cc7c",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "cea00779-dead-4b4b-8f77-dc52fa9ccf58"
        },
        "item": {
          "id": "6004f6d1-cdb2-43bf-940c-4b22c0a1e4d9",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "63d63f71-9de0-46d1-a376-956e8b1837f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43b3c714-bdc2-4fc7-9cf0-e3c8073b2efc",
        "cursor": {
          "ref": "c8492c7b-76cb-40d1-8d55-8f931e41f5f2",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "6b821564-ff75-49dd-93fd-74e1c376e290"
        },
        "item": {
          "id": "43b3c714-bdc2-4fc7-9cf0-e3c8073b2efc",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7eeaed37-23c2-44b1-acca-9e787e314c08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a859862-26a7-41c7-8a2d-00ae356a20f6",
        "cursor": {
          "ref": "7ed7b61c-c51f-40bb-8355-317d11492878",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e6651cbb-3355-45eb-bf07-b988bfce3b8b"
        },
        "item": {
          "id": "9a859862-26a7-41c7-8a2d-00ae356a20f6",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "881f53df-bdf1-4a81-8c3b-383183493bce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a6cae38-11d5-485a-a3a8-c1f6df72129e",
        "cursor": {
          "ref": "dc4dd7ba-c515-4004-9db9-fb30a06f8633",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "5c481b96-38ce-47b3-b91d-98bf74502853"
        },
        "item": {
          "id": "8a6cae38-11d5-485a-a3a8-c1f6df72129e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "57837f6a-b596-40ee-8fb5-b821608b552a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea525d71-b312-4bb9-8b95-b327f4b86544",
        "cursor": {
          "ref": "1328cd78-05bc-4efe-8dd6-082081476b7a",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "8a51f1e1-d465-44c4-bd3e-e85be611553d"
        },
        "item": {
          "id": "ea525d71-b312-4bb9-8b95-b327f4b86544",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f5014d1b-92fa-49ea-a837-11be23e4d4ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b50cd9-4c1d-4f10-8ec6-466b7a777294",
        "cursor": {
          "ref": "b653971e-78e0-4085-97b9-579c869e21f4",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "72f060d1-d19d-4684-8d0d-3f96c7c5831a"
        },
        "item": {
          "id": "c3b50cd9-4c1d-4f10-8ec6-466b7a777294",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "bef50b1d-40b8-4e59-8c55-c00739a0ac1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a31f64da-2964-4ba4-833a-9ccf2d004ecc",
        "cursor": {
          "ref": "3ccb1c78-4267-43b1-a099-490dbc8c552b",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "ee2ec477-0e07-4fa6-b6a0-597ea9adfdad"
        },
        "item": {
          "id": "a31f64da-2964-4ba4-833a-9ccf2d004ecc",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e037ca1b-60b3-4f64-8ec6-4b5b3bc1546c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f7f6767-83ea-48b7-bcf6-b964c25a6b56",
        "cursor": {
          "ref": "511284ce-2844-43c4-abf3-d4d55718f75e",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "41fce57b-aa58-4c9e-943d-9f4c84a818ef"
        },
        "item": {
          "id": "1f7f6767-83ea-48b7-bcf6-b964c25a6b56",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "4f25bafa-bed0-464b-90fb-2004367b6be9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "443d82cf-edda-43e4-b60b-a862ffe0cf5d",
        "cursor": {
          "ref": "be10fca5-a961-4996-8282-a8169fe61cbd",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "5eadfa52-4316-4903-aaed-657422a4e123"
        },
        "item": {
          "id": "443d82cf-edda-43e4-b60b-a862ffe0cf5d",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "d10e7392-0ac0-446a-9a91-941d38ef5261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2edf0a6-53aa-4546-953d-d61a3e3680e1",
        "cursor": {
          "ref": "ed4bc2cb-25b5-4b26-a5e5-a912b9913073",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a2707653-a752-4deb-8b95-ea43981d8fde"
        },
        "item": {
          "id": "e2edf0a6-53aa-4546-953d-d61a3e3680e1",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "8061954f-34c0-42ac-bc81-b1b38831673d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b116d94-e8c3-4c4d-9cbe-0b04f822ebf8",
        "cursor": {
          "ref": "6c1024a0-a2e2-4d88-a770-e523a31e400f",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "59511932-3d5c-42f2-94b3-2c7936da8365"
        },
        "item": {
          "id": "8b116d94-e8c3-4c4d-9cbe-0b04f822ebf8",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "8b531ae1-7a18-4fdc-86f5-bd404dac2f70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98d77bb0-a437-46d6-a728-1ee7f591915c",
        "cursor": {
          "ref": "ad62e465-e98a-474b-980e-e10df28724f8",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "e5306fa3-1a8e-4c76-bae3-f996895d9fdd"
        },
        "item": {
          "id": "98d77bb0-a437-46d6-a728-1ee7f591915c",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "8739d627-dca8-4a5f-a631-b5c9f856c5e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb76512c-1210-4727-8974-c9f8978e22a4",
        "cursor": {
          "ref": "2e8527fc-c8c9-48ea-ab8e-d22cd9509f21",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c96772fe-aa7a-4574-aeb9-d31ec011dc17"
        },
        "item": {
          "id": "eb76512c-1210-4727-8974-c9f8978e22a4",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "6eaee4a1-1769-4873-8c09-c7f1cecd86e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fca0985c-61ee-420b-b783-9fce0e79f816",
        "cursor": {
          "ref": "87749341-aea5-44c7-9d0b-0d3a44f44479",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "2cf413c5-8fcb-4061-89f1-f13248b04b1d"
        },
        "item": {
          "id": "fca0985c-61ee-420b-b783-9fce0e79f816",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ecaf6b63-a0d1-408c-bd13-b081d8936208",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3036c3b-2805-4f63-bc69-1884e4465b2a",
        "cursor": {
          "ref": "f087adf7-2255-41c1-bf0d-9505a6c0f159",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ac6ea7e1-0128-43a2-ad5e-85c9ffc8fd73"
        },
        "item": {
          "id": "d3036c3b-2805-4f63-bc69-1884e4465b2a",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "af9d1efc-604a-45b0-9bba-15f6212b436a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9bf6224-606c-4f83-b42d-53724fc8b9f4",
        "cursor": {
          "ref": "fbc0195f-6f5b-4d63-be1f-027186353394",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "4066adf2-4abb-4537-bed9-3dc01ddbacc1"
        },
        "item": {
          "id": "f9bf6224-606c-4f83-b42d-53724fc8b9f4",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "a270b2cb-2f22-4fa1-abaa-abbe7bc7dc6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be58b2aa-d27f-4f7c-ad74-6d34d4ff3a2f",
        "cursor": {
          "ref": "9526cac9-a197-434f-8808-bdcf05d5e509",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c6af6367-e333-4774-910d-2c40313b7960"
        },
        "item": {
          "id": "be58b2aa-d27f-4f7c-ad74-6d34d4ff3a2f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1c5a7d27-1208-47e6-bedf-cda19c857bab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53a3bea4-e960-419d-b65b-34fde184a592",
        "cursor": {
          "ref": "a34b48a3-5e04-4d26-a528-b2e061317dd4",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "abfa9774-24e5-4aa3-93ef-d94f9a05fb6d"
        },
        "item": {
          "id": "53a3bea4-e960-419d-b65b-34fde184a592",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "0e221485-da2c-4c2e-ba72-0a36914ecb85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b88603e5-61bf-4ef4-a9ac-2255ac8fbda6",
        "cursor": {
          "ref": "1607432f-37dc-4631-959f-85efb88832dc",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "8a4acba5-82e4-4d56-962e-f68554647f2d"
        },
        "item": {
          "id": "b88603e5-61bf-4ef4-a9ac-2255ac8fbda6",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "9ed5ac37-ae56-42b9-8c49-108e4f998f49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f716f36a-cd9d-4734-a281-35f24b03f8e3",
        "cursor": {
          "ref": "e1650f07-5d2f-4e49-b573-1e7d3951c67f",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "f6e46fd4-b34b-4a8c-961c-6dc25505f43c"
        },
        "item": {
          "id": "f716f36a-cd9d-4734-a281-35f24b03f8e3",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "4a1a7b01-81d3-4641-a19c-424f9e6ceac2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "38446ef3-8a65-49aa-81bd-21a1d8bab873",
        "cursor": {
          "ref": "a5439133-27e1-41ef-bae6-8b2f721ed0cb",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c5f66044-c0b8-4c11-ada5-5d7626ccf414"
        },
        "item": {
          "id": "38446ef3-8a65-49aa-81bd-21a1d8bab873",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a5452444-9fc5-4ee8-b6e8-5a914aff38a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb91aa25-72be-4e4d-8207-e957d598a443",
        "cursor": {
          "ref": "7ebed388-b3c9-4d63-a5f8-f90e8163b58e",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "2d81b76e-129f-4c2b-9945-f1057ec57e1a"
        },
        "item": {
          "id": "bb91aa25-72be-4e4d-8207-e957d598a443",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "430ec67b-8aba-4f63-83de-7e835a94eac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98e9fe9a-1ebd-4128-871a-9f923b137a38",
        "cursor": {
          "ref": "ea2bd4dc-5993-4360-a2c5-612543f81642",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "d415b9f9-af1c-4734-8f45-d6e15c0114e0"
        },
        "item": {
          "id": "98e9fe9a-1ebd-4128-871a-9f923b137a38",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "6f62a6ff-abfd-4cf3-9271-836365a6a033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4223f361-e7db-4d22-8c23-718632911b72",
        "cursor": {
          "ref": "6fb13a2d-70d5-45fc-83c2-32a8cb594ba9",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "29dfc3ec-c6e2-4b62-a77e-060adb16fde9"
        },
        "item": {
          "id": "4223f361-e7db-4d22-8c23-718632911b72",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "0465843c-ea3b-4ba0-b710-2dc553bbcb1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a9b0c6-c4b6-4648-984b-3a50b1cbffe6",
        "cursor": {
          "ref": "58383b68-1d95-4403-b414-54bbd1af8032",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0a0c42d0-33cc-454b-a9fb-5925e22821a7"
        },
        "item": {
          "id": "b2a9b0c6-c4b6-4648-984b-3a50b1cbffe6",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "d9ed70c7-99fa-458a-be87-5a3a66003a47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9866cc0d-69b9-4cf5-a8cb-1f21011de736",
        "cursor": {
          "ref": "492395fc-add5-471f-a7e5-28b326a09c68",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "c3535964-8053-4da6-8a50-5fb4ede9001f"
        },
        "item": {
          "id": "9866cc0d-69b9-4cf5-a8cb-1f21011de736",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "5963faf6-2fe9-45eb-a7a1-e05f08f7d120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "323aa246-ea7d-4726-a27e-f4f7b369d667",
        "cursor": {
          "ref": "78a57eb9-95cb-4bcd-abd1-c9acf055b96c",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "0ca1c408-d5ec-44fd-8560-d564543eab64"
        },
        "item": {
          "id": "323aa246-ea7d-4726-a27e-f4f7b369d667",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "7202284a-806f-4068-8b50-f13488dc1b0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "134992af-aadd-46fe-bf27-1370622e7444",
        "cursor": {
          "ref": "0d834493-460b-4c7e-a5f8-5387237a1ec7",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "d29f6a95-80ed-46fc-9094-2f6bdfdb85ad"
        },
        "item": {
          "id": "134992af-aadd-46fe-bf27-1370622e7444",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7a0e210b-1005-47bf-9dca-4a057739e514",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2feb8a48-19d8-4e5b-82d3-b256efb3b197",
        "cursor": {
          "ref": "767a7472-89e4-45ad-b273-f173b36ef3ec",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "a2c3911a-adbe-452a-8ac3-5619eb3e6b38"
        },
        "item": {
          "id": "2feb8a48-19d8-4e5b-82d3-b256efb3b197",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "7496c691-331d-4840-8d0f-c5a3e4c1aa46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3b73304-269e-4cc7-95d2-b9c1455ca53c",
        "cursor": {
          "ref": "f865a129-eeb1-45b6-811e-4796e2d385ee",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "26a500cd-6fa6-4286-a55a-749687db2383"
        },
        "item": {
          "id": "a3b73304-269e-4cc7-95d2-b9c1455ca53c",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "58e4ad29-1bd4-4758-8020-783ebeadd7d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f88ce11-9bcd-409e-b2f7-d07ec1bb7010",
        "cursor": {
          "ref": "02ac6ab7-6fb6-449d-b66a-a4bddd89e702",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "615f537e-a94c-4ea2-b027-45476b164245"
        },
        "item": {
          "id": "2f88ce11-9bcd-409e-b2f7-d07ec1bb7010",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "5a999a18-a748-47d7-ab78-a03f3d1db4b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f311fe1-5662-42fe-bbfb-082b9172de0e",
        "cursor": {
          "ref": "cb0888b5-3085-4a6b-aa14-bcc1104eebbe",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2f4573eb-edb1-41f2-980a-5c7535949d0c"
        },
        "item": {
          "id": "2f311fe1-5662-42fe-bbfb-082b9172de0e",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "75050b2c-3c6b-48c9-8637-8fc4b948c368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e629ad39-6abe-470b-abfc-cbea3649a4c2",
        "cursor": {
          "ref": "9be44fbb-a662-4f6f-b326-ea99ee2c0e93",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "ed08a31a-2b8e-4f7a-93ab-6e3c325ddb36"
        },
        "item": {
          "id": "e629ad39-6abe-470b-abfc-cbea3649a4c2",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "2428c73c-604b-442b-8550-a882d69714aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59424eb1-c4e2-455c-bf0b-fd71d6ce9faf",
        "cursor": {
          "ref": "c284aed8-6535-48f1-831d-da4deae6534b",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "1930311c-56cf-4591-837b-f45b3487c93b"
        },
        "item": {
          "id": "59424eb1-c4e2-455c-bf0b-fd71d6ce9faf",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "5a7e5fdf-a46e-4aed-9c73-a43ca6386a87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c35e7687-d320-408b-a5f9-2671e4d2c6d7",
        "cursor": {
          "ref": "34f31575-abf3-463f-8287-2b0579742fd0",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "795c1675-f499-4637-9f4d-d2c915690947"
        },
        "item": {
          "id": "c35e7687-d320-408b-a5f9-2671e4d2c6d7",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "9c6e9a43-dd04-46e7-9b2d-1627e5c3f19c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05773fbf-e05d-4d00-820e-10a317426076",
        "cursor": {
          "ref": "d88dc8ff-49dc-4f0d-98f3-f53c3890afe6",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "498c4b63-c07d-43ea-abb6-8614b8e8ebb6"
        },
        "item": {
          "id": "05773fbf-e05d-4d00-820e-10a317426076",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "95abab47-4da0-427f-b312-321edf46406d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "136771b9-90bf-484e-b9aa-43288f5df68b",
        "cursor": {
          "ref": "f6b3eb27-64d3-4cd8-947e-89982e9db5e7",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c8e87255-98b8-4add-97f9-b89982c4e47a"
        },
        "item": {
          "id": "136771b9-90bf-484e-b9aa-43288f5df68b",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "72005e02-373d-4fb6-9d54-0882f72c5fc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4885c1fa-21a1-40b6-8956-1bdcf96fba62",
        "cursor": {
          "ref": "9cf536fb-ca94-43d4-82e2-6557c5baa79d",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9000e58c-24c4-4a02-a636-15e934ae7fd3"
        },
        "item": {
          "id": "4885c1fa-21a1-40b6-8956-1bdcf96fba62",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e3effb09-a5d3-41ae-b8c7-02a9511304c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c6e9201-3cd8-4591-9bb6-dcc044aee453",
        "cursor": {
          "ref": "82655f50-6060-4114-8ed8-470d13c999c7",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c1fd7d89-6370-4c74-b7d4-d65dcd897247"
        },
        "item": {
          "id": "6c6e9201-3cd8-4591-9bb6-dcc044aee453",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "43e471ff-8a1f-4564-b492-a03a927f42ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaebfb93-ef97-4ed2-ad58-e427ca2feee6",
        "cursor": {
          "ref": "ee9a96f0-81a0-4deb-b8ae-20ee26d43272",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "95f8bec1-b238-4420-b415-43a4289af60f"
        },
        "item": {
          "id": "aaebfb93-ef97-4ed2-ad58-e427ca2feee6",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "2ab85717-8d9e-4300-bd51-267b0b635a3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eef696c-1a7d-4780-93da-9e3129381a6a",
        "cursor": {
          "ref": "060ed03e-51f1-44be-b7ed-a8741ebcde42",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "61b60063-f02c-4c2c-91c1-948c4d7da09a"
        },
        "item": {
          "id": "0eef696c-1a7d-4780-93da-9e3129381a6a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "9c5db7fc-5073-4cc8-8d96-2ee44b0442d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a19e89b-9768-4665-abbf-4199891c1163",
        "cursor": {
          "ref": "cb5c1b03-1721-4390-8185-7bf4fd6b0e2f",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d342a542-84a1-4042-9187-8399299ef0e7"
        },
        "item": {
          "id": "2a19e89b-9768-4665-abbf-4199891c1163",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1cf86d5f-3276-474f-950a-653b759bf907",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63bcc683-59db-4acf-b446-3f0611e3fcc8",
        "cursor": {
          "ref": "28824d7c-a965-4863-9cf0-bc566450aca2",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "907187c0-ad0c-473e-9f51-4f129bb3ca31"
        },
        "item": {
          "id": "63bcc683-59db-4acf-b446-3f0611e3fcc8",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "1ef28371-1838-4ef7-9362-31283420ade6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9957936-b4a5-450d-a3e6-128601c3c38e",
        "cursor": {
          "ref": "6b555dda-8617-42d4-9760-185964ba2938",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "1259e7de-c5bf-467c-a9f2-ec05776ac704"
        },
        "item": {
          "id": "e9957936-b4a5-450d-a3e6-128601c3c38e",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "0077ae25-248e-484b-9505-6d02d98a579f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c20bfe7b-78af-4fb6-a887-a0b66eb86cee",
        "cursor": {
          "ref": "3124b058-3f18-4ff7-9f6f-9adde65fe671",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e466f5af-0198-4bf5-9928-cf8004edcd43"
        },
        "item": {
          "id": "c20bfe7b-78af-4fb6-a887-a0b66eb86cee",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b1d90de3-1107-471e-95c1-adc1667a95fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e57b8449-f212-468b-8d26-7acc06f03b05",
        "cursor": {
          "ref": "9a41eeca-1544-4083-9b1f-69516eb4742c",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "887cf733-17a0-41d5-9881-9ac52f2c9804"
        },
        "item": {
          "id": "e57b8449-f212-468b-8d26-7acc06f03b05",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "0811a9a5-9299-4e20-9069-2b0e0e4c235c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "130772e1-d5b0-45e8-bb76-ba132c63cb51",
        "cursor": {
          "ref": "53a8439b-d386-4765-ba5f-4d16d3b6fea8",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "9b540a9f-aa4b-4511-8c09-0c4597ffb90c"
        },
        "item": {
          "id": "130772e1-d5b0-45e8-bb76-ba132c63cb51",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "cde126f4-31c7-46ad-bd37-b20736ad5fd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b31163-c76d-4ff7-bfc1-654139ba64e7",
        "cursor": {
          "ref": "88cbb587-ae6a-4970-a1c8-fbd4cf9acc23",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "92b8c256-4061-4e84-a98b-2cb863e42541"
        },
        "item": {
          "id": "63b31163-c76d-4ff7-bfc1-654139ba64e7",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "9928b9fa-e204-48a8-9dde-06d21bbedd0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a9bbd9c-9e13-4de9-8a2e-44a01036f215",
        "cursor": {
          "ref": "2666d77b-ad4e-4ca2-a5ae-d9d3057e04dc",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "777a1850-d046-49b4-a0b0-d550b7055c81"
        },
        "item": {
          "id": "2a9bbd9c-9e13-4de9-8a2e-44a01036f215",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "803ae2a7-aba9-40c0-a4c0-408fc08509da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "821d9d80-05e7-42f5-9988-910a235c47df",
        "cursor": {
          "ref": "e7cb46ac-237a-42b9-a2f8-83d94588bcc7",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "cb64e002-4278-4bb8-8744-3a81bfc297e9"
        },
        "item": {
          "id": "821d9d80-05e7-42f5-9988-910a235c47df",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "24680015-b058-4556-9784-2f91ca571d58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "ea78d19c-55a4-46a2-9baf-aa469cfa71ae",
        "cursor": {
          "ref": "464241df-c3f2-4848-93ab-d37aedd7ef03",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d9405fe5-4073-4344-ab7e-63a71cb53c61"
        },
        "item": {
          "id": "ea78d19c-55a4-46a2-9baf-aa469cfa71ae",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "2d50ee45-9428-4738-b753-bcfba5f7a0bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "71600ddd-70eb-4b48-97de-70184dd29a1f",
        "cursor": {
          "ref": "c12213c2-571f-4fc2-947f-7d97abc53897",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "74dc6b74-2980-4bc8-b2ae-619701924278"
        },
        "item": {
          "id": "71600ddd-70eb-4b48-97de-70184dd29a1f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "43c09328-41be-44b2-bbd5-36d6966a2275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "6dfff33a-4f4d-4f02-bedb-628d6c5e3fa7",
        "cursor": {
          "ref": "b6d1d03f-dcfb-4f02-a054-c3bd3bec2d1d",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "12ee598c-ea86-4bcf-a76d-b259c27e89b2"
        },
        "item": {
          "id": "6dfff33a-4f4d-4f02-bedb-628d6c5e3fa7",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "9ec5e4b4-f73b-4042-971b-cedef50b0b76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "778250b7-470a-4e38-9c9e-d2a58f6a6b66",
        "cursor": {
          "ref": "800233bd-4207-4ef3-81ab-10d3b262d3b4",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "77514555-3a95-4e0f-8283-d3ec0a3ce834"
        },
        "item": {
          "id": "778250b7-470a-4e38-9c9e-d2a58f6a6b66",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "81213d72-dd4a-4559-9058-d754e1350f27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "d8cb1954-8740-44b8-aaf5-ec0efb118c00",
        "cursor": {
          "ref": "8c063a94-8aa6-4f56-ada6-f63124a1b4e4",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "f6d13d20-f0c6-487e-803c-40ecef41e31b"
        },
        "item": {
          "id": "d8cb1954-8740-44b8-aaf5-ec0efb118c00",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "0ef00f71-86ac-4c7a-ad30-66b802f0bd8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 776,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "c59fec71-f4ad-4a46-ba21-09a7ec31b2e0",
        "cursor": {
          "ref": "13e79b79-a39f-4464-b437-1fce8a22a4db",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "577b3bbf-3def-4a50-8a94-821ebbeb4e89"
        },
        "item": {
          "id": "c59fec71-f4ad-4a46-ba21-09a7ec31b2e0",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "7403aef3-e6e7-41e2-be2a-711ff557478b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "2db6d9a6-ebe4-4800-94b7-0e92e7813118",
        "cursor": {
          "ref": "f75aa58b-fccc-41be-8ec8-17e9dcbde361",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "44159d46-143f-4e08-b0ae-9a7167d02c0e"
        },
        "item": {
          "id": "2db6d9a6-ebe4-4800-94b7-0e92e7813118",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "c3e7f646-4ff8-4a65-bf39-8c2862824ffa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "3fe0c282-898d-4ecf-94e6-d39ead4ecdb9",
        "cursor": {
          "ref": "7b9e8307-0ca9-4e05-a630-65a75de5a5aa",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "f9751aa1-ba92-4d60-9fdf-13789080ef33"
        },
        "item": {
          "id": "3fe0c282-898d-4ecf-94e6-d39ead4ecdb9",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "7647e6a1-a8e9-4024-b92b-44dea3511b54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "5cde4f96-da0a-4774-b99a-b35a9675b951",
        "cursor": {
          "ref": "6b63597b-85c7-434e-a0a5-61336ab729a6",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "86d74768-869f-47c6-939a-4d5bdf68e50d"
        },
        "item": {
          "id": "5cde4f96-da0a-4774-b99a-b35a9675b951",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "b1ae373f-09d3-449c-86cf-b2faf7d1a136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "edb64536-ec3d-459a-be9d-15fa4cc0b590",
        "cursor": {
          "ref": "ebc6aa67-2441-4c9c-958c-e19212942753",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "586f343e-6e58-411d-bb0b-62af0cf23f01"
        },
        "item": {
          "id": "edb64536-ec3d-459a-be9d-15fa4cc0b590",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "a6d004a4-9d64-47f8-9394-31494c51a23f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31b922d4-3495-4bca-a4cd-b8c180180870",
        "cursor": {
          "ref": "d8586bb8-135e-41f1-a4a0-64d94876b62c",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "842d9e8a-0760-4b0f-98ac-1dbbc6294215"
        },
        "item": {
          "id": "31b922d4-3495-4bca-a4cd-b8c180180870",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "84999f09-f91a-403b-989f-5b9e5a487adb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "582a06cd-c63a-4519-90a0-7f38247a0e83",
        "cursor": {
          "ref": "7bf175da-43cc-45a9-a1a2-85a0a536645b",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "898a1fee-4991-4ce8-8bb7-46d5f756e945"
        },
        "item": {
          "id": "582a06cd-c63a-4519-90a0-7f38247a0e83",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "24671991-46f7-4380-9487-97462fc75687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af9c602e-7d4e-4d20-8479-e848908a2e5d",
        "cursor": {
          "ref": "7ef4023f-3d50-4be8-8eac-baeb550ddfca",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "895393d7-e65f-4f0b-a74b-99a7488a295a"
        },
        "item": {
          "id": "af9c602e-7d4e-4d20-8479-e848908a2e5d",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "01c27691-f950-404c-bab7-bb8789b06e40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e944c9de-9fb2-4e7f-9d89-985e15dbea8c",
        "cursor": {
          "ref": "faa18b3f-a7e5-4baa-8f10-32cc871c03de",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "23395720-ddb3-4241-8526-a630ed2857cb"
        },
        "item": {
          "id": "e944c9de-9fb2-4e7f-9d89-985e15dbea8c",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "cf83eacc-ce75-461d-ba6e-82c0d638429c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77ccbc32-a5e3-45e5-a2b2-8c997c2a429d",
        "cursor": {
          "ref": "ba1fb8f8-d6c9-48bf-9121-f5cc1611010d",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "89089cb3-bddb-420a-94f1-287696e5f53b"
        },
        "item": {
          "id": "77ccbc32-a5e3-45e5-a2b2-8c997c2a429d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e8d2ed02-62b1-459d-bf4f-3c72d8514f4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faaa4f31-8841-42ab-bb3f-daffefa028f5",
        "cursor": {
          "ref": "50f706a6-1882-4ffb-8d50-c60d2cd82b3f",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "23605b8e-0836-4c1f-8b80-aa3fae7d6c88"
        },
        "item": {
          "id": "faaa4f31-8841-42ab-bb3f-daffefa028f5",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "e3c1b5a7-70b3-4601-b186-ff79374113c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d1eb670-77b7-40b4-86a4-8a7f039999f0",
        "cursor": {
          "ref": "87045f03-99d5-41a6-90cc-8eedbc4ce8ea",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "6f0d490d-f8e7-48b2-9657-05a4871e232f"
        },
        "item": {
          "id": "3d1eb670-77b7-40b4-86a4-8a7f039999f0",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "4fead13e-dfef-4e8b-b5a6-dea71dcc079f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af1a9359-d9c8-4372-8bd9-5fc60c62b09c",
        "cursor": {
          "ref": "3f42261f-493d-458f-ab77-fd1bea1b0927",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "e5031155-014c-47dc-a908-0e7e498d1932"
        },
        "item": {
          "id": "af1a9359-d9c8-4372-8bd9-5fc60c62b09c",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ae19339f-2f23-425f-9039-dadce8289c07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44c01b36-ad97-465a-9a8d-7a942d9ff9e0",
        "cursor": {
          "ref": "56c27fec-fc80-49e2-95bd-ff9954699a46",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "1e416165-6c37-4f57-b065-7ed0f57c4327"
        },
        "item": {
          "id": "44c01b36-ad97-465a-9a8d-7a942d9ff9e0",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "0102da03-64bc-4050-801b-1d738191bf84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ec1dcd9-30c7-46eb-b2c9-f76c0aac5779",
        "cursor": {
          "ref": "aae39475-0b75-4ace-b59c-338e9da0a9a9",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "57dd5405-5127-4fc0-8b1e-53afeef2d221"
        },
        "item": {
          "id": "8ec1dcd9-30c7-46eb-b2c9-f76c0aac5779",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "157ac30d-9afc-450a-adf8-fc5e374d05db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba49eb4c-e549-46f0-a8c5-51f06283de32",
        "cursor": {
          "ref": "46ed1b33-a1be-40cf-adc1-c3795d1535fe",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "2f1b3ced-45b3-4efe-9b5a-1641f0833878"
        },
        "item": {
          "id": "ba49eb4c-e549-46f0-a8c5-51f06283de32",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "ef1f5eb7-c6a4-44aa-9e51-35173737d388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c748a507-da4f-4a1b-a4b1-d8acc64dee33",
        "cursor": {
          "ref": "4616a1cd-b089-4369-9661-b22ac4647cc4",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "2f635136-0535-4477-8440-9db27d4e4d58"
        },
        "item": {
          "id": "c748a507-da4f-4a1b-a4b1-d8acc64dee33",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "66f884ac-8f95-459d-b40c-91ed980e8381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff0b1d92-94dd-4fa9-a01b-390d05f4dd1d",
        "cursor": {
          "ref": "114784bb-d5ec-407e-95cd-38c3a0fab1ad",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "9e381a03-8318-4e20-8662-cbe2ff4a0219"
        },
        "item": {
          "id": "ff0b1d92-94dd-4fa9-a01b-390d05f4dd1d",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "32ab39bc-7bbb-4e87-be72-60aef7af8669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1121,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "03150e02-a9ea-48e9-a825-5d6c4d0ccacf",
        "cursor": {
          "ref": "2538676b-bc48-4506-8165-e3f6b0f3c8b3",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a1bdff41-2e3c-4b5c-843f-557946233309"
        },
        "item": {
          "id": "03150e02-a9ea-48e9-a825-5d6c4d0ccacf",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "d5822408-5f8d-47f6-b819-50ecd82c79ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 735,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "4cf4f7a9-8078-4b85-8934-f3a1c91ce50e",
        "cursor": {
          "ref": "5d45ba0e-c363-4aba-8cf9-fa20e9f38a4d",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d067c31e-07cd-4c28-874a-4fd3d28df7fa"
        },
        "item": {
          "id": "4cf4f7a9-8078-4b85-8934-f3a1c91ce50e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "e35d8246-4b32-433c-8cc9-129e0277e70d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "4ae746f9-2208-4652-bd35-61d946c388c1",
        "cursor": {
          "ref": "96e9fe5a-0f55-4d3e-9573-c30db6047353",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "dd5e8be5-d725-47af-9c24-f0e5b7014efc"
        },
        "item": {
          "id": "4ae746f9-2208-4652-bd35-61d946c388c1",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "9a411fe4-fa2b-4241-92c3-8b0be90bbe51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 782,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "69ed44c0-cec6-4323-89e2-0792a64c28fa",
        "cursor": {
          "ref": "d55f12bf-9b70-407a-a3eb-9489c0fb1361",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "de7ba8fd-4492-4323-bd99-c9971145a5b0"
        },
        "item": {
          "id": "69ed44c0-cec6-4323-89e2-0792a64c28fa",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3f6dcfa9-a344-41ce-aa36-31189a14f2ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "f8d9dd63-df87-4bc7-a059-8c06e2be4c8e",
        "cursor": {
          "ref": "e3c10202-629e-4ab9-ad1d-11e5560fef31",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "f8df9d9d-5796-484f-b49d-8a0e87f57123"
        },
        "item": {
          "id": "f8d9dd63-df87-4bc7-a059-8c06e2be4c8e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "b0dbc786-d0cd-456f-822f-054ff201bdfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec1d97d2-26af-4125-a598-1a3745dd7985",
        "cursor": {
          "ref": "18d8b20a-9627-44dc-8c9f-a89bed6ec296",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d2e2bd4a-af4f-44cd-a2ce-b869a472d456"
        },
        "item": {
          "id": "ec1d97d2-26af-4125-a598-1a3745dd7985",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "10cf2e57-466a-4c85-b1c7-b194a1b2e644",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbdb871f-0eae-4d51-a0d2-7d8ba594ddf2",
        "cursor": {
          "ref": "2bff14a5-41e7-4a98-82f7-f564fe066667",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "1b4fc0fe-720c-43a9-9ba9-da06e9e74ae1"
        },
        "item": {
          "id": "dbdb871f-0eae-4d51-a0d2-7d8ba594ddf2",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "fc704da2-9f41-42e2-9790-f725787bc532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6abdfac7-850b-4058-bd3c-344d570c916c",
        "cursor": {
          "ref": "0a14d79b-2b81-4656-bef5-f023761e2b04",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "9919161a-9569-43ec-9d1f-7d4ef0342ca5"
        },
        "item": {
          "id": "6abdfac7-850b-4058-bd3c-344d570c916c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "366bcad8-1267-46b8-9f22-2e2c04e1feda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b17e8f5-041c-4f8d-bc4d-1deaf34b211f",
        "cursor": {
          "ref": "05bd87bb-a00c-4e1b-8452-bf795f2ee97c",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "95955718-ca49-4593-80b4-ae01b5d49d52"
        },
        "item": {
          "id": "7b17e8f5-041c-4f8d-bc4d-1deaf34b211f",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "e7cf3f3e-6f85-4e15-bdb0-be7f47544afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89898b8e-9cd7-4b1c-977d-654baea6832b",
        "cursor": {
          "ref": "f960ed95-28f8-4678-838b-f81404a83c6c",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "fda46325-8f65-402f-96f1-07dba79a80ff"
        },
        "item": {
          "id": "89898b8e-9cd7-4b1c-977d-654baea6832b",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "3aef0353-de50-4e3f-91e6-bb7c592258f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e5e8a74-38a5-42a8-bd1c-1e94fce79cb9",
        "cursor": {
          "ref": "44fa38e6-5419-4751-ba3c-4f7391a50245",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "054fc5c5-a105-4e7e-aa8b-c68d7dee6bb0"
        },
        "item": {
          "id": "2e5e8a74-38a5-42a8-bd1c-1e94fce79cb9",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "e0cab849-2fe3-4cae-8606-640d4b6ee0ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2316249-f36e-44fe-97df-2ffa654f3624",
        "cursor": {
          "ref": "50b45bd0-7e8a-407d-bbbb-2f2864f45764",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "de2ad119-3622-4279-82d5-a642329554b9"
        },
        "item": {
          "id": "b2316249-f36e-44fe-97df-2ffa654f3624",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "dbda7f99-92fd-4ac7-bd6d-a0006eb0153a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ea0c522-fb4e-4a69-9175-41527f1e823d",
        "cursor": {
          "ref": "e0373052-91fb-4584-af7c-78ed8188d401",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8534761c-843d-46ae-a234-39a6bc13e45d"
        },
        "item": {
          "id": "6ea0c522-fb4e-4a69-9175-41527f1e823d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "d9d120d1-b8a9-413b-b7b5-a5e9077f5e16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "086e0dc3-7236-4c0d-96f8-2fa5a126625f",
        "cursor": {
          "ref": "2e97a93a-4d89-45b3-a359-d7fedf60f36f",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "220ca4de-27a1-499e-8c76-65fbef657ad4"
        },
        "item": {
          "id": "086e0dc3-7236-4c0d-96f8-2fa5a126625f",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d9cb8878-7660-43f6-96b1-a1dc2f99b873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c44c8f33-0bf2-49fc-abde-4718c6e09909",
        "cursor": {
          "ref": "2fcf9337-e590-4519-b106-8bf349d1f791",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "26f179f2-3bd6-4cf6-9d90-2e43c64072ff"
        },
        "item": {
          "id": "c44c8f33-0bf2-49fc-abde-4718c6e09909",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "5cf65936-08bb-4040-83e4-46f19a8f2cf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e156255-91af-4087-9d2e-961bb5ab49ad",
        "cursor": {
          "ref": "409b1e83-fb02-4383-96ea-dac77e3d3cdc",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "7203578e-cf80-4c62-82fc-7308fac956aa"
        },
        "item": {
          "id": "8e156255-91af-4087-9d2e-961bb5ab49ad",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "6f90f8c2-92cf-42de-ad39-d933bc362c56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b57cf71-0d6f-4356-8e96-e6ed4b016286",
        "cursor": {
          "ref": "44d12566-1396-492e-8f0f-13110f63abe8",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "b5f7535d-5f12-4e34-b8a4-dcb2fd63c781"
        },
        "item": {
          "id": "1b57cf71-0d6f-4356-8e96-e6ed4b016286",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "f1e62325-6245-471c-8343-460d609d0dab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "390bec4e-51dd-4e32-bd95-a7891a4f8108",
        "cursor": {
          "ref": "b9fc5f83-e685-4ea0-87a4-972c940b3670",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "73621633-74ac-4f3f-be73-cbac3113edd9"
        },
        "item": {
          "id": "390bec4e-51dd-4e32-bd95-a7891a4f8108",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "eca14234-4256-4824-ae2d-1fae860e5d17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c65ba7c2-d528-478d-b168-2d4258843904",
        "cursor": {
          "ref": "fae0f10d-4c1a-40f4-8f94-fcd0bab0918c",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "04f732ed-ab39-433a-9117-c256c808093b"
        },
        "item": {
          "id": "c65ba7c2-d528-478d-b168-2d4258843904",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "2e80658c-210a-4e69-8110-828934f1412d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f54a016-bcb5-4f86-9036-be90c3ce0fe0",
        "cursor": {
          "ref": "551869cf-3940-4f85-848f-b97cf08ed408",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "e352c2bf-0948-446e-8d6e-5393b7a4c084"
        },
        "item": {
          "id": "8f54a016-bcb5-4f86-9036-be90c3ce0fe0",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "5f59ed1c-8714-4a41-a661-c3c718642031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c484f7d3-e62c-48e1-8882-ba7196f8ee43",
        "cursor": {
          "ref": "41abe866-e261-4136-b62e-f8fc4f89f93c",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "ad375263-a85c-42e9-8554-5c60f666844d"
        },
        "item": {
          "id": "c484f7d3-e62c-48e1-8882-ba7196f8ee43",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "091669b0-0ac9-4d35-ad3c-5b01771feff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c7ca681-05a3-4a7b-8358-d6bdf068a80a",
        "cursor": {
          "ref": "f58b20ed-3038-44f9-ba20-7a451b0cc847",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "6a0d20ff-bea0-4bb9-9d7f-54417f0ab772"
        },
        "item": {
          "id": "3c7ca681-05a3-4a7b-8358-d6bdf068a80a",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "61fd3019-253b-46b1-879d-ff9d48da2b50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd1766e6-e280-460c-96af-43fcc3af3fbd",
        "cursor": {
          "ref": "1bb5b3ba-8b3c-4402-952d-db162f191e85",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "747d0a24-b84d-4672-aae1-05615cabf4e3"
        },
        "item": {
          "id": "dd1766e6-e280-460c-96af-43fcc3af3fbd",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "33daf897-cfac-4b68-8734-000512892a2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd5da692-f4dc-4efe-a55a-0f5cd87c77c0",
        "cursor": {
          "ref": "3f2443f8-fc5d-4fa4-9fe9-b7ea0d0dea33",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "1a3a5329-508d-45f7-b0bf-57fba284035d"
        },
        "item": {
          "id": "bd5da692-f4dc-4efe-a55a-0f5cd87c77c0",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "6f8a2929-de93-47a7-a23f-b82fabc9c3a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba11a9dd-aa45-4aed-acae-25eb48ac37b3",
        "cursor": {
          "ref": "4a0ad2d3-938a-4eae-b05a-dbca4f16c565",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "8a393ab7-44e3-4241-bdb8-77f2f128880c"
        },
        "item": {
          "id": "ba11a9dd-aa45-4aed-acae-25eb48ac37b3",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "27454a41-881a-44f0-a6e0-96e184019753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbe7482a-7d5c-44a2-873c-2f39f279bad5",
        "cursor": {
          "ref": "a4a534b6-6955-47a2-aca9-8b222665283a",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "e9ba6d95-907c-4398-be76-0098373a4d35"
        },
        "item": {
          "id": "cbe7482a-7d5c-44a2-873c-2f39f279bad5",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "4276daf6-cd65-4a09-a9fd-ad3dafee93dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f85cac4-5216-4b94-83ff-5c501ce28b36",
        "cursor": {
          "ref": "27db1f11-74f7-4bbf-8480-b5dbc3c37622",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "ab385246-819f-4008-9747-859e432de9a2"
        },
        "item": {
          "id": "0f85cac4-5216-4b94-83ff-5c501ce28b36",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "0dfe34ee-004a-4bf8-a87a-83a6c1b0dc09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29c897d8-f20b-4ffb-a586-d112a669b87c",
        "cursor": {
          "ref": "427d31e5-3042-4dec-8bfe-0a64864be04f",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "73c0508e-890f-4a4b-9952-5ba58e6e76bd"
        },
        "item": {
          "id": "29c897d8-f20b-4ffb-a586-d112a669b87c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "231de7ff-2bbc-4d83-87f9-0dff77384750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6e1a14d-9ba5-427e-9fa3-54c33840f67f",
        "cursor": {
          "ref": "4f953295-f7e0-4add-846b-9fc8b61a2778",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "d8ffb31e-3479-4593-8649-63403d365708"
        },
        "item": {
          "id": "b6e1a14d-9ba5-427e-9fa3-54c33840f67f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "119a4e14-2563-4bc4-af15-30a0fa8cb431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bcfb653-3e2c-4441-9fdf-96ecfb7d12a7",
        "cursor": {
          "ref": "7c93460f-b529-47f2-a808-05847bdfc5c1",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "81625b62-8012-439c-922a-e2e981c955cd"
        },
        "item": {
          "id": "8bcfb653-3e2c-4441-9fdf-96ecfb7d12a7",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "d534ef7f-bee1-4fc0-8a90-012ec561a6a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "878b618d-bb8d-44f8-b255-b872c7377246",
        "cursor": {
          "ref": "4397731a-2aff-4d5c-b8f1-005a51072106",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "3045d7d9-9685-403a-8a5d-d6d93997c9ca"
        },
        "item": {
          "id": "878b618d-bb8d-44f8-b255-b872c7377246",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "03f793e6-5ae3-4980-b8f7-1c4322934b6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f67ee6-c580-40dd-9fd4-58cbe264e08a",
        "cursor": {
          "ref": "11b6e4ab-b84b-4bda-8253-b886cdaa6b9e",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "fa095986-037a-4785-b32c-e5440e738035"
        },
        "item": {
          "id": "c3f67ee6-c580-40dd-9fd4-58cbe264e08a",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "d317fd95-2871-497f-9adc-0ddb95641b7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ac5933c-3a58-4723-b182-1a08e3f402a7",
        "cursor": {
          "ref": "5da8672e-cc78-470f-ad0b-e41901bc61f0",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "25b0fac7-c2ea-4ea2-90e2-038c39937689"
        },
        "item": {
          "id": "6ac5933c-3a58-4723-b182-1a08e3f402a7",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d393b751-eb6d-4913-b854-b1918df45fda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73135fd7-7646-47d6-91d4-6a75e670e1f9",
        "cursor": {
          "ref": "34957425-7309-4cb9-a7a0-75b9f173e0d7",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "beedbccf-f91c-4633-a8f2-bf527c46439f"
        },
        "item": {
          "id": "73135fd7-7646-47d6-91d4-6a75e670e1f9",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "89530d4f-6446-4ec9-94a1-1ec41b2554f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb37a868-fd9a-428d-82a0-3a8fd8f8e06a",
        "cursor": {
          "ref": "2226e248-7652-407f-95ed-91c73f256fc3",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "edd0cc1a-4383-4696-a41e-efdfa99ec2ef"
        },
        "item": {
          "id": "bb37a868-fd9a-428d-82a0-3a8fd8f8e06a",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "00b21379-8289-4064-8dfb-77f72569d7de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b69b04d5-4ece-4354-8e38-913f1e1ce0f0",
        "cursor": {
          "ref": "ce80210e-0daa-481a-a416-1378bef25a79",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "a0fc54a2-9af6-4bfa-8cda-5f6e800ab3b7"
        },
        "item": {
          "id": "b69b04d5-4ece-4354-8e38-913f1e1ce0f0",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "66249b7a-7555-4108-8bc8-daa2a468b3fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e7432db-bd95-4c67-93cd-1ce21e6bbfcf",
        "cursor": {
          "ref": "bd52b007-66dc-4d37-9ff3-ab5a29ad5da3",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "feda317a-2676-4662-a4b4-7dd7bfd17fd1"
        },
        "item": {
          "id": "2e7432db-bd95-4c67-93cd-1ce21e6bbfcf",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "4b2ae1d4-0392-4a0e-b3cc-3c17cc8256e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b4ad5aa-2f03-44b6-9253-21dd441887f3",
        "cursor": {
          "ref": "93d4fd0f-255d-4adb-b7b4-fc3334a112c3",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "f54bf8b5-cf3b-419f-b866-f79abc0dc236"
        },
        "item": {
          "id": "0b4ad5aa-2f03-44b6-9253-21dd441887f3",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "8fab4b41-c33a-4631-823c-796acdf9165f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecad92f5-4e54-4654-a90c-f4cb6c1aff4f",
        "cursor": {
          "ref": "4996f960-4212-4ba4-b6e2-2977d2b5e6e5",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "1c8ac92d-c589-4ba8-ae0a-bd104796b3dc"
        },
        "item": {
          "id": "ecad92f5-4e54-4654-a90c-f4cb6c1aff4f",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "855e7543-1c0a-4d4f-b680-727ba8ac3c8a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14b53103-b8f4-4d84-8f45-8559cfe1cf34",
        "cursor": {
          "ref": "48c3d320-b4d3-493f-8a66-55d97b5d1c57",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "35cbf353-bc0e-4e29-b977-2a32affdfcf2"
        },
        "item": {
          "id": "14b53103-b8f4-4d84-8f45-8559cfe1cf34",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "6f583182-078f-4f76-8353-6e891749af86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f71f2d5-a499-4069-830c-041fb3eea650",
        "cursor": {
          "ref": "6f74c4e1-8e08-4939-843e-e33b92725b55",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "3f658d69-361b-455a-b5ba-5ededaa4c51b"
        },
        "item": {
          "id": "0f71f2d5-a499-4069-830c-041fb3eea650",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a3cc3583-c4bd-4d53-b97d-cce22b582b92",
          "status": "OK",
          "code": 200,
          "responseTime": 686,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5e3ae68-dc94-4cfa-a514-4fcae1900faa",
        "cursor": {
          "ref": "593dcfae-6b55-47b5-9b2b-2f6418ba386e",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "226a4a90-cc36-4d7d-84fe-33307a88647d"
        },
        "item": {
          "id": "b5e3ae68-dc94-4cfa-a514-4fcae1900faa",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "e2b6dfd7-6474-4bfb-ac58-fd16d7d54bb0",
          "status": "OK",
          "code": 200,
          "responseTime": 750,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbd001c8-52b3-4777-a565-3f98106d6b54",
        "cursor": {
          "ref": "4a68ecb9-da20-404b-80b2-45a964c6c32f",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "0305f755-8565-49b3-bc78-503793786708"
        },
        "item": {
          "id": "dbd001c8-52b3-4777-a565-3f98106d6b54",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "51b9a1a3-cc87-4f64-8212-89450e3acbe9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbd001c8-52b3-4777-a565-3f98106d6b54",
        "cursor": {
          "ref": "4a68ecb9-da20-404b-80b2-45a964c6c32f",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "0305f755-8565-49b3-bc78-503793786708"
        },
        "item": {
          "id": "dbd001c8-52b3-4777-a565-3f98106d6b54",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "51b9a1a3-cc87-4f64-8212-89450e3acbe9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a92e7a-8b72-4eba-8a13-18eebff18e8c",
        "cursor": {
          "ref": "a56f864f-b8bc-41ca-a733-64abf2a76ccf",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "69216f5f-4de3-42b4-b9a7-91f21ec5d6d5"
        },
        "item": {
          "id": "f7a92e7a-8b72-4eba-8a13-18eebff18e8c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "bf69e896-7baf-4e5d-8399-14a7e48b461f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4799ebb7-d004-4d0e-a473-90242fc18992",
        "cursor": {
          "ref": "00be9f59-c98a-4517-8974-a6d3a7199d32",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "765a55c5-e309-4f75-bc25-811d2b898bd0"
        },
        "item": {
          "id": "4799ebb7-d004-4d0e-a473-90242fc18992",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "bc7e0f76-c644-4d38-915f-c6a2715ac77a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}